###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  18:23:45
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\wifi_module.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\wifi_module.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\..\Middlewares\GUI\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\wifi_module.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\wifi_module.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\wifi_module.cpp
      1          #include "stdint.h"
      2          #include "string.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp char *strstr(char *, char const *)
   \                     _Z6strstrPcPKc: (+1)
   \   00000000   0x.... 0x....      B.W      __iar_Strstr
      3          //#include "stm32f40x_gpio.h"
      4          #include "stm32f10x_gpio.h"

  #define IS_GPIO_SPEED(SPEED) (((SPEED) == GPIO_Speed_10MHz) || ((SPEED) == GPIO_Speed_2MHz) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_gpio.h",64  Warning[Pe047]: 
          incompatible redefinition of macro "IS_GPIO_SPEED" (declared at line
          201 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h")

  #define IS_GPIO_MODE(MODE) (((MODE) == GPIO_Mode_AIN) || ((MODE) == GPIO_Mode_IN_FLOATING) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_gpio.h",82  Warning[Pe047]: 
          incompatible redefinition of macro "IS_GPIO_MODE" (declared at line
          204 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h")

  #define IS_GPIO_PIN(PIN) ((((PIN) & (uint16_t)0x00) == 0x00) && ((PIN) != (uint16_t)0x00))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_gpio.h",145  Warning[Pe047]: 
          incompatible redefinition of macro "IS_GPIO_PIN" (declared at line
          196 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h")
      5          
      6          //#include "SZ_STM32F107VC_LIB.h"
      7          //#include "mks_tft_com.h"
      8          //#include "Printer.h"
      9          #include "draw_ui.h"

  #define UNUSED(x) (void) (x)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\macros.h",101  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 87 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Inc\mks_cfg.h",609  Warning[Pe083]: 
          type qualifier specified more than once

    #define FILAMENT_CHANGE_TEXT_EN				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_en.h",135  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_EN"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_CN            "Ëß£Èô§ÁªëÂÆö?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_s_cn.h",218  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_CN"
          (declared at line 213)

    #define FILAMENT_CHANGE_TEXT_T_CN				"ÂæÖÊâìÂç∞Ê©üÊö´ÂÅúÂêé,\nË´ãÊåâ<ÈÄ≤Êñô>Êàñ<ÈÄÄÊñô>"
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_t_cn.h",127  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_T_CN"
          (declared at line 113)

    #define FILAMENT_CHANGE_TEXT_RU				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_ru.h",133  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_RU"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_RU            "Unbind the printer?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_ru.h",230  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_RU"
          (declared at line 225)

    #define FILAMENT_CHANGE_TEXT_FR				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_fr.h",133  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_FR"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_FR        "Unbind the printer?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_fr.h",233  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_FR"
          (declared at line 229)

    #define FILAMENT_CHANGE_TEXT_SP				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_sp.h",132  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_SP"
          (declared at line 113)

    #define FILAMENT_CHANGE_TEXT_IT				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_it.h",133  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_IT"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_IT                "Unbind the printer?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_it.h",229  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_IT"
          (declared at line 224)

  #define FILAMENT_CHANGE_TEXT_JP				"Please click <Load> \nor <unload>,After \npinter pause."
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Multi_language.h",652  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_JP"
          (declared at line 645)

  #define FILAMENT_CHANGE_TEXT_GN				"Please click <Load> \nor <unload>,After \npinter pause."
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Multi_language.h",860  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_GN"
          (declared at line 854)

  #define Simple_Dec"ºı…Ÿ"
                    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\draw_ui.h",492  Warning[Pe1649]: 
          white space is required between the macro name "Simple_Dec" and its
          replacement text

  #define Simple_Speed "ÀŸ∂»"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\draw_ui.h",547  Warning[Pe047]: 
          incompatible redefinition of macro "Simple_Speed" (declared at line
          544)

  #define Complex_Speed "ÀŸ∂»"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\draw_ui.h",548  Warning[Pe047]: 
          incompatible redefinition of macro "Complex_Speed" (declared at line
          545)
     10          //#include "usb_core.h"
     11          #include "wifi_module.h"
     12          //#include "sd_usr.h"
     13          //#include "Gcode.h"
     14          #include "wifi_upload.h"
     15          #include "usart.h"
     16          #include "stm32f10x_usart.h"
     17          #include "draw_printing.h"
     18          #include "draw_pause_ui.h"
     19          #include "draw_ready_print.h"
     20          #include "draw_dialog.h"
     21          #include "draw_FileTransfer_ui.h"
     22          #include "misc.h"

  #define IS_NVIC_PRIORITY_GROUP(GROUP) (((GROUP) == NVIC_PriorityGroup_0) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\misc.h",152  Warning[Pe047]: 
          incompatible redefinition of macro "IS_NVIC_PRIORITY_GROUP"
          (declared at line 277 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h")

  #define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SysTick_CLKSource_HCLK) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\misc.h",174  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SYSTICK_CLK_SOURCE" (declared
          at line 296 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h")
     23          #include "stm32f10x_rcc.h"

  #define RCC_HSE_ON                       ((uint32_t)0x00010000)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",68  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_HSE_ON" (declared at line
          305 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define IS_RCC_HSE(HSE) (((HSE) == RCC_HSE_OFF) || ((HSE) == RCC_HSE_ON) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",70  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_HSE" (declared at line
          188 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

   #define IS_RCC_PLL_MUL(MUL) (((MUL) == RCC_PLLMul_2) || ((MUL) == RCC_PLLMul_3)   || \
           ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",118  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_PLL_MUL" (declared at
          line 119 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc_ex.h")

  #define IS_RCC_HCLK(HCLK) (((HCLK) == RCC_SYSCLK_Div1) || ((HCLK) == RCC_SYSCLK_Div2) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",312  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_HCLK" (declared at line
          208 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define IS_RCC_PCLK(PCLK) (((PCLK) == RCC_HCLK_Div1) || ((PCLK) == RCC_HCLK_Div2) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",330  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_PCLK" (declared at line
          213 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_IT_LSIRDY                    ((uint8_t)0x01)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",341  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_IT_LSIRDY" (declared at line
          453 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_IT_LSERDY                    ((uint8_t)0x02)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",342  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_IT_LSERDY" (declared at line
          454 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_IT_HSIRDY                    ((uint8_t)0x04)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",343  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_IT_HSIRDY" (declared at line
          455 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_IT_HSERDY                    ((uint8_t)0x08)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",344  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_IT_HSERDY" (declared at line
          456 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_IT_PLLRDY                    ((uint8_t)0x10)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",345  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_IT_PLLRDY" (declared at line
          457 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_IT_CSS                       ((uint8_t)0x80)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",346  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_IT_CSS" (declared at line
          458 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_LSE_OFF                      ((uint8_t)0x00)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",443  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_LSE_OFF" (declared at line
          314 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_LSE_ON                       ((uint8_t)0x01)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",444  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_LSE_ON" (declared at line
          315 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define IS_RCC_LSE(LSE) (((LSE) == RCC_LSE_OFF) || ((LSE) == RCC_LSE_ON) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",446  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_LSE" (declared at line
          190 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define IS_RCC_RTCCLK_SOURCE(SOURCE) (((SOURCE) == RCC_RTCCLKSource_LSE) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",459  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_RTCCLK_SOURCE" (declared
          at line 2633 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy/stm32_hal_legacy.h")

   #define IS_RCC_MCO(MCO) (((MCO) == RCC_MCO_NoClock) || ((MCO) == RCC_MCO_HSI) || \
           ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",571  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_MCO" (declared at line
          216 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_HSIRDY                  ((uint8_t)0x21)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",595  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_HSIRDY" (declared at
          line 473 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_HSERDY                  ((uint8_t)0x31)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",596  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_HSERDY" (declared at
          line 474 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_PLLRDY                  ((uint8_t)0x39)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",597  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_PLLRDY" (declared at
          line 475 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_LSERDY                  ((uint8_t)0x41)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",598  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_LSERDY" (declared at
          line 487 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_LSIRDY                  ((uint8_t)0x61)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",599  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_LSIRDY" (declared at
          line 478 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_PINRST                  ((uint8_t)0x7A)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",600  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_PINRST" (declared at
          line 479 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_PORRST                  ((uint8_t)0x7B)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",601  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_PORRST" (declared at
          line 480 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_SFTRST                  ((uint8_t)0x7C)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",602  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_SFTRST" (declared at
          line 481 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_IWDGRST                 ((uint8_t)0x7D)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",603  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_IWDGRST" (declared at
          line 482 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_WWDGRST                 ((uint8_t)0x7E)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",604  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_WWDGRST" (declared at
          line 483 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define RCC_FLAG_LPWRRST                 ((uint8_t)0x7F)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",605  Warning[Pe047]: 
          incompatible redefinition of macro "RCC_FLAG_LPWRRST" (declared at
          line 484 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")

  #define IS_RCC_CALIBRATION_VALUE(VALUE) ((VALUE) <= 0x1F)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_rcc.h",626  Warning[Pe047]: 
          incompatible redefinition of macro "IS_RCC_CALIBRATION_VALUE"
          (declared at line 193 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h")
     24          #include "ff_gen_drv.h"
     25          #include "sd_diskio.h"
     26          #include "fatfs.h"
     27          //#include "fs_usr.h"
     28          #include "stm32f1xx_hal_dma.h"
     29          #include "tim.h"
     30          #include "fastio_robin2.h"
     31          
     32          #include "marlin.h"

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\marlin.h",538  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     33          #include "cardreader.h"

  #define SD_DETECT_INVERTED false
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",27  Warning[Pe047]: 
          incompatible redefinition of macro "SD_DETECT_INVERTED" (declared at
          line 524 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Configuration_adv.h")

  #define PSTR(s) s
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",31  Warning[Pe047]: 
          incompatible redefinition of macro "PSTR" (declared at line 63 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\EWARM/../Middlewares/Third_Party/Marlin\marlin.h")

  #define pgm_read_byte(x) (*(char*)x)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",32  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_byte" (declared at line
          64 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

      static constexpr int8_t next_block_index(const int8_t block_index) { return BLOCK_MOD(block_index + 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\planner.h",627  Warning[Pe815]: 
          type qualifier on return type is meaningless

      static constexpr int8_t prev_block_index(const int8_t block_index) { return BLOCK_MOD(block_index - 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\planner.h",628  Warning[Pe815]: 
          type qualifier on return type is meaningless

        target_temperature[HOTEND_INDEX] = celsius;
                                         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\temperature.h",406  Warning[Pa093]: 
          implicit conversion from floating point to integer

          target_temperature_bed =
                                 ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\temperature.h",414  Warning[Pa093]: 
          implicit conversion from floating point to integer

  #define LONG_FILENAME_LENGTH (13*MAX_VFAT_ENTRIES+1)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",61  Warning[Pe047]: 
          incompatible redefinition of macro "LONG_FILENAME_LENGTH" (declared
          at line 119 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")

  #define ALLOW_DEPRECATED_FUNCTIONS 0
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\SdFat.h",635  Warning[Pe047]: 
          incompatible redefinition of macro "ALLOW_DEPRECATED_FUNCTIONS"
          (declared at line 67 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")

  #define SPI_SD_INIT_RATE 11
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\SdFat.h",647  Warning[Pe047]: 
          incompatible redefinition of macro "SPI_SD_INIT_RATE" (declared at
          line 79 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")
     34          #include "mks_reprint.h"
     35          
     36          extern CardReader card;
     37          
     38          extern uint8_t from_flash_pic;
     39          //extern char dma1_5_IRQ_sel;
     40          extern DMA_HandleTypeDef hdma_spi2_tx;
     41          
     42          extern "C" void exchangeFlashMode(char dmaMode);
     43          
     44          //extern FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
     45          extern uint8_t Explore_Disk (char* path , uint8_t recu_level);
     46          
     47          //extern "C" void DMA1_Stream5_IRQHandler(void);
     48          extern uint8_t commands_in_queue;
     49          
     50          
     51          int usartFifoAvailable(SZ_USART_FIFO *fifo);
     52          int readUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len);
     53          int writeUsartFifo(SZ_USART_FIFO * fifo, int8_t * buf, int32_t len);
     54          
     55          extern DMA_HandleTypeDef hdma_usart1_rx;
     56          

   \                                 In section .bss, align 4
     57          volatile SZ_USART_FIFO  WifiRxFifo;
   \                     WifiRxFifo:
   \   00000000                      DS8 1032
     58          
     59          #define WAIT_ESP_TRANS_TIMEOUT_TICK	10500
     60          

   \                                 In section .bss, align 4
     61          int cfg_wifi_flag = 0;
     62          int cfg_cloud_flag = 0;
     63          
     64          extern PRINT_TIME print_time;
     65          extern FIL *srcfp;
     66          
     67          char wifi_firm_ver[20] = {0};
     68          WIFI_GCODE_BUFFER espGcodeFifo; 
     69          extern uint8_t serial_wait_tick;
     70          extern uint8_t pause_resum;
     71          
     72          uint8_t wifi_connect_flg = 0;
     73          extern volatile uint8_t get_temp_flag;
     74          
     75          
     76          #define WIFI_MODE	2	//WIFI MODE
     77          #define WIFI_AP_MODE	3//AP??
     78          
     79          int upload_result = 0; //0:¥´ ‰Œ¥∆Ù∂Ø£ª1:¥´ ‰Ω¯––÷–£ª2:¥´ ‰“Ï≥££¨÷–÷π£ª3:¥´ ‰ÕÍ≥…°£
     80          
     81          uint32_t upload_time = 0; //¥´ ‰ ±º‰
     82          uint32_t upload_size = 0; //¥´ ‰¥Û–°
     83          
     84          volatile WIFI_STATE wifi_link_state;
     85          WIFI_PARA wifiPara;
     86          IP_PARA ipPara;
     87          CLOUD_PARA cloud_para;
   \                     cloud_para:
   \   00000000                      DS8 128
   \                     cfg_wifi_flag:
   \   00000080                      DS8 4
   \                     cfg_cloud_flag:
   \   00000084                      DS8 4
   \                     wifi_firm_ver:
   \   00000088                      DS8 20
   \                     ipPara:
   \   0000009C                      DS8 164
     88          
     89          char wifi_loop_time = 0;
     90          char wifi_check_time = 0;
     91          
     92          extern uint8_t gCurDir[100];
     93          
     94          extern uint32_t wifi_loop_cycle;
     95          
     96          volatile TRANSFER_STATE esp_state;
     97          
     98          uint8_t left_to_send = 0;
     99          uint8_t left_to_save[96] = {0};
    100          
    101          volatile WIFI_DMA_RCV_FIFO wifiDmaRcvFifo;
    102          
    103          volatile WIFI_TRANS_ERROR wifiTransError;
    104          
    105          
    106          #ifdef ESP_MODEL
    107          volatile ESP_SEND_STATE espSendState = ESP_SEND_IDLE;
    108          #endif
    109          
    110          
    111          
    112          
    113          
    114          
    115          extern volatile WIFI_STATE wifi_link_state;
    116          extern WIFI_PARA wifiPara;
    117          extern IP_PARA ipPara;
    118          extern CLOUD_PARA cloud_para;
    119          
    120          //extern USB_OTG_CORE_HANDLE          USB_OTG_Core;
    121          //extern USBH_HOST                     USB_Host;
    122          
    123          
    124          //extern void DMA1_Channel5_IRQHandler(void);
    125          extern volatile uint32_t TimeIncrease;
    126          
    127          extern "C" void MX_SDIO_SD_Init(void);
    128          extern FATFS fs;
    129          

   \                                 In section .text, align 2, keep-with-next
    130          void mount_file_sys(uint8_t disk_type)
    131          {
    132          	if(disk_type == FILE_SYS_SD)
   \                     _Z14mount_file_sysh: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xD106             BNE.N    ??mount_file_sys_0
    133          	{
    134          		//f_mount(1, &fs);
    135          		f_mount(&fs, (TCHAR const*)SD_Path, 0);
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable55_3
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable55_4
   \   0000000E   0x.... 0x....      B.W      f_mount
    136          	}
    137          	else if(disk_type == FILE_SYS_USB)
    138          	{
    139          #if unused
    140          		//f_mount(0, &fs);
    141          		f_mount(&fs, (TCHAR const*)USBH_Path, 0);
    142          #endif
    143          	}
    144          }
   \                     ??mount_file_sys_0: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    145          
    146          

   \                                 In section .text, align 2, keep-with-next
    147          uint32_t   getWifiTick()
    148          {
    149          	return TimeIncrease;
   \                     _Z11getWifiTickv: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    150          }
    151          

   \                                 In section .text, align 2, keep-with-next
    152          uint32_t  getWifiTickDiff(int32_t lastTick, int32_t  curTick)
    153          {
    154          	if(lastTick <= curTick)
   \                     _Z15getWifiTickDiffii: (+1)
   \   00000000   0x4281             CMP      R1,R0
   \   00000002   0xDB01             BLT.N    ??getWifiTickDiff_0
    155          	{
    156          		return (curTick - lastTick) * TICK_CYCLE;
   \   00000004   0x1A08             SUBS     R0,R1,R0
   \   00000006   0x4770             BX       LR
    157          	}
    158          	else
    159          	{
    160          		return (0xffffffff - lastTick + curTick) * TICK_CYCLE;
   \                     ??getWifiTickDiff_0: (+1)
   \   00000008   0xF04F 0x32FF      MOV      R2,#-1
   \   0000000C   0x1A10             SUBS     R0,R2,R0
   \   0000000E   0x1808             ADDS     R0,R1,R0
   \   00000010   0x4770             BX       LR               ;; return
    161          	}
    162          }
    163          
    164          

   \                                 In section .text, align 2, keep-with-next
    165          void wifi_delay(int n)
    166          {
   \                     _Z10wifi_delayi: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    167          	int i, j;
                 	    ^
Warning[Pe177]: variable "i" was declared but never referenced

  	int i, j;
  	       ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\wifi_module.cpp",167  Warning[Pe177]: 
          variable "j" was declared but never referenced
    168          
    169          	uint32_t begin = getWifiTick();
   \   00000004   0x.... 0x....      BL       _Z11getWifiTickv
   \   00000008   0x4605             MOV      R5,R0
    170          	uint32_t end = begin;
   \   0000000A   0xE001             B.N      ??wifi_delay_0
    171          
    172          	while(getWifiTickDiff(begin, end) < n)
    173          	{
    174          		end = getWifiTick();
   \                     ??wifi_delay_1: (+1)
   \   0000000C   0x.... 0x....      BL       _Z11getWifiTickv
    175          	}
   \                     ??wifi_delay_0: (+1)
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       _Z15getWifiTickDiffii
   \   00000018   0x42A0             CMP      R0,R4
   \   0000001A   0xD3F7             BCC.N    ??wifi_delay_1
    176          }
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void wifi_reset()
    179          {
   \                     _Z10wifi_resetv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    180          	uint32_t start, now;
    181          	start = getWifiTick();
   \   00000002   0x.... 0x....      BL       _Z11getWifiTickv
   \   00000006   0x4604             MOV      R4,R0
    182          	now = start;
   \   00000008   0x4625             MOV      R5,R4
    183          	//GPIO_ResetBits(GPIOG, GPIO_Pin_1);
    184                  WIFI_RESET();
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable55_6  ;; 0x40010800
   \   0000000E   0x2120             MOVS     R1,#+32
   \   00000010   0x4630             MOV      R0,R6
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
   \   00000016   0xE002             B.N      ??wifi_reset_0
    185          	while(getWifiTickDiff(start, now) < 500)
    186          	{
    187          		now = getWifiTick();
   \                     ??wifi_reset_1: (+1)
   \   00000018   0x.... 0x....      BL       _Z11getWifiTickv
   \   0000001C   0x4605             MOV      R5,R0
    188          	}
   \                     ??wifi_reset_0: (+1)
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       _Z15getWifiTickDiffii
   \   00000026   0xF5B0 0x7FFA      CMP      R0,#+500
   \   0000002A   0xD3F5             BCC.N    ??wifi_reset_1
    189          	//GPIO_SetBits(GPIOG, GPIO_Pin_1);
    190                  WIFI_SET();
   \   0000002C   0x2120             MOVS     R1,#+32
   \   0000002E   0x4630             MOV      R0,R6
   \   00000030   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000034   0x.... 0x....      B.W      GPIO_SetBits
    191          	
    192          }
    193          
    194          #if 0
    195          static void dma_init()
    196          {
    197          
    198          	int i;
    199          #if 0
    200          
    201          	DMA_InitTypeDef  DMA_InitStructure;
    202          	NVIC_InitTypeDef NVIC_InitStructure;
    203          	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    204          
    205          	/*DMA ÷–∂œ*/
    206          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
    207          	NVIC_InitStructure.NVIC_IRQChannel=DMA1_Channel5_IRQn;
    208          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=0;
    209          	NVIC_InitStructure.NVIC_IRQChannelSubPriority=0;
    210          	NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
    211          	NVIC_Init(&NVIC_InitStructure);
    212          	
    213          	DMA_DeInit(DMA1_Channel5);
    214          	DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)USART1_DR_Addr;
    215          	DMA_InitStructure.DMA_MemoryBaseAddr = (u32)WifiRxFifo.uartTxBuffer;//pBuffer;
    216          	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    217          	DMA_InitStructure.DMA_BufferSize = UART_RX_BUFFER_SIZE;//NumByteToRead;
    218          	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    219          	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    220          	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    221          	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    222          	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
    223          	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
    224          	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    225          	DMA_Init(DMA1_Channel5, &DMA_InitStructure);
    226          	
    227          
    228          	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC | DMA_IT_HT , ENABLE);
    229          	
    230          	DMA_Cmd(DMA1_Channel5, ENABLE); // πƒ‹DMAÕ®µ¿5
    231          
    232          	//USART_DMACmd (SZ_STM32_COM3, USART_DMAReq_Tx, ENABLE);
    233          	USART_DMACmd (USART1, USART_DMAReq_Rx, ENABLE);
    234          #endif
    235          #if 0
    236          	//hdma_usart1_rx.Instance->CR &= ~( 1 << 0 ) ;
    237          	__HAL_DMA_DISABLE((DMA_HandleTypeDef *)&hdma_usart1_rx);
    238          
    239          	//hdma_usart1_rx.Instance->NDTR = UART_RX_BUFFER_SIZE;
    240          	__HAL_DMA_SET_COUNTER((DMA_HandleTypeDef *)&hdma_usart1_rx,UART_RX_BUFFER_SIZE);
    241          
    242          	hdma_usart1_rx.Instance->PAR = USART1_DR_Addr;
    243          	/* Configure DMA Channel destination address */
    244          	hdma_usart1_rx.Instance->M0AR = (uint32_t)WifiRxFifo.uartTxBuffer;
    245          
    246          	DMA2->LIFCR = 0x1F0000 ;   
    247          	hdma_usart1_rx.Instance->CR |= 1 << 0; 
    248          #endif
    249          
    250          	for(i = 0; i < TRANS_RCV_FIFO_BLOCK_NUM; i++)
    251          	{
    252          		wifiDmaRcvFifo.bufferAddr[i] = &bmp_public_buf[1024 * i];
    253          		
    254          		wifiDmaRcvFifo.state[i] = udisk_buf_empty;
    255          	
    256          	}
    257          
    258          	memset(wifiDmaRcvFifo.bufferAddr[0], 0, 1024 * TRANS_RCV_FIFO_BLOCK_NUM);
    259          	wifiDmaRcvFifo.read_cur = 0;
    260          	wifiDmaRcvFifo.write_cur = 0;
    261          
    262          	HAL_UART_Receive_DMA(&huart1,WifiRxFifo.uartTxBuffer,UART_RX_BUFFER_SIZE);
    263          
    264          }
    265          #endif
    266          

   \                                 In section .text, align 2, keep-with-next
    267          static void dma_init()
    268          {
   \                     _Z8dma_initv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    269          	int i;
    270          
    271          	__HAL_RCC_DMA1_CLK_ENABLE();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable55_7  ;; 0x40021014
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000000C   0x6001             STR      R1,[R0, #+0]
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000014   0x9000             STR      R0,[SP, #+0]
    272          
    273          	//HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
    274          	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 4, 0);
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x2104             MOVS     R1,#+4
   \   0000001A   0x200F             MOVS     R0,#+15
   \   0000001C   0x.... 0x....      BL       HAL_NVIC_SetPriority
    275           	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
   \   00000020   0x200F             MOVS     R0,#+15
   \   00000022   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    276          
    277          	hdma_usart1_rx.Instance = DMA1_Channel5;
   \   00000026   0x.... 0x....      LDR.W    R4,??DataTable55_8
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable55_9  ;; 0x40020058
   \   0000002E   0x6020             STR      R0,[R4, #+0]
    278          	//hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
    279          	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x6060             STR      R0,[R4, #+4]
    280          	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \   00000034   0x60A0             STR      R0,[R4, #+8]
    281          	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
   \   00000036   0x2080             MOVS     R0,#+128
   \   00000038   0x60E0             STR      R0,[R4, #+12]
    282          	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x6120             STR      R0,[R4, #+16]
    283          	hdma_usart1_rx.Init.MemDataAlignment = DMA_PDATAALIGN_BYTE;
   \   0000003E   0x6160             STR      R0,[R4, #+20]
    284          	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
   \   00000040   0x61A0             STR      R0,[R4, #+24]
    285          	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
   \   00000042   0xF44F 0x5040      MOV      R0,#+12288
   \   00000046   0x61E0             STR      R0,[R4, #+28]
    286          	if (HAL_DMA_Init((DMA_HandleTypeDef *)&hdma_usart1_rx) != HAL_OK)
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       HAL_DMA_Init
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD001             BEQ.N    ??dma_init_0
    287          	{
    288          	  Error_Handler();
   \   00000052   0x.... 0x....      BL       Error_Handler
    289          	}	
    290          
    291          	
    292          	HAL_DMA_Start_IT((DMA_HandleTypeDef *)&hdma_usart1_rx,
    293          	  	(uint32_t)&huart1.Instance->DR, 
    294          	  	(uint32_t)(&WifiRxFifo.uartTxBuffer[0]), 
    295          	  	UART_RX_BUFFER_SIZE);
   \                     ??dma_init_0: (+1)
   \   00000056   0x.... 0x....      LDR.W    R5,??DataTable55_10
   \   0000005A   0xF44F 0x6380      MOV      R3,#+1024
   \   0000005E   0x.... 0x....      LDR.W    R2,??DataTable55_11
   \   00000062   0x6828             LDR      R0,[R5, #+0]
   \   00000064   0x1D01             ADDS     R1,R0,#+4
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x.... 0x....      BL       HAL_DMA_Start_IT
    296              
    297              //HAL_UART_Receive_DMA(&huart1,(uint8_t*)&WifiRxFifo.uartTxBuffer[0], UART_RX_BUFFER_SIZE);
    298          
    299              	/* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    300                 in the UART CR3 register */
    301              	SET_BIT(huart1.Instance->CR3, USART_CR3_DMAR);
   \   0000006C   0x6828             LDR      R0,[R5, #+0]
   \   0000006E   0x6941             LDR      R1,[R0, #+20]
   \   00000070   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000074   0x6141             STR      R1,[R0, #+20]
    302          
    303          
    304          	
    305          	for(i = 0; i < TRANS_RCV_FIFO_BLOCK_NUM; i++)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x.... 0x....      LDR.W    R4,??DataTable55_12
   \   0000007C   0xE00A             B.N      ??dma_init_1
    306          	{
    307          		wifiDmaRcvFifo.bufferAddr[i] = &bmp_public_buf[1024 * i];		
   \                     ??dma_init_2: (+1)
   \   0000007E   0x.... 0x....      LDR.W    R1,??DataTable55_13
   \   00000082   0xEB01 0x2180      ADD      R1,R1,R0, LSL #+10
   \   00000086   0xF844 0x1020      STR      R1,[R4, R0, LSL #+2]
    308          		wifiDmaRcvFifo.state[i] = udisk_buf_empty;	
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x1902             ADDS     R2,R0,R4
   \   0000008E   0xF882 0x1024      STRB     R1,[R2, #+36]
    309          	}
   \   00000092   0x1C40             ADDS     R0,R0,#+1
   \                     ??dma_init_1: (+1)
   \   00000094   0x2808             CMP      R0,#+8
   \   00000096   0xDBF2             BLT.N    ??dma_init_2
    310          
    311          	memset(wifiDmaRcvFifo.bufferAddr[0], 0, 1024 * TRANS_RCV_FIFO_BLOCK_NUM);
   \   00000098   0xF44F 0x5200      MOV      R2,#+8192
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x6820             LDR      R0,[R4, #+0]
   \   000000A0   0x.... 0x....      BL       memset
    312          	wifiDmaRcvFifo.read_cur = 0;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0xF884 0x002C      STRB     R0,[R4, #+44]
    313          	wifiDmaRcvFifo.write_cur = 0;
   \   000000AA   0xF884 0x002D      STRB     R0,[R4, #+45]
    314          
    315          }
   \   000000AE   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    316          
    317          static void wifi_deInit()
    318          {
    319          #if 0
    320          	DMA_DeInit(DMA1_Channel5);
    321          	
    322          	DMA_ITConfig(DMA1_Channel5, DMA_IT_TC | DMA_IT_HT , DISABLE);
    323          
    324          	USART_DMACmd (USART1, USART_DMAReq_Rx, DISABLE);
    325          #endif
    326          	HAL_DMA_Abort((DMA_HandleTypeDef *)&hdma_usart1_rx);
    327          	HAL_DMA_DeInit((DMA_HandleTypeDef *)&hdma_usart1_rx);
    328          	__HAL_DMA_DISABLE((DMA_HandleTypeDef *)&hdma_usart1_rx);
    329          
    330          }
    331          
    332          
    333          extern uint8_t mksUsart1Rx;
    334          

   \                                 In section .text, align 2, keep-with-next
    335          void esp_port_begin(uint8_t interrupt)
    336          {
   \                     _Z14esp_port_beginh: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    337          
    338          	NVIC_InitTypeDef NVIC_InitStructure;
                 	                 ^
Warning[Pe177]: variable "NVIC_InitStructure" was declared but never referenced
    339          
    340          	USART_InitTypeDef USART_InitStructure;
                 	                  ^
Warning[Pe177]: variable "USART_InitStructure" was declared but never
          referenced
    341          	GPIO_InitTypeDef GPIO_InitStruct;
                 	                 ^
Warning[Pe177]: variable "GPIO_InitStruct" was declared but never referenced
    342          	
    343          	WifiRxFifo.uart_read_point = 0;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable55_14
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x6001             STR      R1,[R0, #+0]
    344          	WifiRxFifo.uart_write_point = 0;
   \   0000000C   0x6041             STR      R1,[R0, #+4]
    345          	memset((uint8_t*)WifiRxFifo.uartTxBuffer, 0, sizeof(WifiRxFifo.uartTxBuffer));
   \   0000000E   0xF44F 0x6280      MOV      R2,#+1024
   \   00000012   0x3008             ADDS     R0,R0,#+8
   \   00000014   0x.... 0x....      BL       memset
    346          	
    347          	if(interrupt)
   \   00000018   0x.... 0x....      LDR.W    R5,??DataTable55_10
   \   0000001C   0x2C00             CMP      R4,#+0
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0xD00C             BEQ.N    ??esp_port_begin_0
    348          	{
    349          	#if TAN
    350          		wifi_deInit (); 
    351          
    352          		//SZ_STM32_COMInit(COM1, 115200);
    353          		__HAL_UART_ENABLE_IT(USART1, USART_IT_RXNE);
    354          
    355          		USART_InitStructure.USART_BaudRate = 115200;				//¥Æø⁄µƒ≤®Ãÿ¬ £¨¿˝»Á115200 ◊Ó∏ﬂ¥Ô4.5Mbits/s
    356          		USART_InitStructure.USART_WordLength = USART_WordLength_8b; // ˝æ›◊÷≥§∂»(8ŒªªÚ9Œª)
    357          		USART_InitStructure.USART_StopBits = USART_StopBits_1;		//ø…≈‰÷√µƒÕ£÷πŒª-÷ß≥÷1ªÚ2∏ˆÕ£÷πŒª
    358          		USART_InitStructure.USART_Parity = USART_Parity_No; 		//Œﬁ∆Ê≈º–£—È  
    359          		USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; //Œﬁ”≤º˛¡˜øÿ÷∆
    360          		USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx; //À´π§ƒ£ Ω£¨ πƒ‹∑¢ÀÕ∫ÕΩ” ’
    361          
    362          		__HAL_RCC_USART1_CLK_ENABLE();
    363          
    364          		GPIO_InitStruct.Pin = TFT_WIFI_TX_Pin|TFT_WIFI_RX_Pin;
    365          		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    366          		GPIO_InitStruct.Pull = GPIO_PULLUP;
    367          		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    368          		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    369          		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    370              	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    371              	GPIO_InitStruct.Pin = TFT_WIFI_RX_Pin;
    372              	HAL_GPIO_Init(GPIOA,&GPIO_InitStruct);		
    373          		
    374          		USART_Init(USART1, &USART_InitStructure);
    375          
    376          		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    377          	//	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    378          	//	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    379          		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
    380          		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    381          		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    382          
    383          		NVIC_Init(&NVIC_InitStructure);
    384          		#else
    385          		HAL_UART_DeInit(&huart1);
   \   00000022   0x.... 0x....      BL       HAL_UART_DeInit
    386          		MX_USART1_UART_Init(3);
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0x.... 0x....      BL       MX_USART1_UART_Init
    387          		//__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
    388          		HAL_UART_Receive_IT(&huart1,&mksUsart1Rx,1);
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable55_15
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000038   0x.... 0x....      B.W      HAL_UART_Receive_IT
    389          		#endif
    390          	}
    391          	else
    392          	{
    393          		#if 0
    394          		NVIC_DisableIRQ(SZ_STM32_COM1_IRQn);
    395          				
    396          		USART_Cmd(SZ_STM32_COM1, DISABLE);
    397          
    398          		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, DISABLE);
    399          		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    400          		
    401          		SZ_STM32_COMInit(COM1, 1958400);
    402          
    403          		USART_Cmd(SZ_STM32_COM1, ENABLE);
    404          
    405          		wifi_delay(10);
    406          
    407          		dma_init();
    408          		#endif
    409          		HAL_UART_DeInit(&huart1);
   \                     ??esp_port_begin_0: (+1)
   \   0000003C   0x.... 0x....      BL       HAL_UART_DeInit
    410          		MX_USART1_UART_Init(5);
   \   00000040   0x2005             MOVS     R0,#+5
   \   00000042   0x.... 0x....      BL       MX_USART1_UART_Init
    411                  //dma1_5_IRQ_sel = 1;
    412          		dma_init();
   \   00000046   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000004A   0x....             B.N      _Z8dma_initv
    413          	}
    414          }
    415          

   \                                 In section .text, align 2, keep-with-next
    416          int raw_send_to_wifi(char *buf, int len)
    417          {
   \                     _Z16raw_send_to_wifiPci: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    418          	uint32_t i;
    419          	volatile uint32_t delayIndex;
    420          	#ifdef ESP_MODEL
    421          	uint8_t esp_send_head[20] = {0}; ;
    422          	#endif
    423          
    424          	if(buf == 0  ||  len <= 0)
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD001             BEQ.N    ??raw_send_to_wifi_0
   \   0000000A   0x2D01             CMP      R5,#+1
   \   0000000C   0xDA01             BGE.N    ??raw_send_to_wifi_1
    425          	{
    426          		return 0;
   \                     ??raw_send_to_wifi_0: (+1)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBDF2             POP      {R1,R4-R7,PC}
    427          	}
    428          	for(i = 0; i < len; i++)
   \                     ??raw_send_to_wifi_1: (+1)
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable55_10
   \   00000018   0xE00B             B.N      ??raw_send_to_wifi_2
    429          	{
    430          	#if 0
    431          		if(gCfgItems.wifi_type == HLK_WIFI) 
    432          		{
    433          			while (USART_GetFlagStatus(SZ_STM32_COM3, USART_FLAG_TC) == RESET);/*??????*/
    434          		
    435          			USART_SendData(SZ_STM32_COM3, *(buf + i)); 
    436          		}	
    437          		else
    438          	#endif
    439          		{
    440          		#if tan
    441          			while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);/*??????*/
    442          			//while(HAL_UART_GetState(huart1) == HAL_UART_STATE_BUSY_TX);
    443          			USART_SendData(USART1, *(buf + i)); 
    444          		#else
    445          	        USART_SendData(huart1.Instance, *(buf+i));
   \                     ??raw_send_to_wifi_3: (+1)
   \   0000001A   0x5731             LDRSB    R1,[R6, R4]
   \   0000001C   0xB289             UXTH     R1,R1
   \   0000001E   0x6838             LDR      R0,[R7, #+0]
   \   00000020   0x.... 0x....      BL       USART_SendData
    446          			// Loop until USART DR register is empty
    447          			while(USART_GetFlagStatus(huart1.Instance, USART_FLAG_TXE) == RESET){}		
   \                     ??raw_send_to_wifi_4: (+1)
   \   00000024   0x2180             MOVS     R1,#+128
   \   00000026   0x6838             LDR      R0,[R7, #+0]
   \   00000028   0x.... 0x....      BL       USART_GetFlagStatus
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD0F9             BEQ.N    ??raw_send_to_wifi_4
    448          		#endif
    449          			
    450          		}
    451          
    452          	
    453          	}
   \   00000030   0x1C76             ADDS     R6,R6,#+1
   \                     ??raw_send_to_wifi_2: (+1)
   \   00000032   0x42AE             CMP      R6,R5
   \   00000034   0xD3F1             BCC.N    ??raw_send_to_wifi_3
    454          
    455          	#ifdef ESP_MODEL
    456          	if(espSendState == ESP_WAIT_SEND)
    457          		espSendState = ESP_WAIT_COMPL;
    458          	#endif
    459          
    460          	return len;
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    461          
    462          }
    463          
    464          
    465          

   \                                 In section .text, align 2, keep-with-next
    466          void wifi_ret_ack()
    467          {
    468          	if(gCfgItems.wifi_type == HLK_WIFI) 
   \                     _Z12wifi_ret_ackv: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_16
   \   00000004   0xF890 0x022C      LDRB     R0,[R0, #+556]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD103             BNE.N    ??wifi_ret_ack_0
    469          	{
    470          		raw_send_to_wifi("ok\r\n", strlen("ok\r\n"));
   \   0000000C   0x2104             MOVS     R1,#+4
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable55_17
   \   00000012   0x....             B.N      _Z16raw_send_to_wifiPci
    471          	}
    472          }
   \                     ??wifi_ret_ack_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    473          
    474          
    475          char buf_to_wifi[256];
    476          int index_to_wifi = 0;

   \                                 In section .text, align 2, keep-with-next
    477          int package_to_wifi(WIFI_RET_TYPE type, char *buf, int len)
    478          {
   \                     _Z15package_to_wifi13WIFI_RET_TYPEPci: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4616             MOV      R6,R2
    479          	char wifi_ret_head = 0xa5;
    480          	char wifi_ret_tail = 0xfc;
    481          
    482          	
    483          
    484          	if(type == WIFI_PARA_SET)
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD148             BNE.N    ??package_to_wifi_0
    485           	{
    486           		int data_offset = 4;
    487          		int apLen = strlen((const char *)gCfgItems.wifi_ap);
   \   0000000E   0x.... 0x....      LDR.W    R6,??DataTable55_16
   \   00000012   0xF206 0x19CB      ADDW     R9,R6,#+459
   \   00000016   0x4648             MOV      R0,R9
   \   00000018   0x.... 0x....      BL       strlen
   \   0000001C   0x4605             MOV      R5,R0
    488          		int keyLen = strlen((const char *)gCfgItems.wifi_key);
   \   0000001E   0xF206 0x17EB      ADDW     R7,R6,#+491
   \   00000022   0x4638             MOV      R0,R7
   \   00000024   0x.... 0x....      BL       strlen
   \   00000028   0x4680             MOV      R8,R0
    489          		
    490           		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \   0000002A   0x.... 0x....      LDR.W    R4,??DataTable55_18
   \   0000002E   0xF44F 0x7280      MOV      R2,#+256
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       memset
    491          		index_to_wifi = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF8C4 0x0100      STR      R0,[R4, #+256]
    492          
    493          		buf_to_wifi[data_offset] = gCfgItems.wifi_mode_sel;
   \   00000040   0xF996 0x022B      LDRSB    R0,[R6, #+555]
   \   00000044   0x7120             STRB     R0,[R4, #+4]
    494          		buf_to_wifi[data_offset + 1]  = apLen;
   \   00000046   0x7165             STRB     R5,[R4, #+5]
    495          		strncpy(&buf_to_wifi[data_offset + 2], (const char *)gCfgItems.wifi_ap, apLen);
   \   00000048   0x462A             MOV      R2,R5
   \   0000004A   0x4649             MOV      R1,R9
   \   0000004C   0x1DA0             ADDS     R0,R4,#+6
   \   0000004E   0x.... 0x....      BL       strncpy
    496          		buf_to_wifi[data_offset + apLen + 2]  = keyLen;
   \   00000052   0x1928             ADDS     R0,R5,R4
   \   00000054   0xF880 0x8006      STRB     R8,[R0, #+6]
    497          		strncpy(&buf_to_wifi[data_offset + apLen + 3], (const char *)gCfgItems.wifi_key, keyLen);
   \   00000058   0x4642             MOV      R2,R8
   \   0000005A   0x4639             MOV      R1,R7
   \   0000005C   0x1DC0             ADDS     R0,R0,#+7
   \   0000005E   0x.... 0x....      BL       strncpy
    498          		buf_to_wifi[data_offset + apLen + keyLen + 3] = wifi_ret_tail;
   \   00000062   0xEB08 0x0005      ADD      R0,R8,R5
   \   00000066   0xF06F 0x0103      MVN      R1,#+3
   \   0000006A   0x1902             ADDS     R2,R0,R4
   \   0000006C   0x71D1             STRB     R1,[R2, #+7]
    499          
    500          		index_to_wifi = apLen + keyLen + 3;
   \   0000006E   0x1CC0             ADDS     R0,R0,#+3
   \   00000070   0xF8C4 0x0100      STR      R0,[R4, #+256]
    501          
    502          		buf_to_wifi[0] = wifi_ret_head;
   \   00000074   0xF06F 0x015A      MVN      R1,#+90
   \   00000078   0x7021             STRB     R1,[R4, #+0]
    503          		buf_to_wifi[1] = type;
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x7061             STRB     R1,[R4, #+1]
    504          		buf_to_wifi[2] = index_to_wifi & 0xff;
   \   0000007E   0x70A0             STRB     R0,[R4, #+2]
    505          		buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
   \   00000080   0x1201             ASRS     R1,R0,#+8
   \   00000082   0x70E1             STRB     R1,[R4, #+3]
    506          
    507          		raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
   \   00000084   0x1D41             ADDS     R1,R0,#+5
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       _Z16raw_send_to_wifiPci
    508          
    509          		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \   0000008C   0xF44F 0x7280      MOV      R2,#+256
   \   00000090   0x2100             MOVS     R1,#+0
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       memset
    510          		index_to_wifi = 0;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0xF8C4 0x0100      STR      R0,[R4, #+256]
   \   0000009E   0xE0F4             B.N      ??package_to_wifi_1
    511          		
    512           	}	
    513          		
    514          	else if(type == WIFI_TRANS_INF)
   \                     ??package_to_wifi_0: (+1)
   \   000000A0   0x2802             CMP      R0,#+2
   \   000000A2   0xD163             BNE.N    ??package_to_wifi_2
    515           	{
    516          
    517          		if(len > sizeof(buf_to_wifi) - index_to_wifi - 5)
   \   000000A4   0x.... 0x....      LDR.W    R4,??DataTable55_18
   \   000000A8   0xF8D4 0x0100      LDR      R0,[R4, #+256]
   \   000000AC   0xF1C0 0x01FB      RSB      R1,R0,#+251
   \   000000B0   0x42B1             CMP      R1,R6
   \   000000B2   0xD339             BCC.N    ??package_to_wifi_3
    518          		{
    519          			memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
    520          			index_to_wifi = 0;
    521          			return;
                 			      ^
Warning[Pe117]: non-void function "package_to_wifi" should return a value
    522          
    523          		}
    524          		
    525          
    526          		 if(len > 0)
   \   000000B4   0x2E01             CMP      R6,#+1
   \   000000B6   0xF2C0 0x80E8      BLT.W    ??package_to_wifi_1
    527          		 {		
    528          		 	
    529          		 	memcpy(&buf_to_wifi[4 + index_to_wifi], buf, len);
   \   000000BA   0x4639             MOV      R1,R7
   \   000000BC   0x1900             ADDS     R0,R0,R4
   \   000000BE   0x1D00             ADDS     R0,R0,#+4
   \   000000C0   0x.... 0x....      BL       memcpy
    530          			index_to_wifi += len;
   \   000000C4   0xF8D4 0x0100      LDR      R0,[R4, #+256]
   \   000000C8   0x1830             ADDS     R0,R6,R0
   \   000000CA   0xF8C4 0x0100      STR      R0,[R4, #+256]
    531          		 
    532          			if(index_to_wifi < 1)
   \   000000CE   0x2801             CMP      R0,#+1
   \   000000D0   0xF2C0 0x80DB      BLT.W    ??package_to_wifi_1
    533          				return;
                 				      ^
Warning[Pe117]: non-void function "package_to_wifi" should return a value
    534          
    535          			 if(buf_to_wifi[index_to_wifi + 3] == '\n')
   \   000000D4   0x1901             ADDS     R1,R0,R4
   \   000000D6   0xF991 0x2003      LDRSB    R2,[R1, #+3]
   \   000000DA   0x2A0A             CMP      R2,#+10
   \   000000DC   0xF040 0x80D5      BNE.W    ??package_to_wifi_1
   \   000000E0   0xF994 0x2004      LDRSB    R2,[R4, #+4]
   \   000000E4   0x2A77             CMP      R2,#+119
   \   000000E6   0xD10B             BNE.N    ??package_to_wifi_4
   \   000000E8   0xF994 0x3005      LDRSB    R3,[R4, #+5]
   \   000000EC   0x2B61             CMP      R3,#+97
   \   000000EE   0xD107             BNE.N    ??package_to_wifi_4
   \   000000F0   0xF994 0x3006      LDRSB    R3,[R4, #+6]
   \   000000F4   0x2B69             CMP      R3,#+105
   \   000000F6   0xD103             BNE.N    ??package_to_wifi_4
   \   000000F8   0xF994 0x3007      LDRSB    R3,[R4, #+7]
   \   000000FC   0x2B74             CMP      R3,#+116
   \   000000FE   0xD013             BEQ.N    ??package_to_wifi_3
   \                     ??package_to_wifi_4: (+1)
   \   00000100   0x2A62             CMP      R2,#+98
   \   00000102   0xD10B             BNE.N    ??package_to_wifi_5
   \   00000104   0xF994 0x3005      LDRSB    R3,[R4, #+5]
   \   00000108   0x2B75             CMP      R3,#+117
   \   0000010A   0xD107             BNE.N    ??package_to_wifi_5
   \   0000010C   0xF994 0x3006      LDRSB    R3,[R4, #+6]
   \   00000110   0x2B73             CMP      R3,#+115
   \   00000112   0xD103             BNE.N    ??package_to_wifi_5
   \   00000114   0xF994 0x3007      LDRSB    R3,[R4, #+7]
   \   00000118   0x2B79             CMP      R3,#+121
   \   0000011A   0xD005             BEQ.N    ??package_to_wifi_3
   \                     ??package_to_wifi_5: (+1)
   \   0000011C   0x2A58             CMP      R2,#+88
   \   0000011E   0xD10D             BNE.N    ??package_to_wifi_6
   \   00000120   0xF994 0x2005      LDRSB    R2,[R4, #+5]
   \   00000124   0x2A3A             CMP      R2,#+58
   \   00000126   0xD109             BNE.N    ??package_to_wifi_6
    536          			 {	
    537          			 	//mask "wait" "busy" "X:"
    538          			 	if(((buf_to_wifi[4] == 'w') && (buf_to_wifi[5] == 'a') && (buf_to_wifi[6] == 'i')  && (buf_to_wifi[7] == 't') )
    539          					|| ((buf_to_wifi[4] == 'b') && (buf_to_wifi[5] == 'u') && (buf_to_wifi[6] == 's')  && (buf_to_wifi[7] == 'y') )
    540          					|| ((buf_to_wifi[4] == 'X') && (buf_to_wifi[5] == ':') )
    541          					)
    542          			 	{
    543          			 		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \                     ??package_to_wifi_3: (+1)
   \   00000128   0xF44F 0x7280      MOV      R2,#+256
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x4620             MOV      R0,R4
   \   00000130   0x.... 0x....      BL       memset
    544          				 	index_to_wifi = 0;
   \   00000134   0x2000             MOVS     R0,#+0
   \   00000136   0xF8C4 0x0100      STR      R0,[R4, #+256]
    545          					return;
                 					      ^
Warning[Pe117]: non-void function "package_to_wifi" should return a value
   \   0000013A   0xE0A6             B.N      ??package_to_wifi_1
    546          			 	}
    547          
    548          				buf_to_wifi[0] = wifi_ret_head;
   \                     ??package_to_wifi_6: (+1)
   \   0000013C   0xF06F 0x025A      MVN      R2,#+90
   \   00000140   0x7022             STRB     R2,[R4, #+0]
    549          				buf_to_wifi[1] = type;
   \   00000142   0x7065             STRB     R5,[R4, #+1]
    550          				buf_to_wifi[2] = index_to_wifi & 0xff;
   \   00000144   0x70A0             STRB     R0,[R4, #+2]
    551          				buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;	
   \   00000146   0x1202             ASRS     R2,R0,#+8
   \   00000148   0x70E2             STRB     R2,[R4, #+3]
    552          				buf_to_wifi[4 + index_to_wifi] = wifi_ret_tail;
   \   0000014A   0xF06F 0x0203      MVN      R2,#+3
   \   0000014E   0x710A             STRB     R2,[R1, #+4]
    553          
    554          				raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
   \   00000150   0x1D41             ADDS     R1,R0,#+5
   \   00000152   0x4620             MOV      R0,R4
   \   00000154   0x.... 0x....      BL       _Z16raw_send_to_wifiPci
    555          
    556          				memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \   00000158   0xF44F 0x7280      MOV      R2,#+256
   \   0000015C   0x2100             MOVS     R1,#+0
   \   0000015E   0x4620             MOV      R0,R4
   \   00000160   0x.... 0x....      BL       memset
    557          				 index_to_wifi = 0;
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0xF8C4 0x0100      STR      R0,[R4, #+256]
   \   0000016A   0xE08E             B.N      ??package_to_wifi_1
    558          			 }
    559          		}
    560          	}
    561          	else if(type == WIFI_EXCEP_INF)
   \                     ??package_to_wifi_2: (+1)
   \   0000016C   0x2803             CMP      R0,#+3
   \   0000016E   0xD122             BNE.N    ??package_to_wifi_7
    562          	{
    563          		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));		
   \   00000170   0x.... 0x....      LDR.W    R4,??DataTable55_18
   \   00000174   0xF44F 0x7280      MOV      R2,#+256
   \   00000178   0x2100             MOVS     R1,#+0
   \   0000017A   0x4620             MOV      R0,R4
   \   0000017C   0x.... 0x....      BL       memset
    564          
    565          		buf_to_wifi[0] = wifi_ret_head;
   \   00000180   0xF06F 0x005A      MVN      R0,#+90
   \   00000184   0x7020             STRB     R0,[R4, #+0]
    566          		buf_to_wifi[1] = type;
   \   00000186   0x7065             STRB     R5,[R4, #+1]
    567          		buf_to_wifi[2] = 1;
   \   00000188   0x2001             MOVS     R0,#+1
   \   0000018A   0x70A0             STRB     R0,[R4, #+2]
    568          		buf_to_wifi[3] = 0;
   \   0000018C   0x2000             MOVS     R0,#+0
   \   0000018E   0x70E0             STRB     R0,[R4, #+3]
    569          		buf_to_wifi[4] = *buf;
   \   00000190   0x7838             LDRB     R0,[R7, #+0]
   \   00000192   0x7120             STRB     R0,[R4, #+4]
    570          		buf_to_wifi[5] = wifi_ret_tail;
   \   00000194   0xF06F 0x0003      MVN      R0,#+3
   \   00000198   0x7160             STRB     R0,[R4, #+5]
    571          
    572          		raw_send_to_wifi(buf_to_wifi, 6);
   \   0000019A   0x2106             MOVS     R1,#+6
   \   0000019C   0x4620             MOV      R0,R4
   \   0000019E   0x.... 0x....      BL       _Z16raw_send_to_wifiPci
    573          
    574          		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \   000001A2   0xF44F 0x7280      MOV      R2,#+256
   \   000001A6   0x2100             MOVS     R1,#+0
   \   000001A8   0x4620             MOV      R0,R4
   \   000001AA   0x.... 0x....      BL       memset
    575          		index_to_wifi = 0;
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0xF8C4 0x0100      STR      R0,[R4, #+256]
   \   000001B4   0xE069             B.N      ??package_to_wifi_1
    576          	}
    577          	else if(type == WIFI_CLOUD_CFG)
   \                     ??package_to_wifi_7: (+1)
   \   000001B6   0x2804             CMP      R0,#+4
   \   000001B8   0xD147             BNE.N    ??package_to_wifi_8
    578          	{
    579          		int data_offset = 4;
    580          		int urlLen = strlen((const char *)gCfgItems.cloud_hostUrl);
   \   000001BA   0x.... 0x....      LDR.W    R6,??DataTable55_16
   \   000001BE   0xF206 0x272E      ADDW     R7,R6,#+558
   \   000001C2   0x4638             MOV      R0,R7
   \   000001C4   0x.... 0x....      BL       strlen
   \   000001C8   0x4680             MOV      R8,R0
    581          		
    582           		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \   000001CA   0x.... 0x....      LDR.W    R4,??DataTable55_18
   \   000001CE   0xF44F 0x7280      MOV      R2,#+256
   \   000001D2   0x2100             MOVS     R1,#+0
   \   000001D4   0x4620             MOV      R0,R4
   \   000001D6   0x.... 0x....      BL       memset
    583          		index_to_wifi = 0;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0xF8C4 0x0100      STR      R0,[R4, #+256]
    584          
    585          		if(gCfgItems.cloud_enable == 0x1)
   \   000001E0   0xF996 0x022D      LDRSB    R0,[R6, #+557]
   \   000001E4   0x2801             CMP      R0,#+1
   \   000001E6   0xD102             BNE.N    ??package_to_wifi_9
    586          			buf_to_wifi[data_offset] = 0x0a;
   \   000001E8   0x200A             MOVS     R0,#+10
   \   000001EA   0x7120             STRB     R0,[R4, #+4]
   \   000001EC   0xE001             B.N      ??package_to_wifi_10
    587          		else
    588          			buf_to_wifi[data_offset] = 0x05;
   \                     ??package_to_wifi_9: (+1)
   \   000001EE   0x2005             MOVS     R0,#+5
   \   000001F0   0x7120             STRB     R0,[R4, #+4]
    589          		
    590          		buf_to_wifi[data_offset + 1]  = urlLen;
   \                     ??package_to_wifi_10: (+1)
   \   000001F2   0xF884 0x8005      STRB     R8,[R4, #+5]
    591          		strncpy(&buf_to_wifi[data_offset + 2], (const char *)gCfgItems.cloud_hostUrl, urlLen);
   \   000001F6   0x4642             MOV      R2,R8
   \   000001F8   0x4639             MOV      R1,R7
   \   000001FA   0x1DA0             ADDS     R0,R4,#+6
   \   000001FC   0x.... 0x....      BL       strncpy
    592          		buf_to_wifi[data_offset + urlLen + 2]  = gCfgItems.cloud_port & 0xff;
   \   00000200   0xF8D6 0x0290      LDR      R0,[R6, #+656]
   \   00000204   0xEB08 0x0104      ADD      R1,R8,R4
   \   00000208   0x7188             STRB     R0,[R1, #+6]
    593          		buf_to_wifi[data_offset + urlLen + 3]  = (gCfgItems.cloud_port >> 8) & 0xff;
   \   0000020A   0xF8D6 0x0290      LDR      R0,[R6, #+656]
   \   0000020E   0x1200             ASRS     R0,R0,#+8
   \   00000210   0x71C8             STRB     R0,[R1, #+7]
    594          		buf_to_wifi[data_offset + urlLen + 4] = wifi_ret_tail;
   \   00000212   0xF06F 0x0003      MVN      R0,#+3
   \   00000216   0x7208             STRB     R0,[R1, #+8]
    595          
    596          		index_to_wifi = urlLen + 4;
   \   00000218   0xF108 0x0004      ADD      R0,R8,#+4
   \   0000021C   0xF8C4 0x0100      STR      R0,[R4, #+256]
    597          
    598          		buf_to_wifi[0] = wifi_ret_head;
   \   00000220   0xF06F 0x015A      MVN      R1,#+90
   \   00000224   0x7021             STRB     R1,[R4, #+0]
    599          		buf_to_wifi[1] = type;
   \   00000226   0x7065             STRB     R5,[R4, #+1]
    600          		buf_to_wifi[2] = index_to_wifi & 0xff;
   \   00000228   0x70A0             STRB     R0,[R4, #+2]
    601          		buf_to_wifi[3] = (index_to_wifi >> 8) & 0xff;
   \   0000022A   0x1201             ASRS     R1,R0,#+8
   \   0000022C   0x70E1             STRB     R1,[R4, #+3]
    602          
    603          		raw_send_to_wifi(buf_to_wifi, 5 + index_to_wifi);
   \   0000022E   0x1D41             ADDS     R1,R0,#+5
   \   00000230   0x4620             MOV      R0,R4
   \   00000232   0x.... 0x....      BL       _Z16raw_send_to_wifiPci
    604          
    605          		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \   00000236   0xF44F 0x7280      MOV      R2,#+256
   \   0000023A   0x2100             MOVS     R1,#+0
   \   0000023C   0x4620             MOV      R0,R4
   \   0000023E   0x.... 0x....      BL       memset
    606          		index_to_wifi = 0;
   \   00000242   0x2000             MOVS     R0,#+0
   \   00000244   0xF8C4 0x0100      STR      R0,[R4, #+256]
   \   00000248   0xE01F             B.N      ??package_to_wifi_1
    607          	}
    608          	else if(type == WIFI_CLOUD_UNBIND)
   \                     ??package_to_wifi_8: (+1)
   \   0000024A   0x2805             CMP      R0,#+5
   \   0000024C   0xD11D             BNE.N    ??package_to_wifi_1
    609          	{
    610          		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));		
   \   0000024E   0x.... 0x....      LDR.W    R4,??DataTable55_18
   \   00000252   0xF44F 0x7280      MOV      R2,#+256
   \   00000256   0x2100             MOVS     R1,#+0
   \   00000258   0x4620             MOV      R0,R4
   \   0000025A   0x.... 0x....      BL       memset
    611          
    612          		buf_to_wifi[0] = wifi_ret_head;
   \   0000025E   0xF06F 0x005A      MVN      R0,#+90
   \   00000262   0x7020             STRB     R0,[R4, #+0]
    613          		buf_to_wifi[1] = type;
   \   00000264   0x7065             STRB     R5,[R4, #+1]
    614          		buf_to_wifi[2] = 0;
   \   00000266   0x2000             MOVS     R0,#+0
   \   00000268   0x8060             STRH     R0,[R4, #+2]
    615          		buf_to_wifi[3] = 0;
    616          		buf_to_wifi[4] = wifi_ret_tail;
   \   0000026A   0xF06F 0x0003      MVN      R0,#+3
   \   0000026E   0x7120             STRB     R0,[R4, #+4]
    617          
    618          		raw_send_to_wifi(buf_to_wifi, 5);
   \   00000270   0x2105             MOVS     R1,#+5
   \   00000272   0x4620             MOV      R0,R4
   \   00000274   0x.... 0x....      BL       _Z16raw_send_to_wifiPci
    619          
    620          		memset(buf_to_wifi, 0, sizeof(buf_to_wifi));
   \   00000278   0xF44F 0x7280      MOV      R2,#+256
   \   0000027C   0x2100             MOVS     R1,#+0
   \   0000027E   0x4620             MOV      R0,R4
   \   00000280   0x.... 0x....      BL       memset
    621          		index_to_wifi = 0;
   \   00000284   0x2000             MOVS     R0,#+0
   \   00000286   0xF8C4 0x0100      STR      R0,[R4, #+256]
    622          	}
    623          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "package_to_wifi"
   \                     ??package_to_wifi_1: (+1)
   \   0000028A   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    624          
    625          

   \                                 In section .text, align 2, keep-with-next
    626          int send_to_wifi(char *buf, int len)
    627          {
    628          	#if 0
    629          	if(gCfgItems.wifi_type == HLK_WIFI)
    630          	{
    631          		return raw_send_to_wifi(buf, len);
    632          	}
    633          	else
    634          	#endif
    635          	{
    636          		return package_to_wifi(WIFI_TRANS_INF, buf, len);
   \                     _Z12send_to_wifiPci: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x4601             MOV      R1,R0
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x....             B.N      _Z15package_to_wifi13WIFI_RET_TYPEPci
    637          	}
    638          }
    639          

   \                                 In section .text, align 2, keep-with-next
    640          void set_cur_file_sys(int fileType)
    641          {
    642          	gCfgItems.fileSysType = fileType;
   \                     _Z16set_cur_file_sysi: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_16
   \   00000004   0xF881 0x00BA      STRB     R0,[R1, #+186]
    643          }
   \   00000008   0x4770             BX       LR               ;; return
    644          
    645          
    646          
    647          

   \                                 In section .text, align 2, keep-with-next
    648          void get_file_list(char *path)
    649          {
   \                     _Z13get_file_listPc: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    650          	if( path == 0)
   \   00000004   0xD022             BEQ.N    ??get_file_list_0
    651          	{
    652          		return;
    653          	}
    654          	
    655          	if(gCfgItems.fileSysType == FILE_SYS_SD)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable55_16
   \   0000000A   0xF990 0x10BA      LDRSB    R1,[R0, #+186]
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD115             BNE.N    ??get_file_list_1
    656          	{
    657          		if(SD_DET_IP == SD_DETECT_INVERTED)
                 		             ^
Warning[Pa118]: mixing boolean and non-boolean types in a comparison results
          in the boolean being promoted
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable56  ;; 0x42238124
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD112             BNE.N    ??get_file_list_2
    658          		{
    659          			//SD_Initialize();
    660          			strcpy(card.gCurDir, "1:");
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable56_1
   \   00000020   0x2203             MOVS     R2,#+3
   \   00000022   0x....             ADR.N    R1,??DataTable54  ;; 0x31, 0x3A, 0x00, 0x00
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy4
    661          			curFileName[0]=(char )'1';
   \   0000002A   0x2031             MOVS     R0,#+49
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable56_2
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    662          			//MX_SDIO_SD_Init();
    663          
    664          			//strcpy((char *)sd.gCurDir, path);      //skyblue-modify
    665                  	//FATFS_LinkDriver_sd(&SD_Driver, card.gCurDir);
    666          			f_mount(&fs, (TCHAR const*)card.gCurDir, 0);	
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x4629             MOV      R1,R5
   \   00000036   0x....             LDR.N    R0,??DataTable55_4
   \   00000038   0x.... 0x....      BL       f_mount
   \   0000003C   0xE001             B.N      ??get_file_list_2
    667          		}
    668          	}
    669          	else if(gCfgItems.fileSysType == FILE_SYS_USB)
   \                     ??get_file_list_1: (+1)
   \   0000003E   0xF990 0x00BA      LDRSB    R0,[R0, #+186]
    670          	{
    671          #if unused
    672          		//reset_usb_state();	
    673          		strcpy(card.gCurDir, "0:");	
    674          		curFileName[0]=(char )'0';	
    675          		FATFS_LinkDriver_sd(&USBH_Driver, card.gCurDir);
    676          #endif
    677          	}
    678          	
    679          #if 1//tan_mask
    680          	//if(gCfgItems.fileSysType == FILE_SYS_SD)
    681          	{			
    682          		Explore_Disk(path, 0);
   \                     ??get_file_list_2: (+1)
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000004A   0x....             B.N      _Z12Explore_DiskPch
    683          	}
   \                     ??get_file_list_0: (+1)
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    684          #endif	
    685          	
    686          }
    687          
    688          char wait_ip_back_flag = 0;
    689          

   \                                 In section .text, align 2, keep-with-next
    690          void init_queue(QUEUE *h_queue)
    691          {
    692          	if(h_queue == 0)
   \                     _Z10init_queueP5QUEUE: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD008             BEQ.N    ??init_queue_0
    693          		return;
    694          	
    695          	h_queue->rd_index = 0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xF8C0 0x1640      STR      R1,[R0, #+1600]
    696          	h_queue->wt_index = 0;
   \   0000000A   0xF8C0 0x1644      STR      R1,[R0, #+1604]
    697          	memset(h_queue->buf, 0, sizeof(h_queue->buf));
   \   0000000E   0xF44F 0x62C8      MOV      R2,#+1600
   \   00000012   0x.... 0x....      B.W      memset
   \                     ??init_queue_0: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    698          }
    699          

   \                                 In section .text, align 2, keep-with-next
    700          int push_queue(QUEUE *h_queue, char *data_to_push, int data_len)
    701          {
   \                     _Z10push_queueP5QUEUEPci: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4690             MOV      R8,R2
    702          	if(h_queue == 0)
   \   0000000A   0x2E00             CMP      R6,#+0
   \   0000000C   0xD102             BNE.N    ??push_queue_0
    703          		return -1;
   \   0000000E   0xF04F 0x30FF      MOV      R0,#-1
   \   00000012   0xE02E             B.N      ??push_queue_1
    704          
    705          	if(data_len > sizeof(h_queue->buf[h_queue->wt_index]))
   \                     ??push_queue_0: (+1)
   \   00000014   0xF1B8 0x0F51      CMP      R8,#+81
   \   00000018   0xD302             BCC.N    ??push_queue_2
    706          		return -1;
   \   0000001A   0xF04F 0x30FF      MOV      R0,#-1
   \   0000001E   0xE028             B.N      ??push_queue_1
    707          
    708          	if((h_queue->wt_index + 1) % 20 == h_queue->rd_index)
   \                     ??push_queue_2: (+1)
   \   00000020   0xF206 0x6440      ADDW     R4,R6,#+1600
   \   00000024   0x6860             LDR      R0,[R4, #+4]
   \   00000026   0x1C41             ADDS     R1,R0,#+1
   \   00000028   0x2514             MOVS     R5,#+20
   \   0000002A   0x462A             MOV      R2,R5
   \   0000002C   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   00000030   0xFB05 0x1112      MLS      R1,R5,R2,R1
   \   00000034   0xF8D6 0x2640      LDR      R2,[R6, #+1600]
   \   00000038   0x4291             CMP      R1,R2
   \   0000003A   0xD102             BNE.N    ??push_queue_3
    709          		return -1;
   \   0000003C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000040   0xE017             B.N      ??push_queue_1
    710          
    711          	memset(h_queue->buf[h_queue->wt_index], 0, sizeof(h_queue->buf[h_queue->wt_index]));
   \                     ??push_queue_3: (+1)
   \   00000042   0xF04F 0x0950      MOV      R9,#+80
   \   00000046   0x464A             MOV      R2,R9
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xFB09 0x6000      MLA      R0,R9,R0,R6
   \   0000004E   0x.... 0x....      BL       memset
    712          	memcpy(h_queue->buf[h_queue->wt_index], data_to_push, data_len);
   \   00000052   0x4642             MOV      R2,R8
   \   00000054   0x4639             MOV      R1,R7
   \   00000056   0x6860             LDR      R0,[R4, #+4]
   \   00000058   0xFB09 0x6000      MLA      R0,R9,R0,R6
   \   0000005C   0x.... 0x....      BL       memcpy
    713          
    714          	h_queue->wt_index = (h_queue->wt_index + 1) % 20;
   \   00000060   0x6860             LDR      R0,[R4, #+4]
   \   00000062   0x1C40             ADDS     R0,R0,#+1
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000006A   0xFB05 0x0011      MLS      R0,R5,R1,R0
   \   0000006E   0x6060             STR      R0,[R4, #+4]
    715          	
    716          	return 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \                     ??push_queue_1: (+1)
   \   00000072   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    717          }
    718          

   \                                 In section .text, align 2, keep-with-next
    719          int pop_queue(QUEUE *h_queue, char *data_for_pop, int data_len)
    720          {
   \                     _Z9pop_queueP5QUEUEPci: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4617             MOV      R7,R2
    721          	if(h_queue == 0)
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD102             BNE.N    ??pop_queue_0
    722          		return -1;
   \   0000000C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000010   0xBDF2             POP      {R1,R4-R7,PC}
    723          
    724          	if(data_len < strlen(h_queue->buf[h_queue->rd_index]))
   \                     ??pop_queue_0: (+1)
   \   00000012   0x2650             MOVS     R6,#+80
   \   00000014   0xF8D4 0x0640      LDR      R0,[R4, #+1600]
   \   00000018   0xFB06 0x4000      MLA      R0,R6,R0,R4
   \   0000001C   0x.... 0x....      BL       strlen
   \   00000020   0x4287             CMP      R7,R0
   \   00000022   0xD202             BCS.N    ??pop_queue_1
    725          		return -1;
   \   00000024   0xF04F 0x30FF      MOV      R0,#-1
   \   00000028   0xBDF2             POP      {R1,R4-R7,PC}
    726          
    727          	if(h_queue->rd_index == h_queue->wt_index)
   \                     ??pop_queue_1: (+1)
   \   0000002A   0xF8D4 0x0640      LDR      R0,[R4, #+1600]
   \   0000002E   0xF8D4 0x1644      LDR      R1,[R4, #+1604]
   \   00000032   0x4288             CMP      R0,R1
   \   00000034   0xD102             BNE.N    ??pop_queue_2
    728          		return -1;
   \   00000036   0xF04F 0x30FF      MOV      R0,#-1
   \   0000003A   0xBDF2             POP      {R1,R4-R7,PC}
    729          
    730          	memset(data_for_pop, 0, data_len);
   \                     ??pop_queue_2: (+1)
   \   0000003C   0x463A             MOV      R2,R7
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x4628             MOV      R0,R5
   \   00000042   0x.... 0x....      BL       memset
    731          	memcpy(data_for_pop, h_queue->buf[h_queue->rd_index], strlen(h_queue->buf[h_queue->rd_index]));
   \   00000046   0xF8D4 0x0640      LDR      R0,[R4, #+1600]
   \   0000004A   0xFB06 0x4000      MLA      R0,R6,R0,R4
   \   0000004E   0x.... 0x....      BL       strlen
   \   00000052   0x4602             MOV      R2,R0
   \   00000054   0xF8D4 0x0640      LDR      R0,[R4, #+1600]
   \   00000058   0xFB06 0x4100      MLA      R1,R6,R0,R4
   \   0000005C   0x4628             MOV      R0,R5
   \   0000005E   0x.... 0x....      BL       memcpy
    732          
    733          	h_queue->rd_index = (h_queue->rd_index + 1) % 20;
   \   00000062   0xF8D4 0x0640      LDR      R0,[R4, #+1600]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x2114             MOVS     R1,#+20
   \   0000006A   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000006E   0xEB01 0x0281      ADD      R2,R1,R1, LSL #+2
   \   00000072   0xEBA0 0x0082      SUB      R0,R0,R2, LSL #+2
   \   00000076   0xF8C4 0x0640      STR      R0,[R4, #+1600]
    734          	
    735          	return 0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    736          }
    737          

   \                                 In section .text, align 2, keep-with-next
    738          unsigned char computeBinarySize(char *ptr)  // unsigned int bitfield) {
    739          {
   \                     _Z17computeBinarySizePc: (+1)
   \   00000000   0x4601             MOV      R1,R0
    740              unsigned char s = 2; // not include checksum
   \   00000002   0x2002             MOVS     R0,#+2
    741              unsigned short bitfield = *(unsigned short*)ptr;
   \   00000004   0x8809             LDRH     R1,[R1, #+0]
    742              if(bitfield & 1) s+=2;
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x07D2             LSLS     R2,R2,#+31
   \   0000000A   0xD500             BPL.N    ??computeBinarySize_0
   \   0000000C   0x2004             MOVS     R0,#+4
    743              if(bitfield & 8) s+=4;
   \                     ??computeBinarySize_0: (+1)
   \   0000000E   0x460A             MOV      R2,R1
   \   00000010   0x0712             LSLS     R2,R2,#+28
   \   00000012   0xD501             BPL.N    ??computeBinarySize_1
   \   00000014   0x1D00             ADDS     R0,R0,#+4
   \   00000016   0xB2C0             UXTB     R0,R0
    744              if(bitfield & 16) s+=4;
   \                     ??computeBinarySize_1: (+1)
   \   00000018   0x460A             MOV      R2,R1
   \   0000001A   0x06D2             LSLS     R2,R2,#+27
   \   0000001C   0xD501             BPL.N    ??computeBinarySize_2
   \   0000001E   0x1D00             ADDS     R0,R0,#+4
   \   00000020   0xB2C0             UXTB     R0,R0
    745              if(bitfield & 32) s+=4;
   \                     ??computeBinarySize_2: (+1)
   \   00000022   0x460A             MOV      R2,R1
   \   00000024   0x0692             LSLS     R2,R2,#+26
   \   00000026   0xD501             BPL.N    ??computeBinarySize_3
   \   00000028   0x1D00             ADDS     R0,R0,#+4
   \   0000002A   0xB2C0             UXTB     R0,R0
    746              if(bitfield & 64) s+=4;
   \                     ??computeBinarySize_3: (+1)
   \   0000002C   0x460A             MOV      R2,R1
   \   0000002E   0x0652             LSLS     R2,R2,#+25
   \   00000030   0xD501             BPL.N    ??computeBinarySize_4
   \   00000032   0x1D00             ADDS     R0,R0,#+4
   \   00000034   0xB2C0             UXTB     R0,R0
    747              if(bitfield & 256) s+=4;
   \                     ??computeBinarySize_4: (+1)
   \   00000036   0x05CA             LSLS     R2,R1,#+23
   \   00000038   0xD501             BPL.N    ??computeBinarySize_5
   \   0000003A   0x1D00             ADDS     R0,R0,#+4
   \   0000003C   0xB2C0             UXTB     R0,R0
    748              if(bitfield & 512) s+=1;
   \                     ??computeBinarySize_5: (+1)
   \   0000003E   0x058A             LSLS     R2,R1,#+22
   \   00000040   0xD501             BPL.N    ??computeBinarySize_6
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0xB2C0             UXTB     R0,R0
    749              if(bitfield & 1024) s+=4;
   \                     ??computeBinarySize_6: (+1)
   \   00000046   0x054A             LSLS     R2,R1,#+21
   \   00000048   0xD501             BPL.N    ??computeBinarySize_7
   \   0000004A   0x1D00             ADDS     R0,R0,#+4
   \   0000004C   0xB2C0             UXTB     R0,R0
    750              if(bitfield & 2048) s+=4;
   \                     ??computeBinarySize_7: (+1)
   \   0000004E   0x050A             LSLS     R2,R1,#+20
   \   00000050   0xD501             BPL.N    ??computeBinarySize_8
   \   00000052   0x1D00             ADDS     R0,R0,#+4
   \   00000054   0xB2C0             UXTB     R0,R0
    751           
    752              if(bitfield & 2) s+=1;
   \                     ??computeBinarySize_8: (+1)
   \   00000056   0x460A             MOV      R2,R1
   \   00000058   0x0792             LSLS     R2,R2,#+30
   \   0000005A   0xD501             BPL.N    ??computeBinarySize_9
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0xB2C0             UXTB     R0,R0
    753              if(bitfield & 4) s+=1;
   \                     ??computeBinarySize_9: (+1)
   \   00000060   0x460A             MOV      R2,R1
   \   00000062   0x0752             LSLS     R2,R2,#+29
   \   00000064   0xD501             BPL.N    ??computeBinarySize_10
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0xB2C0             UXTB     R0,R0
    754              if(bitfield & 32768) s+=16;
   \                     ??computeBinarySize_10: (+1)
   \   0000006A   0x0409             LSLS     R1,R1,#+16
   \   0000006C   0xD501             BPL.N    ??computeBinarySize_11
   \   0000006E   0x3010             ADDS     R0,R0,#+16
   \   00000070   0xB2C0             UXTB     R0,R0
    755          
    756              return s;
   \                     ??computeBinarySize_11: (+1)
   \   00000072   0x4770             BX       LR               ;; return
    757          }

   \                                 In section .bss, align 4
   \                     espGcodeFifo:
   \   00000000                      DS8 104
    758          
    759          typedef struct
    760          {
    761          	FIL  *file;
    762          	char write_buf[513];//write_buf[1024];
    763          	int write_index;	
    764          	uint8_t saveFileName[30];
    765          	uint32_t fileLen;
    766          	uint32_t tick_begin;
    767          	uint32_t tick_end;
    768          } FILE_WRITER;
    769          
    770          FILE_WRITER file_writer;
    771          FIL save_File;
    772          
    773          int32_t lastFragment = 0;
    774          
    775          char lastBinaryCmd[50] = {0};
    776          
    777          int total_write = 0;	
   \                     total_write:
   \   00000068                      DS8 4

   \                                 In section .bss, align 1
   \                     wifi_connect_flg:
   \   00000000                      DS8 1
    778          char binary_head[2] = {0, 0};
    779          unsigned char binary_data_len = 0;
    780          

   \                                 In section .text, align 2, keep-with-next
    781          int write_to_file(char *buf, int len)
    782          {
   \                     _Z13write_to_filePci: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    783          	int num_write;
    784          	int i;
    785          	FRESULT res;
    786          	
    787          
    788          	for(i = 0; i < len; i++)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x.... 0x....      LDR.W    R7,??DataTable57
   \   0000000C   0xE009             B.N      ??write_to_file_0
    789          	{
    790          		file_writer.write_buf[file_writer.write_index++] = buf[i];
    791          		if(file_writer.write_index >= 512/*1024*/)
    792          		{
    793          			
    794          			res =  f_write (file_writer.file, file_writer.write_buf, (uint32_t)file_writer.write_index,  (uint32_t *)&num_write);
    795          			if((res != FR_OK) || (num_write != file_writer.write_index))
    796          			{
    797          				return  -1;
    798          			}
    799          			memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   \                     ??write_to_file_1: (+1)
   \   0000000E   0xF240 0x2201      MOVW     R2,#+513
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x1D38             ADDS     R0,R7,#+4
   \   00000016   0x.... 0x....      BL       memset
    800          			file_writer.write_index = 0;		
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF8C7 0x0208      STR      R0,[R7, #+520]
   \                     ??write_to_file_2: (+1)
   \   00000020   0x1C76             ADDS     R6,R6,#+1
   \                     ??write_to_file_0: (+1)
   \   00000022   0x42AE             CMP      R6,R5
   \   00000024   0xDA1B             BGE.N    ??write_to_file_3
   \   00000026   0x5D30             LDRB     R0,[R6, R4]
   \   00000028   0xF8D7 0x1208      LDR      R1,[R7, #+520]
   \   0000002C   0x19C9             ADDS     R1,R1,R7
   \   0000002E   0x7108             STRB     R0,[R1, #+4]
   \   00000030   0xF8D7 0x0208      LDR      R0,[R7, #+520]
   \   00000034   0x1C42             ADDS     R2,R0,#+1
   \   00000036   0xF8C7 0x2208      STR      R2,[R7, #+520]
   \   0000003A   0xF5B2 0x7F00      CMP      R2,#+512
   \   0000003E   0xDBEF             BLT.N    ??write_to_file_2
   \   00000040   0xAB00             ADD      R3,SP,#+0
   \   00000042   0x1D39             ADDS     R1,R7,#+4
   \   00000044   0x6838             LDR      R0,[R7, #+0]
   \   00000046   0x.... 0x....      BL       f_write
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD104             BNE.N    ??write_to_file_4
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0xF8D7 0x1208      LDR      R1,[R7, #+520]
   \   00000054   0x4288             CMP      R0,R1
   \   00000056   0xD0DA             BEQ.N    ??write_to_file_1
   \                     ??write_to_file_4: (+1)
   \   00000058   0xF04F 0x30FF      MOV      R0,#-1
   \   0000005C   0xBDF2             POP      {R1,R4-R7,PC}
    801          		}
    802          	}
    803          	return 0;
   \                     ??write_to_file_3: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    804          }
    805          
    806          
    807          
    808          
    809          
    810          
    811          #define ESP_PROTOC_HEAD	(uint8_t)0xa5
    812          #define ESP_PROTOC_TAIL		(uint8_t)0xfc
    813          
    814          #define ESP_TYPE_NET				(uint8_t)0x0
    815          #define ESP_TYPE_GCODE				(uint8_t)0x1
    816          #define ESP_TYPE_FILE_FIRST			(uint8_t)0x2
    817          #define ESP_TYPE_FILE_FRAGMENT		(uint8_t)0x3
    818          
    819          uint8_t esp_msg_buf[UART_RX_BUFFER_SIZE] = {0}; //????????
    820          uint16_t esp_msg_index = 0; //???
    821          
    822          typedef struct
    823          {
    824          	uint8_t head; //0xa5
    825          	uint8_t type; //0x0:????,0x1:gcode??,0x2:??????,0x3:??????(?????),0x4:????????
    826          	uint16_t dataLen; //????
    827          	uint8_t *data; //????
    828          	uint8_t tail; // 0xfc
    829          } ESP_PROTOC_FRAME;
    830          
    831          

   \                                 In section .text, align 2, keep-with-next
    832          static int cut_msg_head(uint8_t *msg, uint16_t msgLen, uint16_t cutLen)
    833          {
   \                     _Z12cut_msg_headPhtt: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    834          	int i;
    835          	
    836          	if(msgLen < cutLen)
   \   00000002   0x4291             CMP      R1,R2
   \   00000004   0xD201             BCS.N    ??cut_msg_head_0
    837          	{
    838          		return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD32             POP      {R1,R4,R5,PC}
    839          	}
    840          	else if(msgLen == cutLen)
   \                     ??cut_msg_head_0: (+1)
   \   0000000A   0xD105             BNE.N    ??cut_msg_head_1
    841          	{
    842          		memset(msg, 0, msgLen);
   \   0000000C   0x460A             MOV      R2,R1
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x.... 0x....      BL       memset
    843          		return 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}
    844          	}
    845          	for(i = 0; i < (msgLen - cutLen); i++)
   \                     ??cut_msg_head_1: (+1)
   \   00000018   0x2300             MOVS     R3,#+0
   \   0000001A   0xE003             B.N      ??cut_msg_head_2
    846          	{
    847          		msg[i] = msg[cutLen + i];
   \                     ??cut_msg_head_3: (+1)
   \   0000001C   0x191C             ADDS     R4,R3,R4
   \   0000001E   0x5C24             LDRB     R4,[R4, R0]
   \   00000020   0x541C             STRB     R4,[R3, R0]
    848          	}
   \   00000022   0x1C5B             ADDS     R3,R3,#+1
   \                     ??cut_msg_head_2: (+1)
   \   00000024   0x4614             MOV      R4,R2
   \   00000026   0x1B0D             SUBS     R5,R1,R4
   \   00000028   0x42AB             CMP      R3,R5
   \   0000002A   0xDBF7             BLT.N    ??cut_msg_head_3
    849          	memset(&msg[msgLen - cutLen], 0, cutLen);
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x1828             ADDS     R0,R5,R0
   \   00000030   0x.... 0x....      BL       memset
    850          	
    851          	return msgLen - cutLen;
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    852          	
    853          }
    854          
    855          

   \                                 In section .text, align 2, keep-with-next
    856          uint8_t Explore_Disk (char* path , uint8_t recu_level)
    857          {
   \                     _Z12Explore_DiskPch: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xF5AD 0x7D76      SUB      SP,SP,#+984
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x460D             MOV      R5,R1
    858          
    859            FILINFO fno;
    860            DIR dir;
    861            SD_CardInfo cardinfo;
    862            char *fn;
    863            char tmp[200];
    864            char Fstream[200];
    865            int local_offset;
    866            int file_offset = 0;
   \   0000000C   0x2600             MOVS     R6,#+0
    867            uint8_t res;
    868            
    869            #if _USE_LFN
    870              static char lfn[_MAX_LFN + 1];
    871              fno.lfname = lfn;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable57_1
   \   00000012   0x9006             STR      R0,[SP, #+24]
    872              fno.lfsize = sizeof(lfn);
   \   00000014   0xF44F 0x7080      MOV      R0,#+256
   \   00000018   0x9007             STR      R0,[SP, #+28]
    873          #endif
    874          
    875          	if(path == 0)
   \   0000001A   0x2C00             CMP      R4,#+0
   \   0000001C   0xD101             BNE.N    ??Explore_Disk_0
    876          		return 0;
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0xE020             B.N      ??Explore_Disk_1
    877          
    878          	if(path[0] == '0')
   \                     ??Explore_Disk_0: (+1)
   \   00000022   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000026   0x2830             CMP      R0,#+48
   \   00000028   0xD001             BEQ.N    ??Explore_Disk_2
    879          		//f_mount(0, (const char *)&fs,0);
    880          		f_mount(&fs, (TCHAR const*)path, 0);
    881          	else if(path[0] == '1')
   \   0000002A   0x2831             CMP      R0,#+49
   \   0000002C   0xD11A             BNE.N    ??Explore_Disk_1
    882          		//f_mount((FATFS *)1, (const char *)&fs,0);
    883          		f_mount(&fs, (TCHAR const*)path, 0);
   \                     ??Explore_Disk_2: (+1)
   \   0000002E   0x4632             MOV      R2,R6
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x....             LDR.N    R0,??DataTable55_4
   \   00000034   0x.... 0x....      BL       f_mount
   \   00000038   0xE00A             B.N      ??Explore_Disk_3
    884          	else
    885          		return;
                 		      ^
Warning[Pe117]: non-void function "Explore_Disk" should return a value
    886          	
    887          	for(;;)
    888          	{
    889          		local_offset = 0;
    890          		
    891          		if (f_opendir(&dir, path) == FR_OK) 
    892          	  	{
    893          
    894          		    while(1)
    895          		    {
    896          				res = f_readdir(&dir, &fno);
    897          				if (res != FR_OK || fno.fname[0] == 0) 
    898          				{
    899          					return;
                 					      ^
Warning[Pe117]: non-void function "Explore_Disk" should return a value
    900          				}
    901          				if (fno.fname[0] == '.')
    902          				{
    903          					continue;
    904          				}
    905          
    906          				
    907          
    908          
    909          				if(local_offset >= file_offset)
    910          				{
    911          					file_offset++;
    912          					break;
    913          				}
    914          
    915          				local_offset++;
    916          		    }
    917          			
    918          		    if ((fno.lfname[0] == 0) || (fno.lfname == 0))
    919          				fn = fno.fname;
    920          			else
    921          				fn = fno.lfname;
    922          				
    923          		      	if((strstr(fn, ".g")) || (strstr(fn, ".G")) || (fno.fattrib & AM_DIR))
    924          				{
    925          					  
    926          					  //tmp[0] = '\0';
    927          					  //strcpy(tmp, path);
    928          					  //strcat(tmp, "/");
    929          					  //strcat(tmp, fn);
    930          					strcpy(tmp, fn);
    931          					memset(Fstream, 0, sizeof(Fstream));
    932          					strcpy(Fstream, tmp);
    933          					  if((fno.fattrib & AM_DIR)&&(recu_level <= 10))
    934          				      {
    935          				      //  Explore_Disk(tmp, recu_level + 1);
    936          				      	
    937          						
    938          						strcat(Fstream, ".DIR\r\n");
   \                     ??Explore_Disk_4: (+1)
   \   0000003A   0x.... 0x....      ADR.W    R1,`?<Constant ".DIR\\r\\n">`
   \   0000003E   0x.... 0x....      BL       strcat
    939          						send_to_wifi(Fstream, strlen(Fstream));
   \   00000042   0xA808             ADD      R0,SP,#+32
   \   00000044   0x.... 0x....      BL       strlen
   \   00000048   0x4601             MOV      R1,R0
   \   0000004A   0xA808             ADD      R0,SP,#+32
   \   0000004C   0x.... 0x....      BL       _Z12send_to_wifiPci
    940          				      }
   \                     ??Explore_Disk_3: (+1)
   \   00000050   0xF04F 0x0800      MOV      R8,#+0
   \   00000054   0x4621             MOV      R1,R4
   \   00000056   0xA86C             ADD      R0,SP,#+432
   \   00000058   0x.... 0x....      BL       f_opendir
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD007             BEQ.N    ??Explore_Disk_5
    941          					  else
    942          					  {					
    943          						strcat(Fstream, "\r\n");
    944          						send_to_wifi(Fstream, strlen(Fstream));
    945          					  }
    946          				}
    947          		  
    948          		      
    949          
    950          		     
    951          		    }
    952          				else
    953          					break;
    954          	
    955            	
    956          	}
    957           return res;
   \   00000060   0x4638             MOV      R0,R7
   \   00000062   0xB2C0             UXTB     R0,R0
   \                     ??Explore_Disk_1: (+1)
   \   00000064   0xF50D 0x7D76      ADD      SP,SP,#+984
   \   00000068   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??Explore_Disk_6: (+1)
   \   0000006C   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??Explore_Disk_5: (+1)
   \   00000070   0xA900             ADD      R1,SP,#+0
   \   00000072   0xA86C             ADD      R0,SP,#+432
   \   00000074   0x.... 0x....      BL       f_readdir
   \   00000078   0x4607             MOV      R7,R0
   \   0000007A   0xB2FF             UXTB     R7,R7
   \   0000007C   0x2F00             CMP      R7,#+0
   \   0000007E   0xD1F1             BNE.N    ??Explore_Disk_1
   \   00000080   0xF99D 0x0009      LDRSB    R0,[SP, #+9]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD0ED             BEQ.N    ??Explore_Disk_1
   \   00000088   0x282E             CMP      R0,#+46
   \   0000008A   0xD0F1             BEQ.N    ??Explore_Disk_5
   \   0000008C   0x45B0             CMP      R8,R6
   \   0000008E   0xDBED             BLT.N    ??Explore_Disk_6
   \   00000090   0x1C76             ADDS     R6,R6,#+1
   \   00000092   0xF8DD 0x8018      LDR      R8,[SP, #+24]
   \   00000096   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD002             BEQ.N    ??Explore_Disk_7
   \   0000009E   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000A2   0xD101             BNE.N    ??Explore_Disk_8
   \                     ??Explore_Disk_7: (+1)
   \   000000A4   0xF10D 0x0809      ADD      R8,SP,#+9
   \                     ??Explore_Disk_8: (+1)
   \   000000A8   0x....             ADR.N    R1,??DataTable55  ;; 0x2E, 0x67, 0x00, 0x00
   \   000000AA   0x4640             MOV      R0,R8
   \   000000AC   0x.... 0x....      BL       _Z6strstrPcPKc
   \   000000B0   0x2800             CMP      R0,#+0
   \   000000B2   0xD109             BNE.N    ??Explore_Disk_9
   \   000000B4   0x....             ADR.N    R1,??DataTable55_1  ;; 0x2E, 0x47, 0x00, 0x00
   \   000000B6   0x4640             MOV      R0,R8
   \   000000B8   0x.... 0x....      BL       _Z6strstrPcPKc
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD103             BNE.N    ??Explore_Disk_9
   \   000000C0   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000000C4   0x06C0             LSLS     R0,R0,#+27
   \   000000C6   0xD5C3             BPL.N    ??Explore_Disk_3
   \                     ??Explore_Disk_9: (+1)
   \   000000C8   0x4641             MOV      R1,R8
   \   000000CA   0xA83A             ADD      R0,SP,#+232
   \   000000CC   0x.... 0x....      BL       strcpy
   \   000000D0   0x22C8             MOVS     R2,#+200
   \   000000D2   0x2100             MOVS     R1,#+0
   \   000000D4   0xA808             ADD      R0,SP,#+32
   \   000000D6   0x.... 0x....      BL       memset
   \   000000DA   0xA93A             ADD      R1,SP,#+232
   \   000000DC   0xA808             ADD      R0,SP,#+32
   \   000000DE   0x.... 0x....      BL       strcpy
   \   000000E2   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000000E6   0x06C9             LSLS     R1,R1,#+27
   \   000000E8   0xD501             BPL.N    ??Explore_Disk_10
   \   000000EA   0x2D0B             CMP      R5,#+11
   \   000000EC   0xDBA5             BLT.N    ??Explore_Disk_4
   \                     ??Explore_Disk_10: (+1)
   \   000000EE   0x....             ADR.N    R1,??DataTable55_2  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000000F0   0xA808             ADD      R0,SP,#+32
   \   000000F2   0x.... 0x....      BL       strcat
   \   000000F6   0xA808             ADD      R0,SP,#+32
   \   000000F8   0x.... 0x....      BL       strlen
   \   000000FC   0x4601             MOV      R1,R0
   \   000000FE   0xA808             ADD      R0,SP,#+32
   \   00000100   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   00000104   0xE7A4             B.N      ??Explore_Disk_3
    958          }
    959          

   \                                 In section .text, align 4, keep-with-next
    960          static void wifi_gcode_exec(uint8_t *cmd_line)
    961          {
   \                     _Z15wifi_gcode_execPh: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF5AD 0x7D33      SUB      SP,SP,#+716
   \   00000008   0x4604             MOV      R4,R0
    962          	int8_t  tempBuf[100] = {0};
   \   0000000A   0xA80E             ADD      R0,SP,#+56
   \   0000000C   0x2164             MOVS     R1,#+100
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
    963          	uint8_t *tmpStr = 0;
    964          	int  cmd_value;
    965          	volatile int print_rate;
    966          	if((strstr((char *)&cmd_line[0], "\n") != 0) && ((strstr((char *)&cmd_line[0], "G") != 0) || (strstr((char *)&cmd_line[0], "M") != 0) || (strstr((char *)&cmd_line[0], "T") != 0) ))
   \   00000012   0xA6DA             ADR.N    R6,??wifi_gcode_exec_0  ;; "\n"
   \   00000014   0x4631             MOV      R1,R6
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       _Z6strstrPcPKc
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xF000 0x844B      BEQ.W    ??wifi_gcode_exec_1
   \   00000022   0xA1D7             ADR.N    R1,??wifi_gcode_exec_0+0x4  ;; "G"
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       _Z6strstrPcPKc
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD10C             BNE.N    ??wifi_gcode_exec_2
   \   0000002E   0xA1D5             ADR.N    R1,??wifi_gcode_exec_0+0x8  ;; "M"
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD106             BNE.N    ??wifi_gcode_exec_2
   \   0000003A   0xA1D3             ADR.N    R1,??wifi_gcode_exec_0+0xC  ;; "T"
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xF000 0x8438      BEQ.W    ??wifi_gcode_exec_1
    967          	{
    968          		
    969          		tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "\n");
   \                     ??wifi_gcode_exec_2: (+1)
   \   00000048   0x4631             MOV      R1,R6
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       _Z6strstrPcPKc
    970          		if(tmpStr)
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD001             BEQ.N    ??wifi_gcode_exec_3
    971          		{
    972          			*tmpStr = '\0';
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x7001             STRB     R1,[R0, #+0]
    973          		}
    974          		tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "\r");
   \                     ??wifi_gcode_exec_3: (+1)
   \   00000058   0xA1CC             ADR.N    R1,??wifi_gcode_exec_0+0x10  ;; "\r"
   \   0000005A   0x4620             MOV      R0,R4
   \   0000005C   0x.... 0x....      BL       _Z6strstrPcPKc
    975          		if(tmpStr)
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD001             BEQ.N    ??wifi_gcode_exec_4
    976          		{
    977          			*tmpStr = '\0';
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x7001             STRB     R1,[R0, #+0]
    978          		}
    979          		tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "*");
   \                     ??wifi_gcode_exec_4: (+1)
   \   00000068   0xA1C9             ADR.N    R1,??wifi_gcode_exec_0+0x14  ;; "*"
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       _Z6strstrPcPKc
    980          		if(tmpStr)
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD001             BEQ.N    ??wifi_gcode_exec_5
    981          		{
    982          			*tmpStr = '\0';
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x7001             STRB     R1,[R0, #+0]
    983          		}
    984          		tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "M");
   \                     ??wifi_gcode_exec_5: (+1)
   \   00000078   0xA1C2             ADR.N    R1,??wifi_gcode_exec_0+0x8  ;; "M"
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000080   0x0005             MOVS     R5,R0
    985          		if( tmpStr)
   \   00000082   0xF000 0x83D7      BEQ.W    ??wifi_gcode_exec_6
    986          		{
    987          			cmd_value = atoi((char *)(tmpStr + 1));
   \   00000086   0x1C68             ADDS     R0,R5,#+1
   \   00000088   0x.... 0x....      BL       atoi
   \   0000008C   0x4607             MOV      R7,R0
    988          			tmpStr = (uint8_t *)strstr((char *)tmpStr, " ");
   \   0000008E   0xA1D9             ADR.N    R1,??wifi_gcode_exec_7  ;; " "
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000096   0x4605             MOV      R5,R0
    989          
    990          			switch(cmd_value)
   \   00000098   0x4638             MOV      R0,R7
   \   0000009A   0x3814             SUBS     R0,R0,#+20
   \   0000009C   0xD02E             BEQ.N    ??wifi_gcode_exec_8
   \   0000009E   0x1E40             SUBS     R0,R0,#+1
   \   000000A0   0xF000 0x8405      BEQ.W    ??wifi_gcode_exec_9
   \   000000A4   0x1E80             SUBS     R0,R0,#+2
   \   000000A6   0xD078             BEQ.N    ??wifi_gcode_exec_10
   \   000000A8   0x1E40             SUBS     R0,R0,#+1
   \   000000AA   0xF000 0x80E8      BEQ.W    ??wifi_gcode_exec_11
   \   000000AE   0x1E40             SUBS     R0,R0,#+1
   \   000000B0   0xF000 0x8144      BEQ.W    ??wifi_gcode_exec_12
   \   000000B4   0x1E40             SUBS     R0,R0,#+1
   \   000000B6   0xF000 0x8179      BEQ.W    ??wifi_gcode_exec_13
   \   000000BA   0x1E40             SUBS     R0,R0,#+1
   \   000000BC   0xF000 0x819C      BEQ.W    ??wifi_gcode_exec_14
   \   000000C0   0x1E40             SUBS     R0,R0,#+1
   \   000000C2   0xF000 0x81C5      BEQ.W    ??wifi_gcode_exec_15
   \   000000C6   0x384D             SUBS     R0,R0,#+77
   \   000000C8   0xF000 0x8245      BEQ.W    ??wifi_gcode_exec_16
   \   000000CC   0x1F40             SUBS     R0,R0,#+5
   \   000000CE   0xF000 0x82BA      BEQ.W    ??wifi_gcode_exec_17
   \   000000D2   0x1F40             SUBS     R0,R0,#+5
   \   000000D4   0xF000 0x836A      BEQ.W    ??wifi_gcode_exec_18
   \   000000D8   0xF44F 0x715B      MOV      R1,#+876
   \   000000DC   0x1A40             SUBS     R0,R0,R1
   \   000000DE   0xF000 0x823A      BEQ.W    ??wifi_gcode_exec_16
   \   000000E2   0x1E40             SUBS     R0,R0,#+1
   \   000000E4   0xF000 0x82BC      BEQ.W    ??wifi_gcode_exec_19
   \   000000E8   0x1E80             SUBS     R0,R0,#+2
   \   000000EA   0xF000 0x82F5      BEQ.W    ??wifi_gcode_exec_20
   \   000000EE   0x1EC0             SUBS     R0,R0,#+3
   \   000000F0   0xF000 0x831C      BEQ.W    ??wifi_gcode_exec_21
   \   000000F4   0x1E40             SUBS     R0,R0,#+1
   \   000000F6   0xF000 0x833E      BEQ.W    ??wifi_gcode_exec_22
   \   000000FA   0xE367             B.N      ??wifi_gcode_exec_23
    991          			{
    992          				
    993          				case 20: //print sd / udisk file
    994          					{								
    995          							
    996          						int index = 0;
   \                     ??wifi_gcode_exec_8: (+1)
   \   000000FC   0x2600             MOVS     R6,#+0
    997          						char *det_pos;
                 						      ^
Warning[Pe177]: variable "det_pos" was declared but never referenced
    998          
    999          						if(tmpStr == 0)
   \   000000FE   0x2D00             CMP      R5,#+0
   \   00000100   0xD119             BNE.N    ??wifi_gcode_exec_24
   1000          						{
   1001          							gCfgItems.fileSysType = FILE_SYS_SD;	
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      LDR.W    R1,??DataTable60
   \   00000108   0xF881 0x00BA      STRB     R0,[R1, #+186]
   1002          							send_to_wifi("Begin file list\r\n", strlen("Begin file list\r\n"));
   \   0000010C   0x2111             MOVS     R1,#+17
   \   0000010E   0x.... 0x....      ADR.W    R0,`?<Constant "Begin file list\\r\\n">`
   \   00000112   0x.... 0x....      BL       _Z12send_to_wifiPci
   1003          							#if tan
   1004          							get_file_list("1:/");
   1005          							#else
   1006          							get_file_list(SD_Path);
   \   00000116   0x.... 0x....      LDR.W    R0,??DataTable60_1
   \   0000011A   0x.... 0x....      BL       _Z13get_file_listPc
   1007          							#endif
   1008          							send_to_wifi("End file list\r\n", strlen("End file list\r\n"));
   \   0000011E   0x210F             MOVS     R1,#+15
   \   00000120   0x.... 0x....      ADR.W    R0,`?<Constant "End file list\\r\\n">`
   \   00000124   0x.... 0x....      BL       _Z12send_to_wifiPci
   1009          
   1010          							send_to_wifi("ok\r\n", strlen("ok\r\n"));
   \   00000128   0x2104             MOVS     R1,#+4
   \   0000012A   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   0000012E   0x.... 0x....      BL       _Z12send_to_wifiPci
   1011          							break;
   \   00000132   0xE3C1             B.N      ??wifi_gcode_exec_1
   1012          						}
   1013          
   1014          						while(tmpStr[index] == ' ')
   1015          							index++;
   \                     ??wifi_gcode_exec_25: (+1)
   \   00000134   0x1C76             ADDS     R6,R6,#+1
   \                     ??wifi_gcode_exec_24: (+1)
   \   00000136   0x5D70             LDRB     R0,[R6, R5]
   \   00000138   0x2820             CMP      R0,#+32
   \   0000013A   0xD0FB             BEQ.N    ??wifi_gcode_exec_25
   1016          
   1017          						if(gCfgItems.wifi_type == ESP_WIFI)
   \   0000013C   0x.... 0x....      LDR.W    R4,??DataTable60
   \   00000140   0xF894 0x022C      LDRB     R0,[R4, #+556]
   \   00000144   0x2802             CMP      R0,#+2
   \   00000146   0xF040 0x83B7      BNE.W    ??wifi_gcode_exec_1
   1018          						{
   1019          							char *path = (char *)tempBuf;
   1020          
   1021          							
   1022          							
   1023          							//det_pos = (char *)strstr(&tmpStr[index], "1:/sdcard");
   1024          
   1025          							if(strlen((char *)&tmpStr[index]) < 80)
   \   0000014A   0x1970             ADDS     R0,R6,R5
   \   0000014C   0x.... 0x....      BL       strlen
   \   00000150   0x2850             CMP      R0,#+80
   \   00000152   0xF080 0x83AC      BCS.W    ??wifi_gcode_exec_9
   1026          							{
   1027          								send_to_wifi("Begin file list\r\n", strlen("Begin file list\r\n"));
   \   00000156   0x2111             MOVS     R1,#+17
   \   00000158   0x.... 0x....      ADR.W    R0,`?<Constant "Begin file list\\r\\n">`
   \   0000015C   0x.... 0x....      BL       _Z12send_to_wifiPci
   1028          								
   1029          								if(strncmp((char *)&tmpStr[index], "1:", 2) == 0)
   \   00000160   0x2202             MOVS     R2,#+2
   \   00000162   0xA1B8             ADR.N    R1,??wifi_gcode_exec_26  ;; 0x31, 0x3A, 0x00, 0x00
   \   00000164   0x1970             ADDS     R0,R6,R5
   \   00000166   0x.... 0x....      BL       strncmp
   \   0000016A   0x2800             CMP      R0,#+0
   \   0000016C   0xD103             BNE.N    ??wifi_gcode_exec_27
   1030          								{
   1031          									gCfgItems.fileSysType = FILE_SYS_SD;									
   \   0000016E   0x2001             MOVS     R0,#+1
   \   00000170   0xF884 0x00BA      STRB     R0,[R4, #+186]
   \   00000174   0xE004             B.N      ??wifi_gcode_exec_28
   1032          									
   1033          								}
   1034          	 							else if(strncmp((char *)&tmpStr[index], "0:", 2) == 0)
   \                     ??wifi_gcode_exec_27: (+1)
   \   00000176   0x2202             MOVS     R2,#+2
   \   00000178   0xA1B3             ADR.N    R1,??wifi_gcode_exec_26+0x4  ;; 0x30, 0x3A, 0x00, 0x00
   \   0000017A   0x1970             ADDS     R0,R6,R5
   \   0000017C   0x.... 0x....      BL       strncmp
   1035          	 							{
   1036          	 							    //robin robin_mini robin_nano≤ª÷ß≥÷U≈Ã
   1037          	 								//gCfgItems.fileSysType = FILE_SYS_USB;
   1038          																		
   1039          								}
   1040          								strcpy((char *)path, (char *)&tmpStr[index]);	
   \                     ??wifi_gcode_exec_28: (+1)
   \   00000180   0x1971             ADDS     R1,R6,R5
   \   00000182   0xA80E             ADD      R0,SP,#+56
   \   00000184   0x.... 0x....      BL       strcpy
   1041          								get_file_list(path);
   \   00000188   0xA80E             ADD      R0,SP,#+56
   \   0000018A   0x.... 0x....      BL       _Z13get_file_listPc
   1042          								send_to_wifi("End file list\r\n", strlen("End file list\r\n"));
   \   0000018E   0x210F             MOVS     R1,#+15
   \   00000190   0x.... 0x....      ADR.W    R0,`?<Constant "End file list\\r\\n">`
   \   00000194   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   00000198   0xE389             B.N      ??wifi_gcode_exec_9
   1043          							}
   1044          							send_to_wifi("ok\r\n", strlen("ok\r\n"));
   1045          						}
   1046          						#if 0
   1047          						else
   1048          						{
   1049          							wifi_ret_ack();
   1050          							det_pos = (char *)strstr((char *)&tmpStr[index], ".DIR");
   1051          
   1052          							if(det_pos)
   1053          							{
   1054          								while(tmpStr[index] == ' ')
   1055          									index++;
   1056          								
   1057          								*det_pos = '\0';
   1058          								send_to_wifi("Begin file list\r\n", strlen("Begin file list\r\n"));
   1059          								get_file_list((char *)&tmpStr[index]);																	
   1060          								send_to_wifi("End file list\r\n", strlen("End file list\r\n"));
   1061          							}
   1062          							else
   1063          							{
   1064          								send_to_wifi("Begin file list\r\n", strlen("Begin file list\r\n"));
   1065          								if(gCfgItems.fileSysType == FILE_SYS_SD)
   1066          								{
   1067          									get_file_list("1:");
   1068          									
   1069          								}
   1070          								else if(gCfgItems.fileSysType == FILE_SYS_USB)
   1071          								{
   1072          									get_file_list("0:");		
   1073          								}
   1074          																
   1075          								send_to_wifi("End file list\r\n", strlen("End file list\r\n"));
   1076          							}
   1077          						}
   1078          						#endif
   1079          						
   1080          						
   1081          					}
   1082          					break;
   1083          
   1084          				case 21:
   1085          					/*init sd card*/
   1086          					send_to_wifi("ok\r\n", strlen("ok\r\n"));
   1087          					break;
   1088          
   1089          				case 23:					
   1090          					/*select the file*/
   1091          					if(mksReprint.mks_printer_state == MKS_IDLE)
   \                     ??wifi_gcode_exec_10: (+1)
   \   0000019A   0x.... 0x....      LDR.W    R0,??DataTable60_4
   \   0000019E   0xF890 0x00B4      LDRB     R0,[R0, #+180]
   \   000001A2   0x28A6             CMP      R0,#+166
   \   000001A4   0xF040 0x8388      BNE.W    ??wifi_gcode_exec_1
   1092          					{
   1093          						char *det_pos;
                 						      ^
Warning[Pe177]: variable "det_pos" was declared but never referenced
   1094          						int index = 0;
   \   000001A8   0x2700             MOVS     R7,#+0
   \   000001AA   0xE000             B.N      ??wifi_gcode_exec_29
   1095          						FIL temp_file;
   1096          						FRESULT res ;
   1097          						while(tmpStr[index] == ' ')
   1098          							index++;
   \                     ??wifi_gcode_exec_30: (+1)
   \   000001AC   0x1C7F             ADDS     R7,R7,#+1
   \                     ??wifi_gcode_exec_29: (+1)
   \   000001AE   0x5D78             LDRB     R0,[R7, R5]
   \   000001B0   0x2820             CMP      R0,#+32
   \   000001B2   0xD0FB             BEQ.N    ??wifi_gcode_exec_30
   1099          
   1100          						if(strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G"))
   \   000001B4   0xA1B1             ADR.N    R1,??wifi_gcode_exec_31  ;; 0x2E, 0x67, 0x00, 0x00
   \   000001B6   0x1978             ADDS     R0,R7,R5
   \   000001B8   0x.... 0x....      BL       _Z6strstrPcPKc
   \   000001BC   0x2800             CMP      R0,#+0
   \   000001BE   0xD106             BNE.N    ??wifi_gcode_exec_32
   \   000001C0   0xA1AF             ADR.N    R1,??wifi_gcode_exec_31+0x4  ;; 0x2E, 0x47, 0x00, 0x00
   \   000001C2   0x1978             ADDS     R0,R7,R5
   \   000001C4   0x.... 0x....      BL       _Z6strstrPcPKc
   \   000001C8   0x2800             CMP      R0,#+0
   \   000001CA   0xF000 0x8375      BEQ.W    ??wifi_gcode_exec_1
   1101          						{
   1102          							if(strlen((char *)&tmpStr[index]) < 80)
   \                     ??wifi_gcode_exec_32: (+1)
   \   000001CE   0x1978             ADDS     R0,R7,R5
   \   000001D0   0x.... 0x....      BL       strlen
   \   000001D4   0x2850             CMP      R0,#+80
   \   000001D6   0xF080 0x836F      BCS.W    ??wifi_gcode_exec_1
   1103          							{
   1104          								memset(curFileName, 0, sizeof(curFileName));
   \   000001DA   0x.... 0x....      LDR.W    R6,??DataTable56_2
   \   000001DE   0x2264             MOVS     R2,#+100
   \   000001E0   0x2100             MOVS     R1,#+0
   \   000001E2   0x4630             MOV      R0,R6
   \   000001E4   0x.... 0x....      BL       memset
   1105          
   1106          								if(gCfgItems.wifi_type == ESP_WIFI)
   \   000001E8   0x.... 0x....      LDR.W    R4,??DataTable60
   \   000001EC   0xF894 0x022C      LDRB     R0,[R4, #+556]
   \   000001F0   0x2802             CMP      R0,#+2
   \   000001F2   0xD127             BNE.N    ??wifi_gcode_exec_33
   1107          								{
   1108          									if(strncmp((char *)&tmpStr[index], "1:", 2) == 0)
   \   000001F4   0xF20F 0x284C      ADR.W    R8,??wifi_gcode_exec_26  ;; 0x31, 0x3A, 0x00, 0x00
   \   000001F8   0x2202             MOVS     R2,#+2
   \   000001FA   0x4641             MOV      R1,R8
   \   000001FC   0x1978             ADDS     R0,R7,R5
   \   000001FE   0x.... 0x....      BL       strncmp
   \   00000202   0x2800             CMP      R0,#+0
   \   00000204   0xD103             BNE.N    ??wifi_gcode_exec_34
   1109          									{
   1110          										gCfgItems.fileSysType = FILE_SYS_SD;									
   \   00000206   0x2001             MOVS     R0,#+1
   \   00000208   0xF884 0x00BA      STRB     R0,[R4, #+186]
   \   0000020C   0xE015             B.N      ??wifi_gcode_exec_35
   1111          										
   1112          									}
   1113          		 							else if(strncmp((char *)&tmpStr[index], "0:", 2) == 0)
   \                     ??wifi_gcode_exec_34: (+1)
   \   0000020E   0x2202             MOVS     R2,#+2
   \   00000210   0xA18D             ADR.N    R1,??wifi_gcode_exec_26+0x4  ;; 0x30, 0x3A, 0x00, 0x00
   \   00000212   0x1978             ADDS     R0,R7,R5
   \   00000214   0x.... 0x....      BL       strncmp
   \   00000218   0x2800             CMP      R0,#+0
   \   0000021A   0xD00E             BEQ.N    ??wifi_gcode_exec_35
   1114          		 							{
   1115          		 								//gCfgItems.fileSysType = FILE_SYS_USB;
   1116          																			
   1117          									}
   1118          									else
   1119          									{
   1120          										if(gCfgItems.fileSysType == FILE_SYS_SD)
   \   0000021C   0xF994 0x00BA      LDRSB    R0,[R4, #+186]
   \   00000220   0x2801             CMP      R0,#+1
   \   00000222   0xD103             BNE.N    ??wifi_gcode_exec_36
   1121          										{
   1122          											strcat((char *)curFileName, "1:");
   \   00000224   0x4641             MOV      R1,R8
   \   00000226   0x4630             MOV      R0,R6
   \   00000228   0x.... 0x....      BL       strcat
   1123          										}
   1124          										else
   1125          										{
   1126          											//strcat((char *)curFileName, "0:");
   1127          										}
   1128          										if(tmpStr[index] != '/')
   \                     ??wifi_gcode_exec_36: (+1)
   \   0000022C   0x5D78             LDRB     R0,[R7, R5]
   \   0000022E   0x282F             CMP      R0,#+47
   \   00000230   0xD003             BEQ.N    ??wifi_gcode_exec_35
   1129          											strcat((char *)curFileName, "/");
   \   00000232   0xA186             ADR.N    R1,??wifi_gcode_exec_26+0x8  ;; "/"
   \   00000234   0x4630             MOV      R0,R6
   \   00000236   0x.... 0x....      BL       strcat
   1130          									}
   1131          									strcat((char *)curFileName, (char *)&tmpStr[index]);
   \                     ??wifi_gcode_exec_35: (+1)
   \   0000023A   0x1979             ADDS     R1,R7,R5
   \   0000023C   0x4630             MOV      R0,R6
   \   0000023E   0x.... 0x....      BL       strcat
   \   00000242   0xE003             B.N      ??wifi_gcode_exec_37
   1132          									
   1133          									
   1134          								}
   1135          								else
   1136          								{
   1137          									strcpy(curFileName, (char *)&tmpStr[index]);
   \                     ??wifi_gcode_exec_33: (+1)
   \   00000244   0x1979             ADDS     R1,R7,R5
   \   00000246   0x4630             MOV      R0,R6
   \   00000248   0x.... 0x....      BL       strcpy
   1138          								}
   1139          								res = f_open(&temp_file, curFileName, FA_OPEN_EXISTING | FA_READ);
   1140          								if(res == FR_OK)
   \                     ??wifi_gcode_exec_37: (+1)
   \   0000024C   0x2201             MOVS     R2,#+1
   \   0000024E   0x4631             MOV      R1,R6
   \   00000250   0xA827             ADD      R0,SP,#+156
   \   00000252   0x.... 0x....      BL       f_open
   \   00000256   0x2800             CMP      R0,#+0
   \   00000258   0xD105             BNE.N    ??wifi_gcode_exec_38
   1141          								{
   1142          									send_to_wifi("File selected\r\n", strlen("File selected\r\n"));
   \   0000025A   0x210F             MOVS     R1,#+15
   \   0000025C   0x.... 0x....      ADR.W    R0,`?<Constant "File selected\\r\\n">`
   \   00000260   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   00000264   0xE323             B.N      ??wifi_gcode_exec_9
   1143          									
   1144          								}
   1145          								else
   1146          								{
   1147          									send_to_wifi("file.open failed\r\n", strlen("file.open failed\r\n"));
   \                     ??wifi_gcode_exec_38: (+1)
   \   00000266   0x2112             MOVS     R1,#+18
   \   00000268   0x.... 0x....      ADR.W    R0,`?<Constant "file.open failed\\r\\n">`
   \   0000026C   0x.... 0x....      BL       _Z12send_to_wifiPci
   1148          									strcpy(curFileName, "notValid");
   \   00000270   0x2209             MOVS     R2,#+9
   \   00000272   0x.... 0x....      ADR.W    R1,`?<Constant "notValid">`
   \   00000276   0x4630             MOV      R0,R6
   \   00000278   0x.... 0x....      BL       __aeabi_memcpy
   \   0000027C   0xE317             B.N      ??wifi_gcode_exec_9
   1149          								}
   1150          								send_to_wifi("ok\r\n", strlen("ok\r\n"));
   1151          								
   1152          							}
   1153          							
   1154          						
   1155          						}
   1156          							
   1157          						
   1158          					}
   1159          					break;
   1160          
   1161          				case 24:
   1162          					if(strcmp(curFileName, "notValid") != 0)
   \                     ??wifi_gcode_exec_11: (+1)
   \   0000027E   0x.... 0x....      LDR.W    R6,??DataTable56_2
   \   00000282   0x.... 0x....      ADR.W    R1,`?<Constant "notValid">`
   \   00000286   0x4630             MOV      R0,R6
   \   00000288   0x.... 0x....      BL       strcmp
   \   0000028C   0x2800             CMP      R0,#+0
   \   0000028E   0xF000 0x830E      BEQ.W    ??wifi_gcode_exec_9
   1163                      		{
   1164          	            				/*start or resume print file*/	
   1165          						//Get_Temperature_Flg = 1;
   1166          						//get_temp_flag = 1;
   1167          
   1168          						
   1169          	            				
   1170          						if(mksReprint.mks_printer_state == MKS_IDLE)
   \   00000292   0x.... 0x....      LDR.W    R4,??DataTable60_4
   \   00000296   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   0000029A   0x28A6             CMP      R0,#+166
   \   0000029C   0xD11F             BNE.N    ??wifi_gcode_exec_39
   1171          						{
   1172          							clear_cur_ui();
   \   0000029E   0x.... 0x....      BL       clear_cur_ui
   1173          							reset_file_info();
   \   000002A2   0x.... 0x....      BL       reset_file_info
   1174          							reset_print_time();
   \   000002A6   0x.... 0x....      BL       reset_print_time
   1175          							start_print_time();
   \   000002AA   0x.... 0x....      BL       start_print_time
   1176          							#if defined(TFT35)
   1177          							preview_gcode_prehandle(curFileName);
   \   000002AE   0x4630             MOV      R0,R6
   \   000002B0   0x.... 0x....      BL       preview_gcode_prehandle
   1178          							#endif
   1179          							draw_printing();
   \   000002B4   0x.... 0x....      BL       draw_printing
   1180          							if(card.openFile(curFileName, true))
   \   000002B8   0x.... 0x....      LDR.W    R4,??DataTable60_5
   \   000002BC   0x2301             MOVS     R3,#+1
   \   000002BE   0x461A             MOV      R2,R3
   \   000002C0   0x4631             MOV      R1,R6
   \   000002C2   0x4620             MOV      R0,R4
   \   000002C4   0x.... 0x....      BL       _ZN10CardReader8openFileEPcbb
   \   000002C8   0x2800             CMP      R0,#+0
   \   000002CA   0xF000 0x82F0      BEQ.W    ??wifi_gcode_exec_9
   1181          							{
   1182          								card.startFileprint();
   \   000002CE   0x4620             MOV      R0,R4
   \   000002D0   0x.... 0x....      BL       _ZN10CardReader14startFileprintEv
   1183          								once_flag = 0;
   \   000002D4   0x2000             MOVS     R0,#+0
   \   000002D6   0x.... 0x....      LDR.W    R1,??DataTable60_6
   \   000002DA   0x6008             STR      R0,[R1, #+0]
   \   000002DC   0xE2E7             B.N      ??wifi_gcode_exec_9
   1184          							}
   1185          
   1186          							
   1187          						}
   1188          						else if(mksReprint.mks_printer_state == MKS_PAUSED)
   \                     ??wifi_gcode_exec_39: (+1)
   \   000002DE   0x28AA             CMP      R0,#+170
   \   000002E0   0xD11B             BNE.N    ??wifi_gcode_exec_40
   1189          						{
   1190          							pause_resum = 1;
   \   000002E2   0x2001             MOVS     R0,#+1
   \   000002E4   0x.... 0x....      LDR.W    R1,??DataTable60_7
   \   000002E8   0x7008             STRB     R0,[R1, #+0]
   1191          							//mksReprint.mks_printer_state = MKS_WORKING;
   1192          							mksReprint.mks_printer_state = MKS_RESUMING;
   \   000002EA   0x20A8             MOVS     R0,#+168
   \   000002EC   0xF884 0x00B4      STRB     R0,[R4, #+180]
   1193          							clear_cur_ui();
   \   000002F0   0x.... 0x....      BL       clear_cur_ui
   1194          							start_print_time();
   \   000002F4   0x.... 0x....      BL       start_print_time
   1195                                      				#if defined(TFT35)
   1196          							if(from_flash_pic==1)
   \   000002F8   0x.... 0x....      LDR.W    R0,??DataTable61
   \   000002FC   0x7800             LDRB     R0,[R0, #+0]
   \   000002FE   0x2801             CMP      R0,#+1
   \   00000300   0xD104             BNE.N    ??wifi_gcode_exec_41
   1197          								flash_preview_begin = 1;
   \   00000302   0x2001             MOVS     R0,#+1
   \   00000304   0x.... 0x....      LDR.W    R1,??DataTable61_1
   \   00000308   0x7008             STRB     R0,[R1, #+0]
   \   0000030A   0xE003             B.N      ??wifi_gcode_exec_42
   1198          							else
   1199          								default_preview_flg = 1;							
   \                     ??wifi_gcode_exec_41: (+1)
   \   0000030C   0x2001             MOVS     R0,#+1
   \   0000030E   0x.... 0x....      LDR.W    R1,??DataTable61_2
   \   00000312   0x7008             STRB     R0,[R1, #+0]
   1200          							//draw_printing();
   1201          							#endif
   1202                                      draw_printing();
   \                     ??wifi_gcode_exec_42: (+1)
   \   00000314   0x.... 0x....      BL       draw_printing
   \   00000318   0xE2C9             B.N      ??wifi_gcode_exec_9
   1203          							
   1204          							//MX_I2C1_Init(400000);
   1205          						}
   1206          						else if(mksReprint.mks_printer_state == MKS_REPRINTED)
   \                     ??wifi_gcode_exec_40: (+1)
   \   0000031A   0x28AC             CMP      R0,#+172
   \   0000031C   0xF040 0x82C7      BNE.W    ??wifi_gcode_exec_9
   1207          						{
   1208          							pause_resum = 1;
   \   00000320   0x2001             MOVS     R0,#+1
   \   00000322   0x.... 0x....      LDR.W    R1,??DataTable60_7
   \   00000326   0x7008             STRB     R0,[R1, #+0]
   1209          							mksReprint.mks_printer_state = MKS_WORKING;
   \   00000328   0x20A7             MOVS     R0,#+167
   \   0000032A   0xF884 0x00B4      STRB     R0,[R4, #+180]
   1210          							clear_cur_ui();
   \   0000032E   0x.... 0x....      BL       clear_cur_ui
   1211          							start_print_time();
   \   00000332   0x.... 0x....      BL       start_print_time
   1212                                      				#if defined
   1213          							if(from_flash_pic==1)
   1214          								flash_preview_begin = 1;
   1215          							else
   1216          								default_preview_flg = 1;							
   1217          							
   1218          							//draw_printing();
   1219          							#endif
   1220                                      draw_printing();
   \   00000336   0x.... 0x....      BL       draw_printing
   \   0000033A   0xE2B8             B.N      ??wifi_gcode_exec_9
   1221          							
   1222          							
   1223          							//MX_I2C1_Init(400000);
   1224          						}		
   1225          					}
   1226          					send_to_wifi("ok\r\n", strlen("ok\r\n"));
   1227          					break;
   1228          
   1229          				case 25:
   1230          					/*pause print file*/						
   1231          					if(mksReprint.mks_printer_state == MKS_WORKING)
   \                     ??wifi_gcode_exec_12: (+1)
   \   0000033C   0x.... 0x....      LDR.W    R4,??DataTable60_4
   \   00000340   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   00000344   0x28A7             CMP      R0,#+167
   \   00000346   0xF040 0x82B7      BNE.W    ??wifi_gcode_exec_1
   1232          					{
   1233          						stop_print_time();							
   \   0000034A   0x.... 0x....      BL       stop_print_time
   1234          
   1235          						clear_cur_ui();
   \   0000034E   0x.... 0x....      BL       clear_cur_ui
   1236          						
   1237          						card.pauseSDPrint();
   \   00000352   0x.... 0x....      LDR.W    R0,??DataTable60_5
   \   00000356   0x.... 0x....      BL       _ZN10CardReader12pauseSDPrintEv
   1238                					print_job_timer.pause();
   \   0000035A   0x.... 0x....      LDR.W    R0,??DataTable62
   \   0000035E   0x.... 0x....      BL       _ZN9Stopwatch5pauseEv
   1239          						mksReprint.mks_printer_state = MKS_PAUSING;
   \   00000362   0x20A9             MOVS     R0,#+169
   \   00000364   0xF884 0x00B4      STRB     R0,[R4, #+180]
   1240          						#if defined(TFT35)
   1241          						if(from_flash_pic==1)
   \   00000368   0x.... 0x....      LDR.W    R0,??DataTable61
   \   0000036C   0x7800             LDRB     R0,[R0, #+0]
   \   0000036E   0x2801             CMP      R0,#+1
   \   00000370   0xD110             BNE.N    ??wifi_gcode_exec_43
   1242          							flash_preview_begin = 1;
   \   00000372   0x2001             MOVS     R0,#+1
   \   00000374   0x.... 0x....      LDR.W    R1,??DataTable61_1
   \   00000378   0x7008             STRB     R0,[R1, #+0]
   \   0000037A   0xE00F             B.N      ??wifi_gcode_exec_44
   \                     ??wifi_gcode_exec_0:
   \   0000037C   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    
   \   00000380   0x47 0x00          DC8      "G",0x0,0x0
   \              0x00 0x00    
   \   00000384   0x4D 0x00          DC8      "M",0x0,0x0
   \              0x00 0x00    
   \   00000388   0x54 0x00          DC8      "T",0x0,0x0
   \              0x00 0x00    
   \   0000038C   0x0D 0x00          DC8      "\r",0x0,0x0
   \              0x00 0x00    
   \   00000390   0x2A 0x00          DC8      "*",0x0,0x0
   \              0x00 0x00    
   1243          						else
   1244          							default_preview_flg = 1;							
   \                     ??wifi_gcode_exec_43: (+1)
   \   00000394   0x2001             MOVS     R0,#+1
   \   00000396   0x.... 0x....      LDR.W    R1,??DataTable61_2
   \   0000039A   0x7008             STRB     R0,[R1, #+0]
   1245          						
   1246          						//draw_pause();
   1247          						draw_printing();
   \                     ??wifi_gcode_exec_44: (+1)
   \   0000039C   0x.... 0x....      BL       draw_printing
   1248          			                      #else
   1249          			                      draw_pause();
   1250          						#endif
   1251          
   1252          						send_to_wifi("ok\r\n", strlen("ok\r\n"));
   \   000003A0   0x2104             MOVS     R1,#+4
   \   000003A2   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   000003A6   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   000003AA   0xE285             B.N      ??wifi_gcode_exec_1
   1253          
   1254          						//MX_I2C1_Init(100000);
   1255          					}					
   1256          					
   1257          					break;
   1258          					
   1259          				case 26:
   1260          					/*stop print file*/						
   1261          					//if((printerStaus == pr_working) || (printerStaus == pr_pause))
   1262          					if((mksReprint.mks_printer_state == MKS_WORKING) || (mksReprint.mks_printer_state == MKS_PAUSED) || (mksReprint.mks_printer_state == MKS_REPRINTED))
   \                     ??wifi_gcode_exec_13: (+1)
   \   000003AC   0x.... 0x....      LDR.W    R4,??DataTable60_4
   \   000003B0   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   000003B4   0x28A7             CMP      R0,#+167
   \   000003B6   0xD004             BEQ.N    ??wifi_gcode_exec_45
   \   000003B8   0x28AA             CMP      R0,#+170
   \   000003BA   0xD002             BEQ.N    ??wifi_gcode_exec_45
   \   000003BC   0x28AC             CMP      R0,#+172
   \   000003BE   0xF040 0x827B      BNE.W    ??wifi_gcode_exec_1
   1263          					{
   1264          						stop_print_time();							
   \                     ??wifi_gcode_exec_45: (+1)
   \   000003C2   0x.... 0x....      BL       stop_print_time
   1265          
   1266          						clear_cur_ui();
   \   000003C6   0x.... 0x....      BL       clear_cur_ui
   1267          
   1268          					    card.stopSDPrint();
   \   000003CA   0x.... 0x....      LDR.W    R0,??DataTable60_5
   \   000003CE   0x.... 0x....      BL       _ZN10CardReader11stopSDPrintEv
   1269                                  wait_for_heatup = false;
   \   000003D2   0x2000             MOVS     R0,#+0
   \   000003D4   0x.... 0x....      LDR.W    R1,??DataTable64
   \   000003D8   0x7008             STRB     R0,[R1, #+0]
   1270          						mksReprint.mks_printer_state = MKS_STOP;
   \   000003DA   0x20AD             MOVS     R0,#+173
   \   000003DC   0xF884 0x00B4      STRB     R0,[R4, #+180]
   1271          						reset_file_info();
   \   000003E0   0x.... 0x....      BL       reset_file_info
   1272          						//Get_Temperature_Flg = 0;
   1273          						draw_ready_print();
   \   000003E4   0x.... 0x....      BL       draw_ready_print
   1274          
   1275          						send_to_wifi("ok\r\n", strlen("ok\r\n"));
   \   000003E8   0x2104             MOVS     R1,#+4
   \   000003EA   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   000003EE   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   000003F2   0xE261             B.N      ??wifi_gcode_exec_1
   \                     ??wifi_gcode_exec_7:
   \   000003F4   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    
   1276          
   1277          						//MX_I2C1_Init(100000);
   1278          					}					
   1279          					
   1280          					break;
   1281          
   1282          				case 27:
   1283          					/*report print rate*/
   1284          					//if((printerStaus == pr_working) || (printerStaus == pr_pause))
   1285          					if((mksReprint.mks_printer_state == MKS_WORKING) || (mksReprint.mks_printer_state == MKS_PAUSED)|| (mksReprint.mks_printer_state == MKS_REPRINTED))
   \                     ??wifi_gcode_exec_14: (+1)
   \   000003F8   0x.... 0x....      LDR.W    R4,??DataTable60_4
   \   000003FC   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   00000400   0x28A7             CMP      R0,#+167
   \   00000402   0xD004             BEQ.N    ??wifi_gcode_exec_46
   \   00000404   0x28AA             CMP      R0,#+170
   \   00000406   0xD002             BEQ.N    ??wifi_gcode_exec_46
   \   00000408   0x28AC             CMP      R0,#+172
   \   0000040A   0xF040 0x8255      BNE.W    ??wifi_gcode_exec_1
   1286          					{
   1287          						print_rate = gCurFileState.totalSend;//get_printing_rate(srcfp);
   \                     ??wifi_gcode_exec_46: (+1)
   \   0000040E   0x.... 0x....      LDR.W    R0,??DataTable64_1
   \   00000412   0xF8D0 0x0238      LDR      R0,[R0, #+568]
   \   00000416   0x9000             STR      R0,[SP, #+0]
   1288          						/*
   1289          						if((printerStaus != pr_idle)  &&  (rate == 100))
   1290          						{	
   1291          							rate = 99;
   1292          						}
   1293          						*/
   1294          						memset((char *)tempBuf, 0, sizeof(tempBuf));
   \   00000418   0x2264             MOVS     R2,#+100
   \   0000041A   0x2100             MOVS     R1,#+0
   \   0000041C   0xA80E             ADD      R0,SP,#+56
   \   0000041E   0x.... 0x....      BL       memset
   1295          
   1296          						sprintf((char *)tempBuf, "M27 %d\r\n", print_rate);
   \   00000422   0x9A00             LDR      R2,[SP, #+0]
   \   00000424   0x.... 0x....      ADR.W    R1,`?<Constant "M27 %d\\r\\n">`
   \   00000428   0xA80E             ADD      R0,SP,#+56
   \   0000042A   0x.... 0x....      BL       sprintf
   1297          
   1298          						wifi_ret_ack();
   \   0000042E   0x.... 0x....      BL       _Z12wifi_ret_ackv
   1299          
   1300          						send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
   \   00000432   0xA80E             ADD      R0,SP,#+56
   \   00000434   0x.... 0x....      BL       strlen
   \   00000438   0x4601             MOV      R1,R0
   \   0000043A   0xA80E             ADD      R0,SP,#+56
   \   0000043C   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   00000440   0xE23A             B.N      ??wifi_gcode_exec_1
   \   00000442   0xBF00             Nop      
   \                     ??wifi_gcode_exec_26:
   \   00000444   0x31 0x3A          DC8      0x31, 0x3A, 0x00, 0x00
   \              0x00 0x00    
   \   00000448   0x30 0x3A          DC8      0x30, 0x3A, 0x00, 0x00
   \              0x00 0x00    
   \   0000044C   0x2F 0x00          DC8      "/",0x0,0x0
   \              0x00 0x00    
   1301          						
   1302          					}
   1303          					
   1304          					break;
   1305          
   1306          				case 28:
   1307          					#if 1
   1308          					/*begin to transfer file to filesys*/
   1309          					if(mksReprint.mks_printer_state == MKS_IDLE)
   \                     ??wifi_gcode_exec_15: (+1)
   \   00000450   0x.... 0x....      LDR.W    R0,??DataTable60_4
   \   00000454   0xF890 0x00B4      LDRB     R0,[R0, #+180]
   \   00000458   0x28A6             CMP      R0,#+166
   \   0000045A   0xF040 0x822D      BNE.W    ??wifi_gcode_exec_1
   1310          					{
   1311          						
   1312          						int index = 0;
   \   0000045E   0x2600             MOVS     R6,#+0
   \   00000460   0xE000             B.N      ??wifi_gcode_exec_47
   1313          						while(tmpStr[index] == ' ')
   1314          							index++;
   \                     ??wifi_gcode_exec_48: (+1)
   \   00000462   0x1C76             ADDS     R6,R6,#+1
   \                     ??wifi_gcode_exec_47: (+1)
   \   00000464   0x5D70             LDRB     R0,[R6, R5]
   \   00000466   0x2820             CMP      R0,#+32
   \   00000468   0xD0FB             BEQ.N    ??wifi_gcode_exec_48
   1315          
   1316          						if(strstr((char *)&tmpStr[index], ".g") || strstr((char *)&tmpStr[index], ".G"))
   \   0000046A   0xA104             ADR.N    R1,??wifi_gcode_exec_31  ;; 0x2E, 0x67, 0x00, 0x00
   \   0000046C   0x1970             ADDS     R0,R6,R5
   \   0000046E   0x.... 0x....      BL       _Z6strstrPcPKc
   \   00000472   0x2800             CMP      R0,#+0
   \   00000474   0xD10C             BNE.N    ??wifi_gcode_exec_49
   \   00000476   0xA102             ADR.N    R1,??wifi_gcode_exec_31+0x4  ;; 0x2E, 0x47, 0x00, 0x00
   \   00000478   0xE004             B.N      ??wifi_gcode_exec_50
   \   0000047A   0xBF00             Nop      
   \                     ??wifi_gcode_exec_31:
   \   0000047C   0x2E 0x67          DC8      0x2E, 0x67, 0x00, 0x00
   \              0x00 0x00    
   \   00000480   0x2E 0x47          DC8      0x2E, 0x47, 0x00, 0x00
   \              0x00 0x00    
   \                     ??wifi_gcode_exec_50: (+1)
   \   00000484   0x1970             ADDS     R0,R6,R5
   \   00000486   0x.... 0x....      BL       _Z6strstrPcPKc
   \   0000048A   0x2800             CMP      R0,#+0
   \   0000048C   0xF000 0x8214      BEQ.W    ??wifi_gcode_exec_1
   1317          						{
   1318          							FRESULT res;
   1319          							
   1320          							strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
   \                     ??wifi_gcode_exec_49: (+1)
   \   00000490   0x.... 0x....      LDR.W    R7,??DataTable57
   \   00000494   0xF507 0x7803      ADD      R8,R7,#+524
   \   00000498   0x1971             ADDS     R1,R6,R5
   \   0000049A   0x4640             MOV      R0,R8
   \   0000049C   0x.... 0x....      BL       strcpy
   1321          							
   1322          							if(gCfgItems.fileSysType == FILE_SYS_SD)
   \   000004A0   0x.... 0x....      LDR.W    R4,??DataTable60
   \   000004A4   0xF994 0x00BA      LDRSB    R0,[R4, #+186]
   \   000004A8   0x2801             CMP      R0,#+1
   \   000004AA   0xD10B             BNE.N    ??wifi_gcode_exec_51
   1323          							{
   1324          								memset(tempBuf, 0, sizeof(tempBuf));
   \   000004AC   0x2264             MOVS     R2,#+100
   \   000004AE   0x2100             MOVS     R1,#+0
   \   000004B0   0xA80E             ADD      R0,SP,#+56
   \   000004B2   0x.... 0x....      BL       memset
   1325          								sprintf((char *)tempBuf, "1:/%s", file_writer.saveFileName);
   \   000004B6   0x4642             MOV      R2,R8
   \   000004B8   0x.... 0x....      ADR.W    R1,`?<Constant "1:/%s">`
   \   000004BC   0xA80E             ADD      R0,SP,#+56
   \   000004BE   0x.... 0x....      BL       sprintf
   \   000004C2   0xE00E             B.N      ??wifi_gcode_exec_52
   1326          								//MX_SDIO_SD_Init();
   1327          							}
   1328          							else if(gCfgItems.fileSysType == FILE_SYS_USB)
   \                     ??wifi_gcode_exec_51: (+1)
   \   000004C4   0xF994 0x00BA      LDRSB    R0,[R4, #+186]
   \   000004C8   0x2800             CMP      R0,#+0
   \   000004CA   0xD10A             BNE.N    ??wifi_gcode_exec_52
   1329          							{
   1330          								memset(tempBuf, 0, sizeof(tempBuf));
   \   000004CC   0x2264             MOVS     R2,#+100
   \   000004CE   0x2100             MOVS     R1,#+0
   \   000004D0   0xA80E             ADD      R0,SP,#+56
   \   000004D2   0x.... 0x....      BL       memset
   1331          								sprintf((char *)tempBuf, "0:/%s", (char *)file_writer.saveFileName);
   \   000004D6   0x4642             MOV      R2,R8
   \   000004D8   0x.... 0x....      ADR.W    R1,`?<Constant "0:/%s">`
   \   000004DC   0xA80E             ADD      R0,SP,#+56
   \   000004DE   0x.... 0x....      BL       sprintf
   1332          							}
   1333          							mount_file_sys(gCfgItems.fileSysType);
   \                     ??wifi_gcode_exec_52: (+1)
   \   000004E2   0xF894 0x00BA      LDRB     R0,[R4, #+186]
   \   000004E6   0x.... 0x....      BL       _Z14mount_file_sysh
   1334          							
   1335          							res = f_open(&save_File, (char *)tempBuf, FA_CREATE_ALWAYS | FA_WRITE);
   1336          						//	strcat(tempBuf, ".cpr");
   1337          						//	res = f_open(&file_brp, tempBuf, FA_CREATE_ALWAYS | FA_WRITE);
   1338          							
   1339          							if(res == FR_OK)
   \   000004EA   0x.... 0x....      LDR.W    R4,??DataTable65
   \   000004EE   0x220A             MOVS     R2,#+10
   \   000004F0   0xA90E             ADD      R1,SP,#+56
   \   000004F2   0xF507 0x700E      ADD      R0,R7,#+568
   \   000004F6   0x.... 0x....      BL       f_open
   \   000004FA   0x2800             CMP      R0,#+0
   \   000004FC   0xD123             BNE.N    ??wifi_gcode_exec_53
   1340          							{
   1341          								memset(file_writer.saveFileName, 0, sizeof(file_writer.saveFileName));
   \   000004FE   0x221E             MOVS     R2,#+30
   \   00000500   0x2100             MOVS     R1,#+0
   \   00000502   0x4640             MOV      R0,R8
   \   00000504   0x.... 0x....      BL       memset
   1342          								strcpy((char *)file_writer.saveFileName, (char *)&tmpStr[index]);
   \   00000508   0x1971             ADDS     R1,R6,R5
   \   0000050A   0x4640             MOV      R0,R8
   \   0000050C   0x.... 0x....      BL       strcpy
   1343          								memset(tempBuf, 0, sizeof(tempBuf));
   \   00000510   0x2264             MOVS     R2,#+100
   \   00000512   0x2100             MOVS     R1,#+0
   \   00000514   0xA80E             ADD      R0,SP,#+56
   \   00000516   0x.... 0x....      BL       memset
   1344          								sprintf((char *)tempBuf, "Writing to file: %s\r\n", (char *)file_writer.saveFileName);
   \   0000051A   0x4642             MOV      R2,R8
   \   0000051C   0x.... 0x....      ADR.W    R1,`?<Constant "Writing to file: %s\\r\\n">`
   \   00000520   0xA80E             ADD      R0,SP,#+56
   \   00000522   0x.... 0x....      BL       sprintf
   1345          								wifi_ret_ack();
   \   00000526   0x.... 0x....      BL       _Z12wifi_ret_ackv
   1346          								send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
   \   0000052A   0xA80E             ADD      R0,SP,#+56
   \   0000052C   0x.... 0x....      BL       strlen
   \   00000530   0x4601             MOV      R1,R0
   \   00000532   0xA80E             ADD      R0,SP,#+56
   \   00000534   0x.... 0x....      BL       _Z12send_to_wifiPci
   1347          
   1348          								total_write = 0;	
   \   00000538   0x2000             MOVS     R0,#+0
   \   0000053A   0x.... 0x....      LDR.W    R1,??DataTable65_1
   \   0000053E   0x6688             STR      R0,[R1, #+104]
   1349          								wifi_link_state = WIFI_WAIT_TRANS_START;
   \   00000540   0x200F             MOVS     R0,#+15
   \   00000542   0x7020             STRB     R0,[R4, #+0]
   \   00000544   0xE1B8             B.N      ??wifi_gcode_exec_1
   1350          								
   1351          							}
   1352          							else
   1353          							{
   1354          								wifi_link_state = WIFI_CONNECTED;
   \                     ??wifi_gcode_exec_53: (+1)
   \   00000546   0x200E             MOVS     R0,#+14
   \   00000548   0x7020             STRB     R0,[R4, #+0]
   1355          								clear_cur_ui();
   \   0000054A   0x.... 0x....      BL       clear_cur_ui
   1356          								draw_dialog_filetransfer(2);
   \   0000054E   0x2002             MOVS     R0,#+2
   \   00000550   0x.... 0x....      BL       draw_dialog_filetransfer
   \   00000554   0xE1B0             B.N      ??wifi_gcode_exec_1
   1357          							}
   1358          						
   1359          						}
   1360          							
   1361          						
   1362          						//wifi_ret_ack();
   1363          					}
   1364          					#endif
   1365          					break;
   1366          				
   1367          				
   1368          				case 105:
   1369          				case 991:
   1370          					memset(tempBuf, 0, sizeof(tempBuf));
   \                     ??wifi_gcode_exec_16: (+1)
   \   00000556   0x2264             MOVS     R2,#+100
   \   00000558   0x2100             MOVS     R1,#+0
   \   0000055A   0xA80E             ADD      R0,SP,#+56
   \   0000055C   0x.... 0x....      BL       memset
   1371          					if(cmd_value == 105)
   \   00000560   0x.... 0x....      LDR.W    R11,??DataTable65_2
   \   00000564   0x.... 0x....      LDR.W    R10,??DataTable65_3
   \   00000568   0x.... 0x....      LDR.W    R8,??DataTable65_4
   \   0000056C   0x.... 0x....      LDR.W    R9,??DataTable65_5
   \   00000570   0x2F69             CMP      R7,#+105
   \   00000572   0xD13C             BNE.N    ??wifi_gcode_exec_54
   1372          					{
   1373          						send_to_wifi("ok\r\n", strlen("ok\r\n"));
   \   00000574   0x2104             MOVS     R1,#+4
   \   00000576   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   0000057A   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   0000057E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000582   0x.... 0x....      BL       __aeabi_i2f
   \   00000586   0x.... 0x....      BL       __aeabi_f2d
   \   0000058A   0x4606             MOV      R6,R0
   \   0000058C   0x460F             MOV      R7,R1
   \   0000058E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000592   0x.... 0x....      BL       __aeabi_f2d
   \   00000596   0x4604             MOV      R4,R0
   \   00000598   0x460D             MOV      R5,R1
   \   0000059A   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \   0000059E   0x.... 0x....      BL       __aeabi_i2f
   \   000005A2   0x.... 0x....      BL       __aeabi_f2d
   \   000005A6   0xE9CD 0x010C      STRD     R0,R1,[SP, #+48]
   \   000005AA   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   000005AE   0x.... 0x....      BL       __aeabi_f2d
   \   000005B2   0xE9CD 0x010A      STRD     R0,R1,[SP, #+40]
   \   000005B6   0xE9CD 0x6708      STRD     R6,R7,[SP, #+32]
   \   000005BA   0xE9CD 0x4506      STRD     R4,R5,[SP, #+24]
   \   000005BE   0xF9BA 0x0000      LDRSH    R0,[R10, #+0]
   \   000005C2   0x.... 0x....      BL       __aeabi_i2f
   \   000005C6   0x.... 0x....      BL       __aeabi_f2d
   \   000005CA   0xE9CD 0x0104      STRD     R0,R1,[SP, #+16]
   \   000005CE   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000005D2   0x.... 0x....      BL       __aeabi_f2d
   \   000005D6   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   000005DA   0xE9CD 0x6700      STRD     R6,R7,[SP, #+0]
   \   000005DE   0x4622             MOV      R2,R4
   \   000005E0   0x462B             MOV      R3,R5
   \   000005E2   0x.... 0x....      ADR.W    R1,`?<Constant "T:%.1f /%.1f B:%.1f /...">`
   \   000005E6   0xA80E             ADD      R0,SP,#+56
   1374          						sprintf((char *)tempBuf,"T:%.1f /%.1f B:%.1f /%.1f T0:%.1f /%.1f T1:%.1f /%.1f @:0 B@:0\r\n",
   1375          						/*
   1376          						gCfgItems.curSprayerTemp[0], gCfgItems.desireSprayerTemp[0], gCfgItems.curBedTemp, gCfgItems.desireBedTemp,
   1377          						gCfgItems.curSprayerTemp[0], gCfgItems.desireSprayerTemp[0], gCfgItems.curSprayerTemp[1], gCfgItems.desireSprayerTemp[1]
   1378          						*/
   1379          						thermalManager.current_temperature[0],(float)thermalManager.target_temperature[0],
   1380          						thermalManager.current_temperature_bed,(float)thermalManager.target_temperature_bed,
   1381          						thermalManager.current_temperature[0],(float)thermalManager.target_temperature[0],
   1382          						thermalManager.current_temperature[1],(float)thermalManager.target_temperature[1]
   1383          						);
   \   000005E8   0x.... 0x....      BL       sprintf
   \   000005EC   0xE01F             B.N      ??wifi_gcode_exec_55
   1384          					}
   \                     ??wifi_gcode_exec_54: (+1)
   \   000005EE   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   000005F2   0x.... 0x....      BL       __aeabi_f2iz
   \   000005F6   0x4604             MOV      R4,R0
   \   000005F8   0xF8D9 0x5000      LDR      R5,[R9, #+0]
   \   000005FC   0xF8D9 0x0004      LDR      R0,[R9, #+4]
   \   00000600   0x9005             STR      R0,[SP, #+20]
   \   00000602   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   00000606   0x.... 0x....      BL       __aeabi_f2iz
   \   0000060A   0x9004             STR      R0,[SP, #+16]
   \   0000060C   0x9503             STR      R5,[SP, #+12]
   \   0000060E   0x9402             STR      R4,[SP, #+8]
   \   00000610   0xF9BA 0x0000      LDRSH    R0,[R10, #+0]
   \   00000614   0x9001             STR      R0,[SP, #+4]
   \   00000616   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   0000061A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000061E   0x9000             STR      R0,[SP, #+0]
   \   00000620   0x462B             MOV      R3,R5
   \   00000622   0x4622             MOV      R2,R4
   \   00000624   0x.... 0x....      ADR.W    R1,`?<Constant "T:%d /%d B:%d /%d T0:...">`
   \   00000628   0xA80E             ADD      R0,SP,#+56
   1385          					else
   1386          					{
   1387          						sprintf((char *)tempBuf,"T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\r\n", 
   1388          							/*
   1389          						(int)gCfgItems.curSprayerTemp[0], (int)gCfgItems.desireSprayerTemp[0], (int)gCfgItems.curBedTemp, (int)gCfgItems.desireBedTemp,
   1390          						(int)gCfgItems.curSprayerTemp[0], (int)gCfgItems.desireSprayerTemp[0], (int)gCfgItems.curSprayerTemp[1], (int)gCfgItems.desireSprayerTemp[1]
   1391          						*/
   1392          						(int)thermalManager.current_temperature[0],(int)thermalManager.target_temperature[0],
   1393          						(int)thermalManager.current_temperature_bed,(int)thermalManager.target_temperature_bed,
   1394          						(int)thermalManager.current_temperature[0],(int)thermalManager.target_temperature[0],
   1395          						(int)thermalManager.current_temperature[1],(int)thermalManager.target_temperature[1]
   1396          						);
   \   0000062A   0x.... 0x....      BL       sprintf
   1397          					}
   1398          
   1399          					send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));
   \                     ??wifi_gcode_exec_55: (+1)
   \   0000062E   0xA80E             ADD      R0,SP,#+56
   \   00000630   0x.... 0x....      BL       strlen
   \   00000634   0x4601             MOV      R1,R0
   \   00000636   0xA80E             ADD      R0,SP,#+56
   \   00000638   0x.... 0x....      BL       _Z12send_to_wifiPci
   1400          					
   1401          					//???????????
   1402          					//pushFIFO(&gcodeCmdTxFIFO,(unsigned char *)GET_CUR_TEM_COMMAND);
   1403          					enqueue_and_echo_commands_P(PSTR("M105\n"));
   \   0000063C   0x.... 0x....      ADR.W    R0,`?<Constant "M105\\n">`
   \   00000640   0x.... 0x....      BL       _Z27enqueue_and_echo_commands_PPKc
   1404          					//usart2Data.prWaitStatus = pr_wait_idle;
   1405          					
   1406          					break;
   \   00000644   0xE138             B.N      ??wifi_gcode_exec_1
   1407          
   1408          				case 110:
   1409          					#if tan
   1410          					if((gCfgItems.wifi_type == HLK_WIFI) && (wifi_link_state == WIFI_WAIT_TRANS_START))
   1411          					{
   1412          						
   1413          						wifi_link_state = WIFI_TRANS_FILE;
   1414          						file_writer.write_index = 0;
   1415          						file_writer.file = &save_File;
   1416          						send_to_wifi("M110 OK\r\n", strlen("M110 OK\r\n"));
   1417          						wifi_ret_ack();
   1418          						//wifi_loop_cycle = 2;
   1419          						wifi_loop_cycle = 50;
   1420          						
   1421          						clear_cur_ui();
   1422          						draw_filetansfer(0);
   1423          						
   1424          					}
   1425          					else
   1426          					#endif
   1427          					{
   1428          						strcat((char *)cmd_line, "\n");
   \                     ??wifi_gcode_exec_17: (+1)
   \   00000646   0x4631             MOV      R1,R6
   \   00000648   0x4620             MOV      R0,R4
   \   0000064A   0x.... 0x....      BL       strcat
   1429          						//pushFIFO(&gcodeCmdTxFIFO, cmd_line);
   1430          						enqueue_and_echo_commands_P(PSTR((char*)cmd_line));
   \   0000064E   0x4620             MOV      R0,R4
   \   00000650   0x.... 0x....      BL       _Z27enqueue_and_echo_commands_PPKc
   1431          						send_to_wifi("ok\r\n", strlen("ok\r\n"));
   \   00000654   0x2104             MOVS     R1,#+4
   \   00000656   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   0000065A   0x.... 0x....      BL       _Z12send_to_wifiPci
   1432          					}
   1433          					break;
   \   0000065E   0xE12B             B.N      ??wifi_gcode_exec_1
   1434          				case 992:
   1435          					if((mksReprint.mks_printer_state == MKS_WORKING) || (mksReprint.mks_printer_state == MKS_PAUSED))
   \                     ??wifi_gcode_exec_19: (+1)
   \   00000660   0x.... 0x....      LDR.W    R4,??DataTable60_4
   \   00000664   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   00000668   0x28A7             CMP      R0,#+167
   \   0000066A   0xD002             BEQ.N    ??wifi_gcode_exec_56
   \   0000066C   0x28AA             CMP      R0,#+170
   \   0000066E   0xF040 0x8123      BNE.W    ??wifi_gcode_exec_1
   1436          					{
   1437          						memset(tempBuf,0,sizeof(tempBuf));
   \                     ??wifi_gcode_exec_56: (+1)
   \   00000672   0x2264             MOVS     R2,#+100
   \   00000674   0x2100             MOVS     R1,#+0
   \   00000676   0xA80E             ADD      R0,SP,#+56
   \   00000678   0x.... 0x....      BL       memset
   1438          						sprintf((char *)tempBuf, "M992 %d%d:%d%d:%d%d\r\n", print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10,	print_time.seconds/10, print_time.seconds%10);
   \   0000067C   0x.... 0x....      LDR.W    R1,??DataTable66
   \   00000680   0xF991 0x3005      LDRSB    R3,[R1, #+5]
   \   00000684   0xF991 0x4005      LDRSB    R4,[R1, #+5]
   \   00000688   0x7908             LDRB     R0,[R1, #+4]
   \   0000068A   0x8849             LDRH     R1,[R1, #+2]
   \   0000068C   0x220A             MOVS     R2,#+10
   \   0000068E   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \   00000692   0x250A             MOVS     R5,#+10
   \   00000694   0xFB90 0xF5F5      SDIV     R5,R0,R5
   \   00000698   0x260A             MOVS     R6,#+10
   \   0000069A   0x4637             MOV      R7,R6
   \   0000069C   0xFB93 0xF7F7      SDIV     R7,R3,R7
   \   000006A0   0xFB06 0x3317      MLS      R3,R6,R7,R3
   \   000006A4   0x9303             STR      R3,[SP, #+12]
   \   000006A6   0x4633             MOV      R3,R6
   \   000006A8   0xFB94 0xF3F3      SDIV     R3,R4,R3
   \   000006AC   0x9302             STR      R3,[SP, #+8]
   \   000006AE   0xFB06 0x0015      MLS      R0,R6,R5,R0
   \   000006B2   0x9001             STR      R0,[SP, #+4]
   \   000006B4   0x9500             STR      R5,[SP, #+0]
   \   000006B6   0xFB06 0x1312      MLS      R3,R6,R2,R1
   \   000006BA   0x.... 0x....      ADR.W    R1,`?<Constant "M992 %d%d:%d%d:%d%d\\r\\n">`
   \   000006BE   0xA80E             ADD      R0,SP,#+56
   \   000006C0   0x.... 0x....      BL       sprintf
   1439          						wifi_ret_ack();
   \   000006C4   0x.... 0x....      BL       _Z12wifi_ret_ackv
   1440          						send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));	
   \   000006C8   0xA80E             ADD      R0,SP,#+56
   \   000006CA   0x.... 0x....      BL       strlen
   \   000006CE   0x4601             MOV      R1,R0
   \   000006D0   0xA80E             ADD      R0,SP,#+56
   \   000006D2   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   000006D6   0xE0EF             B.N      ??wifi_gcode_exec_1
   1441          					}
   1442          											
   1443          					break;
   1444          				case 994:
   1445          					if((mksReprint.mks_printer_state == MKS_WORKING) || (mksReprint.mks_printer_state == MKS_PAUSED))
   \                     ??wifi_gcode_exec_20: (+1)
   \   000006D8   0x.... 0x....      LDR.W    R4,??DataTable60_4
   \   000006DC   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   000006E0   0x28A7             CMP      R0,#+167
   \   000006E2   0xD002             BEQ.N    ??wifi_gcode_exec_57
   \   000006E4   0x28AA             CMP      R0,#+170
   \   000006E6   0xF040 0x80E7      BNE.W    ??wifi_gcode_exec_1
   1446          					{
   1447          						memset(tempBuf,0,sizeof(tempBuf));
   \                     ??wifi_gcode_exec_57: (+1)
   \   000006EA   0x2264             MOVS     R2,#+100
   \   000006EC   0x2100             MOVS     R1,#+0
   \   000006EE   0xA80E             ADD      R0,SP,#+56
   \   000006F0   0x.... 0x....      BL       memset
   1448          						if(strlen((char *)curFileName) > (100-1))
   \   000006F4   0x....             LDR.N    R6,??DataTable56_2
   \   000006F6   0x4630             MOV      R0,R6
   \   000006F8   0x.... 0x....      BL       strlen
   \   000006FC   0x2864             CMP      R0,#+100
   \   000006FE   0xF080 0x80DB      BCS.W    ??wifi_gcode_exec_1
   1449          						{
   1450          							return;
   1451          						}
   1452          						sprintf((char *)tempBuf, "M994 %s;%d\n", curFileName, f_size(srcfp));
   \   00000702   0x.... 0x....      LDR.W    R0,??DataTable68
   \   00000706   0x6800             LDR      R0,[R0, #+0]
   \   00000708   0xF8D0 0x320C      LDR      R3,[R0, #+524]
   \   0000070C   0x4632             MOV      R2,R6
   \   0000070E   0x.... 0x....      ADR.W    R1,`?<Constant "M994 %s;%d\\n">`
   \   00000712   0xA80E             ADD      R0,SP,#+56
   \   00000714   0x.... 0x....      BL       sprintf
   1453          						wifi_ret_ack();
   \   00000718   0x.... 0x....      BL       _Z12wifi_ret_ackv
   1454          						send_to_wifi((char *)tempBuf, strlen((char *)tempBuf));	
   \   0000071C   0xA80E             ADD      R0,SP,#+56
   \   0000071E   0x.... 0x....      BL       strlen
   \   00000722   0x4601             MOV      R1,R0
   \   00000724   0xA80E             ADD      R0,SP,#+56
   \   00000726   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   0000072A   0xE0C5             B.N      ??wifi_gcode_exec_1
   1455          					}
   1456          					break;
   1457          				case 997:
   1458          					if(mksReprint.mks_printer_state == MKS_IDLE)
   \                     ??wifi_gcode_exec_21: (+1)
   \   0000072C   0x.... 0x....      LDR.W    R4,??DataTable60_4
   \   00000730   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   00000734   0x28A6             CMP      R0,#+166
   \   00000736   0xD107             BNE.N    ??wifi_gcode_exec_58
   1459          					{
   1460          						wifi_ret_ack();
   \   00000738   0x.... 0x....      BL       _Z12wifi_ret_ackv
   1461          						send_to_wifi("M997 IDLE\r\n", strlen("M997 IDLE\r\n"));
   \   0000073C   0x210B             MOVS     R1,#+11
   \   0000073E   0x.... 0x....      ADR.W    R0,`?<Constant "M997 IDLE\\r\\n">`
   \   00000742   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   00000746   0xE0B7             B.N      ??wifi_gcode_exec_1
   1462          					}
   1463          					else if(mksReprint.mks_printer_state == MKS_WORKING)
   \                     ??wifi_gcode_exec_58: (+1)
   \   00000748   0x28A7             CMP      R0,#+167
   \   0000074A   0xD107             BNE.N    ??wifi_gcode_exec_59
   1464          					{
   1465          						wifi_ret_ack();
   \   0000074C   0x.... 0x....      BL       _Z12wifi_ret_ackv
   1466          						send_to_wifi("M997 PRINTING\r\n", strlen("M997 PRINTING\r\n"));
   \   00000750   0x210F             MOVS     R1,#+15
   \   00000752   0x.... 0x....      ADR.W    R0,`?<Constant "M997 PRINTING\\r\\n">`
   \   00000756   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   0000075A   0xE0AD             B.N      ??wifi_gcode_exec_1
   1467          					}
   1468          					else if(mksReprint.mks_printer_state == MKS_PAUSED)
   \                     ??wifi_gcode_exec_59: (+1)
   \   0000075C   0x28AA             CMP      R0,#+170
   \   0000075E   0xD002             BEQ.N    ??wifi_gcode_exec_60
   1469          					{
   1470          						wifi_ret_ack();
   1471          						send_to_wifi("M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
   1472          					}
   1473          					else if(mksReprint.mks_printer_state == MKS_REPRINTED)
   \   00000760   0x28AC             CMP      R0,#+172
   \   00000762   0xF040 0x80A9      BNE.W    ??wifi_gcode_exec_1
   1474          					{
   1475          						wifi_ret_ack();
   \                     ??wifi_gcode_exec_60: (+1)
   \   00000766   0x.... 0x....      BL       _Z12wifi_ret_ackv
   1476          						send_to_wifi("M997 PAUSE\r\n", strlen("M997 PAUSE\r\n"));
   \   0000076A   0x210C             MOVS     R1,#+12
   \   0000076C   0x.... 0x....      ADR.W    R0,`?<Constant "M997 PAUSE\\r\\n">`
   \   00000770   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   00000774   0xE0A0             B.N      ??wifi_gcode_exec_1
   1477          					}								
   1478          					break;
   1479          
   1480          				case 998:
   1481          					if(mksReprint.mks_printer_state == MKS_IDLE)
   \                     ??wifi_gcode_exec_22: (+1)
   \   00000776   0x.... 0x....      LDR.W    R0,??DataTable60_4
   \   0000077A   0xF890 0x00B4      LDRB     R0,[R0, #+180]
   \   0000077E   0x28A6             CMP      R0,#+166
   \   00000780   0xF040 0x809A      BNE.W    ??wifi_gcode_exec_1
   1482          					{
   1483          						if(atoi((char *)tmpStr) == 0)
   \   00000784   0x4628             MOV      R0,R5
   \   00000786   0x.... 0x....      BL       atoi
   \   0000078A   0x2800             CMP      R0,#+0
   \   0000078C   0xD103             BNE.N    ??wifi_gcode_exec_61
   1484          						{
   1485          							set_cur_file_sys(0);
   \   0000078E   0x2000             MOVS     R0,#+0
   \   00000790   0x.... 0x....      BL       _Z16set_cur_file_sysi
   \   00000794   0xE007             B.N      ??wifi_gcode_exec_62
   1486          						}
   1487          						else if(atoi((char *)tmpStr) == 1)
   \                     ??wifi_gcode_exec_61: (+1)
   \   00000796   0x4628             MOV      R0,R5
   \   00000798   0x.... 0x....      BL       atoi
   \   0000079C   0x2801             CMP      R0,#+1
   \   0000079E   0xD102             BNE.N    ??wifi_gcode_exec_62
   1488          						{
   1489          							set_cur_file_sys(1);
   \   000007A0   0x2001             MOVS     R0,#+1
   \   000007A2   0x.... 0x....      BL       _Z16set_cur_file_sysi
   1490          						}
   1491          						wifi_ret_ack();
   \                     ??wifi_gcode_exec_62: (+1)
   \   000007A6   0x.... 0x....      BL       _Z12wifi_ret_ackv
   \   000007AA   0xE085             B.N      ??wifi_gcode_exec_1
   1492          					}
   1493          					break;
   1494          
   1495          				case 115:
   1496          					memset(tempBuf,0,sizeof(tempBuf));
   \                     ??wifi_gcode_exec_18: (+1)
   \   000007AC   0x2264             MOVS     R2,#+100
   \   000007AE   0x2100             MOVS     R1,#+0
   \   000007B0   0xA80E             ADD      R0,SP,#+56
   \   000007B2   0x.... 0x....      BL       memset
   1497          					send_to_wifi("ok\r\n", strlen("ok\r\n"));
   \   000007B6   0x2104             MOVS     R1,#+4
   \   000007B8   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   000007BC   0x.... 0x....      BL       _Z12send_to_wifiPci
   1498          					#if defined(STM32F10X_CL)
   1499          					send_to_wifi("FIRMWARE_NAME:TFT28/32\r\n", strlen("FIRMWARE_NAME:TFT28/32\r\n"));	
   1500          					#elif defined(STM32F10X_HD)
   1501          					send_to_wifi("FIRMWARE_NAME:TFT24\r\n", strlen("FIRMWARE_NAME:TFT24\r\n"));
   \   000007C0   0x2115             MOVS     R1,#+21
   \   000007C2   0x.... 0x....      ADR.W    R0,`?<Constant "FIRMWARE_NAME:TFT24\\r\\n">`
   \   000007C6   0x.... 0x....      BL       _Z12send_to_wifiPci
   1502          					#else
   1503          					send_to_wifi("FIRMWARE_NAME:TFT70\r\n", strlen("FIRMWARE_NAME:TFT70\r\n"));					
   1504          					#endif
   1505          				
   1506          					break;
   \   000007CA   0xE075             B.N      ??wifi_gcode_exec_1
   1507          
   1508          				default:
   1509          					strcat((char *)cmd_line, "\n");
   \                     ??wifi_gcode_exec_23: (+1)
   \   000007CC   0x4631             MOV      R1,R6
   \   000007CE   0x4620             MOV      R0,R4
   \   000007D0   0x.... 0x....      BL       strcat
   1510          					#if 0//tan_mask
   1511          					if(checkFIFO(&gcodeCmdTxFIFO) != fifo_full)
   1512          					{
   1513          						left_to_send = 0;
   1514          						pushFIFO(&gcodeCmdTxFIFO, cmd_line);
   1515          						send_to_wifi("ok\r\n", strlen("ok\r\n"));
   1516          					}
   1517          					else
   1518          					{
   1519          						if(strlen((char *)cmd_line) < sizeof(left_to_save))
   1520          						{
   1521          							memset(left_to_save, 0, sizeof(left_to_save));
   1522          							strcpy((char *)left_to_save, (char *)cmd_line);
   1523          							left_to_send = 1;
   1524          						}
   1525          					}
   1526          					#endif
   1527                              if(commands_in_queue < BUFSIZE)
   \   000007D4   0x.... 0x....      LDR.W    R0,??DataTable68_1
   \   000007D8   0x7800             LDRB     R0,[R0, #+0]
   \   000007DA   0x2804             CMP      R0,#+4
   \   000007DC   0xDB33             BLT.N    ??wifi_gcode_exec_63
   1528                              {
   1529          				        enqueue_and_echo_commands_P(PSTR((char*)cmd_line));
   1530          					    send_to_wifi("ok\r\n", strlen("ok\r\n"));                    
   1531                              }
   1532                              else
   1533                              {
   1534              					uint32_t left;
   1535          
   1536              					if(serial_wait_tick > 5)
   \   000007DE   0x.... 0x....      LDR.W    R0,??DataTable68_2
   \   000007E2   0x7800             LDRB     R0,[R0, #+0]
   \   000007E4   0x2806             CMP      R0,#+6
   \   000007E6   0xDB67             BLT.N    ??wifi_gcode_exec_1
   1537              					{
   1538          
   1539              						if(espGcodeFifo.r >  espGcodeFifo.w)
   \   000007E8   0x.... 0x....      LDR.W    R5,??DataTable65_1
   \   000007EC   0x6E28             LDR      R0,[R5, #+96]
   \   000007EE   0x6E69             LDR      R1,[R5, #+100]
   \   000007F0   0x4281             CMP      R1,R0
   \   000007F2   0xD202             BCS.N    ??wifi_gcode_exec_64
   1540              							left =  espGcodeFifo.r - espGcodeFifo.w - 1;
   \   000007F4   0x1A40             SUBS     R0,R0,R1
   \   000007F6   0x1E46             SUBS     R6,R0,#+1
   \   000007F8   0xE002             B.N      ??wifi_gcode_exec_65
   1541              						else
   1542              							left = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
   \                     ??wifi_gcode_exec_64: (+1)
   \   000007FA   0x3060             ADDS     R0,R0,#+96
   \   000007FC   0x1A40             SUBS     R0,R0,R1
   \   000007FE   0x1E46             SUBS     R6,R0,#+1
   1543              						if(left >= strlen((const char *)cmd_line))
   \                     ??wifi_gcode_exec_65: (+1)
   \   00000800   0x4620             MOV      R0,R4
   \   00000802   0x.... 0x....      BL       strlen
   \   00000806   0x4286             CMP      R6,R0
   \   00000808   0xD351             BCC.N    ??wifi_gcode_exec_9
   1544              						{
   1545              							uint32_t index = 0;
   \   0000080A   0x2600             MOVS     R6,#+0
   1546              							while(index < strlen((const char *)cmd_line))
   \                     ??wifi_gcode_exec_66: (+1)
   \   0000080C   0x4620             MOV      R0,R4
   \   0000080E   0x.... 0x....      BL       strlen
   \   00000812   0x4286             CMP      R6,R0
   \   00000814   0xD24B             BCS.N    ??wifi_gcode_exec_9
   1547              							{
   1548              								espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
   \   00000816   0x5D30             LDRB     R0,[R6, R4]
   \   00000818   0x6E69             LDR      R1,[R5, #+100]
   \   0000081A   0x5548             STRB     R0,[R1, R5]
   1549              								espGcodeFifo.w =  (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
   \   0000081C   0x6E68             LDR      R0,[R5, #+100]
   \   0000081E   0x1C40             ADDS     R0,R0,#+1
   \   00000820   0x2160             MOVS     R1,#+96
   \   00000822   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000826   0xEB01 0x0241      ADD      R2,R1,R1, LSL #+1
   \   0000082A   0xEBA0 0x1042      SUB      R0,R0,R2, LSL #+5
   \   0000082E   0x6668             STR      R0,[R5, #+100]
   1550              								index++;
   \   00000830   0x1C76             ADDS     R6,R6,#+1
   \   00000832   0xE7EB             B.N      ??wifi_gcode_exec_66
   1551              							}
   1552              						}
   1553                                      send_to_wifi("ok\r\n", strlen("ok\r\n"));  
   1554              					}
   1555                               }
   1556          					break;
   1557          					
   1558          			}
   1559          		}
   1560          		else
   1561          		{
   1562          			
   1563          			//
   1564          			{
   1565          				#if 0//tan_mask
   1566          				tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "G");
   1567          				if( tmpStr)
   1568          				{
   1569          					if(printerStaus == pr_pause)
   1570          					{
   1571          						if((*(tmpStr+3)=='X')||(*(tmpStr+3)=='Y')||(*(tmpStr+3)=='Z'))
   1572          						{
   1573          							positionSaveFlag = 1;
   1574          						}
   1575          					}
   1576          				}
   1577          				#endif
   1578          				strcat((char *)cmd_line, "\n");
   \                     ??wifi_gcode_exec_6: (+1)
   \   00000834   0x4631             MOV      R1,R6
   \   00000836   0x4620             MOV      R0,R4
   \   00000838   0x.... 0x....      BL       strcat
   1579          				#if 0//tan_mask
   1580          				if(checkFIFO(&gcodeCmdTxFIFO) != fifo_full)
   1581          				{
   1582          					left_to_send = 0;
   1583          					pushFIFO(&gcodeCmdTxFIFO, cmd_line);
   1584          					send_to_wifi("ok\r\n", strlen("ok\r\n"));
   1585          				}
   1586          				else
   1587          				{
   1588          					if(strlen((char *)cmd_line) < sizeof(left_to_save))
   1589          					{
   1590          						memset(left_to_save, 0, sizeof(left_to_save));
   1591          						strcpy((char *)left_to_save, (char *)cmd_line);
   1592          						left_to_send = 1;
   1593          					}
   1594          				}
   1595          				#endif
   1596          				uint32_t left_g;
   1597                          if(commands_in_queue < BUFSIZE)
   \   0000083C   0x.... 0x....      LDR.W    R0,??DataTable68_1
   \   00000840   0x7800             LDRB     R0,[R0, #+0]
   \   00000842   0x2804             CMP      R0,#+4
   \   00000844   0xDA08             BGE.N    ??wifi_gcode_exec_67
   1598                          {
   1599          				    enqueue_and_echo_commands_P(PSTR((char*)cmd_line));
   \                     ??wifi_gcode_exec_63: (+1)
   \   00000846   0x4620             MOV      R0,R4
   \   00000848   0x.... 0x....      BL       _Z27enqueue_and_echo_commands_PPKc
   1600          					send_to_wifi("ok\r\n", strlen("ok\r\n"));                    
   \   0000084C   0x2104             MOVS     R1,#+4
   \   0000084E   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   00000852   0x.... 0x....      BL       _Z12send_to_wifiPci
   \   00000856   0xE02F             B.N      ??wifi_gcode_exec_1
   1601                          }
   1602                          else
   1603                          {
   1604              				if(serial_wait_tick > 5)
   \                     ??wifi_gcode_exec_67: (+1)
   \   00000858   0x.... 0x....      LDR.W    R0,??DataTable68_2
   \   0000085C   0x7800             LDRB     R0,[R0, #+0]
   \   0000085E   0x2806             CMP      R0,#+6
   \   00000860   0xDB2A             BLT.N    ??wifi_gcode_exec_1
   1605              				{
   1606          
   1607              					if(espGcodeFifo.r >  espGcodeFifo.w)
   \   00000862   0x.... 0x....      LDR.W    R5,??DataTable65_1
   \   00000866   0x6E28             LDR      R0,[R5, #+96]
   \   00000868   0x6E69             LDR      R1,[R5, #+100]
   \   0000086A   0x4281             CMP      R1,R0
   \   0000086C   0xD202             BCS.N    ??wifi_gcode_exec_68
   1608              						left_g =  espGcodeFifo.r - espGcodeFifo.w - 1;
   \   0000086E   0x1A40             SUBS     R0,R0,R1
   \   00000870   0x1E46             SUBS     R6,R0,#+1
   \   00000872   0xE002             B.N      ??wifi_gcode_exec_69
   1609              					else
   1610              						left_g = WIFI_GCODE_BUFFER_SIZE + espGcodeFifo.r - espGcodeFifo.w - 1;
   \                     ??wifi_gcode_exec_68: (+1)
   \   00000874   0x3060             ADDS     R0,R0,#+96
   \   00000876   0x1A40             SUBS     R0,R0,R1
   \   00000878   0x1E46             SUBS     R6,R0,#+1
   1611              					if(left_g >= strlen((const char *)cmd_line))
   \                     ??wifi_gcode_exec_69: (+1)
   \   0000087A   0x4620             MOV      R0,R4
   \   0000087C   0x.... 0x....      BL       strlen
   \   00000880   0x4286             CMP      R6,R0
   \   00000882   0xD314             BCC.N    ??wifi_gcode_exec_9
   1612              					{
   1613              						uint32_t index = 0;
   \   00000884   0x2600             MOVS     R6,#+0
   \   00000886   0xE00D             B.N      ??wifi_gcode_exec_70
   1614              						while(index < strlen((const char *)cmd_line))
   1615              						{
   1616              							espGcodeFifo.Buffer[espGcodeFifo.w] = cmd_line[index] ;
   \                     ??wifi_gcode_exec_71: (+1)
   \   00000888   0x5D30             LDRB     R0,[R6, R4]
   \   0000088A   0x6E69             LDR      R1,[R5, #+100]
   \   0000088C   0x5548             STRB     R0,[R1, R5]
   1617              							espGcodeFifo.w =  (espGcodeFifo.w + 1) % WIFI_GCODE_BUFFER_SIZE;
   \   0000088E   0x6E68             LDR      R0,[R5, #+100]
   \   00000890   0x1C40             ADDS     R0,R0,#+1
   \   00000892   0x2160             MOVS     R1,#+96
   \   00000894   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   00000898   0xEB01 0x0241      ADD      R2,R1,R1, LSL #+1
   \   0000089C   0xEBA0 0x1042      SUB      R0,R0,R2, LSL #+5
   \   000008A0   0x6668             STR      R0,[R5, #+100]
   1618              							index++;
   \   000008A2   0x1C76             ADDS     R6,R6,#+1
   1619              						}
   \                     ??wifi_gcode_exec_70: (+1)
   \   000008A4   0x4620             MOV      R0,R4
   \   000008A6   0x.... 0x....      BL       strlen
   \   000008AA   0x4286             CMP      R6,R0
   \   000008AC   0xD3EC             BCC.N    ??wifi_gcode_exec_71
   1620              					}
   1621                                  send_to_wifi("ok\r\n", strlen("ok\r\n"));  
   \                     ??wifi_gcode_exec_9: (+1)
   \   000008AE   0x2104             MOVS     R1,#+4
   \   000008B0   0x.... 0x....      ADR.W    R0,`?<Constant "ok\\r\\n">`
   \   000008B4   0x.... 0x....      BL       _Z12send_to_wifiPci
   1622              				}	
   1623                           }
   1624          			}
   1625          		}
   1626          	}
   1627          }
   \                     ??wifi_gcode_exec_1: (+1)
   \   000008B8   0xF50D 0x7D33      ADD      SP,SP,#+716
   \   000008BC   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1628          
   1629          /*????????????????,?0??,???????-1*/

   \                                 In section .text, align 2, keep-with-next
   1630          static int32_t charAtArray(const uint8_t *_array, uint32_t _arrayLen, uint8_t _char)
   1631          {
   \                     _Z11charAtArrayPKhjh: (+1)
   \   00000000   0xB410             PUSH     {R4}
   1632          	uint32_t i;
   1633          	for(i = 0; i < _arrayLen; i++)
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE000             B.N      ??charAtArray_0
   \                     ??charAtArray_1: (+1)
   \   00000006   0x1C5B             ADDS     R3,R3,#+1
   \                     ??charAtArray_0: (+1)
   \   00000008   0x428B             CMP      R3,R1
   \   0000000A   0xD204             BCS.N    ??charAtArray_2
   1634          	{
   1635          		if(*(_array + i) == _char)
   \   0000000C   0x5C1C             LDRB     R4,[R3, R0]
   \   0000000E   0x4294             CMP      R4,R2
   \   00000010   0xD1F9             BNE.N    ??charAtArray_1
   1636          		{
   1637          			return i;
   \   00000012   0x4618             MOV      R0,R3
   \   00000014   0xE001             B.N      ??charAtArray_3
   1638          		}
   1639          	}
   1640          	
   1641          	return -1;
   \                     ??charAtArray_2: (+1)
   \   00000016   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??charAtArray_3: (+1)
   \   0000001A   0xBC10             POP      {R4}
   \   0000001C   0x4770             BX       LR               ;; return
   1642          }
   1643          

   \                                 In section .text, align 2, keep-with-next
   1644          static void net_msg_handle(uint8_t * msg, uint16_t msgLen)
   1645          {
   \                     _Z14net_msg_handlePht: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4605             MOV      R5,R0
   1646          	int wifiNameLen, wifiKeyLen, hostLen, id_len, ver_len;
   1647          	char ipStr[16];
                 	     ^
Warning[Pe177]: variable "ipStr" was declared but never referenced
   1648          	
   1649          	if(msgLen <= 0)
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xF000 0x80D4      BEQ.W    ??net_msg_handle_0
   1650          		return;
   1651          
   1652          	//ip
   1653          	sprintf(ipPara.ip_addr, "%d.%d.%d.%d", msg[0], msg[1], msg[2], msg[3]);
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable69
   \   00000012   0x78E8             LDRB     R0,[R5, #+3]
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x78A8             LDRB     R0,[R5, #+2]
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x786B             LDRB     R3,[R5, #+1]
   \   0000001C   0x782A             LDRB     R2,[R5, #+0]
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "%d.%d.%d.%d">`
   \   00000022   0xF104 0x009D      ADD      R0,R4,#+157
   \   00000026   0x.... 0x....      BL       sprintf
   1654          
   1655          	//port
   1656          //
   1657          
   1658          	//connect state
   1659          	if(msg[6] == 0x0a)
   \   0000002A   0x79A8             LDRB     R0,[R5, #+6]
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable65
   \   00000030   0x280A             CMP      R0,#+10
   \   00000032   0xD102             BNE.N    ??net_msg_handle_1
   1660          	{
   1661          		wifi_link_state = WIFI_CONNECTED;
   \   00000034   0x200E             MOVS     R0,#+14
   \   00000036   0x7008             STRB     R0,[R1, #+0]
   \   00000038   0xE006             B.N      ??net_msg_handle_2
   1662          	}
   1663          	else if(msg[6] == 0x0e)
   \                     ??net_msg_handle_1: (+1)
   \   0000003A   0x280E             CMP      R0,#+14
   \   0000003C   0xD102             BNE.N    ??net_msg_handle_3
   1664          	{
   1665          		wifi_link_state = WIFI_EXCEPTION;
   \   0000003E   0x2014             MOVS     R0,#+20
   \   00000040   0x7008             STRB     R0,[R1, #+0]
   \   00000042   0xE001             B.N      ??net_msg_handle_2
   1666          	}
   1667          	else
   1668          	{
   1669          		wifi_link_state = WIFI_NOT_CONFIG;
   \                     ??net_msg_handle_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x7008             STRB     R0,[R1, #+0]
   1670          	}
   1671          
   1672          	//mode
   1673          	wifiPara.mode = msg[7];
   \                     ??net_msg_handle_2: (+1)
   \   00000048   0x.... 0x....      LDR.W    R6,??DataTable69_1
   \   0000004C   0x79E8             LDRB     R0,[R5, #+7]
   \   0000004E   0x66B0             STR      R0,[R6, #+104]
   1674          	
   1675          
   1676          	//wifi name
   1677          	wifiNameLen = msg[8];
   \   00000050   0x7A2F             LDRB     R7,[R5, #+8]
   1678          	wifiKeyLen = msg[9 + wifiNameLen];
   \   00000052   0x1978             ADDS     R0,R7,R5
   \   00000054   0xF890 0x8009      LDRB     R8,[R0, #+9]
   1679          	if(wifiNameLen < 32)
   \   00000058   0x2F20             CMP      R7,#+32
   \   0000005A   0xDA1B             BGE.N    ??net_msg_handle_4
   1680          	{
   1681          		memset(wifiPara.ap_name, 0, sizeof(wifiPara.ap_name));
   \   0000005C   0x2220             MOVS     R2,#+32
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x4630             MOV      R0,R6
   \   00000062   0x.... 0x....      BL       memset
   1682          		memcpy(wifiPara.ap_name, &msg[9], wifiNameLen);
   \   00000066   0x463A             MOV      R2,R7
   \   00000068   0xF105 0x0109      ADD      R1,R5,#+9
   \   0000006C   0x4630             MOV      R0,R6
   \   0000006E   0x.... 0x....      BL       memcpy
   1683          
   1684          		//wifi key		
   1685          		if(wifiKeyLen < 64)
   \   00000072   0xF1B8 0x0F40      CMP      R8,#+64
   \   00000076   0xDA0D             BGE.N    ??net_msg_handle_4
   1686          		{			
   1687          			memset(wifiPara.keyCode, 0, sizeof(wifiPara.keyCode));
   \   00000078   0x2240             MOVS     R2,#+64
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0xF106 0x0020      ADD      R0,R6,#+32
   \   00000080   0x.... 0x....      BL       memset
   1688          			memcpy(wifiPara.keyCode, &msg[10 + wifiNameLen], wifiKeyLen);
   \   00000084   0x4642             MOV      R2,R8
   \   00000086   0x1978             ADDS     R0,R7,R5
   \   00000088   0xF100 0x010A      ADD      R1,R0,#+10
   \   0000008C   0xF106 0x0020      ADD      R0,R6,#+32
   \   00000090   0x.... 0x....      BL       memcpy
   1689          		}
   1690          	}
   1691          
   1692          	
   1693          	cloud_para.state =msg[10 + wifiNameLen + wifiKeyLen];
   \                     ??net_msg_handle_4: (+1)
   \   00000094   0xEB08 0x0007      ADD      R0,R8,R7
   \   00000098   0x1947             ADDS     R7,R0,R5
   \   0000009A   0xF997 0x100A      LDRSB    R1,[R7, #+10]
   \   0000009E   0x7021             STRB     R1,[R4, #+0]
   1694          	hostLen = msg[11 + wifiNameLen + wifiKeyLen];
   \   000000A0   0xF897 0x900B      LDRB     R9,[R7, #+11]
   1695          	if(cloud_para.state)
   \   000000A4   0xEB09 0x0800      ADD      R8,R9,R0
   \   000000A8   0x4608             MOV      R0,R1
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD014             BEQ.N    ??net_msg_handle_5
   1696          	{			
   1697          		if(hostLen < 96)
   \   000000AE   0xF1B9 0x0F60      CMP      R9,#+96
   \   000000B2   0xDA0A             BGE.N    ??net_msg_handle_6
   1698          		{
   1699          			memset(cloud_para.hostUrl, 0, sizeof(cloud_para.hostUrl));
   \   000000B4   0x2260             MOVS     R2,#+96
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x1CA0             ADDS     R0,R4,#+2
   \   000000BA   0x.... 0x....      BL       memset
   1700          			memcpy(cloud_para.hostUrl, &msg[12 + wifiNameLen + wifiKeyLen], hostLen);
   \   000000BE   0x464A             MOV      R2,R9
   \   000000C0   0xF107 0x010C      ADD      R1,R7,#+12
   \   000000C4   0x1CA0             ADDS     R0,R4,#+2
   \   000000C6   0x.... 0x....      BL       memcpy
   1701          		}
   1702          		cloud_para.port = msg[12 + wifiNameLen + wifiKeyLen + hostLen] + (msg[13 + wifiNameLen + wifiKeyLen + hostLen] << 8);
   \                     ??net_msg_handle_6: (+1)
   \   000000CA   0xEB08 0x0705      ADD      R7,R8,R5
   \   000000CE   0x7B38             LDRB     R0,[R7, #+12]
   \   000000D0   0x7B79             LDRB     R1,[R7, #+13]
   \   000000D2   0xEB00 0x2001      ADD      R0,R0,R1, LSL #+8
   \   000000D6   0x6660             STR      R0,[R4, #+100]
   1703          				
   1704          	}
   1705          
   1706          	// id
   1707          	id_len = msg[14 + wifiNameLen + wifiKeyLen + hostLen];
   \                     ??net_msg_handle_5: (+1)
   \   000000D8   0xEB08 0x0705      ADD      R7,R8,R5
   \   000000DC   0xF897 0x900E      LDRB     R9,[R7, #+14]
   1708          	if(id_len == 20)
   \   000000E0   0xF1B9 0x0F14      CMP      R9,#+20
   \   000000E4   0xD10C             BNE.N    ??net_msg_handle_7
   1709          	{
   1710          		memset(cloud_para.id, 0, sizeof(cloud_para.id));
   \   000000E6   0x2215             MOVS     R2,#+21
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0xF104 0x0068      ADD      R0,R4,#+104
   \   000000EE   0x.... 0x....      BL       memset
   1711          		memcpy(cloud_para.id, (const char *)&msg[15 + wifiNameLen + wifiKeyLen + hostLen], id_len);
   \   000000F2   0x2214             MOVS     R2,#+20
   \   000000F4   0xF107 0x010F      ADD      R1,R7,#+15
   \   000000F8   0xF104 0x0068      ADD      R0,R4,#+104
   \   000000FC   0x.... 0x....      BL       memcpy
   1712          	}
   1713          	ver_len = msg[15 + wifiNameLen + wifiKeyLen + hostLen + id_len];
   \                     ??net_msg_handle_7: (+1)
   \   00000100   0xEB09 0x0008      ADD      R0,R9,R8
   \   00000104   0x1945             ADDS     R5,R0,R5
   \   00000106   0x7BEF             LDRB     R7,[R5, #+15]
   1714          	if(ver_len < 20)
   \   00000108   0x2F14             CMP      R7,#+20
   \   0000010A   0xDA0C             BGE.N    ??net_msg_handle_8
   1715          	{
   1716          		memset(wifi_firm_ver, 0, sizeof(wifi_firm_ver));
   \   0000010C   0xF104 0x0888      ADD      R8,R4,#+136
   \   00000110   0x2214             MOVS     R2,#+20
   \   00000112   0x2100             MOVS     R1,#+0
   \   00000114   0x4640             MOV      R0,R8
   \   00000116   0x.... 0x....      BL       memset
   1717          		memcpy(wifi_firm_ver, (const char *)&msg[16 + wifiNameLen + wifiKeyLen + hostLen + id_len], ver_len);
   \   0000011A   0x463A             MOV      R2,R7
   \   0000011C   0xF105 0x0110      ADD      R1,R5,#+16
   \   00000120   0x4640             MOV      R0,R8
   \   00000122   0x.... 0x....      BL       memcpy
   1718          	}
   1719          
   1720          	if(cfg_wifi_flag == 1)//∏˘æ›≈‰÷√Œƒº˛≈‰÷√–¬µƒWIFI
   \                     ??net_msg_handle_8: (+1)
   \   00000126   0xF8D4 0x0080      LDR      R0,[R4, #+128]
   \   0000012A   0x2801             CMP      R0,#+1
   \   0000012C   0xD11F             BNE.N    ??net_msg_handle_9
   1721          	{
   1722          		if((wifiPara.mode != gCfgItems.wifi_mode_sel)
   1723          			|| (strncmp(wifiPara.ap_name, (const char *)gCfgItems.wifi_ap, 32) != 0)
   1724          			|| (strncmp(wifiPara.keyCode, (const char *)gCfgItems.wifi_key, 64) != 0))
   \   0000012E   0x....             LDR.N    R5,??DataTable60
   \   00000130   0x6EB0             LDR      R0,[R6, #+104]
   \   00000132   0xF895 0x122B      LDRB     R1,[R5, #+555]
   \   00000136   0x4288             CMP      R0,R1
   \   00000138   0xD110             BNE.N    ??net_msg_handle_10
   \   0000013A   0x2220             MOVS     R2,#+32
   \   0000013C   0xF205 0x11CB      ADDW     R1,R5,#+459
   \   00000140   0x4630             MOV      R0,R6
   \   00000142   0x.... 0x....      BL       strncmp
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD108             BNE.N    ??net_msg_handle_10
   \   0000014A   0x2240             MOVS     R2,#+64
   \   0000014C   0xF205 0x11EB      ADDW     R1,R5,#+491
   \   00000150   0xF106 0x0020      ADD      R0,R6,#+32
   \   00000154   0x.... 0x....      BL       strncmp
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xD005             BEQ.N    ??net_msg_handle_11
   1725          		{
   1726          			package_to_wifi(WIFI_PARA_SET, (char *)0, 0);
   \                     ??net_msg_handle_10: (+1)
   \   0000015C   0x2200             MOVS     R2,#+0
   \   0000015E   0x4611             MOV      R1,R2
   \   00000160   0x4608             MOV      R0,R1
   \   00000162   0x.... 0x....      BL       _Z15package_to_wifi13WIFI_RET_TYPEPci
   \   00000166   0xE002             B.N      ??net_msg_handle_9
   1727          		}
   1728          		else
   1729          			cfg_wifi_flag = 0;
   \                     ??net_msg_handle_11: (+1)
   \   00000168   0x2000             MOVS     R0,#+0
   \   0000016A   0xF8C4 0x0080      STR      R0,[R4, #+128]
   1730          	}
   1731          	if(cfg_cloud_flag == 1)//∏˘æ›≈‰÷√Œƒº˛≈‰÷√–¬µƒ‘∆∑˛ŒÒ
   \                     ??net_msg_handle_9: (+1)
   \   0000016E   0xF8D4 0x0084      LDR      R0,[R4, #+132]
   \   00000172   0x2801             CMP      R0,#+1
   \   00000174   0xD11F             BNE.N    ??net_msg_handle_0
   1732          	{
   1733          		if(((cloud_para.state >> 4) != gCfgItems.cloud_enable)
   1734          			|| (strncmp(cloud_para.hostUrl, (const char *)gCfgItems.cloud_hostUrl, 96) != 0)
   1735          			|| (cloud_para.port != gCfgItems.cloud_port))
   \   00000176   0x....             LDR.N    R5,??DataTable60
   \   00000178   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   0000017C   0x1100             ASRS     R0,R0,#+4
   \   0000017E   0xF995 0x122D      LDRSB    R1,[R5, #+557]
   \   00000182   0x4288             CMP      R0,R1
   \   00000184   0xD10C             BNE.N    ??net_msg_handle_12
   \   00000186   0x2260             MOVS     R2,#+96
   \   00000188   0xF205 0x212E      ADDW     R1,R5,#+558
   \   0000018C   0x1CA0             ADDS     R0,R4,#+2
   \   0000018E   0x.... 0x....      BL       strncmp
   \   00000192   0x2800             CMP      R0,#+0
   \   00000194   0xD104             BNE.N    ??net_msg_handle_12
   \   00000196   0x6E60             LDR      R0,[R4, #+100]
   \   00000198   0xF8D5 0x1290      LDR      R1,[R5, #+656]
   \   0000019C   0x4288             CMP      R0,R1
   \   0000019E   0xD007             BEQ.N    ??net_msg_handle_13
   1736          		{
   1737          			package_to_wifi(WIFI_CLOUD_CFG, (char *)0, 0);
   \                     ??net_msg_handle_12: (+1)
   \   000001A0   0x2200             MOVS     R2,#+0
   \   000001A2   0x4611             MOV      R1,R2
   \   000001A4   0x2004             MOVS     R0,#+4
   \   000001A6   0xB003             ADD      SP,SP,#+12
   \   000001A8   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   000001AC   0x.... 0x....      B.W      _Z15package_to_wifi13WIFI_RET_TYPEPci
   1738          		}
   1739          		else
   1740          			cfg_cloud_flag = 0;
   \                     ??net_msg_handle_13: (+1)
   \   000001B0   0x2000             MOVS     R0,#+0
   \   000001B2   0xF8C4 0x0084      STR      R0,[R4, #+132]
   1741          	}
   1742          
   1743          	
   1744          	
   1745          }
   \                     ??net_msg_handle_0: (+1)
   \   000001B6   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return
   1746          

   \                                 In section .text, align 2, keep-with-next
   1747          static void gcode_msg_handle(uint8_t * msg, uint16_t msgLen)
   1748          {
   \                     _Z16gcode_msg_handlePht: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB099             SUB      SP,SP,#+100
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   1749          	uint8_t gcodeBuf[100] = {0};
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x2164             MOVS     R1,#+100
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
   1750          	char *index_s;
   1751          	char *index_e;
   1752          	
   1753          	if(msgLen <= 0)
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD036             BEQ.N    ??gcode_msg_handle_0
   1754          		return;
   1755          
   1756          	index_s = (char *)msg;
   1757          	index_e = (char *)strstr((char *)msg, "\n");
   \   00000014   0x....             ADR.N    R5,??DataTable60_2  ;; "\n"
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _Z6strstrPcPKc
   \   0000001E   0x4606             MOV      R6,R0
   1758          	if(*msg == 'N')
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x284E             CMP      R0,#+78
   \   00000024   0xD10A             BNE.N    ??gcode_msg_handle_1
   1759          	{
   1760          		index_s = (char *)strstr((char *)msg, " ");
   \   00000026   0x....             ADR.N    R1,??DataTable60_3  ;; " "
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       _Z6strstrPcPKc
   \   0000002E   0x4604             MOV      R4,R0
   \   00000030   0xE000             B.N      ??gcode_msg_handle_2
   1761          		while((*index_s) == ' ')
   1762          		{
   1763          			index_s++;
   \                     ??gcode_msg_handle_3: (+1)
   \   00000032   0x1C64             ADDS     R4,R4,#+1
   1764          		}
   \                     ??gcode_msg_handle_2: (+1)
   \   00000034   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000038   0x2820             CMP      R0,#+32
   \   0000003A   0xD0FA             BEQ.N    ??gcode_msg_handle_3
   1765          	}
   1766          	while((index_e != 0) && ((int)index_s < (int)index_e))
   \                     ??gcode_msg_handle_1: (+1)
   \   0000003C   0x2E00             CMP      R6,#+0
   \   0000003E   0xD020             BEQ.N    ??gcode_msg_handle_0
   \   00000040   0x42B4             CMP      R4,R6
   \   00000042   0xDA1E             BGE.N    ??gcode_msg_handle_0
   1767          	{
   1768          		if(index_e - index_s < sizeof(gcodeBuf))	
   \   00000044   0x1B37             SUBS     R7,R6,R4
   \   00000046   0x2F64             CMP      R7,#+100
   \   00000048   0xD20E             BCS.N    ??gcode_msg_handle_4
   1769          		{
   1770          			memset(gcodeBuf, 0, sizeof(gcodeBuf));
   \   0000004A   0x2264             MOVS     R2,#+100
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xA800             ADD      R0,SP,#+0
   \   00000050   0x.... 0x....      BL       memset
   1771          			
   1772          			memcpy(gcodeBuf, index_s, index_e - index_s + 1);
   \   00000054   0x1C7A             ADDS     R2,R7,#+1
   \   00000056   0x4621             MOV      R1,R4
   \   00000058   0xA800             ADD      R0,SP,#+0
   \   0000005A   0x.... 0x....      BL       memcpy
   1773          
   1774          		
   1775          			wifi_gcode_exec(gcodeBuf);
   \   0000005E   0xA800             ADD      R0,SP,#+0
   \   00000060   0x.... 0x....      BL       _Z15wifi_gcode_execPh
   \   00000064   0xE000             B.N      ??gcode_msg_handle_4
   1776          		}
   1777          		while((*index_e == '\r') || (*index_e == '\n'))
   1778          			index_e++;
   \                     ??gcode_msg_handle_5: (+1)
   \   00000066   0x1C76             ADDS     R6,R6,#+1
   \                     ??gcode_msg_handle_4: (+1)
   \   00000068   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   0000006C   0x280D             CMP      R0,#+13
   \   0000006E   0xD0FA             BEQ.N    ??gcode_msg_handle_5
   \   00000070   0x280A             CMP      R0,#+10
   \   00000072   0xD0F8             BEQ.N    ??gcode_msg_handle_5
   1779          
   1780          		index_s = index_e;
   \   00000074   0x4634             MOV      R4,R6
   1781          		index_e = (char *)strstr(index_s, "\n");
   \   00000076   0x4629             MOV      R1,R5
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x.... 0x....      BL       _Z6strstrPcPKc
   \   0000007E   0x4606             MOV      R6,R0
   \   00000080   0xE7DC             B.N      ??gcode_msg_handle_1
   1782          	}
   1783          }
   \                     ??gcode_msg_handle_0: (+1)
   \   00000082   0xB019             ADD      SP,SP,#+100
   \   00000084   0xBDF0             POP      {R4-R7,PC}       ;; return
   1784          
   1785          char saveFilePath[50];
   1786          

   \                                 In section .text, align 2, keep-with-next
   1787          static void file_first_msg_handle(uint8_t * msg, uint16_t msgLen)
   1788          {
   \                     _Z21file_first_msg_handlePht: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4606             MOV      R6,R0
   1789          	uint8_t fileNameLen = *msg;
   \   00000004   0x7837             LDRB     R7,[R6, #+0]
   1790          	
   1791          	FRESULT res;
   1792          		
   1793          	if(msgLen != fileNameLen + 5)
   \   00000006   0x1D78             ADDS     R0,R7,#+5
   \   00000008   0x4281             CMP      R1,R0
   \   0000000A   0xD179             BNE.N    ??file_first_msg_handle_0
   1794          	{
   1795          		return;
   1796          	}
   1797          	
   1798          	file_writer.fileLen = *((uint32_t *)(msg + 1));
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable71
   \   00000010   0xF8D6 0x0001      LDR      R0,[R6, #+1]
   \   00000014   0xF8C4 0x022C      STR      R0,[R4, #+556]
   1799          	memset(file_writer.saveFileName, 0, sizeof(file_writer.saveFileName));
   \   00000018   0xF504 0x7503      ADD      R5,R4,#+524
   \   0000001C   0x221E             MOVS     R2,#+30
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       memset
   1800          
   1801          	memcpy(file_writer.saveFileName, msg + 5, fileNameLen);
   \   00000026   0x463A             MOV      R2,R7
   \   00000028   0x1D71             ADDS     R1,R6,#+5
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       memcpy
   1802          
   1803          	memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   \   00000030   0xF240 0x2201      MOVW     R2,#+513
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x1D20             ADDS     R0,R4,#+4
   \   00000038   0x.... 0x....      BL       memset
   1804          
   1805          	if(strlen((const char *)file_writer.saveFileName) > sizeof(saveFilePath))
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       strlen
   \   00000042   0x2833             CMP      R0,#+51
   \   00000044   0xD25C             BCS.N    ??file_first_msg_handle_0
   1806          		return;
   1807          
   1808          	memset(saveFilePath, 0, sizeof(saveFilePath));
   \   00000046   0x.... 0x....      LDR.W    R6,??DataTable65
   \   0000004A   0x2232             MOVS     R2,#+50
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0xF106 0x0028      ADD      R0,R6,#+40
   \   00000052   0x.... 0x....      BL       memset
   1809          #if 1	
   1810          	if(gCfgItems.fileSysType == FILE_SYS_SD)
   \   00000056   0x....             LDR.N    R0,??DataTable60
   \   00000058   0xF990 0x10BA      LDRSB    R1,[R0, #+186]
   \   0000005C   0x2901             CMP      R1,#+1
   \   0000005E   0xD112             BNE.N    ??file_first_msg_handle_1
   1811          	{
   1812          		if(SD_DET_IP == SD_DETECT_INVERTED)
                 		             ^
Warning[Pa118]: mixing boolean and non-boolean types in a comparison results
          in the boolean being promoted
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable71_1  ;; 0x42238124
   \   00000064   0x6800             LDR      R0,[R0, #+0]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD10F             BNE.N    ??file_first_msg_handle_2
   1813          		{
   1814          			sprintf((char *)saveFilePath, "1:/%s", file_writer.saveFileName);
   \   0000006A   0x462A             MOV      R2,R5
   \   0000006C   0x.... 0x....      ADR.W    R1,`?<Constant "1:/%s">`
   \   00000070   0xF106 0x0028      ADD      R0,R6,#+40
   \   00000074   0x.... 0x....      BL       sprintf
   1815          			//SD_Initialize();
   1816          			//FATFS_LinkDriver_sd(&SD_Driver, SD_Path);
   1817          			f_mount(&fs, (TCHAR const*)SD_Path, 0);
   \   00000078   0x2200             MOVS     R2,#+0
   \   0000007A   0x....             LDR.N    R1,??DataTable60_1
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable71_2
   \   00000080   0x.... 0x....      BL       f_mount
   \   00000084   0xE001             B.N      ??file_first_msg_handle_2
   1818          		}
   1819          	}
   1820          	else if(gCfgItems.fileSysType == FILE_SYS_USB)
   \                     ??file_first_msg_handle_1: (+1)
   \   00000086   0xF990 0x00BA      LDRSB    R0,[R0, #+186]
   1821          	{
   1822          #if unused
   1823          		sprintf((char *)saveFilePath, "0:/%s", file_writer.saveFileName);
   1824          		f_mount(&fs, (TCHAR const*)USBH_Path, 0);
   1825          #endif
   1826          	}
   1827          	//mount_file_sys(gCfgItems.fileSysType);
   1828          #endif	
   1829          	
   1830          	file_writer.write_index = 0;
   \                     ??file_first_msg_handle_2: (+1)
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0xF8C4 0x0208      STR      R0,[R4, #+520]
   1831          	file_writer.file = &save_File;
   \   00000090   0xF504 0x750E      ADD      R5,R4,#+568
   \   00000094   0x6025             STR      R5,[R4, #+0]
   1832          	lastFragment = -1;
   \   00000096   0xF04F 0x30FF      MOV      R0,#-1
   \   0000009A   0x61F0             STR      R0,[R6, #+28]
   1833          
   1834          	wifiTransError.flag = 0;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x7130             STRB     R0,[R6, #+4]
   1835          	wifiTransError.start_tick = 0;
   \   000000A0   0x60B0             STR      R0,[R6, #+8]
   1836          	wifiTransError.now_tick = 0;
   \   000000A2   0x60F0             STR      R0,[R6, #+12]
   1837          
   1838          	f_close(srcfp);
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable68
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x.... 0x....      BL       f_close
   1839          
   1840          
   1841          	wifi_delay(1000);
   \   000000AE   0xF44F 0x707A      MOV      R0,#+1000
   \   000000B2   0x.... 0x....      BL       _Z10wifi_delayi
   1842          		
   1843          	res = f_open(&save_File, (const TCHAR *)saveFilePath, FA_CREATE_ALWAYS | FA_WRITE);
   1844          
   1845          	
   1846          	if(res != FR_OK)
   \   000000B6   0x220A             MOVS     R2,#+10
   \   000000B8   0xF106 0x0128      ADD      R1,R6,#+40
   \   000000BC   0x4628             MOV      R0,R5
   \   000000BE   0x.... 0x....      BL       f_open
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD00D             BEQ.N    ??file_first_msg_handle_3
   1847          	{
   1848          		clear_cur_ui();
   \   000000C6   0x.... 0x....      BL       clear_cur_ui
   1849          		upload_result = 2;
   \   000000CA   0x2002             MOVS     R0,#+2
   \   000000CC   0x6130             STR      R0,[R6, #+16]
   1850          
   1851          		wifiTransError.flag = 1;
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0x7130             STRB     R0,[R6, #+4]
   1852          		wifiTransError.start_tick = getWifiTick();	
   \   000000D2   0x.... 0x....      BL       _Z11getWifiTickv
   \   000000D6   0x60B0             STR      R0,[R6, #+8]
   1853          		
   1854          		draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
   \   000000D8   0x2007             MOVS     R0,#+7
   \   000000DA   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   000000DE   0x.... 0x....      B.W      draw_dialog
   1855          		return;
   1856          	}
   1857          
   1858          //	sprintf(tempBuf, "Writing to file: %s\n", file_writer.saveFileName);
   1859          //	raw_send_to_wifi(tempBuf, strlen(tempBuf));
   1860          							
   1861          	wifi_link_state = WIFI_TRANS_FILE;
   \                     ??file_first_msg_handle_3: (+1)
   \   000000E2   0x2010             MOVS     R0,#+16
   \   000000E4   0x7030             STRB     R0,[R6, #+0]
   1862          
   1863          	upload_result = 1;
   \   000000E6   0x2001             MOVS     R0,#+1
   \   000000E8   0x6130             STR      R0,[R6, #+16]
   1864          
   1865          	clear_cur_ui();
   \   000000EA   0x.... 0x....      BL       clear_cur_ui
   1866          	draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
   \   000000EE   0x2007             MOVS     R0,#+7
   \   000000F0   0x.... 0x....      BL       draw_dialog
   1867          
   1868          	GUI_Exec();
   \   000000F4   0x.... 0x....      BL       GUI_Exec
   1869          
   1870          	file_writer.tick_begin = getWifiTick();
   \   000000F8   0x.... 0x....      BL       _Z11getWifiTickv
   \   000000FC   0xF8C4 0x0230      STR      R0,[R4, #+560]
   1871          		
   1872          	
   1873          }
   \                     ??file_first_msg_handle_0: (+1)
   \   00000100   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1874          
   1875          #define FRAG_MASK	~(1 << 31)
   1876          

   \                                 In section .text, align 2, keep-with-next
   1877          static void file_fragment_msg_handle(uint8_t * msg, uint16_t msgLen)
   1878          {
   \                     _Z24file_fragment_msg_handlePht: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1879          	uint32_t num_write;
   1880          	uint32_t frag = *((uint32_t *)msg);
   \   00000002   0x6805             LDR      R5,[R0, #+0]
   1881          
   1882          	if((frag & FRAG_MASK) != (uint32_t)(lastFragment  + 1))
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable65
   \   00000008   0x006A             LSLS     R2,R5,#+1
   \   0000000A   0x0852             LSRS     R2,R2,#+1
   \   0000000C   0x69E3             LDR      R3,[R4, #+28]
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \   00000010   0x429A             CMP      R2,R3
   \   00000012   0xD00F             BEQ.N    ??file_fragment_msg_handle_0
   1883          	{
   1884          		/*≤ª «‘§∆⁄µƒ∑÷∆¨∫≈*/
   1885          		/*÷ÿ∑¢¥¶¿Ì*/
   1886          		memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable71
   \   00000018   0xF240 0x2201      MOVW     R2,#+513
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x1D28             ADDS     R0,R5,#+4
   \   00000020   0x.... 0x....      BL       memset
   1887          		file_writer.write_index = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8C5 0x0208      STR      R0,[R5, #+520]
   1888          	//	f_close(&save_File);
   1889          	//	f_unlink((const char *)saveFilePath);
   1890          		
   1891          		wifi_link_state = WIFI_CONNECTED;	
   \   0000002A   0x200E             MOVS     R0,#+14
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
   1892          
   1893          		upload_result = 2; 
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x6120             STR      R0,[R4, #+16]
   \   00000032   0xBD31             POP      {R0,R4,R5,PC}
   1894          		
   1895          	}
   1896          	else
   1897          	{
   1898          		if(write_to_file((char *)msg + 4, msgLen - 4) < 0)
   \                     ??file_fragment_msg_handle_0: (+1)
   \   00000034   0x1F09             SUBS     R1,R1,#+4
   \   00000036   0x1D00             ADDS     R0,R0,#+4
   \   00000038   0x.... 0x....      BL       _Z13write_to_filePci
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD412             BMI.N    ??file_fragment_msg_handle_1
   1899          		{
   1900          			memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   1901          			file_writer.write_index = 0;
   1902          			
   1903          			wifi_link_state = WIFI_CONNECTED;	
   1904          
   1905          			upload_result = 2; 
   1906          
   1907          			return;
   1908          		}
   1909          		lastFragment = frag;
   \   00000040   0x61E5             STR      R5,[R4, #+28]
   1910          		
   1911          		if((frag & (~FRAG_MASK)) != 0)
   \   00000042   0x2D00             CMP      R5,#+0
   \   00000044   0xD53D             BPL.N    ??file_fragment_msg_handle_2
   1912          		{
   1913          			/*??????*/
   1914          			FRESULT res =  f_write (file_writer.file, file_writer.write_buf, file_writer.write_index, &num_write);
   1915          			if((res != FR_OK) || (num_write != file_writer.write_index))
   \   00000046   0x.... 0x....      LDR.W    R5,??DataTable71
   \   0000004A   0xAB00             ADD      R3,SP,#+0
   \   0000004C   0xF8D5 0x2208      LDR      R2,[R5, #+520]
   \   00000050   0x1D29             ADDS     R1,R5,#+4
   \   00000052   0x6828             LDR      R0,[R5, #+0]
   \   00000054   0x.... 0x....      BL       f_write
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD104             BNE.N    ??file_fragment_msg_handle_1
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0xF8D5 0x1208      LDR      R1,[R5, #+520]
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD00F             BEQ.N    ??file_fragment_msg_handle_3
   1916          			{
   1917          				memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   \                     ??file_fragment_msg_handle_1: (+1)
   \   00000066   0x.... 0x....      LDR.W    R5,??DataTable71
   \   0000006A   0xF240 0x2201      MOVW     R2,#+513
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x1D28             ADDS     R0,R5,#+4
   \   00000072   0x.... 0x....      BL       memset
   1918          				file_writer.write_index = 0;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF8C5 0x0208      STR      R0,[R5, #+520]
   1919          				
   1920          				wifi_link_state = WIFI_CONNECTED;	
   \   0000007C   0x200E             MOVS     R0,#+14
   \   0000007E   0x7020             STRB     R0,[R4, #+0]
   1921          
   1922          				upload_result = 2; 
   \   00000080   0x2002             MOVS     R0,#+2
   \   00000082   0x6120             STR      R0,[R4, #+16]
   1923          
   1924          				return;
   \   00000084   0xBD31             POP      {R0,R4,R5,PC}
   1925          			}
   1926          			memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   \                     ??file_fragment_msg_handle_3: (+1)
   \   00000086   0xF240 0x2201      MOVW     R2,#+513
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x1D28             ADDS     R0,R5,#+4
   \   0000008E   0x.... 0x....      BL       memset
   1927          			file_writer.write_index = 0;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xF8C5 0x0208      STR      R0,[R5, #+520]
   1928          		//	f_close(&save_File);
   1929          
   1930          			file_writer.tick_end = getWifiTick();
   \   00000098   0x.... 0x....      BL       _Z11getWifiTickv
   \   0000009C   0xF8C5 0x0234      STR      R0,[R5, #+564]
   1931          
   1932          			upload_time = getWifiTickDiff(file_writer.tick_begin, file_writer.tick_end) / 1000;
   \   000000A0   0x4601             MOV      R1,R0
   \   000000A2   0xF8D5 0x0230      LDR      R0,[R5, #+560]
   \   000000A6   0x.... 0x....      BL       _Z15getWifiTickDiffii
   \   000000AA   0xF44F 0x717A      MOV      R1,#+1000
   \   000000AE   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000B2   0x6160             STR      R0,[R4, #+20]
   1933          
   1934          			upload_size = f_size(&save_File);
   \   000000B4   0xF8D5 0x0444      LDR      R0,[R5, #+1092]
   \   000000B8   0x61A0             STR      R0,[R4, #+24]
   1935          			
   1936          			wifi_link_state = WIFI_CONNECTED;	
   \   000000BA   0x200E             MOVS     R0,#+14
   \   000000BC   0x7020             STRB     R0,[R4, #+0]
   1937          
   1938          			upload_result = 3; 
   \   000000BE   0x2003             MOVS     R0,#+3
   \   000000C0   0x6120             STR      R0,[R4, #+16]
   1939          		}
   1940          		//wifi_ret_ack();
   1941          		
   1942          	}
   1943          }
   \                     ??file_fragment_msg_handle_2: (+1)
   \   000000C2   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1944          
   1945          

   \                                 In section .text, align 2, keep-with-next
   1946          void esp_data_parser(char *cmdRxBuf, int len)
   1947          {
   \                     _Z15esp_data_parserPci: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   1948          	int32_t head_pos;
   1949          	int32_t tail_pos;
   1950          	uint16_t cpyLen;
   1951          	int16_t leftLen = len; // £”‡≥§∂»
   \   00000008   0x462E             MOV      R6,R5
   \   0000000A   0xB236             SXTH     R6,R6
   1952          	uint8_t loop_again = 0;
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0x.... 0x....      LDR.W    R8,??DataTable71_3
   \   00000012   0xE010             B.N      ??esp_data_parser_0
   1953          
   1954          	ESP_PROTOC_FRAME esp_frame;
   1955          
   1956          	while((leftLen > 0) || (loop_again == 1))
   1957          	//while(leftLen > 0)
   1958          	{
   1959          		loop_again = 0;
   1960          		
   1961          		/* 1. ≤È’“÷°Õ∑*/
   1962          		if(esp_msg_index != 0)
   1963          		{
   1964          			
   1965          			head_pos = 0;
   1966          			cpyLen = (leftLen < (sizeof(esp_msg_buf) - esp_msg_index)) ? leftLen : sizeof(esp_msg_buf) - esp_msg_index;
   1967          			
   1968          			memcpy(&esp_msg_buf[esp_msg_index], cmdRxBuf + len - leftLen, cpyLen);			
   1969          
   1970          			esp_msg_index += cpyLen;
   1971          
   1972          			leftLen = leftLen - cpyLen;
   1973          			tail_pos = charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL);
   1974          			
   1975          				
   1976          			if(tail_pos == -1)
   1977          			{
   1978          				//√ª”–÷°Œ≤
   1979          				if(esp_msg_index >= sizeof(esp_msg_buf))
   1980          				{
   1981          					memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   1982          					esp_msg_index = 0;
   1983          				}
   1984          			
   1985          				return;
   1986          			}
   1987          		}
   1988          		else
   1989          		{
   1990          			head_pos = charAtArray((uint8_t const *)&cmdRxBuf[len - leftLen], leftLen, ESP_PROTOC_HEAD);
   1991          			if(head_pos == -1)
   1992          			{
   1993          				//√ª”–÷°Õ∑
   1994          				return;
   1995          			}
   1996          			else
   1997          			{
   1998          				//œ»ª∫¥ÊµΩbuf	
   1999          				memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   2000          				memcpy(esp_msg_buf, &cmdRxBuf[len - leftLen + head_pos], leftLen - head_pos);
   2001          
   2002          				esp_msg_index = leftLen - head_pos;
   2003          
   2004          				leftLen = 0;
   2005          
   2006          				head_pos = 0;
   2007          				
   2008          				tail_pos = charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL);
   2009          				
   2010          				if(tail_pos == -1)
   2011          				{
   2012          					//’“µΩ÷°Õ∑£¨√ª”–÷°Œ≤	
   2013          					if(esp_msg_index >= sizeof(esp_msg_buf))
   2014          					{
   2015          						memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   2016          						esp_msg_index = 0;
   2017          					}
   2018          					return;
   2019          				}
   2020          				
   2021          			}
   2022          		}
   2023          		
   2024          		/*3. ’“µΩÕÍ’˚µƒ“ª÷°	, ≈–∂œ ˝æ›≥§∂»*/
   2025          		esp_frame.type = esp_msg_buf[1];
   2026          		if((esp_frame.type != ESP_TYPE_NET) && (esp_frame.type != ESP_TYPE_GCODE)
   2027          			 && (esp_frame.type != ESP_TYPE_FILE_FIRST) && (esp_frame.type != ESP_TYPE_FILE_FRAGMENT))
   2028          		{
   2029          			// ˝æ›¿‡–Õ≤ª’˝»∑£¨∂™∆˙
   2030          			memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   2031          			esp_msg_index = 0;
   2032          			return;
   2033          		}
   2034          		
   2035          		esp_frame.dataLen = esp_msg_buf[2] + (esp_msg_buf[3] << 8);
   2036          
   2037          		/* ˝æ›≥§∂»µƒ≈–∂œ≤ª“ª∂®∑˚∫œµƒ£¨‘⁄÷°≥§∂»≤ªµ»”⁄∂®≥§µƒ«Èøˆœ¬*/
   2038          		/*if(esp_frame.dataLen > esp_msg_index - 5)
   2039          		{
   2040          			// ˝æ›≥§∂»≤ª’˝»∑£¨∂™∆˙
   2041          			memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   2042          			esp_msg_index = 0;
   2043          			return;
   2044          		}*/
   2045          		if(4 + esp_frame.dataLen > sizeof(esp_msg_buf))
   2046          		{
   2047          			// ˝æ›≥§∂»≤ª’˝»∑£¨∂™∆˙
   2048          			memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   2049          			esp_msg_index = 0;
   2050          			return;
   2051          		}
   2052          
   2053          		if(esp_msg_buf[4 + esp_frame.dataLen] != ESP_PROTOC_TAIL)
   2054          		{
   2055          			if(esp_msg_index >= sizeof(esp_msg_buf))
   2056          			{
   2057          				//÷°Œ≤≤ª’˝»∑£¨∂™∆˙
   2058          				memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   2059          				esp_msg_index = 0;
   2060          			}
   2061          			return;
   2062          		}
   2063          		
   2064          		/*4. ∞¥’’¿‡–Õ∑÷±¥¶¿Ì ˝æ›*/		
   2065          		esp_frame.data = &esp_msg_buf[4];
   2066          		switch(esp_frame.type)
   2067          		{
   2068          			case ESP_TYPE_NET:
   2069          				net_msg_handle(esp_frame.data, esp_frame.dataLen);
   2070          				break;
   2071          
   2072          			case ESP_TYPE_GCODE:
   2073          				gcode_msg_handle(esp_frame.data, esp_frame.dataLen);
   2074          				break;
   2075          
   2076          			case ESP_TYPE_FILE_FIRST:
   2077          				file_first_msg_handle(esp_frame.data, esp_frame.dataLen);
   2078          				break;
   2079          
   2080          			case ESP_TYPE_FILE_FRAGMENT:
   2081          				file_fragment_msg_handle(esp_frame.data, esp_frame.dataLen);
   2082          				break;
   2083          
   2084          			
   2085          			default:
   2086          				break;
   2087          				
   2088          		}
   2089          		/*5. ∞—“—¥¶¿Ìµƒ ˝æ›ΩÿµÙ*/
   2090          	//	esp_msg_index = 0; //ƒø«∞ «πÃ∂®÷°≥§∂»£¨≤ª◊ˆ»ﬂ”‡¥¶¿Ì
   2091          		esp_msg_index = cut_msg_head(esp_msg_buf, esp_msg_index, esp_frame.dataLen  + 5);
   2092          		if(esp_msg_index > 0)
   2093          		{
   2094          			if(charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) == -1)
   2095          			{
   2096          				memset(esp_msg_buf, 0, sizeof(esp_msg_buf));
   2097          				esp_msg_index = 0;
   2098          				return;
   2099          			}
   2100          			
   2101          			if((charAtArray(esp_msg_buf, esp_msg_index,  ESP_PROTOC_HEAD) != -1) && (charAtArray(esp_msg_buf, esp_msg_index, ESP_PROTOC_TAIL) != -1))
   \                     ??esp_data_parser_1: (+1)
   \   00000014   0x22A5             MOVS     R2,#+165
   \   00000016   0x4649             MOV      R1,R9
   \   00000018   0x4640             MOV      R0,R8
   \   0000001A   0x.... 0x....      BL       _Z11charAtArrayPKhjh
   \   0000001E   0xF110 0x0F01      CMN      R0,#+1
   \   00000022   0xD008             BEQ.N    ??esp_data_parser_0
   \   00000024   0x22FC             MOVS     R2,#+252
   \   00000026   0x4649             MOV      R1,R9
   \   00000028   0x4640             MOV      R0,R8
   \   0000002A   0x.... 0x....      BL       _Z11charAtArrayPKhjh
   \   0000002E   0xF110 0x0F01      CMN      R0,#+1
   \   00000032   0xD000             BEQ.N    ??esp_data_parser_0
   2102          			{
   2103          				loop_again = 1;
   \   00000034   0x2701             MOVS     R7,#+1
   2104          			}
   \                     ??esp_data_parser_0: (+1)
   \   00000036   0x2E01             CMP      R6,#+1
   \   00000038   0xDA02             BGE.N    ??esp_data_parser_2
   \   0000003A   0x2F01             CMP      R7,#+1
   \   0000003C   0xF040 0x80DB      BNE.W    ??esp_data_parser_3
   \                     ??esp_data_parser_2: (+1)
   \   00000040   0x2700             MOVS     R7,#+0
   \   00000042   0xF8B8 0x0400      LDRH     R0,[R8, #+1024]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD033             BEQ.N    ??esp_data_parser_4
   \   0000004A   0xF5C0 0x6180      RSB      R1,R0,#+1024
   \   0000004E   0x428E             CMP      R6,R1
   \   00000050   0xD203             BCS.N    ??esp_data_parser_5
   \   00000052   0x46B1             MOV      R9,R6
   \   00000054   0xFA1F 0xF989      UXTH     R9,R9
   \   00000058   0xE003             B.N      ??esp_data_parser_6
   \                     ??esp_data_parser_5: (+1)
   \   0000005A   0xF5C0 0x6980      RSB      R9,R0,#+1024
   \   0000005E   0xFA1F 0xF989      UXTH     R9,R9
   \                     ??esp_data_parser_6: (+1)
   \   00000062   0x464A             MOV      R2,R9
   \   00000064   0x4271             RSBS     R1,R6,#+0
   \   00000066   0x192B             ADDS     R3,R5,R4
   \   00000068   0x18C9             ADDS     R1,R1,R3
   \   0000006A   0x4440             ADD      R0,R0,R8
   \   0000006C   0x.... 0x....      BL       memcpy
   \   00000070   0xF8B8 0x0400      LDRH     R0,[R8, #+1024]
   \   00000074   0xEB09 0x0A00      ADD      R10,R9,R0
   \   00000078   0xF8A8 0xA400      STRH     R10,[R8, #+1024]
   \   0000007C   0xEBA6 0x0609      SUB      R6,R6,R9
   \   00000080   0xB236             SXTH     R6,R6
   \   00000082   0xFA1F 0xFA8A      UXTH     R10,R10
   \   00000086   0x22FC             MOVS     R2,#+252
   \   00000088   0x4651             MOV      R1,R10
   \   0000008A   0x4640             MOV      R0,R8
   \   0000008C   0x.... 0x....      BL       _Z11charAtArrayPKhjh
   \   00000090   0xF110 0x0F01      CMN      R0,#+1
   \   00000094   0xD144             BNE.N    ??esp_data_parser_7
   \   00000096   0xF5BA 0x6F80      CMP      R10,#+1024
   \   0000009A   0xF0C0 0x80AC      BCC.W    ??esp_data_parser_3
   \   0000009E   0xF44F 0x6280      MOV      R2,#+1024
   \   000000A2   0x4639             MOV      R1,R7
   \   000000A4   0x4640             MOV      R0,R8
   \   000000A6   0x.... 0x....      BL       memset
   \   000000AA   0x4638             MOV      R0,R7
   \   000000AC   0xF8A8 0x0400      STRH     R0,[R8, #+1024]
   \   000000B0   0xE0A1             B.N      ??esp_data_parser_3
   \                     ??esp_data_parser_4: (+1)
   \   000000B2   0xEBA5 0x0906      SUB      R9,R5,R6
   \   000000B6   0x22A5             MOVS     R2,#+165
   \   000000B8   0x4631             MOV      R1,R6
   \   000000BA   0xEB09 0x0004      ADD      R0,R9,R4
   \   000000BE   0x.... 0x....      BL       _Z11charAtArrayPKhjh
   \   000000C2   0x4682             MOV      R10,R0
   \   000000C4   0xF11A 0x0F01      CMN      R10,#+1
   \   000000C8   0xF000 0x8095      BEQ.W    ??esp_data_parser_3
   \   000000CC   0xF44F 0x6280      MOV      R2,#+1024
   \   000000D0   0x4639             MOV      R1,R7
   \   000000D2   0x4640             MOV      R0,R8
   \   000000D4   0x.... 0x....      BL       memset
   \   000000D8   0xEBA6 0x020A      SUB      R2,R6,R10
   \   000000DC   0xEB0A 0x0009      ADD      R0,R10,R9
   \   000000E0   0x1901             ADDS     R1,R0,R4
   \   000000E2   0x4640             MOV      R0,R8
   \   000000E4   0x.... 0x....      BL       memcpy
   \   000000E8   0xEBA6 0x090A      SUB      R9,R6,R10
   \   000000EC   0xF8A8 0x9400      STRH     R9,[R8, #+1024]
   \   000000F0   0x463E             MOV      R6,R7
   \   000000F2   0xFA1F 0xF989      UXTH     R9,R9
   \   000000F6   0x22FC             MOVS     R2,#+252
   \   000000F8   0x4649             MOV      R1,R9
   \   000000FA   0x4640             MOV      R0,R8
   \   000000FC   0x.... 0x....      BL       _Z11charAtArrayPKhjh
   \   00000100   0xF110 0x0F01      CMN      R0,#+1
   \   00000104   0xD10C             BNE.N    ??esp_data_parser_7
   \   00000106   0xF5B9 0x6F80      CMP      R9,#+1024
   \   0000010A   0xD374             BCC.N    ??esp_data_parser_3
   \   0000010C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000110   0x4631             MOV      R1,R6
   \   00000112   0x4640             MOV      R0,R8
   \   00000114   0x.... 0x....      BL       memset
   \   00000118   0x4630             MOV      R0,R6
   \   0000011A   0xF8A8 0x0400      STRH     R0,[R8, #+1024]
   \   0000011E   0xE06A             B.N      ??esp_data_parser_3
   \                     ??esp_data_parser_7: (+1)
   \   00000120   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD005             BEQ.N    ??esp_data_parser_8
   \   00000128   0x2801             CMP      R0,#+1
   \   0000012A   0xD003             BEQ.N    ??esp_data_parser_8
   \   0000012C   0x2802             CMP      R0,#+2
   \   0000012E   0xD001             BEQ.N    ??esp_data_parser_8
   \   00000130   0x2803             CMP      R0,#+3
   \   00000132   0xD157             BNE.N    ??esp_data_parser_9
   \                     ??esp_data_parser_8: (+1)
   \   00000134   0xF108 0x0101      ADD      R1,R8,#+1
   \   00000138   0x784A             LDRB     R2,[R1, #+1]
   \   0000013A   0x7889             LDRB     R1,[R1, #+2]
   \   0000013C   0xEB02 0x2901      ADD      R9,R2,R1, LSL #+8
   \   00000140   0xFA1F 0xF989      UXTH     R9,R9
   \   00000144   0x4649             MOV      R1,R9
   \   00000146   0x1D0A             ADDS     R2,R1,#+4
   \   00000148   0xF5B2 0x6F80      CMP      R2,#+1024
   \   0000014C   0xD84A             BHI.N    ??esp_data_parser_9
   \   0000014E   0x4441             ADD      R1,R1,R8
   \   00000150   0x7909             LDRB     R1,[R1, #+4]
   \   00000152   0x29FC             CMP      R1,#+252
   \   00000154   0xD00E             BEQ.N    ??esp_data_parser_10
   \   00000156   0xF8B8 0x0400      LDRH     R0,[R8, #+1024]
   \   0000015A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000015E   0xD34A             BCC.N    ??esp_data_parser_3
   \   00000160   0xF44F 0x6280      MOV      R2,#+1024
   \   00000164   0x4639             MOV      R1,R7
   \   00000166   0x4640             MOV      R0,R8
   \   00000168   0x.... 0x....      BL       memset
   \   0000016C   0x4638             MOV      R0,R7
   \   0000016E   0xF8A8 0x0400      STRH     R0,[R8, #+1024]
   \   00000172   0xE040             B.N      ??esp_data_parser_3
   \                     ??esp_data_parser_10: (+1)
   \   00000174   0x2800             CMP      R0,#+0
   \   00000176   0xD005             BEQ.N    ??esp_data_parser_11
   \   00000178   0x2802             CMP      R0,#+2
   \   0000017A   0xD00F             BEQ.N    ??esp_data_parser_12
   \   0000017C   0xD308             BCC.N    ??esp_data_parser_13
   \   0000017E   0x2803             CMP      R0,#+3
   \   00000180   0xD012             BEQ.N    ??esp_data_parser_14
   \   00000182   0xE016             B.N      ??esp_data_parser_15
   \                     ??esp_data_parser_11: (+1)
   \   00000184   0x4649             MOV      R1,R9
   \   00000186   0xF108 0x0004      ADD      R0,R8,#+4
   \   0000018A   0x.... 0x....      BL       _Z14net_msg_handlePht
   \   0000018E   0xE010             B.N      ??esp_data_parser_15
   \                     ??esp_data_parser_13: (+1)
   \   00000190   0x4649             MOV      R1,R9
   \   00000192   0xF108 0x0004      ADD      R0,R8,#+4
   \   00000196   0x.... 0x....      BL       _Z16gcode_msg_handlePht
   \   0000019A   0xE00A             B.N      ??esp_data_parser_15
   \                     ??esp_data_parser_12: (+1)
   \   0000019C   0x4649             MOV      R1,R9
   \   0000019E   0xF108 0x0004      ADD      R0,R8,#+4
   \   000001A2   0x.... 0x....      BL       _Z21file_first_msg_handlePht
   \   000001A6   0xE004             B.N      ??esp_data_parser_15
   \                     ??esp_data_parser_14: (+1)
   \   000001A8   0x4649             MOV      R1,R9
   \   000001AA   0xF108 0x0004      ADD      R0,R8,#+4
   \   000001AE   0x.... 0x....      BL       _Z24file_fragment_msg_handlePht
   \                     ??esp_data_parser_15: (+1)
   \   000001B2   0xF109 0x0205      ADD      R2,R9,#+5
   \   000001B6   0xB292             UXTH     R2,R2
   \   000001B8   0xF8B8 0x1400      LDRH     R1,[R8, #+1024]
   \   000001BC   0x4640             MOV      R0,R8
   \   000001BE   0x.... 0x....      BL       _Z12cut_msg_headPhtt
   \   000001C2   0xF8A8 0x0400      STRH     R0,[R8, #+1024]
   \   000001C6   0xF8B8 0x9400      LDRH     R9,[R8, #+1024]
   \   000001CA   0xF1B9 0x0F00      CMP      R9,#+0
   \   000001CE   0xF43F 0xAF32      BEQ.W    ??esp_data_parser_0
   \   000001D2   0x22A5             MOVS     R2,#+165
   \   000001D4   0x4649             MOV      R1,R9
   \   000001D6   0x4640             MOV      R0,R8
   \   000001D8   0x.... 0x....      BL       _Z11charAtArrayPKhjh
   \   000001DC   0xF110 0x0F01      CMN      R0,#+1
   \   000001E0   0xF47F 0xAF18      BNE.W    ??esp_data_parser_1
   \                     ??esp_data_parser_9: (+1)
   \   000001E4   0xF44F 0x6280      MOV      R2,#+1024
   \   000001E8   0x4639             MOV      R1,R7
   \   000001EA   0x4640             MOV      R0,R8
   \   000001EC   0x.... 0x....      BL       memset
   \   000001F0   0x4638             MOV      R0,R7
   \   000001F2   0xF8A8 0x0400      STRH     R0,[R8, #+1024]
   2105          		}
   2106          	}
   2107          }
   \                     ??esp_data_parser_3: (+1)
   \   000001F6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   2108          

   \                                 In section .text, align 2, keep-with-next
   2109          void hlk_data_parser(char *cmdRxBuf, int len)
   2110          {
   2111          #if 0//tan_mask	
   2112          	float  tmpTemp = 0;
   2113          	uint8_t *tmpStr = 0;
   2114          	int8_t rcv_ack_flag = 0;
   2115          	int32_t i, j, k;
   2116          	int8_t inc_flag = 0;
   2117          	int8_t num_valid = 0;
   2118          	int8_t  tempBuf[100] = {0};
   2119          	int8_t cmd_line[50] = {0};
   2120          	char binary_buf_ptr[50] = {0};
   2121          	int num_write = 0;
   2122          	int cr_index;
   2123          	int gcode_int_value;
   2124          	float gcode_float_value;
   2125          	int error_binary_head = 0;
   2126          	char *ignoreStr;
   2127          	
   2128          	int res;
   2129          
   2130          	QUEUE cmd_queue;
   2131          
   2132          	if(cmdRxBuf == 0)
   2133          	{
   2134          		return;
   2135          	}
   2136          	
   2137          	//memset(cmdRxBuf, 0, sizeof(cmdRxBuf));
   2138          	//while(popFIFO(&gcodeCmdRxFIFO,  cmdRxBuf) == fifo_ok)
   2139          	if(len > 0)	
   2140          	{	
   2141          		//link_mutex_detect_time = 0;
   2142          				
   2143          				i = 0;
   2144          		
   2145          		if(wifi_link_state == WIFI_TRANS_FILE)
   2146          		{
   2147          			char *endStr = 0;
   2148          			
   2149          			//char binary_head[2] = {0, 0};
   2150          				
   2151          				//unsigned char binary_data_len = 0;
   2152          			//	char binary_write_buf[512];
   2153          			//	int binary_write_index = 0;
   2154          				char binary_tmp_str[20];
   2155          				int binary_index_per_frame;
   2156          				int tmp_len;
   2157          			memset(binary_head, 0, sizeof(binary_head));
   2158          				 binary_data_len = 0;
   2159          			
   2160          			endStr = (char *)strstr(&cmdRxBuf[0], "M29");
   2161          		
   2162          			if((cmdRxBuf[0] & 0x80) || (lastBinaryCmd[0] != 0))	//binary
   2163          			{
   2164          				int binary_read_index = 0;
   2165          				
   2166          				
   2167          				
   2168          			total_write += len;
   2169          			while(1)
   2170          			{
   2171          				if(lastBinaryCmd[0] != 0)
   2172          				{
   2173          					if(lastBinaryCmd[0] < 2) //only one head byte
   2174          					{
   2175          						binary_head[0] = lastBinaryCmd[1];
   2176          						binary_head[1] = cmdRxBuf[0];
   2177          						
   2178          						if((binary_head[0] & 0x80) == 0)
   2179          						{
   2180          							memset(lastBinaryCmd, 0, sizeof(lastBinaryCmd));
   2181          							endStr = (char *)strstr(&cmdRxBuf[0], "M29");
   2182          							error_binary_head = 1;
   2183          							break;
   2184          						}
   2185          						
   2186          						binary_data_len = computeBinarySize(binary_head);
   2187          						
   2188          						if(len < binary_data_len - lastBinaryCmd[0] + 1)
   2189          						{
   2190          							memcpy(&lastBinaryCmd[2], cmdRxBuf, len);
   2191          							lastBinaryCmd[0] += len;
   2192          							break;
   2193          						}
   2194          						
   2195          						memcpy(binary_buf_ptr,  &lastBinaryCmd[1], lastBinaryCmd[0]);
   2196          						memcpy(binary_buf_ptr + lastBinaryCmd[0], cmdRxBuf, binary_data_len - lastBinaryCmd[0] );
   2197          						
   2198          						
   2199          
   2200          						binary_read_index = binary_data_len - lastBinaryCmd[0];
   2201          					}
   2202          					else
   2203          					{
   2204          						binary_head[0] = lastBinaryCmd[1];
   2205          						binary_head[1] = lastBinaryCmd[2];
   2206          						
   2207          						if((binary_head[0] & 0x80) == 0)
   2208          						{
   2209          							memset(lastBinaryCmd, 0, sizeof(lastBinaryCmd));
   2210          							endStr = (char *)strstr(&cmdRxBuf[0], "M29");
   2211          							error_binary_head = 1;
   2212          							break;
   2213          						}
   2214          						
   2215          						binary_data_len = computeBinarySize(binary_head);
   2216          						
   2217          						if(len < binary_data_len - lastBinaryCmd[0])
   2218          						{
   2219          							memcpy(&lastBinaryCmd[lastBinaryCmd[0] + 1], cmdRxBuf, len);
   2220          							lastBinaryCmd[0] += len;
   2221          							break;
   2222          						}
   2223          						
   2224          						memcpy(binary_buf_ptr,  &lastBinaryCmd[1], lastBinaryCmd[0]);
   2225          						memcpy(binary_buf_ptr + lastBinaryCmd[0], cmdRxBuf, binary_data_len - lastBinaryCmd[0] );
   2226          						
   2227          						binary_read_index = binary_data_len - lastBinaryCmd[0];
   2228          					}
   2229          					
   2230          				}
   2231          				else
   2232          				{
   2233          					binary_head[0] = cmdRxBuf[binary_read_index];
   2234          					binary_head[1] = cmdRxBuf[binary_read_index + 1];
   2235          					
   2236          					if((binary_head[0] & 0x80) == 0)
   2237          					{
   2238          						endStr = (char *)strstr(&cmdRxBuf[binary_read_index], "M29");
   2239          						error_binary_head = 1;
   2240          						break;
   2241          					}
   2242          				
   2243          						
   2244          					
   2245          					binary_data_len = computeBinarySize(binary_head);
   2246          
   2247          					if(len <= (binary_read_index + binary_data_len))
   2248          					{
   2249          						memcpy(&lastBinaryCmd[1], &cmdRxBuf[binary_read_index], len - binary_read_index);
   2250          						lastBinaryCmd[0] = len - binary_read_index;
   2251          						break;
   2252          					}
   2253          
   2254          					
   2255          					memset(binary_buf_ptr, 0, sizeof(binary_buf_ptr));
   2256          					memcpy(binary_buf_ptr, &cmdRxBuf[binary_read_index], binary_data_len);
   2257          					
   2258          					binary_read_index += binary_data_len ;
   2259          
   2260          					
   2261          					
   2262          				}
   2263          
   2264          				memset(lastBinaryCmd, 0, sizeof(lastBinaryCmd));
   2265          			
   2266          				
   2267          					binary_index_per_frame = 2;
   2268          						
   2269          					if(binary_read_index >= len)
   2270          					{
   2271          						break;
   2272          					}
   2273          					//binary_head[0] = binary_buf_ptr[0];
   2274          					//binary_head[1] = binary_buf_ptr[1];
   2275          				//	binary_read_index += 2;
   2276          				//	binary_index_per_frame += 2;
   2277          				//	binary_data_len = computeBinarySize(binary_buf_ptr);
   2278          
   2279          
   2280          					if(binary_head[0] & 0x1) // N
   2281          					{							
   2282          						sprintf(binary_tmp_str, "N%d ", binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame + 1] << 8));
   2283          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2284          						binary_index_per_frame += 2;
   2285          				//		binary_read_index += 2;
   2286          					}
   2287          
   2288          					if(binary_head[0] & (0x1 << 1)) // M
   2289          					{							
   2290          						sprintf(binary_tmp_str, "M%d ", binary_buf_ptr[binary_index_per_frame]);
   2291          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2292          						binary_index_per_frame += 1;
   2293          
   2294          						/*after M117, text follow */
   2295          						if(binary_buf_ptr[binary_index_per_frame - 1] == 117)
   2296          						{
   2297          							write_to_file(&binary_buf_ptr[binary_index_per_frame], strlen(&binary_buf_ptr[binary_index_per_frame]));
   2298          							binary_index_per_frame += 16;
   2299          						}
   2300          					//	binary_read_index += 1;
   2301          					}
   2302          
   2303          					if(binary_head[0] & (0x1 << 2)) // G
   2304          					{
   2305          						write_to_file("G", 1);							
   2306          						sprintf(binary_tmp_str, "%d ", binary_buf_ptr[binary_index_per_frame]);
   2307          					
   2308          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2309          						binary_index_per_frame += 1;
   2310          					//	binary_read_index += 1;
   2311          					}
   2312          
   2313          					if(binary_head[0] & (0x1 << 3)) // X
   2314          					{
   2315          						#if 0
   2316          						gcode_int_value = binary_buf_ptr[binary_index_per_frame + 2] + (binary_buf_ptr[binary_index_per_frame + 3] << 8)+ (binary_buf_ptr[binary_index_per_frame + 4] << 16);
   2317          						if(gcode_int_value & (1 << 23))
   2318          						{
   2319          							gcode_int_value |= 1 << 31;
   2320          						}
   2321          						if((binary_buf_ptr[binary_index_per_frame] != 0) || (binary_buf_ptr[binary_index_per_frame + 1] != 0))
   2322          						{
   2323          							
   2324          							gcode_float_value = (float)(gcode_int_value % 10) +  (float)(binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame + 1] << 8)) / 10000.0;
   2325          							if(gcode_int_value / 10 != 0)
   2326          								sprintf(binary_tmp_str, "%d%.5f", gcode_int_value / 10, gcode_float_value);
   2327          							else
   2328          								sprintf(binary_tmp_str, "%.5f", gcode_float_value);
   2329          							
   2330          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2331          						}
   2332          						else
   2333          						{
   2334          							sprintf(binary_tmp_str, "%d", gcode_int_value);
   2335          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2336          						}
   2337          						write_to_file(" ", 1);
   2338          						binary_index_per_frame += 5;
   2339          						#endif
   2340          						memcpy((char *)&gcode_float_value, &binary_buf_ptr[binary_index_per_frame], 4);
   2341          						sprintf(binary_tmp_str, "X%f ", gcode_float_value);
   2342          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2343          						binary_index_per_frame += 4;
   2344          						
   2345          					//	binary_read_index += 4;
   2346          					}
   2347          
   2348          					if(binary_head[0] & (0x1 << 4)) // Y
   2349          					{
   2350          						
   2351          						#if 0
   2352          						gcode_int_value = binary_buf_ptr[binary_index_per_frame + 2] + (binary_buf_ptr[binary_index_per_frame + 3] << 8)+ (binary_buf_ptr[binary_index_per_frame + 4] << 16);
   2353          						if(gcode_int_value & (1 << 23))
   2354          						{
   2355          							gcode_int_value |= 1 << 31;
   2356          						}
   2357          						if((binary_buf_ptr[binary_index_per_frame] != 0) || (binary_buf_ptr[binary_index_per_frame + 1] != 0))
   2358          						{
   2359          							
   2360          							gcode_float_value = (float)(gcode_int_value % 10) +  (float)(binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame + 1] << 8)) / 10000.0;
   2361          							if(gcode_int_value / 10 != 0)
   2362          								sprintf(binary_tmp_str, "%d%.5f", gcode_int_value / 10, gcode_float_value);
   2363          							else
   2364          								sprintf(binary_tmp_str, "%.5f", gcode_float_value);
   2365          							
   2366          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2367          						}
   2368          						else
   2369          						{
   2370          							sprintf(binary_tmp_str, "%d", gcode_int_value);
   2371          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2372          						}
   2373          						write_to_file(" ", 1);
   2374          						binary_index_per_frame += 5;
   2375          						#endif
   2376          						memcpy((char *)&gcode_float_value, &binary_buf_ptr[binary_index_per_frame], 4);
   2377          						sprintf(binary_tmp_str, "Y%f ", gcode_float_value);
   2378          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2379          						binary_index_per_frame += 4;
   2380          					//	binary_read_index += 4;
   2381          					}
   2382          
   2383          					if(binary_head[0] & (0x1 << 5)) // Z
   2384          					{
   2385          						#if 0
   2386          						gcode_int_value = binary_buf_ptr[binary_index_per_frame + 2] + (binary_buf_ptr[binary_index_per_frame + 3] << 8)+ (binary_buf_ptr[binary_index_per_frame + 4] << 16);
   2387          						if(gcode_int_value & (1 << 23))
   2388          						{
   2389          							gcode_int_value |= 1 << 31;
   2390          						}
   2391          						if((binary_buf_ptr[binary_index_per_frame] != 0) || (binary_buf_ptr[binary_index_per_frame + 1] != 0))
   2392          						{
   2393          							
   2394          							gcode_float_value = (float)(gcode_int_value % 10) +  (float)(binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame + 1] << 8)) / 10000.0;
   2395          							if(gcode_int_value / 10 != 0)
   2396          								sprintf(binary_tmp_str, "%d%.5f", gcode_int_value / 10, gcode_float_value);
   2397          							else
   2398          								sprintf(binary_tmp_str, "%.5f", gcode_float_value);
   2399          							
   2400          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2401          						}
   2402          						else
   2403          						{
   2404          							sprintf(binary_tmp_str, "%d", gcode_int_value);
   2405          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2406          						}
   2407          						write_to_file(" ", 1);
   2408          						binary_index_per_frame += 5;
   2409          						#endif
   2410          						memcpy((char *)&gcode_float_value, &binary_buf_ptr[binary_index_per_frame], 4);
   2411          						sprintf(binary_tmp_str, "Z%f ", gcode_float_value);
   2412          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2413          						binary_index_per_frame += 4;
   2414          					//	binary_read_index += 4;
   2415          					}
   2416          
   2417          					if(binary_head[0] & (0x1 << 6)) // E
   2418          					{
   2419          
   2420          						#if 0
   2421          						gcode_int_value = binary_buf_ptr[binary_index_per_frame + 2] + (binary_buf_ptr[binary_index_per_frame + 3] << 8)+ (binary_buf_ptr[binary_index_per_frame + 4] << 16);
   2422          						if(gcode_int_value & (1 << 23))
   2423          						{
   2424          							gcode_int_value = gcode_int_value << 8;
   2425          							gcode_int_value /= 256;
   2426          						}
   2427          						if((binary_buf_ptr[binary_index_per_frame] != 0) || (binary_buf_ptr[binary_index_per_frame + 1] != 0))
   2428          						{
   2429          							
   2430          							gcode_float_value = (float)(gcode_int_value % 10) +  (float)(binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame + 1] << 8)) / 10000.0;
   2431          							if(gcode_int_value / 10 != 0)
   2432          								sprintf(binary_tmp_str, "%d%.5f", gcode_int_value / 10, gcode_float_value);
   2433          							else
   2434          								sprintf(binary_tmp_str, "%.5f", gcode_float_value);
   2435          							
   2436          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2437          						}
   2438          						else
   2439          						{
   2440          							sprintf(binary_tmp_str, "%d", gcode_int_value);
   2441          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2442          						}
   2443          						write_to_file(" ", 1);
   2444          						binary_index_per_frame += 5;
   2445          						#endif
   2446          						memcpy((char *)&gcode_float_value, &binary_buf_ptr[binary_index_per_frame], 4);
   2447          						sprintf(binary_tmp_str, "E%f ", gcode_float_value);
   2448          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2449          						binary_index_per_frame += 4;
   2450          					//	binary_read_index += 4;
   2451          					}
   2452          
   2453          					if(binary_head[1] & (0x1 << 0)) // F
   2454          					{
   2455          					
   2456          						#if 0
   2457          						if((binary_buf_ptr[binary_index_per_frame] != 0) || (binary_buf_ptr[binary_index_per_frame + 1] != 0))
   2458          						{
   2459          							gcode_int_value = binary_buf_ptr[binary_index_per_frame + 2] + (binary_buf_ptr[binary_index_per_frame + 3] << 8)+ (binary_buf_ptr[binary_index_per_frame + 4] << 16);
   2460          							gcode_float_value = (float)(gcode_int_value % 10) +  (float)(binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame + 1] << 8)) / 10000.0;
   2461          							if(gcode_int_value / 10 != 0)
   2462          								sprintf(binary_tmp_str, "%d%.5f", gcode_int_value / 10, gcode_float_value);
   2463          							else
   2464          								sprintf(binary_tmp_str, "%.5f", gcode_float_value);
   2465          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2466          						}
   2467          						else
   2468          						{
   2469          							sprintf(binary_tmp_str, "%d", binary_buf_ptr[binary_index_per_frame + 2] + (binary_buf_ptr[binary_index_per_frame + 3] << 8)+ (binary_buf_ptr[binary_index_per_frame + 4] << 16));
   2470          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2471          						}
   2472          						write_to_file(" ", 1);
   2473          						binary_index_per_frame += 5;
   2474          						#endif
   2475          						memcpy((char *)&gcode_float_value, &binary_buf_ptr[binary_index_per_frame], 4);
   2476          						sprintf(binary_tmp_str, "F%f ", gcode_float_value);
   2477          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2478          						binary_index_per_frame += 4;
   2479          					//	binary_read_index += 4;
   2480          					}
   2481          
   2482          					if(binary_head[1] & (0x1 << 1)) // T
   2483          					{						
   2484          						sprintf(binary_tmp_str, "T%d ", binary_buf_ptr[binary_index_per_frame]);
   2485          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2486          						
   2487          						binary_index_per_frame += 1;
   2488          					//	binary_read_index += 1;
   2489          					}
   2490          
   2491          					if(binary_head[1] & (0x1 << 2)) //S
   2492          					{
   2493          						#if 0
   2494          						gcode_int_value = binary_buf_ptr[binary_index_per_frame + 2] + (binary_buf_ptr[binary_index_per_frame + 3] << 8)+ (binary_buf_ptr[binary_index_per_frame + 4] << 16);
   2495          						if(gcode_int_value & (1 << 23))
   2496          						{
   2497          							gcode_int_value |= 1 << 31;
   2498          						}
   2499          						if((binary_buf_ptr[binary_index_per_frame] != 0) || (binary_buf_ptr[binary_index_per_frame + 1] != 0))
   2500          						{
   2501          							
   2502          							gcode_float_value = (float)(gcode_int_value % 10) +  (float)(binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame + 1] << 8)) / 10000.0;
   2503          							if(gcode_int_value / 10 != 0)
   2504          								sprintf(binary_tmp_str, "%d%.5f", gcode_int_value / 10, gcode_float_value);
   2505          							else
   2506          								sprintf(binary_tmp_str, "%.5f", gcode_float_value);
   2507          							
   2508          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2509          						}
   2510          						else
   2511          						{
   2512          							sprintf(binary_tmp_str, "%d", gcode_int_value);
   2513          							write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2514          						}
   2515          						write_to_file(" ", 1);
   2516          						binary_index_per_frame += 5;
   2517          						#endif
   2518          						sprintf(binary_tmp_str, "S%d ", binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame+1] << 8) + (binary_buf_ptr[binary_index_per_frame + 2] << 16) + (binary_buf_ptr[binary_index_per_frame + 3] << 24));
   2519          
   2520          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2521          					
   2522          						binary_index_per_frame += 4;
   2523          					//	binary_read_index += 4;
   2524          					}
   2525          
   2526          					if(binary_head[1] & (0x1 << 3)) //P
   2527          					{							
   2528          						sprintf(binary_tmp_str, "P%d ", binary_buf_ptr[binary_index_per_frame] + (binary_buf_ptr[binary_index_per_frame+1] << 8) + (binary_buf_ptr[binary_index_per_frame + 2] << 16) + (binary_buf_ptr[binary_index_per_frame + 3] << 24));
   2529          
   2530          						write_to_file(binary_tmp_str, strlen(binary_tmp_str));
   2531          					
   2532          						binary_index_per_frame += 4;
   2533          					//	binary_read_index += 4;
   2534          					}
   2535          
   2536          
   2537          					if(binary_index_per_frame == binary_data_len)
   2538          					{
   2539          						write_to_file("\n", 1);
   2540          					}
   2541          
   2542          					
   2543          				}
   2544          				//res =	f_write (&save_File, &cmdRxBuf[0], strlen(&cmdRxBuf[0]), &num_write);
   2545          				
   2546          				/*total_write += len;*/
   2547          
   2548          				
   2549          				//f_write (&file_brp, cmdRxBuf, len, &num_write);
   2550          				
   2551          				if(error_binary_head == 1)
   2552          				{
   2553          					error_binary_head = 0;
   2554          				}
   2555          				
   2556          				if(total_write >= 1000)
   2557          				{
   2558          					total_write -= 1000;
   2559          					wifi_ret_ack();
   2560          				}
   2561          				
   2562          				if(endStr != 0)
   2563          				{
   2564          					f_write (file_writer.file, file_writer.write_buf, file_writer.write_index, (unsigned int *)&num_write);
   2565          					memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   2566          					file_writer.write_index = 0;
   2567          					wifi_link_state = WIFI_CONNECTED;	
   2568          					f_close(&save_File);
   2569          				//	f_close(&file_brp);
   2570          					wifi_loop_cycle = 500;
   2571          					printerStaus == pr_idle;
   2572          					clear_cur_ui();
   2573          					//draw_dialog_filetransfer(1);
   2574          					draw_ready_print();
   2575          				}
   2576          			}
   2577          			else	//assic
   2578          			{
   2579          				#if 1
   2580          				if(endStr != 0)
   2581          				{
   2582          					res =	f_write (&save_File, &cmdRxBuf[0], endStr - (&cmdRxBuf[0]), (unsigned int *)&num_write);
   2583          					wifi_link_state = WIFI_CONNECTED;	
   2584          					f_close(&save_File);
   2585          					wifi_loop_cycle = 500;
   2586          					clear_cur_ui();
   2587          					//draw_dialog_filetransfer(1);
   2588          					draw_ready_print();
   2589          				}
   2590          				else
   2591          				{
   2592          					res =	f_write (&save_File, &cmdRxBuf[0], strlen(&cmdRxBuf[0]), (unsigned int *)&num_write);
   2593          				}
   2594          				total_write += strlen(&cmdRxBuf[0]);
   2595          				//if((res == 0) && (total_write >= 512))
   2596          				if(res == 0)
   2597          				{
   2598          					//total_write -= 512;
   2599          					wifi_ret_ack();
   2600          				}
   2601          				#endif
   2602          			}
   2603          			
   2604          			return;
   2605          		}
   2606          
   2607          		
   2608          		init_queue(&cmd_queue);
   2609          		cr_index = 0;
   2610          		j = 0;
   2611          		
   2612          		while(1)
   2613          		{
   2614          			if((cmdRxBuf[j] == '\r') || (cmdRxBuf[j] == '\n'))
   2615          			{
   2616          				if(strlen((char *)cmd_line) > 1)
   2617          				{
   2618          					cmd_line[cr_index] = '\n';
   2619          					push_queue(&cmd_queue, (char *)cmd_line, strlen((char *)cmd_line));
   2620          				}
   2621          				memset(cmd_line, 0, sizeof(cmd_line));
   2622          				cr_index = 0;
   2623          			}
   2624          			else if(cmdRxBuf[j] == '\0')
   2625          				break;
   2626          			else
   2627          			{
   2628          				cmd_line[cr_index] = cmdRxBuf[j];
   2629          				cr_index++;
   2630          			}
   2631          
   2632          			j++;
   2633          			if(j >= len)
   2634          				break;
   2635          		}
   2636          		
   2637          
   2638          		while(pop_queue(&cmd_queue, (char *)cmd_line, sizeof(cmd_line)) >= 0)		
   2639          		{
   2640          			inc_flag = 0;	
   2641          
   2642          			if(wifi_link_state == WIFI_CONFIG_OK)
   2643          			{
   2644          				#ifndef ESP_MODEL
   2645          				tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "at+net_wanip=?");
   2646          				#else
   2647          				tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "AT+CIFSR");
   2648          				#endif
   2649          				if(tmpStr)
   2650          				{
   2651          					wait_ip_back_flag = 1;				
   2652          					continue;
   2653          				}
   2654          			}
   2655          
   2656          			if(wait_ip_back_flag)
   2657          			{
   2658          				#ifndef ESP_MODEL
   2659          				tmpStr = (uint8_t *)&cmd_line[0];
   2660          				#else
   2661          				tmpStr = (uint8_t *)strstr((char *)cmd_line, "CIFSR:");
   2662          				if(tmpStr == 0)
   2663          				{
   2664          					continue;
   2665          				}
   2666          				tmpStr = (uint8_t *)strstr((char *)cmd_line, "\"");
   2667          				if(tmpStr == 0)
   2668          				{
   2669          					continue;
   2670          				}
   2671          				tmpStr++;
   2672          				#endif
   2673          				if((*tmpStr >= '0') && (*tmpStr <= '9'))
   2674          				{
   2675          					int ip_index = 0;
   2676          					while((*(tmpStr + ip_index) == '.') || ((*(tmpStr + ip_index) >= '0') && (*(tmpStr + ip_index) <= '9')))
   2677          					{
   2678          						ipPara.ip_addr[ip_index] = *(tmpStr + ip_index);
   2679          
   2680          						ip_index++;
   2681          						
   2682          						if(ip_index >= sizeof(ipPara.ip_addr))
   2683          							break;
   2684          							
   2685          					}
   2686          					ipPara.ip_addr[ip_index] = '\0';
   2687          					if((ipPara.ip_addr[0] != '0'))
   2688          					{
   2689          						wifi_link_state = WIFI_GET_IP_OK;
   2690          					}
   2691          					
   2692          				}
   2693          				wait_ip_back_flag = 0;
   2694          			
   2695          			}
   2696          			
   2697          			if(wifi_link_state == WIFI_GET_IP_OK)
   2698          			{
   2699          				if(gCfgItems.wifi_mode_sel == 1)
   2700          				{
   2701          					wifi_link_state = WIFI_RECONN;
   2702          				}
   2703          				else
   2704          				{				
   2705          					#ifndef ESP_MODEL
   2706          					tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "Connected");
   2707          					if(tmpStr)
   2708          					{
   2709          						wifi_link_state = WIFI_RECONN;
   2710          					}
   2711          					#else
   2712          					tmpStr = (uint8_t *)strstr((char *)&cmd_line[0], "STATUS:");
   2713          					if(tmpStr)
   2714          					{
   2715          					////////	if( (*(tmpStr + 7) >= '2') && (*(tmpStr + 7) <= '4'))
   2716          					//	if((ipPara.ip_addr[0] != '0'))
   2717          						{
   2718          							wifi_link_state = WIFI_RECONN;
   2719          							raw_send_to_wifi("AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"));
   2720          						}
   2721          					}
   2722          					#endif
   2723          				}
   2724          				
   2725          			}
   2726          			
   2727          
   2728          			
   2729          
   2730          			if(wifi_link_state >= WIFI_CONNECTED)
   2731          			{
   2732          
   2733          				wifi_gcode_exec((uint8_t *)cmd_line);
   2734          				
   2735          				
   2736          			}
   2737          		}
   2738          	}
   2739          
   2740          #endif	
   2741          }
   \                     _Z15hlk_data_parserPci: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
   \                     wifi_link_state:
   \   00000000                      DS8 1
   \                     esp_state:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     wifiTransError:
   \   00000004                      DS8 12
   \                     upload_result:
   \   00000010                      DS8 4
   \                     upload_time:
   \   00000014                      DS8 4
   \                     upload_size:
   \   00000018                      DS8 4
   \                     lastFragment:
   \   0000001C                      DS8 4
   2742          
   2743          int32_t tick_net_time1, tick_net_time2;
   \                     tick_net_time1:
   \   00000020                      DS8 4
   \                     tick_net_time2:
   \   00000024                      DS8 4
   \                     saveFilePath:
   \   00000028                      DS8 52

   \                                 In section .bss, align 4
   \                     wifiPara:
   \   00000000                      DS8 108

   \                                 In section .bss, align 1
   \                     wifi_loop_time:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     wifi_check_time:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     left_to_send:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     left_to_save:
   \   00000000                      DS8 96

   \                                 In section .bss, align 4
   \                     wifiDmaRcvFifo:
   \   00000000                      DS8 48

   \                                 In section .bss, align 4
   \                     buf_to_wifi:
   \   00000000                      DS8 256
   \                     index_to_wifi:
   \   00000100                      DS8 4

   \                                 In section .bss, align 1
   \                     wait_ip_back_flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     file_writer:
   \   00000000                      DS8 568
   \                     save_File:
   \   00000238                      DS8 556

   \                                 In section .bss, align 4
   \                     lastBinaryCmd:
   \   00000000                      DS8 52

   \                                 In section .bss, align 2
   \                     binary_head:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
   \                     binary_data_len:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     esp_msg_buf:
   \   00000000                      DS8 1024
   \                     esp_msg_index:
   \   00000400                      DS8 2

   \                                 In section .bss, align 4
   \                     ??lfn:
   \   00000000                      DS8 256
   2744          
   2745          #if 0
   2746          static int esp_dma_pre(volatile uint8_t *pBuffer, uint32_t NumByteToRead)
   2747          
   2748          {
   2749          #if 0
   2750          	/*if ((SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == SET))
   2751          	{
   2752          		SPI_I2S_SendData(SPI2, 0x12);
   2753          	}*/
   2754          	DMA1_Channel5->CCR &= ~( 1 << 0 ) ;         //πÿ±’DMAÕ®µ¿5
   2755          	DMA1_Channel5->CMAR = (u32)pBuffer ; //…Ë÷√DMA¥Ê¥¢∆˜µÿ÷∑£¨◊¢“‚MSIZE
   2756          
   2757          	DMA1_Channel5->CNDTR = 0x0000   ;           //¥´ ‰ ˝¡øºƒ¥Ê∆˜«Â¡„
   2758          	DMA1_Channel5->CNDTR = NumByteToRead ;         //¥´ ‰ ˝¡ø…Ë÷√Œ™buffersize∏ˆ
   2759          
   2760          	DMA1->IFCR = 0xF0000 ;                         //«Â≥˝Õ®µ¿5µƒ±Í÷æŒª
   2761          	
   2762          	DMA1_Channel5->CCR |= 1 << 0 ;              //ø™∆ÙDMAÕ®µ¿5
   2763          	
   2764          	//while((DMA1->ISR & (0x200))== 0); //not polling , use interrupt
   2765          #endif	
   2766          
   2767          	hdma_usart1_rx.Instance->CR &= ~( 1 << 0 ) ;         //πÿ±’DMAÕ®µ¿
   2768          	hdma_usart1_rx.Instance->NDTR = NumByteToRead;
   2769          	hdma_usart1_rx.Instance->M0AR = (uint32_t)pBuffer;
   2770            
   2771          	hdma_usart1_rx.Instance->CR |= 1 << 0 ; 
   2772          
   2773          	return 1;
   2774          
   2775          }
   2776          #else

   \                                 In section .text, align 2, keep-with-next
   2777          static int esp_dma_pre()
   2778          {
   2779          #if 0
   2780          	hdma_usart1_rx.Instance->CCR &= ~( 1 << 0 ) ;
   2781          
   2782          	hdma_usart1_rx.Instance->CNDTR = UART_RX_BUFFER_SIZE;
   2783          
   2784          	/* Configure DMA Channel destination address */
   2785          	hdma_usart1_rx.Instance->CMAR = (uint32_t)WifiRxFifo.uartTxBuffer;
   2786          
   2787          	DMA1->IFCR = 0xF0000;//0x3d0000 ;   
   2788          	hdma_usart1_rx.Instance->CCR |= 1 << 0; 
   2789          #endif
   2790          	//HAL_UART_Receive_DMA(&huart1,(uint8_t*)&WifiRxFifo.uartTxBuffer[0],UART_RX_BUFFER_SIZE);
   2791              DMA1_Channel5->CCR &= ~( 1 << 0 ) ; 
   \                     _Z11esp_dma_prev: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable71_4  ;; 0x40020004
   \   00000004   0x6D41             LDR      R1,[R0, #+84]
   \   00000006   0x0849             LSRS     R1,R1,#+1
   \   00000008   0x0049             LSLS     R1,R1,#+1
   \   0000000A   0x6541             STR      R1,[R0, #+84]
   2792              DMA1_Channel5->CMAR = (uint32_t)WifiRxFifo.uartTxBuffer;
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable71_5
   \   00000010   0x6601             STR      R1,[R0, #+96]
   2793              DMA1_Channel5->CNDTR = 0x0000   ;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6581             STR      R1,[R0, #+88]
   2794              DMA1_Channel5->CNDTR = UART_RX_BUFFER_SIZE ;
   \   00000016   0xF44F 0x6180      MOV      R1,#+1024
   \   0000001A   0x6581             STR      R1,[R0, #+88]
   2795              DMA1->IFCR = 0xF0000 ;
   \   0000001C   0xF44F 0x2170      MOV      R1,#+983040
   \   00000020   0x6001             STR      R1,[R0, #+0]
   2796              DMA1_Channel5->CCR |= 1 << 0 ;
   \   00000022   0x6D41             LDR      R1,[R0, #+84]
   \   00000024   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000028   0x6541             STR      R1,[R0, #+84]
   2797          
   2798          	return 1;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x4770             BX       LR               ;; return
   2799          	
   2800          }
   2801          
   2802          #endif
   2803          

   \                                 In section .text, align 2, keep-with-next
   2804          static int storeRcvData(uint8_t *bufToCpy, int32_t len)
   2805          {
   \                     _Z12storeRcvDataPhi: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   2806          	unsigned char tmpW = wifiDmaRcvFifo.write_cur;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable71_6
   \   00000006   0xF894 0x502D      LDRB     R5,[R4, #+45]
   2807          	
   2808          	if(len > UDISKBUFLEN)
   \   0000000A   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000000E   0xDD01             BLE.N    ??storeRcvData_0
   2809          		return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD70             POP      {R4-R6,PC}
   2810          	
   2811          	if(wifiDmaRcvFifo.state[tmpW] == udisk_buf_empty)
   \                     ??storeRcvData_0: (+1)
   \   00000014   0x192E             ADDS     R6,R5,R4
   \   00000016   0xF996 0x2024      LDRSB    R2,[R6, #+36]
   \   0000001A   0x2A00             CMP      R2,#+0
   \   0000001C   0xD113             BNE.N    ??storeRcvData_1
   2812          	{
   2813          		memcpy((unsigned char *)wifiDmaRcvFifo.bufferAddr[tmpW], (uint8_t *)bufToCpy, len);
   \   0000001E   0x460A             MOV      R2,R1
   \   00000020   0x4601             MOV      R1,R0
   \   00000022   0xF854 0x0025      LDR      R0,[R4, R5, LSL #+2]
   \   00000026   0x.... 0x....      BL       memcpy
   2814          		wifiDmaRcvFifo.state[tmpW] = udisk_buf_full;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0xF886 0x0024      STRB     R0,[R6, #+36]
   2815          		wifiDmaRcvFifo.write_cur = (tmpW + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
   \   00000030   0x1C68             ADDS     R0,R5,#+1
   \   00000032   0x1081             ASRS     R1,R0,#+2
   \   00000034   0xEB00 0x7151      ADD      R1,R0,R1, LSR #+29
   \   00000038   0x10C9             ASRS     R1,R1,#+3
   \   0000003A   0xEBA0 0x00C1      SUB      R0,R0,R1, LSL #+3
   \   0000003E   0xF884 0x002D      STRB     R0,[R4, #+45]
   2816          
   2817          		return 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xBD70             POP      {R4-R6,PC}
   2818          	}
   2819          	else
   2820          		return 0;
   \                     ??storeRcvData_1: (+1)
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xBD70             POP      {R4-R6,PC}       ;; return
   2821          	
   2822          }
   2823          

   \                                 In section .text, align 2, keep-with-next
   2824          int32_t readWifiFifo(uint8_t *retBuf, uint32_t bufLen)
   2825          {
   \                     _Z12readWifiFifoPhj: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   2826          	unsigned char tmpR = wifiDmaRcvFifo.read_cur;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable71_6
   \   00000006   0xF894 0x502C      LDRB     R5,[R4, #+44]
   2827          	
   2828          	if(bufLen < UDISKBUFLEN)
   \   0000000A   0xF5B1 0x6F80      CMP      R1,#+1024
   \   0000000E   0xD201             BCS.N    ??readWifiFifo_0
   2829          		return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD70             POP      {R4-R6,PC}
   2830          
   2831          	if(wifiDmaRcvFifo.state[tmpR] == udisk_buf_full)
   \                     ??readWifiFifo_0: (+1)
   \   00000014   0x192E             ADDS     R6,R5,R4
   \   00000016   0xF996 0x1024      LDRSB    R1,[R6, #+36]
   \   0000001A   0x2901             CMP      R1,#+1
   \   0000001C   0xD114             BNE.N    ??readWifiFifo_1
   2832          	{		
   2833          
   2834          		memcpy(retBuf, (unsigned char *)wifiDmaRcvFifo.bufferAddr[tmpR], UDISKBUFLEN);
   \   0000001E   0xF44F 0x6280      MOV      R2,#+1024
   \   00000022   0xF854 0x1025      LDR      R1,[R4, R5, LSL #+2]
   \   00000026   0x.... 0x....      BL       memcpy
   2835          
   2836          		wifiDmaRcvFifo.state[tmpR] = udisk_buf_empty;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF886 0x0024      STRB     R0,[R6, #+36]
   2837          
   2838          		wifiDmaRcvFifo.read_cur = (tmpR + 1) % TRANS_RCV_FIFO_BLOCK_NUM;
   \   00000030   0x1C68             ADDS     R0,R5,#+1
   \   00000032   0x1081             ASRS     R1,R0,#+2
   \   00000034   0xEB00 0x7151      ADD      R1,R0,R1, LSR #+29
   \   00000038   0x10C9             ASRS     R1,R1,#+3
   \   0000003A   0xEBA0 0x00C1      SUB      R0,R0,R1, LSL #+3
   \   0000003E   0xF884 0x002C      STRB     R0,[R4, #+44]
   2839          
   2840          
   2841          		 return UDISKBUFLEN;
   \   00000042   0xF44F 0x6080      MOV      R0,#+1024
   \   00000046   0xBD70             POP      {R4-R6,PC}
   2842          	}
   2843          	else
   2844          		return 0;
   \                     ??readWifiFifo_1: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBD70             POP      {R4-R6,PC}       ;; return
   2845          }
   2846          
   2847          

   \                                 In section .text, align 2, keep-with-next
   2848          void stopEspTransfer()
   2849          {
   \                     _Z15stopEspTransferv: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   2850          	char state;
                 	     ^
Warning[Pe177]: variable "state" was declared but never referenced
   2851          	
   2852          	if(wifi_link_state == WIFI_TRANS_FILE)
   \   00000002   0x....             LDR.N    R4,??DataTable65
   \   00000004   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000008   0x2810             CMP      R0,#+16
   \   0000000A   0xD101             BNE.N    ??stopEspTransfer_0
   2853          		wifi_link_state = WIFI_CONNECTED;
   \   0000000C   0x200E             MOVS     R0,#+14
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
   2854          					
   2855          	f_close(&save_File);
   \                     ??stopEspTransfer_0: (+1)
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable71_7
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       f_close
   2856          	f_close(&save_File);
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x.... 0x....      BL       f_close
   2857          
   2858          	if(upload_result != 3)
   \   00000020   0x6920             LDR      R0,[R4, #+16]
   \   00000022   0x2803             CMP      R0,#+3
   \   00000024   0xD008             BEQ.N    ??stopEspTransfer_1
   2859          	{
   2860          		//state = 0x01;
   2861          		wifiTransError.flag = 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x7120             STRB     R0,[R4, #+4]
   2862          		wifiTransError.start_tick = getWifiTick();
   \   0000002A   0x.... 0x....      BL       _Z11getWifiTickv
   \   0000002E   0x60A0             STR      R0,[R4, #+8]
   2863          		f_unlink((const char *)saveFilePath);
   \   00000030   0xF104 0x0028      ADD      R0,R4,#+40
   \   00000034   0x.... 0x....      BL       f_unlink
   2864          		
   2865          	}
   2866          	else
   2867          	{
   2868          		//state = 0x02;
   2869          	}
   2870          	//package_to_wifi(WIFI_EXCEP_INF, &state, 1);
   2871          
   2872          	wifi_delay(200);
   \                     ??stopEspTransfer_1: (+1)
   \   00000038   0x20C8             MOVS     R0,#+200
   \   0000003A   0x.... 0x....      BL       _Z10wifi_delayi
   2873          
   2874          	//GPIO_SetBits(GPIOF, GPIO_Pin_1);
   2875                  WIFI_IO1_SET();
   \   0000003E   0x.... 0x....      LDR.W    R5,??DataTable71_8  ;; 0x40011000
   \   00000042   0x2180             MOVS     R1,#+128
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       GPIO_SetBits
   2876          	
   2877          	
   2878          	//wifi_deInit();	
   2879          	DMA1_Channel5->CCR &= ~( 1 << 0 ) ;
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable71_9  ;; 0x40020058
   \   0000004E   0x6801             LDR      R1,[R0, #+0]
   \   00000050   0x0849             LSRS     R1,R1,#+1
   \   00000052   0x0049             LSLS     R1,R1,#+1
   \   00000054   0x6001             STR      R1,[R0, #+0]
   2880              //USART1->CR1 = 0;
   2881              //USART1->CR2 = 0;
   2882              //USART1->CR3 = 0;
   2883              HAL_DMA_Abort((DMA_HandleTypeDef *)&hdma_usart1_rx);
   \   00000056   0x.... 0x....      LDR.W    R6,??DataTable71_10
   \   0000005A   0x4630             MOV      R0,R6
   \   0000005C   0x.... 0x....      BL       HAL_DMA_Abort
   2884          	HAL_DMA_DeInit((DMA_HandleTypeDef *)&hdma_usart1_rx);
   \   00000060   0x4630             MOV      R0,R6
   \   00000062   0x.... 0x....      BL       HAL_DMA_DeInit
   2885          	CLEAR_BIT(huart1.Instance->CR3, USART_CR3_DMAR);
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable71_11
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x6941             LDR      R1,[R0, #+20]
   \   0000006E   0xF021 0x0140      BIC      R1,R1,#0x40
   \   00000072   0x6141             STR      R1,[R0, #+20]
   2886              
   2887          	exchangeFlashMode(1);  //change spi flash to use dma mode
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0x.... 0x....      BL       exchangeFlashMode
   2888          
   2889          //	WIFI_COM.end();
   2890          //	WIFI_COM.begin(115200, true);
   2891          	esp_port_begin(1);
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x.... 0x....      BL       _Z14esp_port_beginh
   2892          	
   2893          	//GPIO_ResetBits(GPIOF, GPIO_Pin_1);
   2894          	if(wifiTransError.flag != 0x1)
   \   00000080   0x7920             LDRB     R0,[R4, #+4]
   \   00000082   0x2801             CMP      R0,#+1
   \   00000084   0xD005             BEQ.N    ??stopEspTransfer_2
   2895          	{
   2896          		WIFI_IO1_RESET();
   \   00000086   0x2180             MOVS     R1,#+128
   \   00000088   0x4628             MOV      R0,R5
   \   0000008A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000008E   0x.... 0x....      B.W      GPIO_ResetBits
   2897          	}
   2898          }
   \                     ??stopEspTransfer_2: (+1)
   \   00000092   0xBD70             POP      {R4-R6,PC}       ;; return
   2899          
   2900          
   2901          

   \                                 In section .text, align 2, keep-with-next
   2902          void wifi_rcv_handle()
   2903          {
   \                     _Z15wifi_rcv_handlev: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xF2AD 0x4D04      SUBW     SP,SP,#+1028
   2904          	 int8_t result;
                 	        ^
Warning[Pe177]: variable "result" was declared but never referenced
   2905          	 int32_t len = 0;
   2906          	 uint8_t ucStr[(UART_RX_BUFFER_SIZE) + 1] = {0};
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0xF240 0x4104      MOVW     R1,#+1028
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
   2907          	 uint8_t tmpBuffer1[30];
                 	         ^
Warning[Pe177]: variable "tmpBuffer1" was declared but never referenced
   2908          	 int8_t getDataF = 0;
   \   00000010   0x2500             MOVS     R5,#+0
   2909          	 
   2910             //	memset(ucStr, 0, sizeof(ucStr));
   2911          
   2912          	if(gCfgItems.wifi_type == ESP_WIFI)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable71_12
   \   00000016   0xF890 0x022C      LDRB     R0,[R0, #+556]
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xF040 0x80B9      BNE.W    ??wifi_rcv_handle_0
   2913          	{
   2914          		if(wifi_link_state == WIFI_TRANS_FILE)
   \   00000020   0x.... 0x....      LDR.W    R4,??DataTable71_13
   \   00000024   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000028   0x2810             CMP      R0,#+16
   \   0000002A   0xD135             BNE.N    ??wifi_rcv_handle_1
   2915          		{
   2916          			len = readWifiFifo(ucStr, UART_RX_BUFFER_SIZE);
   \   0000002C   0xF44F 0x6180      MOV      R1,#+1024
   \   00000030   0xA800             ADD      R0,SP,#+0
   \   00000032   0x.... 0x....      BL       _Z12readWifiFifoPhj
   2917          			if(len > 0)
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xDB0F             BLT.N    ??wifi_rcv_handle_2
   2918          			{
   2919          				esp_data_parser((char *)ucStr, len);
   \   0000003A   0x4601             MOV      R1,R0
   \   0000003C   0xA800             ADD      R0,SP,#+0
   \   0000003E   0x.... 0x....      BL       _Z15esp_data_parserPci
   2920          				if(wifi_link_state == WIFI_CONNECTED)
   \   00000042   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000046   0x280E             CMP      R0,#+14
   \   00000048   0xD106             BNE.N    ??wifi_rcv_handle_3
   2921          				{
   2922          					clear_cur_ui();
   \   0000004A   0x.... 0x....      BL       clear_cur_ui
   2923          					draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
   \   0000004E   0x2007             MOVS     R0,#+7
   \   00000050   0x.... 0x....      BL       draw_dialog
   2924          					stopEspTransfer();
   \   00000054   0x.... 0x....      BL       _Z15stopEspTransferv
   2925          				}
   2926          				getDataF = 1;
   \                     ??wifi_rcv_handle_3: (+1)
   \   00000058   0x2501             MOVS     R5,#+1
   2927          			}
   2928          
   2929          			
   2930          			if(esp_state == TRANSFER_STORE)
   \                     ??wifi_rcv_handle_2: (+1)
   \   0000005A   0xF994 0x0001      LDRSB    R0,[R4, #+1]
   \   0000005E   0x2802             CMP      R0,#+2
   \   00000060   0xD142             BNE.N    ??wifi_rcv_handle_4
   2931          			{
   2932          				if(storeRcvData((uint8_t *)WifiRxFifo.uartTxBuffer, UART_RX_BUFFER_SIZE))
   \   00000062   0xF44F 0x6180      MOV      R1,#+1024
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable71_5
   \   0000006A   0x.... 0x....      BL       _Z12storeRcvDataPhi
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD00C             BEQ.N    ??wifi_rcv_handle_5
   2933          				{
   2934          					esp_state = TRANSFERING;
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0x7060             STRB     R0,[R4, #+1]
   2935          					
   2936          					//esp_dma_pre(WifiRxFifo.uartTxBuffer, UART_RX_BUFFER_SIZE);
   2937          					esp_dma_pre();
   \   00000076   0x.... 0x....      BL       _Z11esp_dma_prev
   2938          					//wifi_ret_ack();
   2939          
   2940          					//GPIO_ResetBits(GPIOF, GPIO_Pin_1);
   2941          					if(wifiTransError.flag != 0x1)
   \   0000007A   0x7920             LDRB     R0,[R4, #+4]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD033             BEQ.N    ??wifi_rcv_handle_4
   2942          					{
   2943          						WIFI_IO1_RESET();
   \   00000080   0x2180             MOVS     R1,#+128
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable71_8  ;; 0x40011000
   \   00000086   0x.... 0x....      BL       GPIO_ResetBits
   \   0000008A   0xE02D             B.N      ??wifi_rcv_handle_4
   2944          					}
   2945          				}
   2946          				else
   2947          				{
   2948          					//GPIO_SetBits(GPIOF, GPIO_Pin_1);
   2949          		            WIFI_IO1_SET();
   \                     ??wifi_rcv_handle_5: (+1)
   \   0000008C   0x2180             MOVS     R1,#+128
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable71_8  ;; 0x40011000
   \   00000092   0x.... 0x....      BL       GPIO_SetBits
   \   00000096   0xE027             B.N      ??wifi_rcv_handle_4
   2950          				}
   2951          			}
   2952          		}
   2953          		else	
   2954          		{
   2955          			len = readUsartFifo((SZ_USART_FIFO *)&WifiRxFifo, (int8_t *)ucStr, UART_RX_BUFFER_SIZE);
   \                     ??wifi_rcv_handle_1: (+1)
   \   00000098   0xF44F 0x6280      MOV      R2,#+1024
   \   0000009C   0xA900             ADD      R1,SP,#+0
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable71_14
   \   000000A2   0x.... 0x....      BL       _Z13readUsartFifoP13SZ_USART_FIFOPai
   2956          			if(len > 0)
   \   000000A6   0x2801             CMP      R0,#+1
   \   000000A8   0xDB1E             BLT.N    ??wifi_rcv_handle_4
   2957          			{
   2958          				esp_data_parser((char *)ucStr, len);
   \   000000AA   0x4601             MOV      R1,R0
   \   000000AC   0xA800             ADD      R0,SP,#+0
   \   000000AE   0x.... 0x....      BL       _Z15esp_data_parserPci
   2959          				#if 1
   2960          				if(wifi_link_state == WIFI_TRANS_FILE) // rcv file first frame
   \   000000B2   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   000000B6   0x2810             CMP      R0,#+16
   \   000000B8   0xD10D             BNE.N    ??wifi_rcv_handle_6
   2961          				{
   2962          					exchangeFlashMode(0);  //change spi flash not use dma mode
   \   000000BA   0x4628             MOV      R0,R5
   \   000000BC   0x.... 0x....      BL       exchangeFlashMode
   2963          					
   2964          					wifi_delay(10);
   \   000000C0   0x200A             MOVS     R0,#+10
   \   000000C2   0x.... 0x....      BL       _Z10wifi_delayi
   2965          					
   2966          					esp_port_begin(0);
   \   000000C6   0x4628             MOV      R0,R5
   \   000000C8   0x.... 0x....      BL       _Z14esp_port_beginh
   2967          					//esp_dma_pre(WifiRxFifo.uartTxBuffer, UART_RX_BUFFER_SIZE);
   2968          					wifi_delay(10);
   \   000000CC   0x200A             MOVS     R0,#+10
   \   000000CE   0x.... 0x....      BL       _Z10wifi_delayi
   2969          
   2970          					tick_net_time1 = 0;
   \   000000D2   0x4628             MOV      R0,R5
   \   000000D4   0x6220             STR      R0,[R4, #+32]
   2971          					
   2972          				}
   2973          				#endif
   2974          				//GPIO_ResetBits(GPIOF, GPIO_Pin_1);
   2975          				if(wifiTransError.flag != 0x1)
   \                     ??wifi_rcv_handle_6: (+1)
   \   000000D6   0x7920             LDRB     R0,[R4, #+4]
   \   000000D8   0x2801             CMP      R0,#+1
   \   000000DA   0xD004             BEQ.N    ??wifi_rcv_handle_7
   2976          				{
   2977          					WIFI_IO1_RESET();
   \   000000DC   0x2180             MOVS     R1,#+128
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable71_8  ;; 0x40011000
   \   000000E2   0x.... 0x....      BL       GPIO_ResetBits
   2978          				}
   2979          				getDataF = 1;
   \                     ??wifi_rcv_handle_7: (+1)
   \   000000E6   0x2501             MOVS     R5,#+1
   2980          			}
   2981          		}
   2982          
   2983          		if(getDataF == 1)
   \                     ??wifi_rcv_handle_4: (+1)
   \   000000E8   0x2D01             CMP      R5,#+1
   \   000000EA   0xD103             BNE.N    ??wifi_rcv_handle_8
   2984          		{
   2985          			
   2986          			tick_net_time1 = getWifiTick();
   \   000000EC   0x.... 0x....      BL       _Z11getWifiTickv
   \   000000F0   0x6220             STR      R0,[R4, #+32]
   \   000000F2   0xE039             B.N      ??wifi_rcv_handle_9
   2987          			
   2988          		}	
   2989          		 else
   2990          		 {
   2991          		 
   2992          			tick_net_time2 = getWifiTick();
   \                     ??wifi_rcv_handle_8: (+1)
   \   000000F4   0x.... 0x....      BL       _Z11getWifiTickv
   \   000000F8   0x6260             STR      R0,[R4, #+36]
   2993          			#if 1
   2994          			if(wifi_link_state == WIFI_TRANS_FILE)
   \   000000FA   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   000000FE   0x2810             CMP      R0,#+16
   \   00000100   0xD114             BNE.N    ??wifi_rcv_handle_10
   2995          			{
   2996          				if((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 4500)) // transfer timeout
   \   00000102   0x6A20             LDR      R0,[R4, #+32]
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD011             BEQ.N    ??wifi_rcv_handle_10
   \   00000108   0x6A61             LDR      R1,[R4, #+36]
   \   0000010A   0x.... 0x....      BL       _Z15getWifiTickDiffii
   \   0000010E   0xF241 0x1195      MOVW     R1,#+4501
   \   00000112   0x4288             CMP      R0,R1
   \   00000114   0xD30A             BCC.N    ??wifi_rcv_handle_10
   2997          				{	
   2998          					wifi_link_state = WIFI_CONNECTED;
   \   00000116   0x200E             MOVS     R0,#+14
   \   00000118   0x7020             STRB     R0,[R4, #+0]
   2999          
   3000          					upload_result = 2;
   \   0000011A   0x2002             MOVS     R0,#+2
   \   0000011C   0x6120             STR      R0,[R4, #+16]
   3001          
   3002          					clear_cur_ui();
   \   0000011E   0x.... 0x....      BL       clear_cur_ui
   3003          					
   3004          					stopEspTransfer();
   \   00000122   0x.... 0x....      BL       _Z15stopEspTransferv
   3005          
   3006          					
   3007          					
   3008          					draw_dialog(DIALOG_TYPE_UPLOAD_FILE);
   \   00000126   0x2007             MOVS     R0,#+7
   \   00000128   0x.... 0x....      BL       draw_dialog
   3009          
   3010          				}
   3011          			}
   3012          			#endif
   3013          			if((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 10000)) // heart beat timeout
   \                     ??wifi_rcv_handle_10: (+1)
   \   0000012C   0x6A25             LDR      R5,[R4, #+32]
   \   0000012E   0x2D00             CMP      R5,#+0
   \   00000130   0xD009             BEQ.N    ??wifi_rcv_handle_11
   \   00000132   0x6A61             LDR      R1,[R4, #+36]
   \   00000134   0x4628             MOV      R0,R5
   \   00000136   0x.... 0x....      BL       _Z15getWifiTickDiffii
   \   0000013A   0xF242 0x7111      MOVW     R1,#+10001
   \   0000013E   0x4288             CMP      R0,R1
   \   00000140   0xD301             BCC.N    ??wifi_rcv_handle_11
   3014          			{	
   3015          				wifi_link_state = WIFI_NOT_CONFIG;
   \   00000142   0x2000             MOVS     R0,#+0
   \   00000144   0x7020             STRB     R0,[R4, #+0]
   3016          				
   3017          			//	wifi_reset();
   3018          
   3019          			//	tick_net_time1 = getWifiTick();
   3020          
   3021          			}
   3022          			if((tick_net_time1 != 0) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 120000)) // reset
   \                     ??wifi_rcv_handle_11: (+1)
   \   00000146   0x2D00             CMP      R5,#+0
   \   00000148   0xD00E             BEQ.N    ??wifi_rcv_handle_9
   \   0000014A   0x6A61             LDR      R1,[R4, #+36]
   \   0000014C   0x4628             MOV      R0,R5
   \   0000014E   0x.... 0x....      BL       _Z15getWifiTickDiffii
   \   00000152   0x.... 0x....      LDR.W    R1,??DataTable71_15  ;; 0x1d4c1
   \   00000156   0x4288             CMP      R0,R1
   \   00000158   0xD306             BCC.N    ??wifi_rcv_handle_9
   3023          			{	
   3024          				wifi_link_state = WIFI_NOT_CONFIG;
   \   0000015A   0x2000             MOVS     R0,#+0
   \   0000015C   0x7020             STRB     R0,[R4, #+0]
   3025          				
   3026          				wifi_reset();
   \   0000015E   0x.... 0x....      BL       _Z10wifi_resetv
   3027          
   3028          				tick_net_time1 = getWifiTick();
   \   00000162   0x.... 0x....      BL       _Z11getWifiTickv
   \   00000166   0x6220             STR      R0,[R4, #+32]
   3029          
   3030          			}
   3031          			
   3032          		
   3033          		 }
   3034          
   3035          		 
   3036          		if(wifiTransError.flag == 0x1)
   \                     ??wifi_rcv_handle_9: (+1)
   \   00000168   0x7920             LDRB     R0,[R4, #+4]
   \   0000016A   0x2801             CMP      R0,#+1
   \   0000016C   0xD111             BNE.N    ??wifi_rcv_handle_0
   3037          		{
   3038          			wifiTransError.now_tick = getWifiTick();
   \   0000016E   0x.... 0x....      BL       _Z11getWifiTickv
   \   00000172   0x60E0             STR      R0,[R4, #+12]
   3039          			if(getWifiTickDiff(wifiTransError.start_tick, wifiTransError.now_tick) > WAIT_ESP_TRANS_TIMEOUT_TICK)
   \   00000174   0x68E1             LDR      R1,[R4, #+12]
   \   00000176   0x68A0             LDR      R0,[R4, #+8]
   \   00000178   0x.... 0x....      BL       _Z15getWifiTickDiffii
   \   0000017C   0xF642 0x1105      MOVW     R1,#+10501
   \   00000180   0x4288             CMP      R0,R1
   \   00000182   0xD306             BCC.N    ??wifi_rcv_handle_0
   3040          			{
   3041          				wifiTransError.flag = 0;
   \   00000184   0x2000             MOVS     R0,#+0
   \   00000186   0x7120             STRB     R0,[R4, #+4]
   3042          				WIFI_IO1_RESET();
   \   00000188   0x2180             MOVS     R1,#+128
   \   0000018A   0x.... 0x....      LDR.W    R0,??DataTable71_8  ;; 0x40011000
   \   0000018E   0x.... 0x....      BL       GPIO_ResetBits
   3043          			}
   3044          		}
   3045          		
   3046          	}
   3047          	#if 0
   3048          	else if(gCfgItems.wifi_type == HLK_WIFI)
   3049          	{
   3050          		len = readUsartFifo(&WifiRxFifo, ucStr, UART_RX_BUFFER_SIZE);
   3051          		if(len > 0)
   3052          		{
   3053          			hlk_data_parser(ucStr, len);
   3054          			getDataF = 1;
   3055          		}
   3056          		if(getDataF == 1)
   3057          		{
   3058          			if(wifi_link_state == WIFI_TRANS_FILE)
   3059          			{
   3060          				tick_net_time1 = getWifiTick();
   3061          			}
   3062          		}	
   3063          		 else
   3064          		 {
   3065          		 
   3066          			tick_net_time2 = getWifiTick();
   3067          			if((wifi_link_state == WIFI_TRANS_FILE) && (getWifiTickDiff(tick_net_time1, tick_net_time2) > 50000)) // 50s timeout
   3068          			{
   3069          			
   3070          				wifi_link_state = WIFI_CONNECTED;
   3071          				wifi_loop_cycle = 500;
   3072          				
   3073          				file_writer.write_index = 0;
   3074          				memset(file_writer.write_buf, 0, sizeof(file_writer.write_buf));
   3075          				
   3076          				f_close(file_writer.file);			
   3077          				if(gCfgItems.fileSysType == FILE_SYS_SD)
   3078          				{
   3079          					memset(tmpBuffer1, 0, sizeof(tmpBuffer1));
   3080          					sprintf(tmpBuffer1, "1:/%s", file_writer.saveFileName);
   3081          				}
   3082          				else if(gCfgItems.fileSysType == FILE_SYS_USB)
   3083          				{
   3084          					memset(tmpBuffer1, 0, sizeof(tmpBuffer1));
   3085          					sprintf(tmpBuffer1, "0:/%s", file_writer.saveFileName);
   3086          				}
   3087          				
   3088          				f_unlink(tmpBuffer1);			
   3089          
   3090          				clear_cur_ui();
   3091          				draw_dialog_filetransfer(0);
   3092          			}
   3093          		 }
   3094          	}
   3095          #endif
   3096          
   3097          #if 0//tan_mask
   3098          	if(left_to_send)
   3099          	{
   3100          		if(checkFIFO(&gcodeCmdTxFIFO) != fifo_full)
   3101          		{
   3102          			left_to_send = 0;
   3103          			pushFIFO(&gcodeCmdTxFIFO, left_to_save);
   3104          			send_to_wifi("ok\r\n", strlen("ok\r\n"));
   3105          		}
   3106          	}
   3107          #endif
   3108          	 
   3109          	
   3110          }
   \                     ??wifi_rcv_handle_0: (+1)
   \   00000192   0xF20D 0x4D04      ADDW     SP,SP,#+1028
   \   00000196   0xBD30             POP      {R4,R5,PC}       ;; return
   3111          

   \                                 In section .text, align 2, keep-with-next
   3112          void wifi_looping()
   3113          {
   3114          	IP_PARA *ip_para = &ipPara;
                 	         ^
Warning[Pe177]: variable "ip_para" was declared but never referenced
   3115          	WIFI_PARA  *wifi_para = &wifiPara;
                 	            ^
Warning[Pe177]: variable "wifi_para" was declared but never referenced
   3116          	
   3117          	char cfg_buf[100];
                 	     ^
Warning[Pe177]: variable "cfg_buf" was declared but never referenced
   3118          /*	
   3119          	volatile int32_t tick_net_tim1=0;
   3120          	volatile int32_t tick_net_tim2=0;
   3121          	
   3122          	tick_net_tim1 = getWifiTick();
   3123          	while(1)
   3124          	{
   3125          		tick_net_tim2 = getWifiTick();
   3126          		if(getWifiTickDiff(tick_net_tim1, tick_net_tim2) >= 10000)
   3127          		{
   3128          		 	while(1);
   3129          		}
   3130          	}
   3131          */
   3132          	if(gCfgItems.wifi_type == ESP_WIFI)
   \                     _Z12wifi_loopingv: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable71_12
   \   00000004   0xF890 0x022C      LDRB     R0,[R0, #+556]
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xD000             BEQ.N    ??wifi_looping_0
   \   0000000C   0x4770             BX       LR
   \                     ??wifi_looping_0: (+1)
   \   0000000E   0xB580             PUSH     {R7,LR}
   3133          	{
   3134          		do
   3135          		 {
   3136          		 	wifi_rcv_handle();
   \                     ??wifi_looping_1: (+1)
   \   00000010   0x.... 0x....      BL       _Z15wifi_rcv_handlev
   3137          			//GUI_Exec();
   3138          			//GUI_TOUCH_Exec();	
   3139          			//IWDG_ReloadCounter();    
   3140          		 } 
   3141          		 while(wifi_link_state == WIFI_TRANS_FILE);
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable71_13
   \   00000018   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   0000001C   0x2810             CMP      R0,#+16
   \   0000001E   0xD0F7             BEQ.N    ??wifi_looping_1
   3142          		 return;
   3143          	}
   3144          #if 0
   3145          	else
   3146          	{
   3147          
   3148          		if(wifi_loop_time == 0)
   3149          		{
   3150          			return;
   3151          		}
   3152          
   3153          		wifi_loop_time = 0;
   3154          		if(gCfgItems.wifi_mode_sel != 1)//client ??
   3155          		{
   3156          			switch(wifi_link_state)
   3157          			{
   3158          				case WIFI_NOT_CONFIG:
   3159          					#ifndef ESP_MODEL
   3160          					GPIO_ResetBits(GPIOA, GPIO_Pin_8);	
   3161          					wifi_link_state = WIFI_CONFIG_MODE;
   3162          					#else
   3163          					wifi_link_state = WIFI_CONFIG_MODE;
   3164          					#endif
   3165          					break;
   3166          
   3167          				case WIFI_CONFIG_MODE:
   3168          
   3169          					#ifndef ESP_MODEL
   3170          					GPIO_SetBits(GPIOA, GPIO_Pin_8);
   3171          					/*wifi mode*/
   3172          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3173          					sprintf(cfg_buf, "at+netmode=%d\r\n", WIFI_MODE);	
   3174          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3175          					wifi_link_state = WIFI_CONFIG_DHCP;
   3176          					#else
   3177          					raw_send_to_wifi("AT+CWMODE=1\r\nAT+RST\r\n", strlen("AT+CWMODE=2\r\nAT+RST\r\n")); // 1:STATION MODE   2:AP MODE
   3178          					wifi_link_state = WIFI_CONFIG_AP;
   3179          					#endif
   3180          					break;
   3181          
   3182          				case WIFI_CONFIG_DHCP:
   3183          					/*dhcp*/
   3184          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3185          					sprintf(cfg_buf, "at+dhcpc=%d\r\n", ip_para->dhcp_flag);	
   3186          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3187          					wifi_link_state = WIFI_CONFIG_AP;
   3188          					break;
   3189          
   3190          				case WIFI_CONFIG_AP:
   3191          					/*ap*/
   3192          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3193          
   3194          					#ifndef ESP_MODEL
   3195          					if(wifi_para->decodeType == 1)
   3196          					{
   3197          						sprintf(cfg_buf, "at+wifi_conf=%s,auto,%s\r\n", wifi_para->ap_name,  wifi_para->keyCode);	
   3198          					}
   3199          					else if(wifi_para->decodeType == 2)
   3200          					{
   3201          						sprintf(cfg_buf, "at+wifi_conf=%s,wpawpa2_aes,%s\r\n", wifi_para->ap_name,  wifi_para->keyCode);	
   3202          					}
   3203          				
   3204          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3205          				
   3206          					#else
   3207          					sprintf(cfg_buf, "AT+CWJAP=\"%s\",\"%s\"\r\n", wifi_para->ap_name,  wifi_para->keyCode);				
   3208          				
   3209          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3210          					wifi_loop_time = 2000;
   3211          				
   3212          					#endif
   3213          				
   3214          					wifi_link_state = WIFI_CONFIG_IP_INF;
   3215          					break;
   3216          
   3217          				case WIFI_CONFIG_IP_INF:
   3218          					/*ip inf*/
   3219          					{
   3220          						char *tmpStr;
   3221          						memset(cfg_buf, 0, sizeof(cfg_buf));
   3222          						#ifndef ESP_MODEL
   3223          						sprintf(cfg_buf, "at+net_ip=%s,%s,%s\r\n", ip_para->ip_addr,  ip_para->mask,  ip_para->gate);	
   3224          						wifi_link_state = WIFI_CONFIG_DNS;
   3225          						raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3226          						#else
   3227          					//	strcpy(cfg_buf, "AT+CIPMUX=1\r\n");
   3228          						wifi_link_state = WIFI_CONFIG_SERVER;
   3229          					//	raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3230          						#endif
   3231          
   3232          						
   3233          						/*gCfgItems.ipAddr[0] = atoi(ip_para->ip_addr);
   3234          						tmpStr = (int8_t *)strstr(ip_para->ip_addr, ".");
   3235          						if(tmpStr != 0)
   3236          						{
   3237          							tmpStr += 1;
   3238          							gCfgItems.ipAddr[1] = atoi(tmpStr);
   3239          
   3240          							tmpStr = (int8_t *)strstr(tmpStr, ".");
   3241          							if(tmpStr != 0)
   3242          							{
   3243          								tmpStr += 1;
   3244          								gCfgItems.ipAddr[2] = atoi(tmpStr);
   3245          
   3246          								tmpStr = (int8_t *)strstr(tmpStr, ".");
   3247          								if(tmpStr != 0)
   3248          								{
   3249          									tmpStr += 1;
   3250          									gCfgItems.ipAddr[3] = atoi(tmpStr);
   3251          								}
   3252          							}
   3253          						}*/
   3254          
   3255          					}
   3256          					break;
   3257          
   3258          				case WIFI_CONFIG_DNS:
   3259          					/*dns*/
   3260          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3261          					sprintf(cfg_buf, "at+net_dns=%s,8.8.8.8\r\n", ip_para->dns);	
   3262          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3263          					wifi_link_state = WIFI_CONFIG_TCP;
   3264          					break;
   3265          
   3266          				case WIFI_CONFIG_TCP:
   3267          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3268          					strcpy(cfg_buf, "at+remotepro=tcp\r\n");
   3269          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3270          					wifi_link_state = WIFI_CONFIG_SERVER;
   3271          					break;
   3272          
   3273          			case WIFI_CONFIG_SERVER:
   3274          				memset(cfg_buf, 0, sizeof(cfg_buf));	
   3275          				#ifndef ESP_MODEL
   3276          				strcpy(cfg_buf, "at+mode=server\r\n");
   3277          				wifi_link_state = WIFI_CONFIG_REMOTE_PORT;
   3278          				#else
   3279          				strcpy(cfg_buf, "AT+CIPSTO=0\r\n");
   3280          				wifi_link_state = WIFI_CONFIG_OK;
   3281          				#endif
   3282          				
   3283          				raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3284          				
   3285          				break;
   3286          
   3287          				case WIFI_CONFIG_REMOTE_PORT:
   3288          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3289          					strcpy(cfg_buf, "at+remoteport=8080\r\n");
   3290          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3291          					wifi_link_state = WIFI_CONFIG_BAUD;
   3292          					break;
   3293          
   3294          				case WIFI_CONFIG_BAUD:
   3295          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3296          					sprintf(cfg_buf, "at+uart=%d,8,n,1\r\n", wifi_para->baud);	
   3297          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3298          					wifi_link_state = WIFI_CONFIG_COMMINT;
   3299          					break;
   3300          
   3301          				case WIFI_CONFIG_COMMINT:
   3302          					/*commit and reconnect*/
   3303          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3304          					strcpy(cfg_buf, "at+net_commit=1\r\n");
   3305          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));	
   3306          					wifi_link_state = WIFI_CONFIG_OK;
   3307          					break;
   3308          
   3309          			case WIFI_CONFIG_OK:
   3310          				#ifndef ESP_MODEL
   3311          				raw_send_to_wifi("at+net_wanip=?\r\n", strlen("at+net_wanip=?\r\n"));
   3312          				#else
   3313          				raw_send_to_wifi("AT+CIFSR\r\n", strlen("AT+CIFSR\r\n"));
   3314          				#endif
   3315          				wifi_rcv_handle();
   3316          				break;
   3317          
   3318          				case WIFI_GET_IP_OK:
   3319          					#ifndef ESP_MODEL
   3320          						if(wifi_check_time)
   3321          						 {
   3322          						 	wifi_check_time = 0;
   3323          							raw_send_to_wifi("at+wifi_ConState=?\r\n", strlen("at+wifi_ConState=?\r\n"));
   3324          					
   3325          						 }
   3326          					 #else
   3327          						if(wifi_check_time)
   3328          						 {
   3329          						 	wifi_check_time = 0;
   3330          							raw_send_to_wifi("AT+CIPSTATUS\r\n", strlen("AT+CIPSTATUS\r\n"));
   3331          						
   3332          						 }
   3333          					#endif	
   3334          					wifi_rcv_handle();
   3335          					break;
   3336          
   3337          
   3338          				case WIFI_RECONN:
   3339          					#ifndef ESP_MODEL
   3340          					raw_send_to_wifi("at+reconn=1\r\n", strlen("at+reconn=1\r\n"));
   3341          					#else
   3342          					raw_send_to_wifi("AT+CIPSERVER=1,8080\r\n", strlen("AT+CIPSERVER=1,8080\r\n"));
   3343          					#endif
   3344          					wifi_link_state = WIFI_CONNECTED;
   3345          					wifi_connect_flg = 1;
   3346          				case WIFI_CONNECTED:
   3347          				case WIFI_WAIT_TRANS_START:
   3348          				case WIFI_TRANS_FILE:
   3349          					wifi_rcv_handle();
   3350          					//wifi_snd_handle();
   3351          					break;
   3352          					
   3353          			}
   3354          		}
   3355          		else//AP??
   3356          		{
   3357          			switch(wifi_link_state)
   3358          			{
   3359          				case WIFI_NOT_CONFIG:
   3360          					GPIO_ResetBits(GPIOA, GPIO_Pin_8);	
   3361          					wifi_link_state = WIFI_CONFIG_MODE;
   3362          					break;
   3363          			
   3364          				case WIFI_CONFIG_MODE:
   3365          					GPIO_SetBits(GPIOA, GPIO_Pin_8);
   3366          					/*wifi mode*/
   3367          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3368          					sprintf(cfg_buf, "at+netmode=%d\r\n", WIFI_AP_MODE);	
   3369          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3370          					wifi_link_state = WIFI_CONFIG_AP;
   3371          					break;
   3372          			
   3373          				case WIFI_CONFIG_AP:
   3374          					/*ap*/
   3375          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3376          					if(wifi_para->decodeType == 1)
   3377          					{
   3378          						sprintf(cfg_buf, "at+wifi_conf=%s,auto,%s\r\n", wifi_para->ap_name,  wifi_para->keyCode);	
   3379          					}
   3380          					else if(wifi_para->decodeType == 2)
   3381          					{
   3382          						sprintf(cfg_buf, "at+wifi_conf=%s,wpawpa2_aes,%s\r\n", wifi_para->ap_name,  wifi_para->keyCode);	
   3383          					}
   3384          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3385          					wifi_link_state = WIFI_CONFIG_DHCP;
   3386          					break;
   3387          					
   3388          				case WIFI_CONFIG_DHCP:
   3389          					/*dhcp*/
   3390          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3391          					sprintf(cfg_buf, "at+dhcpc=%d\r\n", ip_para->dhcp_flag);	
   3392          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3393          					wifi_link_state = WIFI_CONFIG_DHCPD;
   3394          					break;	
   3395          						
   3396          				case WIFI_CONFIG_DHCPD:
   3397          					/*dhcpd*/
   3398          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3399          					sprintf(cfg_buf, "at+dhcpd=%d\r\n",ip_para->dhcpd_flag);	
   3400          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3401          					wifi_link_state = WIFI_COFIG_DHCPD_IP;
   3402          					break;
   3403          				case WIFI_COFIG_DHCPD_IP:
   3404          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3405          					sprintf(cfg_buf, "at+dhcpd_ip=%s,%s,%s,%s\r\n", ip_para->start_ip_addr,ip_para->end_ip_addr,ip_para->dhcpd_mask,ip_para->dhcpd_gate);
   3406          					//sprintf(cfg_buf, "at+dhcpd_ip=192.168.1.100,192.168.1.200,255.255.255.0,192.168.1.110\r\n");
   3407          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3408          					wifi_link_state = WIFI_COFIG_DHCPD_DNS;
   3409          					break;
   3410          				case WIFI_COFIG_DHCPD_DNS:
   3411          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3412          					sprintf(cfg_buf, "at+dhcpd_dns=%s,8.8.8.8\r\n", ip_para->dhcpd_dns);
   3413          					//sprintf(cfg_buf, "at+dhcpd_dns=192.168.1.110,8.8.8.8\r\n");
   3414          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3415          					wifi_link_state = WIFI_CONFIG_IP_INF;			
   3416          					break;	
   3417          					
   3418          				case WIFI_CONFIG_IP_INF:
   3419          					/*ip inf*/
   3420          					{
   3421          						char *tmpStr;
   3422          						memset(cfg_buf, 0, sizeof(cfg_buf));
   3423          						sprintf(cfg_buf, "at+net_ip=%s,%s,%s\r\n", ip_para->dhcpd_ip,  ip_para->dhcpd_mask,  ip_para->dhcpd_gate);	
   3424          						//sprintf(cfg_buf, "at+net_ip=192.168.1.110,255.255.255.0,192.168.1.110\r\n");	
   3425          						raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3426          						wifi_link_state = WIFI_CONFIG_DNS;
   3427          					}
   3428          					break;
   3429          			
   3430          				case WIFI_CONFIG_DNS:
   3431          					/*dns*/
   3432          					memset(cfg_buf, 0, sizeof(cfg_buf));
   3433          					sprintf(cfg_buf, "at+net_dns=%s,8.8.8.8\r\n", ip_para->dhcpd_dns);	
   3434          					//sprintf(cfg_buf, "at+net_dns=192.168.1.110,8.8.8.8\r\n");
   3435          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3436          					wifi_link_state = WIFI_CONFIG_TCP;
   3437          					break;
   3438          			
   3439          				case WIFI_CONFIG_TCP:
   3440          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3441          					strcpy(cfg_buf, "at+remotepro=tcp\r\n");
   3442          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3443          					wifi_link_state = WIFI_CONFIG_SERVER;
   3444          					break;
   3445          			
   3446          				case WIFI_CONFIG_SERVER:
   3447          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3448          					strcpy(cfg_buf, "at+mode=server\r\n");
   3449          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3450          					wifi_link_state = WIFI_CONFIG_REMOTE_PORT;
   3451          					break;
   3452          			
   3453          				case WIFI_CONFIG_REMOTE_PORT:
   3454          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3455          					strcpy(cfg_buf, "at+remoteport=8080\r\n");
   3456          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3457          					wifi_link_state = WIFI_CONFIG_BAUD;
   3458          					break;
   3459          			
   3460          				case WIFI_CONFIG_BAUD:
   3461          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3462          					sprintf(cfg_buf, "at+uart=%d,8,n,1\r\n", wifi_para->baud);	
   3463          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf));
   3464          					wifi_link_state = WIFI_CONFIG_COMMINT;
   3465          					break;
   3466          			
   3467          				case WIFI_CONFIG_COMMINT:
   3468          					/*commit and reconnect*/
   3469          					memset(cfg_buf, 0, sizeof(cfg_buf));	
   3470          					strcpy(cfg_buf, "at+net_commit=1\r\n");
   3471          					raw_send_to_wifi(cfg_buf, strlen(cfg_buf)); 
   3472          					wifi_link_state = WIFI_CONFIG_OK;
   3473          					break;
   3474          			
   3475          				case WIFI_CONFIG_OK:
   3476          					raw_send_to_wifi("at+net_wanip=?\r\n", strlen("at+net_wanip=?\r\n"));
   3477          					wifi_rcv_handle();
   3478          					break;
   3479          			
   3480          				case WIFI_GET_IP_OK:
   3481          					if(wifi_check_time)
   3482          					 {
   3483          						wifi_check_time = 0;
   3484          						raw_send_to_wifi("at+wifi_ConState=?\r\n", strlen("at+wifi_ConState=?\r\n"));
   3485          						
   3486          					 }
   3487          					
   3488          					wifi_rcv_handle();
   3489          					break;
   3490          			
   3491          				case WIFI_RECONN:			
   3492          					raw_send_to_wifi("at+reconn=1\r\n", strlen("at+reconn=1\r\n"));
   3493          					wifi_link_state = WIFI_CONNECTED;
   3494          					wifi_connect_flg = 1;
   3495          				case WIFI_CONNECTED:
   3496          				case WIFI_WAIT_TRANS_START:
   3497          				case WIFI_TRANS_FILE:
   3498          					wifi_rcv_handle();
   3499          					//wifi_snd_handle();
   3500          					break;
   3501          					
   3502          			}
   3503          		}
   3504          	}
   3505          #endif
   3506          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
   3507          
   3508          
   3509          #if 0
   3510          //#define USART1_DR_Addr ((u32)0x40013804)
   3511          
   3512          void USART1_DMA1_5_IRQ(void)
   3513          {	
   3514              if(__HAL_DMA_GET_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TE5) != RESET)
   3515              {
   3516          		/* Disable the transfer error interrupt */
   3517          		__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_IT_TE);
   3518          
   3519          		/* Clear the transfer error flag */
   3520          		__HAL_DMA_CLEAR_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TE5);
   3521          
   3522          		/* Update error code */
   3523          		SET_BIT(hdma_usart1_rx.ErrorCode, HAL_DMA_ERROR_TE);
   3524          
   3525          		/* Change the DMA state */
   3526          		hdma_usart1_rx.State = HAL_DMA_STATE_ERROR;
   3527          
   3528          		/* Process Unlocked */
   3529          		__HAL_UNLOCK(&hdma_usart1_rx); 
   3530          
   3531          		if (hdma_usart1_rx.XferErrorCallback != NULL)
   3532          		{
   3533          			/* Transfer error callback */
   3534          			hdma_usart1_rx.XferErrorCallback((DMA_HandleTypeDef *)&hdma_usart1_rx);
   3535                	}
   3536              }  
   3537          
   3538          
   3539          	 if(__HAL_DMA_GET_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_HT5) != RESET)
   3540          	{
   3541          		__HAL_DMA_CLEAR_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_HT5);
   3542          		//GPIO_SetBits(GPIOF, GPIO_Pin_1);	//stm32 clear ready signal before the transfer is finished
   3543          		WIFI_IO1_SET();
   3544          	}
   3545          		
   3546          	if(__HAL_DMA_GET_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TC5)!= RESET)
   3547          	{
   3548          		__HAL_DMA_CLEAR_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TC5);
   3549          		
   3550          		if(esp_state == TRANSFER_IDLE)
   3551          		{
   3552          			esp_state = TRANSFERING;
   3553          		}
   3554          		
   3555          		//if(storeRcvData(WIFI_COM.getUartStack()->pUart->pRxBuffer, WIFI_FRAME_SIZE))
   3556          		if(storeRcvData((uint8_t *)WifiRxFifo.uartTxBuffer, UART_RX_BUFFER_SIZE))
   3557          		{
   3558          			esp_dma_pre();
   3559          
   3560                      if(wifiTransError.flag != 0x1)
   3561          			{
   3562          				WIFI_IO1_RESET();
   3563          			}
   3564          		}
   3565          		else
   3566          		{
   3567                      WIFI_IO1_SET();
   3568          			esp_state = TRANSFER_STORE;
   3569          
   3570          		}	
   3571          	}
   3572          	
   3573          }
   3574          #endif
   3575          extern "C" void DMA1_Channel5_IRQHandler(void);
   3576          

   \                                 In section .text, align 2, keep-with-next
   3577          void DMA1_Channel5_IRQHandler()
   3578          {	
   \                     DMA1_Channel5_IRQHandler: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   3579              if(__HAL_DMA_GET_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TE5) != RESET)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable71_10
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable71_16  ;; 0x40020000
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable71_17  ;; 0x40020400
   \   00000010   0x.... 0x....      LDR.W    R7,??DataTable71_18  ;; 0x40020081
   \   00000014   0x42B8             CMP      R0,R7
   \   00000016   0xD303             BCC.N    ??DMA1_Channel5_IRQHandler_0
   \   00000018   0x6831             LDR      R1,[R6, #+0]
   \   0000001A   0xF401 0x2100      AND      R1,R1,#0x80000
   \   0000001E   0xE002             B.N      ??DMA1_Channel5_IRQHandler_1
   \                     ??DMA1_Channel5_IRQHandler_0: (+1)
   \   00000020   0x6829             LDR      R1,[R5, #+0]
   \   00000022   0xF401 0x2100      AND      R1,R1,#0x80000
   \                     ??DMA1_Channel5_IRQHandler_1: (+1)
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD01A             BEQ.N    ??DMA1_Channel5_IRQHandler_2
   3580              {
   3581          		/* Disable the transfer error interrupt */
   3582          		__HAL_DMA_DISABLE_IT((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_IT_TE);
   \   0000002A   0x6801             LDR      R1,[R0, #+0]
   \   0000002C   0xF021 0x0108      BIC      R1,R1,#0x8
   \   00000030   0x6001             STR      R1,[R0, #+0]
   3583          
   3584          		/* Clear the transfer error flag */
   3585          		__HAL_DMA_CLEAR_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TE5);
   \   00000032   0xF44F 0x2000      MOV      R0,#+524288
   \   00000036   0x6821             LDR      R1,[R4, #+0]
   \   00000038   0x42B9             CMP      R1,R7
   \   0000003A   0xD301             BCC.N    ??DMA1_Channel5_IRQHandler_3
   \   0000003C   0x6070             STR      R0,[R6, #+4]
   \   0000003E   0xE000             B.N      ??DMA1_Channel5_IRQHandler_4
   \                     ??DMA1_Channel5_IRQHandler_3: (+1)
   \   00000040   0x6068             STR      R0,[R5, #+4]
   3586          
   3587          		/* Update error code */
   3588          		SET_BIT(hdma_usart1_rx.ErrorCode, HAL_DMA_ERROR_TE);
   \                     ??DMA1_Channel5_IRQHandler_4: (+1)
   \   00000042   0x6B60             LDR      R0,[R4, #+52]
   \   00000044   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000048   0x6360             STR      R0,[R4, #+52]
   3589          
   3590          		/* Change the DMA state */
   3591          		hdma_usart1_rx.State = HAL_DMA_STATE_ERROR;
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0xF884 0x0021      STRB     R0,[R4, #+33]
   3592          
   3593          		/* Process Unlocked */
   3594          		__HAL_UNLOCK(&hdma_usart1_rx); 
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xF884 0x0020      STRB     R0,[R4, #+32]
   3595          
   3596          		if (hdma_usart1_rx.XferErrorCallback != NULL)
   \   00000056   0x6B21             LDR      R1,[R4, #+48]
   \   00000058   0x0008             MOVS     R0,R1
   \   0000005A   0xD001             BEQ.N    ??DMA1_Channel5_IRQHandler_2
   3597          		{
   3598          			/* Transfer error callback */
   3599          			hdma_usart1_rx.XferErrorCallback((DMA_HandleTypeDef *)&hdma_usart1_rx);
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x4788             BLX      R1
   \                     ??DMA1_Channel5_IRQHandler_2: (+1)
   \   00000060   0x6820             LDR      R0,[R4, #+0]
   \   00000062   0x42B8             CMP      R0,R7
   \   00000064   0xD303             BCC.N    ??DMA1_Channel5_IRQHandler_5
   \   00000066   0x6831             LDR      R1,[R6, #+0]
   \   00000068   0xF401 0x2180      AND      R1,R1,#0x40000
   \   0000006C   0xE002             B.N      ??DMA1_Channel5_IRQHandler_6
   \                     ??DMA1_Channel5_IRQHandler_5: (+1)
   \   0000006E   0x6829             LDR      R1,[R5, #+0]
   \   00000070   0xF401 0x2180      AND      R1,R1,#0x40000
   \                     ??DMA1_Channel5_IRQHandler_6: (+1)
   \   00000074   0x2900             CMP      R1,#+0
   \   00000076   0xD00B             BEQ.N    ??DMA1_Channel5_IRQHandler_7
   3600                	}
   3601              }  
   3602          
   3603          
   3604          	 if(__HAL_DMA_GET_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_HT5) != RESET)
   3605          	{
   3606          		__HAL_DMA_CLEAR_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_HT5);
   \   00000078   0xF44F 0x2180      MOV      R1,#+262144
   \   0000007C   0x42B8             CMP      R0,R7
   \   0000007E   0xD301             BCC.N    ??DMA1_Channel5_IRQHandler_8
   \   00000080   0x6071             STR      R1,[R6, #+4]
   \   00000082   0xE000             B.N      ??DMA1_Channel5_IRQHandler_9
   \                     ??DMA1_Channel5_IRQHandler_8: (+1)
   \   00000084   0x6069             STR      R1,[R5, #+4]
   3607          		//GPIO_SetBits(GPIOF, GPIO_Pin_1);	//stm32 clear ready signal before the transfer is finished
   3608          		WIFI_IO1_SET();
   \                     ??DMA1_Channel5_IRQHandler_9: (+1)
   \   00000086   0x2180             MOVS     R1,#+128
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable71_8  ;; 0x40011000
   \   0000008C   0x.... 0x....      BL       GPIO_SetBits
   \                     ??DMA1_Channel5_IRQHandler_7: (+1)
   \   00000090   0x6820             LDR      R0,[R4, #+0]
   \   00000092   0x42B8             CMP      R0,R7
   \   00000094   0xD303             BCC.N    ??DMA1_Channel5_IRQHandler_10
   \   00000096   0x6831             LDR      R1,[R6, #+0]
   \   00000098   0xF401 0x3100      AND      R1,R1,#0x20000
   \   0000009C   0xE002             B.N      ??DMA1_Channel5_IRQHandler_11
   \                     ??DMA1_Channel5_IRQHandler_10: (+1)
   \   0000009E   0x6829             LDR      R1,[R5, #+0]
   \   000000A0   0xF401 0x3100      AND      R1,R1,#0x20000
   \                     ??DMA1_Channel5_IRQHandler_11: (+1)
   \   000000A4   0x2900             CMP      R1,#+0
   \   000000A6   0xD025             BEQ.N    ??DMA1_Channel5_IRQHandler_12
   3609          	}
   3610          		
   3611          	if(__HAL_DMA_GET_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TC5)!= RESET)
   3612          	{
   3613          		__HAL_DMA_CLEAR_FLAG((DMA_HandleTypeDef *)&hdma_usart1_rx, DMA_FLAG_TC5);
   \   000000A8   0xF44F 0x3100      MOV      R1,#+131072
   \   000000AC   0x42B8             CMP      R0,R7
   \   000000AE   0xD301             BCC.N    ??DMA1_Channel5_IRQHandler_13
   \   000000B0   0x6071             STR      R1,[R6, #+4]
   \   000000B2   0xE000             B.N      ??DMA1_Channel5_IRQHandler_14
   \                     ??DMA1_Channel5_IRQHandler_13: (+1)
   \   000000B4   0x6069             STR      R1,[R5, #+4]
   3614          		
   3615          		if(esp_state == TRANSFER_IDLE)
   \                     ??DMA1_Channel5_IRQHandler_14: (+1)
   \   000000B6   0x....             LDR.N    R4,??DataTable71_13
   \   000000B8   0xF994 0x0001      LDRSB    R0,[R4, #+1]
   \   000000BC   0x2800             CMP      R0,#+0
   \   000000BE   0xD101             BNE.N    ??DMA1_Channel5_IRQHandler_15
   3616          		{
   3617          			esp_state = TRANSFERING;
   \   000000C0   0x2001             MOVS     R0,#+1
   \   000000C2   0x7060             STRB     R0,[R4, #+1]
   3618          		}
   3619          		
   3620          		//if(storeRcvData(WIFI_COM.getUartStack()->pUart->pRxBuffer, WIFI_FRAME_SIZE))
   3621          		if(storeRcvData((uint8_t *)WifiRxFifo.uartTxBuffer, UART_RX_BUFFER_SIZE))
   \                     ??DMA1_Channel5_IRQHandler_15: (+1)
   \   000000C4   0xF44F 0x6180      MOV      R1,#+1024
   \   000000C8   0x....             LDR.N    R0,??DataTable71_5
   \   000000CA   0x.... 0x....      BL       _Z12storeRcvDataPhi
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD00A             BEQ.N    ??DMA1_Channel5_IRQHandler_16
   3622          		{
   3623          			esp_dma_pre();
   \   000000D2   0x.... 0x....      BL       _Z11esp_dma_prev
   3624          
   3625                      if(wifiTransError.flag != 0x1)
   \   000000D6   0x7920             LDRB     R0,[R4, #+4]
   \   000000D8   0x2801             CMP      R0,#+1
   \   000000DA   0xD00B             BEQ.N    ??DMA1_Channel5_IRQHandler_12
   3626          			{
   3627          				WIFI_IO1_RESET();
   \   000000DC   0x2180             MOVS     R1,#+128
   \   000000DE   0x....             LDR.N    R0,??DataTable71_8  ;; 0x40011000
   \   000000E0   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   000000E4   0x.... 0x....      B.W      GPIO_ResetBits
   3628          			}
   3629          		}
   3630          		else
   3631          		{
   3632                      WIFI_IO1_SET();
   \                     ??DMA1_Channel5_IRQHandler_16: (+1)
   \   000000E8   0x2180             MOVS     R1,#+128
   \   000000EA   0x....             LDR.N    R0,??DataTable71_8  ;; 0x40011000
   \   000000EC   0x.... 0x....      BL       GPIO_SetBits
   3633          			esp_state = TRANSFER_STORE;
   \   000000F0   0x2002             MOVS     R0,#+2
   \   000000F2   0x7060             STRB     R0,[R4, #+1]
   3634          
   3635          		}	
   3636          	}
   3637          	
   3638          }
   \                     ??DMA1_Channel5_IRQHandler_12: (+1)
   \   000000F4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   3639          #if 0
   3640          void DMA1_Channel5_IRQHandler(void)
   3641          {
   3642            /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
   3643          
   3644            /* USER CODE END DMA1_Channel5_IRQn 0 */
   3645            //if(dma1_5_IRQ_sel == 1)
   3646              USART1_DMA1_5_IRQ();
   3647            //else
   3648              //HAL_DMA_IRQHandler(&hdma_spi2_tx);
   3649            /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
   3650          
   3651            /* USER CODE END DMA1_Channel5_IRQn 1 */
   3652          }
   3653          
   3654          #endif
   3655          

   \                                 In section .text, align 2, keep-with-next
   3656          void wifi_init()
   3657          {
   \                     _Z9wifi_initv: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   3658          	GPIO_InitTypeDef GPIO_InitStruct;
   3659          	
   3660          	//GPIO_InitTypeDef GPIO_InitStructure;
   3661          	//NVIC_InitTypeDef NVIC_InitStructure;
   3662          	uint32_t flash_inf_valid_flag = 0;
                 	         ^
Warning[Pe177]: variable "flash_inf_valid_flag" was declared but never
          referenced
   3663          
   3664          	
   3665          	//gCfgItems.wifi_type = HLK_WIFI;
   3666          
   3667          	wifi_link_state = WIFI_NOT_CONFIG;
   \   00000004   0x....             LDR.N    R4,??DataTable71_13
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7020             STRB     R0,[R4, #+0]
   3668          	
   3669          	
   3670          	/*hardware init*/
   3671          	//------tan 20171008 modify begin------
   3672          	#if 0
   3673          	/*PA8 for both hlk and esp rst*/
   3674          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);
   3675          	GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_8;
   3676          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   3677          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   3678          	GPIO_Init(GPIOA, &GPIO_InitStructure);
   3679          	#endif
   3680          
   3681          	  /*Configure GPIO pins : PAPin */
   3682          	  //__HAL_RCC_GPIOA_CLK_ENABLE();
   3683          	  __HAL_RCC_GPIOA_CLK_ENABLE();
   \   0000000A   0x....             LDR.N    R5,??DataTable71_19  ;; 0x40021018
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   \   0000000E   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000012   0x6028             STR      R0,[R5, #+0]
   \   00000014   0x6828             LDR      R0,[R5, #+0]
   \   00000016   0xF000 0x0004      AND      R0,R0,#0x4
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   3684          	  GPIO_InitStruct.Pin = GPIO_PIN_5;
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   3685          	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x9002             STR      R0,[SP, #+8]
   3686          	  GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9003             STR      R0,[SP, #+12]
   3687          	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x9004             STR      R0,[SP, #+16]
   3688          	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \   0000002C   0x....             LDR.N    R6,??DataTable71_20  ;; 0x40010800
   \   0000002E   0xA901             ADD      R1,SP,#+4
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       HAL_GPIO_Init
   3689          	//------tan 20171008 modify end------	
   3690          
   3691          	WIFI_SET();
   \   00000036   0x2120             MOVS     R1,#+32
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       GPIO_SetBits
   3692          
   3693          	if(gCfgItems.wifi_type == ESP_WIFI) // esp wifi
   \   0000003E   0x....             LDR.N    R0,??DataTable71_12
   \   00000040   0xF890 0x022C      LDRB     R0,[R0, #+556]
   \   00000044   0x2802             CMP      R0,#+2
   \   00000046   0xD13A             BNE.N    ??wifi_init_0
   3694          	{
   3695          		//------tan 20171008 modify begin------
   3696          		#if 0
   3697          			/*PD9œ»◊˜Œ™ ‰»Î£¨…˝º∂ ±∫Ú◊˜Œ™ ‰≥ˆ*/
   3698          			
   3699          			RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE );	 
   3700          			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;//
   3701          			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;   //
   3702          			GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   3703          			GPIO_Init(GPIOD, &GPIO_InitStructure);
   3704          
   3705          			/*PD8◊˜Œ™ ‰≥ˆ£¨”√”⁄÷∏ æSTM32◊º±∏∫√¥´ÀÕ*/
   3706          			GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;//
   3707          			GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;   
   3708          			GPIO_Init(GPIOD, &GPIO_InitStructure);
   3709          		#endif
   3710          		
   3711          		/*PC7◊˜Œ™ ‰≥ˆ£¨”√”⁄÷∏ æSTM32◊º±∏∫√¥´ÀÕ*/
   3712          		__HAL_RCC_GPIOC_CLK_ENABLE();	 
   \   00000048   0x6828             LDR      R0,[R5, #+0]
   \   0000004A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000004E   0x6028             STR      R0,[R5, #+0]
   \   00000050   0x6828             LDR      R0,[R5, #+0]
   \   00000052   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000056   0x9000             STR      R0,[SP, #+0]
   3713          		GPIO_InitStruct.Pin = GPIO_Pin_7;//
   \   00000058   0x2080             MOVS     R0,#+128
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   3714          		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x9002             STR      R0,[SP, #+8]
   3715          		GPIO_InitStruct.Pull = GPIO_NOPULL;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9003             STR      R0,[SP, #+12]
   3716          		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x9004             STR      R0,[SP, #+16]
   3717          		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \   00000068   0x....             LDR.N    R6,??DataTable71_8  ;; 0x40011000
   \   0000006A   0xA901             ADD      R1,SP,#+4
   \   0000006C   0x4630             MOV      R0,R6
   \   0000006E   0x.... 0x....      BL       HAL_GPIO_Init
   3718          		
   3719          		/*PA8œ»◊˜Œ™ ‰»Î£¨…˝º∂ ±∫Ú◊˜Œ™ ‰≥ˆ*/
   3720          		 #if V1_0_V1_1
   3721          	        #if V1_0_V1_1
   3722          			__HAL_RCC_GPIOA_CLK_ENABLE();	
   3723          			GPIO_InitStruct.Pin = GPIO_Pin_8;//
   3724          			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;	    
   3725          			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   3726          	        #endif
   3727          	        #else
   3728          			__HAL_RCC_GPIOC_CLK_ENABLE();	
   \   00000072   0x6828             LDR      R0,[R5, #+0]
   \   00000074   0xF040 0x0010      ORR      R0,R0,#0x10
   \   00000078   0x6028             STR      R0,[R5, #+0]
   \   0000007A   0x6828             LDR      R0,[R5, #+0]
   \   0000007C   0xF000 0x0010      AND      R0,R0,#0x10
   \   00000080   0x9000             STR      R0,[SP, #+0]
   3729          	       	__HAL_RCC_AFIO_CLK_ENABLE();
   \   00000082   0x6828             LDR      R0,[R5, #+0]
   \   00000084   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000088   0x6028             STR      R0,[R5, #+0]
   \   0000008A   0x6828             LDR      R0,[R5, #+0]
   \   0000008C   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000090   0x9000             STR      R0,[SP, #+0]
   3730          	        	CLEAR_BIT(BKP->CR, BKP_CR_TPE);
   \   00000092   0x....             LDR.N    R0,??DataTable71_21  ;; 0x40006c30
   \   00000094   0x6801             LDR      R1,[R0, #+0]
   \   00000096   0x0849             LSRS     R1,R1,#+1
   \   00000098   0x0049             LSLS     R1,R1,#+1
   \   0000009A   0x6001             STR      R1,[R0, #+0]
   3731          	        	CLEAR_BIT(BKP->CSR, BKP_CSR_TPIE);
   \   0000009C   0x6841             LDR      R1,[R0, #+4]
   \   0000009E   0xF021 0x0104      BIC      R1,R1,#0x4
   \   000000A2   0x6041             STR      R1,[R0, #+4]
   3732          			GPIO_InitStruct.Pin = GPIO_Pin_13;//
   \   000000A4   0xF44F 0x5000      MOV      R0,#+8192
   \   000000A8   0x9001             STR      R0,[SP, #+4]
   3733          			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;	    
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x9002             STR      R0,[SP, #+8]
   3734          			HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);        
   \   000000AE   0xA901             ADD      R1,SP,#+4
   \   000000B0   0x4630             MOV      R0,R6
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_Init
   3735          	        #endif
   3736          		//------tan 20171008 modify end------
   3737          		WIFI_IO1_SET();
   \   000000B6   0x2180             MOVS     R1,#+128
   \   000000B8   0x4630             MOV      R0,R6
   \   000000BA   0x.... 0x....      BL       GPIO_SetBits
   3738          	}
   3739          	//------tan 20171008 modify begin------
   3740          	#if 0
   3741          	if(gCfgItems.wifi_type == HLK_WIFI)
   3742          	{
   3743          		SZ_STM32_COMInit(COM3, 115200);
   3744          
   3745          		USART_ITConfig(SZ_STM32_COM3, USART_IT_RXNE, ENABLE);
   3746          
   3747          		NVIC_InitStructure.NVIC_IRQChannel = SZ_STM32_COM3_IRQn;
   3748          	//	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   3749          	//	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   3750          		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
   3751          		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
   3752          		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   3753          
   3754          		NVIC_Init(&NVIC_InitStructure);
   3755          
   3756          	}
   3757          	else
   3758          	#endif
   3759          	//------tan 20171008 modify end------
   3760          	{
   3761          		FRESULT res;
   3762          		int update_flag = 0;
   \                     ??wifi_init_0: (+1)
   \   000000BE   0x2500             MOVS     R5,#+0
   3763          		
   3764          		esp_state = TRANSFER_IDLE;
   \   000000C0   0x4628             MOV      R0,R5
   \   000000C2   0x7060             STRB     R0,[R4, #+1]
   3765          
   3766          		esp_port_begin(1);		
   \   000000C4   0x2001             MOVS     R0,#+1
   \   000000C6   0x.... 0x....      BL       _Z14esp_port_beginh
   3767          
   3768          		wifi_reset();
   \   000000CA   0x.... 0x....      BL       _Z10wifi_resetv
   3769          				
   3770          #if 1
   3771          		res = f_open(&esp_upload.uploadFile, ESP_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
   3772          
   3773          		if(res ==  FR_OK) 
   \   000000CE   0x....             LDR.N    R6,??DataTable71_22
   \   000000D0   0x.... 0x....      ADR.W    R7,`?<Constant "1:/MksWifi.bin">`
   \   000000D4   0x2201             MOVS     R2,#+1
   \   000000D6   0x4639             MOV      R1,R7
   \   000000D8   0x4630             MOV      R0,R6
   \   000000DA   0x.... 0x....      BL       f_open
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD121             BNE.N    ??wifi_init_1
   3774          		{
   3775          			f_close(&esp_upload.uploadFile);
   \   000000E2   0x4630             MOV      R0,R6
   \   000000E4   0x.... 0x....      BL       f_close
   3776          
   3777          			wifi_delay(2000);
   \   000000E8   0xF44F 0x60FA      MOV      R0,#+2000
   \   000000EC   0x.... 0x....      BL       _Z10wifi_delayi
   3778          
   3779          			if(usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20)
   \   000000F0   0x....             LDR.N    R0,??DataTable71_14
   \   000000F2   0x.... 0x....      BL       _Z18usartFifoAvailableP13SZ_USART_FIFO
   \   000000F6   0x2814             CMP      R0,#+20
   \   000000F8   0xDB76             BLT.N    ??wifi_init_2
   3780          			{
   3781          				return;
   3782          			}
   3783          
   3784          			clear_cur_ui();
   \   000000FA   0x.... 0x....      BL       clear_cur_ui
   3785          
   3786          			draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
   \   000000FE   0x2005             MOVS     R0,#+5
   \   00000100   0x.... 0x....      BL       draw_dialog
   3787          			
   3788          			if(wifi_upload(0) >= 0)
   \   00000104   0x4628             MOV      R0,R5
   \   00000106   0x.... 0x....      BL       wifi_upload
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xD408             BMI.N    ??wifi_init_3
   3789          			{
   3790          				
   3791          				f_unlink("1:/MKS_WIFI_CUR");
   \   0000010E   0x.... 0x....      ADR.W    R0,`?<Constant "1:/MKS_WIFI_CUR">`
   \   00000112   0x.... 0x....      BL       f_unlink
   3792          				f_rename(ESP_FIRMWARE_FILE,"/MKS_WIFI_CUR");
   \   00000116   0x.... 0x....      ADR.W    R1,`?<Constant "/MKS_WIFI_CUR">`
   \   0000011A   0x4638             MOV      R0,R7
   \   0000011C   0x.... 0x....      BL       f_rename
   3793          			}
   3794          			draw_return_ui();
   \                     ??wifi_init_3: (+1)
   \   00000120   0x.... 0x....      BL       draw_return_ui
   3795          			
   3796          			update_flag = 1;
   \   00000124   0x2501             MOVS     R5,#+1
   3797          		}
   3798          		if(update_flag == 0)
   \                     ??wifi_init_1: (+1)
   \   00000126   0x2D00             CMP      R5,#+0
   \   00000128   0xD12A             BNE.N    ??wifi_init_4
   3799          		{
   3800          			res = f_open(&esp_upload.uploadFile, ESP_WEB_FIRMWARE_FILE,  FA_OPEN_EXISTING | FA_READ);
   3801          
   3802          			if(res ==  FR_OK) 
   \   0000012A   0x.... 0x....      ADR.W    R7,`?<Constant "1:/MksWifi_Web.bin">`
   \   0000012E   0x2201             MOVS     R2,#+1
   \   00000130   0x4639             MOV      R1,R7
   \   00000132   0x4630             MOV      R0,R6
   \   00000134   0x.... 0x....      BL       f_open
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD121             BNE.N    ??wifi_init_4
   3803          			{
   3804          				f_close(&esp_upload.uploadFile);
   \   0000013C   0x4630             MOV      R0,R6
   \   0000013E   0x.... 0x....      BL       f_close
   3805          
   3806          				wifi_delay(2000);
   \   00000142   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000146   0x.... 0x....      BL       _Z10wifi_delayi
   3807          
   3808          				if(usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20)
   \   0000014A   0x....             LDR.N    R0,??DataTable71_14
   \   0000014C   0x.... 0x....      BL       _Z18usartFifoAvailableP13SZ_USART_FIFO
   \   00000150   0x2814             CMP      R0,#+20
   \   00000152   0xDB49             BLT.N    ??wifi_init_2
   3809          				{
   3810          					return;
   3811          				}
   3812          
   3813          				clear_cur_ui();
   \   00000154   0x.... 0x....      BL       clear_cur_ui
   3814          
   3815          				draw_dialog(DIALOG_TYPE_UPDATE_ESP_FIRMARE);
   \   00000158   0x2005             MOVS     R0,#+5
   \   0000015A   0x.... 0x....      BL       draw_dialog
   3816          				if(wifi_upload(1) >= 0)
   \   0000015E   0x2001             MOVS     R0,#+1
   \   00000160   0x.... 0x....      BL       wifi_upload
   \   00000164   0x2800             CMP      R0,#+0
   \   00000166   0xD408             BMI.N    ??wifi_init_5
   3817          				{					
   3818          				
   3819          					f_unlink("1:/MKS_WIFI_CUR");
   \   00000168   0x.... 0x....      ADR.W    R0,`?<Constant "1:/MKS_WIFI_CUR">`
   \   0000016C   0x.... 0x....      BL       f_unlink
   3820          					f_rename(ESP_WEB_FIRMWARE_FILE,"/MKS_WIFI_CUR");
   \   00000170   0x.... 0x....      ADR.W    R1,`?<Constant "/MKS_WIFI_CUR">`
   \   00000174   0x4638             MOV      R0,R7
   \   00000176   0x.... 0x....      BL       f_rename
   3821          				}
   3822          				draw_return_ui();
   \                     ??wifi_init_5: (+1)
   \   0000017A   0x.... 0x....      BL       draw_return_ui
   3823          				update_flag = 1;
   \   0000017E   0x2501             MOVS     R5,#+1
   3824          			}
   3825          			
   3826          		}
   3827          		if(update_flag == 0)
   \                     ??wifi_init_4: (+1)
   \   00000180   0x2D00             CMP      R5,#+0
   \   00000182   0xD129             BNE.N    ??wifi_init_6
   3828          		{
   3829          			res = f_open(&esp_upload.uploadFile, ESP_WEB_FILE,  FA_OPEN_EXISTING | FA_READ);
   3830          			if(res ==  FR_OK) 
   \   00000184   0x.... 0x....      ADR.W    R5,`?<Constant "1:/MksWifi_WebView.bin">`
   \   00000188   0x2201             MOVS     R2,#+1
   \   0000018A   0x4629             MOV      R1,R5
   \   0000018C   0x4630             MOV      R0,R6
   \   0000018E   0x.... 0x....      BL       f_open
   \   00000192   0x2800             CMP      R0,#+0
   \   00000194   0xD120             BNE.N    ??wifi_init_6
   3831          			{
   3832          				f_close(&esp_upload.uploadFile);
   \   00000196   0x4630             MOV      R0,R6
   \   00000198   0x.... 0x....      BL       f_close
   3833          
   3834          				wifi_delay(2000);
   \   0000019C   0xF44F 0x60FA      MOV      R0,#+2000
   \   000001A0   0x.... 0x....      BL       _Z10wifi_delayi
   3835          
   3836          				if(usartFifoAvailable((SZ_USART_FIFO *)&WifiRxFifo) < 20)
   \   000001A4   0x....             LDR.N    R0,??DataTable71_14
   \   000001A6   0x.... 0x....      BL       _Z18usartFifoAvailableP13SZ_USART_FIFO
   \   000001AA   0x2814             CMP      R0,#+20
   \   000001AC   0xDB1C             BLT.N    ??wifi_init_2
   3837          				{
   3838          					return;
   3839          				}
   3840          
   3841          				clear_cur_ui();
   \   000001AE   0x.... 0x....      BL       clear_cur_ui
   3842          				
   3843          				draw_dialog(DIALOG_TYPE_UPDATE_ESP_DATA);
   \   000001B2   0x2006             MOVS     R0,#+6
   \   000001B4   0x.... 0x....      BL       draw_dialog
   3844          
   3845          				if(wifi_upload(2) >= 0)
   \   000001B8   0x2002             MOVS     R0,#+2
   \   000001BA   0x.... 0x....      BL       wifi_upload
   \   000001BE   0x2800             CMP      R0,#+0
   \   000001C0   0xD408             BMI.N    ??wifi_init_7
   3846          				{								
   3847          
   3848          					f_unlink("1:/MKS_WEB_CONTROL_CUR");
   \   000001C2   0x.... 0x....      ADR.W    R0,`?<Constant "1:/MKS_WEB_CONTROL_CUR">`
   \   000001C6   0x.... 0x....      BL       f_unlink
   3849          					f_rename(ESP_WEB_FILE,"/MKS_WEB_CONTROL_CUR");
   \   000001CA   0x.... 0x....      ADR.W    R1,`?<Constant "/MKS_WEB_CONTROL_CUR">`
   \   000001CE   0x4628             MOV      R0,R5
   \   000001D0   0x.... 0x....      BL       f_rename
   3850          				}
   3851          				draw_return_ui();
   \                     ??wifi_init_7: (+1)
   \   000001D4   0x.... 0x....      BL       draw_return_ui
   3852          			}
   3853          		}
   3854          		
   3855          #endif
   3856          	}
   3857          
   3858          
   3859          /*
   3860          	SPI_FLASH_BufferRead(&flash_inf_valid_flag,FlASH_INF_VALID_ADDR,4);
   3861          	if(flash_inf_valid_flag == FLASH_INF_VALID_FLAG)
   3862          	{
   3863          		SPI_FLASH_BufferRead(wifiPara.ap_name,WIFI_NAME_ADDR,200);
   3864          		SPI_FLASH_BufferRead(wifiPara.keyCode,WIFI_KEYCODE_ADDR,200);
   3865          		SPI_FLASH_BufferRead(ipPara.ip_addr,WIFI_IP_ADDR,15);
   3866          		SPI_FLASH_BufferRead(ipPara.mask,WIFI_MASK_ADDR,15);
   3867          		SPI_FLASH_BufferRead(ipPara.gate,WIFI_GATE_ADDR,15);
   3868          		SPI_FLASH_BufferRead((uint8_t*)&ipPara.dhcp_flag,WIFI_DHCP_FLAG_ADDR,1);
   3869          		SPI_FLASH_BufferRead((uint8_t*)&gCfgItems.wifi_mode_sel,WIFI_MODE_SEL_ADDR,1);	
   3870          		SPI_FLASH_BufferRead((uint8_t*)&gCfgItems.wifi_type,WIFI_MODE_TYPE_ADDR,1);
   3871          	}
   3872          	
   3873          */
   3874          	wifiPara.decodeType = WIFI_DECODE_TYPE;
   \                     ??wifi_init_6: (+1)
   \   000001D8   0x....             LDR.N    R0,??DataTable69_1
   \   000001DA   0x2101             MOVS     R1,#+1
   \   000001DC   0x6601             STR      R1,[R0, #+96]
   3875          	wifiPara.baud = 115200;
   \   000001DE   0xF44F 0x31E1      MOV      R1,#+115200
   \   000001E2   0x6641             STR      R1,[R0, #+100]
   3876          	
   3877          	wifi_link_state = WIFI_NOT_CONFIG;
   \   000001E4   0x2000             MOVS     R0,#+0
   \   000001E6   0x7020             STRB     R0,[R4, #+0]
   3878          
   3879          }
   \                     ??wifi_init_2: (+1)
   \   000001E8   0xB005             ADD      SP,SP,#+20
   \   000001EA   0xBDF0             POP      {R4-R7,PC}       ;; return
   3880          
   3881          
   3882          #define BUF_INC_POINTER(p)	((p + 1 == UART_FIFO_BUFFER_SIZE) ? 0:(p + 1))
   3883          

   \                                 In section .text, align 2, keep-with-next
   3884          int usartFifoAvailable(SZ_USART_FIFO *fifo)
   3885          {
   3886          	if(fifo->uart_read_point <= fifo->uart_write_point)
   \                     _Z18usartFifoAvailableP13SZ_USART_FIFO: (+1)
   \   00000000   0x6841             LDR      R1,[R0, #+4]
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4281             CMP      R1,R0
   \   00000006   0xD301             BCC.N    ??usartFifoAvailable_0
   3887          	{
   3888          		return fifo->uart_write_point - fifo->uart_read_point;
   \   00000008   0x1A08             SUBS     R0,R1,R0
   \   0000000A   0x4770             BX       LR
   3889          	}
   3890          	else
   3891          	{
   3892          		return UART_FIFO_BUFFER_SIZE + fifo->uart_write_point - fifo->uart_read_point;
   \                     ??usartFifoAvailable_0: (+1)
   \   0000000C   0xF501 0x6180      ADD      R1,R1,#+1024
   \   00000010   0x1A08             SUBS     R0,R1,R0
   \   00000012   0x4770             BX       LR               ;; return
   3893          	}
   3894          }
   3895          

   \                                 In section .text, align 2, keep-with-next
   3896          int readUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len)
   3897          {
   \                     _Z13readUsartFifoP13SZ_USART_FIFOPai: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   3898          	int i = 0 ;
   \   00000002   0x2300             MOVS     R3,#+0
   \   00000004   0xE001             B.N      ??readUsartFifo_0
   3899          
   3900          	while(i < len )
   3901          	{
   3902          		if(fifo->uart_read_point != fifo->uart_write_point)
   3903          		{
   3904          			buf[i] = fifo->uartTxBuffer[fifo->uart_read_point];
   3905          			fifo->uart_read_point = BUF_INC_POINTER(fifo->uart_read_point);
   \                     ??readUsartFifo_1: (+1)
   \   00000006   0x6004             STR      R4,[R0, #+0]
   3906          			i++;	
   \   00000008   0x1C5B             ADDS     R3,R3,#+1
   \                     ??readUsartFifo_0: (+1)
   \   0000000A   0x4293             CMP      R3,R2
   \   0000000C   0xDA0E             BGE.N    ??readUsartFifo_2
   \   0000000E   0x6804             LDR      R4,[R0, #+0]
   \   00000010   0x6845             LDR      R5,[R0, #+4]
   \   00000012   0x42AC             CMP      R4,R5
   \   00000014   0xD00A             BEQ.N    ??readUsartFifo_2
   \   00000016   0x1824             ADDS     R4,R4,R0
   \   00000018   0xF994 0x4008      LDRSB    R4,[R4, #+8]
   \   0000001C   0x545C             STRB     R4,[R3, R1]
   \   0000001E   0x6804             LDR      R4,[R0, #+0]
   \   00000020   0x1C64             ADDS     R4,R4,#+1
   \   00000022   0xF5B4 0x6F80      CMP      R4,#+1024
   \   00000026   0xD1EE             BNE.N    ??readUsartFifo_1
   \   00000028   0x2400             MOVS     R4,#+0
   \   0000002A   0xE7EC             B.N      ??readUsartFifo_1
   3907          		}
   3908          		else
   3909          		{
   3910          			break;
   3911          		}
   3912          	}
   3913          	return i;
   \                     ??readUsartFifo_2: (+1)
   \   0000002C   0x4618             MOV      R0,R3
   \   0000002E   0xBC30             POP      {R4,R5}
   \   00000030   0x4770             BX       LR               ;; return
   3914          	
   3915          }
   3916          

   \                                 In section .text, align 2, keep-with-next
   3917          int writeUsartFifo(SZ_USART_FIFO *fifo, int8_t *buf, int32_t len)
   3918          {
   \                     _Z14writeUsartFifoP13SZ_USART_FIFOPai: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
   3919          	int i = 0 ;
   \   00000002   0x2300             MOVS     R3,#+0
   3920          	
   3921          	if((buf == 0) || (len <= 0))
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD001             BEQ.N    ??writeUsartFifo_0
   \   00000008   0x2A01             CMP      R2,#+1
   \   0000000A   0xDA04             BGE.N    ??writeUsartFifo_1
   3922          	{
   3923          		return -1;
   \                     ??writeUsartFifo_0: (+1)
   \   0000000C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000010   0xE017             B.N      ??writeUsartFifo_2
   3924          	}
   3925          	while(i < len )
   3926          	{
   3927          		if(fifo->uart_read_point != BUF_INC_POINTER(fifo->uart_write_point))
   3928          		{
   3929          			fifo->uartTxBuffer[fifo->uart_write_point] = buf[i] ;
   3930          			fifo->uart_write_point = BUF_INC_POINTER(fifo->uart_write_point);
   \                     ??writeUsartFifo_3: (+1)
   \   00000012   0x6044             STR      R4,[R0, #+4]
   3931          			i++;
   \   00000014   0x1C5B             ADDS     R3,R3,#+1
   \                     ??writeUsartFifo_1: (+1)
   \   00000016   0x4293             CMP      R3,R2
   \   00000018   0xDA12             BGE.N    ??writeUsartFifo_4
   \   0000001A   0x6844             LDR      R4,[R0, #+4]
   \   0000001C   0x1C65             ADDS     R5,R4,#+1
   \   0000001E   0xF5B5 0x6F80      CMP      R5,#+1024
   \   00000022   0xD100             BNE.N    ??writeUsartFifo_5
   \   00000024   0x2500             MOVS     R5,#+0
   \                     ??writeUsartFifo_5: (+1)
   \   00000026   0x6806             LDR      R6,[R0, #+0]
   \   00000028   0x42AE             CMP      R6,R5
   \   0000002A   0xD009             BEQ.N    ??writeUsartFifo_4
   \   0000002C   0x5C5D             LDRB     R5,[R3, R1]
   \   0000002E   0x1824             ADDS     R4,R4,R0
   \   00000030   0x7225             STRB     R5,[R4, #+8]
   \   00000032   0x6844             LDR      R4,[R0, #+4]
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \   00000036   0xF5B4 0x6F80      CMP      R4,#+1024
   \   0000003A   0xD1EA             BNE.N    ??writeUsartFifo_3
   \   0000003C   0x2400             MOVS     R4,#+0
   \   0000003E   0xE7E8             B.N      ??writeUsartFifo_3
   3932          		}
   3933          		else
   3934          		{
   3935          			break;
   3936          		}
   3937          	}
   3938          	return i;
   \                     ??writeUsartFifo_4: (+1)
   \   00000040   0x4618             MOV      R0,R3
   \                     ??writeUsartFifo_2: (+1)
   \   00000042   0xBC70             POP      {R4-R6}
   \   00000044   0x4770             BX       LR               ;; return
   3939          }
   3940          

   \                                 In section .text, align 2, keep-with-next
   3941          void mksWifiIrqHandlerUser()
   3942          {
   \                     _Z21mksWifiIrqHandlerUserv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   3943          	UART_HandleTypeDef *wifi_com;
   3944              uint8_t uartRxData = 0;
                             ^
Warning[Pe177]: variable "uartRxData" was declared but never referenced
   3945              uint8_t i = 0;
                             ^
Warning[Pe177]: variable "i" was declared but never referenced
   3946          
   3947          
   3948          	if(gCfgItems.wifi_type == ESP_WIFI) 
   \   00000002   0x....             LDR.N    R1,??DataTable71_12
   \   00000004   0xF891 0x122C      LDRB     R1,[R1, #+556]
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xD100             BNE.N    ??mksWifiIrqHandlerUser_0
   3949          	{
   3950          		wifi_com = &huart1;
   \   0000000C   0x....             LDR.N    R0,??DataTable71_11
   3951          	}
   3952          	#if 0
   3953          	else
   3954          	{
   3955          		wifi_com = SZ_STM32_COM3;
   3956          	}
   3957          	#endif
   3958          #if 0
   3959              if(__HAL_UART_GET_FLAG(wifi_com, USART_IT_RXNE) != RESET)
   3960              {
   3961                  /* save on rx buffer */
   3962                  while (wifi_com->Instance->SR & USART_FLAG_RXNE)
   3963                  {
   3964          			/* save character */
   3965          			uartRxData = wifi_com->Instance->DR & 0xff;
   3966          		
   3967          			writeUsartFifo(&WifiRxFifo, (int8_t *)&uartRxData, 1);
   3968                   	WIFI_IO1_SET();
   3969                  }
   3970          
   3971                  /* clear interrupt */
   3972                  __HAL_UART_CLEAR_FLAG(wifi_com, USART_IT_RXNE);
   3973                  /* Ω” ’ÕÍ≥… */
   3974              }
   3975          
   3976              /* If overrun condition occurs, clear the ORE flag 
   3977                                        and recover communication */
   3978              if (__HAL_UART_GET_FLAG(wifi_com, USART_FLAG_ORE) != RESET)
   3979              {
   3980                  (void)USART_ReceiveData(wifi_com->Instance);
   3981              }
   3982          	if (__HAL_UART_GET_FLAG(wifi_com, USART_IT_TC) != RESET)
   3983          	{
   3984          		/* clear interrupt */
   3985          		__HAL_UART_CLEAR_FLAG(wifi_com, USART_IT_TC);
   3986          	}
   3987          	#else
   3988          	HAL_UART_IRQHandler(wifi_com);
   \                     ??mksWifiIrqHandlerUser_0: (+1)
   \   0000000E   0x.... 0x....      BL       HAL_UART_IRQHandler
   3989          	writeUsartFifo((SZ_USART_FIFO *)&WifiRxFifo, (int8_t *)&mksUsart1Rx, 1);
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x....             LDR.N    R1,??DataTable71_23
   \   00000016   0x....             LDR.N    R0,??DataTable71_14
   \   00000018   0x.... 0x....      BL       _Z14writeUsartFifoP13SZ_USART_FIFOPai
   3990          	WIFI_IO1_SET();
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0x....             LDR.N    R0,??DataTable71_8  ;; 0x40011000
   \   00000020   0xE8BD 0x4004      POP      {R2,LR}
   \   00000024   0x.... 0x....      B.W      GPIO_SetBits
   3991          	#endif
   3992          	
   3993          }
   3994          #if 1
   3995          /**-------------------------------------------------------
   3996            * @∫Ø ˝√˚ USART1_IRQHandler
   3997            * @π¶ƒ‹   ¥Æø⁄1÷–∂œ¥¶¿Ì∫Ø ˝
   3998            * @≤Œ ˝   Œﬁ
   3999            * @∑µªÿ÷µ Œﬁ
   4000          ***------------------------------------------------------*/
   4001          extern "C" void USART1_IRQHandler(void);   //**
   4002          

   \                                 In section .text, align 4, keep-with-next
   4003          void USART1_IRQHandler(void)
   4004          {
   \                     USART1_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   4005          	uint16_t temp;
                 	         ^
Warning[Pe550]: variable "temp" was set but never used

  static void wifi_deInit()
              ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\wifi_module.cpp",317  Warning[Pe177]: 
          function "wifi_deInit" was declared but never referenced

  						sprintf((char *)tempBuf, "M992 %d%d:%d%d:%d%d\r\n", print_time.hours/10, print_time.hours%10, print_time.minutes/10, print_time.minutes%10,	print_time.seconds/10, print_time.seconds%10);
  						^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\wifi_module.cpp",1438  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  			if(getWifiTickDiff(wifiTransError.start_tick, wifiTransError.now_tick) > WAIT_ESP_TRANS_TIMEOUT_TICK)
  			^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\wifi_module.cpp",3039  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   4006          	
   4007              /* ø™ º¡ŸΩÁ◊ ‘¥∑√Œ £¨Ω˚÷π÷–∂œ */
   4008          	__ASM volatile("cpsid i");
   \   00000002   0xB672             cpsid i
   4009          	if(huart1.Instance->SR & 0x0020)
   \   00000004   0x....             LDR.N    R4,??DataTable71_11
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x0680             LSLS     R0,R0,#+26
   \   0000000C   0xD506             BPL.N    ??USART1_IRQHandler_0
   4010          	{
   4011              	/* µ˜”√π≤”√µƒ¥Æø⁄÷–∂œ¥¶¿Ì◊”∫Ø ˝ */
   4012            		if(gCfgItems.wifi_type == ESP_WIFI) 
   \   0000000E   0x....             LDR.N    R0,??DataTable71_12
   \   00000010   0xF890 0x022C      LDRB     R0,[R0, #+556]
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD101             BNE.N    ??USART1_IRQHandler_0
   4013          			mksWifiIrqHandlerUser();
   \   00000018   0x.... 0x....      BL       _Z21mksWifiIrqHandlerUserv
   4014              	/* Ω· ¯¡ŸΩÁ◊ ‘¥∑√Œ £¨ø™∑≈÷–∂œ */
   4015              
   4016          
   4017          		//return;
   4018          	}
   4019          
   4020          	if(huart1.Instance->SR & 0x000f)
   \                     ??USART1_IRQHandler_0: (+1)
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0xF011 0x0F0F      TST      R1,#0xF
   \   00000024   0xD006             BEQ.N    ??USART1_IRQHandler_1
   4021          	{
   4022          			huart1.Instance->SR &= 0xffdf;	
   \   00000026   0x6801             LDR      R1,[R0, #+0]
   \   00000028   0xF64F 0x72DF      MOVW     R2,#+65503
   \   0000002C   0x4011             ANDS     R1,R2,R1
   \   0000002E   0x6001             STR      R1,[R0, #+0]
   4023                      temp = huart1.Instance->DR & 0xff;		
   \   00000030   0x6820             LDR      R0,[R4, #+0]
   \   00000032   0x6840             LDR      R0,[R0, #+4]
   4024          	}
   4025          
   4026          	__ASM volatile("cpsie i");
   \                     ??USART1_IRQHandler_1: (+1)
   \   00000034   0xB662             cpsie i
   4027          }
   \   00000036   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   0x31 0x3A          DC8      0x31, 0x3A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   0x2E 0x67          DC8      0x2E, 0x67, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \   00000000   0x2E 0x47          DC8      0x2E, 0x47, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \   00000000   0x........         DC32     SD_Path

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_4:
   \   00000000   0x........         DC32     fs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_5:
   \   00000000   0x........         DC32     TimeIncrease

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_6:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_7:
   \   00000000   0x40021014         DC32     0x40021014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_8:
   \   00000000   0x........         DC32     hdma_usart1_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_9:
   \   00000000   0x40020058         DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_10:
   \   00000000   0x........         DC32     huart1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_11:
   \   00000000   0x........         DC32     WifiRxFifo+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_12:
   \   00000000   0x........         DC32     wifiDmaRcvFifo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_13:
   \   00000000   0x........         DC32     bmp_public_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_14:
   \   00000000   0x........         DC32     WifiRxFifo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_15:
   \   00000000   0x........         DC32     mksUsart1Rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_16:
   \   00000000   0x........         DC32     gCfgItems

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_17:
   \   00000000   0x........         DC32     `?<Constant "ok\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_18:
   \   00000000   0x........         DC32     buf_to_wifi

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ".DIR\\r\\n">`:
   \   00000000   0x2E 0x44          DC8 ".DIR\015\012"
   \              0x49 0x52    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   0x42238124         DC32     0x42238124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_1:
   \   00000000   0x........         DC32     card+0x49C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_2:
   \   00000000   0x........         DC32     curFileName

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Begin file list\\r\\n">`:
   \   00000000   0x42 0x65          DC8 "Begin file list\015\012"
   \              0x67 0x69    
   \              0x6E 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "End file list\\r\\n">`:
   \   00000000   0x45 0x6E          DC8 "End file list\015\012"
   \              0x64 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "File selected\\r\\n">`:
   \   00000000   0x46 0x69          DC8 "File selected\015\012"
   \              0x6C 0x65    
   \              0x20 0x73    
   \              0x65 0x6C    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "file.open failed\\r\\n">`:
   \   00000000   0x66 0x69          DC8 "file.open failed\015\012"
   \              0x6C 0x65    
   \              0x2E 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "notValid">`:
   \   00000000   0x6E 0x6F          DC8 "notValid"
   \              0x74 0x56    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M27 %d\\r\\n">`:
   \   00000000   0x4D 0x32          DC8 "M27 %d\015\012"
   \              0x37 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "0:/%s">`:
   \   00000000   0x30 0x3A          DC8 "0:/%s"
   \              0x2F 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Writing to file: %s\\r\\n">`:
   \   00000000   0x57 0x72          DC8 "Writing to file: %s\015\012"
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x6F    
   \              0x20 0x66    
   \              0x69 0x6C    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "T:%.1f /%.1f B:%.1f /...">`:
   \   00000000   0x54 0x3A          DC8 54H, 3AH, 25H, 2EH, 31H, 66H, 20H, 2FH
   \              0x25 0x2E    
   \              0x31 0x66    
   \              0x20 0x2F    
   \   00000008   0x25 0x2E          DC8 25H, 2EH, 31H, 66H, 20H, 42H, 3AH, 25H
   \              0x31 0x66    
   \              0x20 0x42    
   \              0x3A 0x25    
   \   00000010   0x2E 0x31          DC8 2EH, 31H, 66H, 20H, 2FH, 25H, 2EH, 31H
   \              0x66 0x20    
   \              0x2F 0x25    
   \              0x2E 0x31    
   \   00000018   0x66 0x20          DC8 66H, 20H, 54H, 30H, 3AH, 25H, 2EH, 31H
   \              0x54 0x30    
   \              0x3A 0x25    
   \              0x2E 0x31    
   \   00000020   0x66 0x20          DC8 66H, 20H, 2FH, 25H, 2EH, 31H, 66H, 20H
   \              0x2F 0x25    
   \              0x2E 0x31    
   \              0x66 0x20    
   \   00000028   0x54 0x31          DC8 54H, 31H, 3AH, 25H, 2EH, 31H, 66H, 20H
   \              0x3A 0x25    
   \              0x2E 0x31    
   \              0x66 0x20    
   \   00000030   0x2F 0x25          DC8 2FH, 25H, 2EH, 31H, 66H, 20H, 40H, 3AH
   \              0x2E 0x31    
   \              0x66 0x20    
   \              0x40 0x3A    
   \   00000038   0x30 0x20          DC8 30H, 20H, 42H, 40H, 3AH, 30H, 0DH, 0AH
   \              0x42 0x40    
   \              0x3A 0x30    
   \              0x0D 0x0A    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "T:%d /%d B:%d /%d T0:...">`:
   \   00000000   0x54 0x3A          DC8 "T:%d /%d B:%d /%d T0:%d /%d T1:%d /%d @:0 B@:0\015\012"
   \              0x25 0x64    
   \              0x20 0x2F    
   \              0x25 0x64    
   \              0x20 0x42    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x2F 0x25    
   \              0x64 0x20    
   \              0x54 0x30    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x2F 0x25    
   \              0x64 0x20    
   \              0x54 0x31    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x2F 0x25    
   \              0x64 0x20    
   \              0x40 0x3A    
   \              0x30 0x20    
   \              0x42 0x40    
   \              0x3A 0x30    
   \              0x0D 0x0A    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M105\\n">`:
   \   00000000   0x4D 0x31          DC8 "M105\012"
   \              0x30 0x35    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M992 %d%d:%d%d:%d%d\\r\\n">`:
   \   00000000   0x4D 0x39          DC8 "M992 %d%d:%d%d:%d%d\015\012"
   \              0x39 0x32    
   \              0x20 0x25    
   \              0x64 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x25 0x64    
   \              0x3A 0x25    
   \              0x64 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M994 %s;%d\\n">`:
   \   00000000   0x4D 0x39          DC8 "M994 %s;%d\012"
   \              0x39 0x34    
   \              0x20 0x25    
   \              0x73 0x3B    
   \              0x25 0x64    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M997 IDLE\\r\\n">`:
   \   00000000   0x4D 0x39          DC8 "M997 IDLE\015\012"
   \              0x39 0x37    
   \              0x20 0x49    
   \              0x44 0x4C    
   \              0x45 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M997 PRINTING\\r\\n">`:
   \   00000000   0x4D 0x39          DC8 "M997 PRINTING\015\012"
   \              0x39 0x37    
   \              0x20 0x50    
   \              0x52 0x49    
   \              0x4E 0x54    
   \              0x49 0x4E    
   \              0x47 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M997 PAUSE\\r\\n">`:
   \   00000000   0x4D 0x39          DC8 "M997 PAUSE\015\012"
   \              0x39 0x37    
   \              0x20 0x50    
   \              0x41 0x55    
   \              0x53 0x45    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FIRMWARE_NAME:TFT24\\r\\n">`:
   \   00000000   0x46 0x49          DC8 "FIRMWARE_NAME:TFT24\015\012"
   \              0x52 0x4D    
   \              0x57 0x41    
   \              0x52 0x45    
   \              0x5F 0x4E    
   \              0x41 0x4D    
   \              0x45 0x3A    
   \              0x54 0x46    
   \              0x54 0x32    
   \              0x34 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ok\\r\\n">`:
   \   00000000   0x6F 0x6B          DC8 "ok\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   0x........         DC32     file_writer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_1:
   \   00000000   0x........         DC32     ??lfn

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d.%d.%d.%d">`:
   \   00000000   0x25 0x64          DC8 "%d.%d.%d.%d"
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1:/%s">`:
   \   00000000   0x31 0x3A          DC8 "1:/%s"
   \              0x2F 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60:
   \   00000000   0x........         DC32     gCfgItems

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_1:
   \   00000000   0x........         DC32     SD_Path

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_2:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_3:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_4:
   \   00000000   0x........         DC32     mksReprint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_5:
   \   00000000   0x........         DC32     card

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_6:
   \   00000000   0x........         DC32     once_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable60_7:
   \   00000000   0x........         DC32     pause_resum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable61:
   \   00000000   0x........         DC32     from_flash_pic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable61_1:
   \   00000000   0x........         DC32     flash_preview_begin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable61_2:
   \   00000000   0x........         DC32     default_preview_flg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   0x........         DC32     print_job_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   0x........         DC32     wait_for_heatup

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64_1:
   \   00000000   0x........         DC32     gCurFileState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   0x........         DC32     wifi_link_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65_1:
   \   00000000   0x........         DC32     espGcodeFifo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65_2:
   \   00000000   0x........         DC32     _ZN11Temperature23current_temperature_bedE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65_3:
   \   00000000   0x........         DC32     _ZN11Temperature22target_temperature_bedE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65_4:
   \   00000000   0x........         DC32     _ZN11Temperature19current_temperatureE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65_5:
   \   00000000   0x........         DC32     _ZN11Temperature18target_temperatureE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   0x........         DC32     print_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   0x........         DC32     srcfp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68_1:
   \   00000000   0x........         DC32     commands_in_queue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68_2:
   \   00000000   0x........         DC32     serial_wait_tick

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   0x........         DC32     cloud_para

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69_1:
   \   00000000   0x........         DC32     wifiPara

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   0x........         DC32     file_writer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_1:
   \   00000000   0x42238124         DC32     0x42238124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_2:
   \   00000000   0x........         DC32     fs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_3:
   \   00000000   0x........         DC32     esp_msg_buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_4:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_5:
   \   00000000   0x........         DC32     WifiRxFifo+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_6:
   \   00000000   0x........         DC32     wifiDmaRcvFifo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_7:
   \   00000000   0x........         DC32     file_writer+0x238

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_8:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_9:
   \   00000000   0x40020058         DC32     0x40020058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_10:
   \   00000000   0x........         DC32     hdma_usart1_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_11:
   \   00000000   0x........         DC32     huart1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_12:
   \   00000000   0x........         DC32     gCfgItems

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_13:
   \   00000000   0x........         DC32     wifi_link_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_14:
   \   00000000   0x........         DC32     WifiRxFifo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_15:
   \   00000000   0x0001D4C1         DC32     0x1d4c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_16:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_17:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_18:
   \   00000000   0x40020081         DC32     0x40020081

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_19:
   \   00000000   0x40021018         DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_20:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_21:
   \   00000000   0x40006C30         DC32     0x40006c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_22:
   \   00000000   0x........         DC32     esp_upload

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71_23:
   \   00000000   0x........         DC32     mksUsart1Rx

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1:/MksWifi.bin">`:
   \   00000000   0x31 0x3A          DC8 "1:/MksWifi.bin"
   \              0x2F 0x4D    
   \              0x6B 0x73    
   \              0x57 0x69    
   \              0x66 0x69    
   \              0x2E 0x62    
   \              0x69 0x6E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1:/MKS_WIFI_CUR">`:
   \   00000000   0x31 0x3A          DC8 "1:/MKS_WIFI_CUR"
   \              0x2F 0x4D    
   \              0x4B 0x53    
   \              0x5F 0x57    
   \              0x49 0x46    
   \              0x49 0x5F    
   \              0x43 0x55    
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "/MKS_WIFI_CUR">`:
   \   00000000   0x2F 0x4D          DC8 "/MKS_WIFI_CUR"
   \              0x4B 0x53    
   \              0x5F 0x57    
   \              0x49 0x46    
   \              0x49 0x5F    
   \              0x43 0x55    
   \              0x52 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1:/MksWifi_Web.bin">`:
   \   00000000   0x31 0x3A          DC8 "1:/MksWifi_Web.bin"
   \              0x2F 0x4D    
   \              0x6B 0x73    
   \              0x57 0x69    
   \              0x66 0x69    
   \              0x5F 0x57    
   \              0x65 0x62    
   \              0x2E 0x62    
   \              0x69 0x6E    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1:/MksWifi_WebView.bin">`:
   \   00000000   0x31 0x3A          DC8 "1:/MksWifi_WebView.bin"
   \              0x2F 0x4D    
   \              0x6B 0x73    
   \              0x57 0x69    
   \              0x66 0x69    
   \              0x5F 0x57    
   \              0x65 0x62    
   \              0x56 0x69    
   \              0x65 0x77    
   \              0x2E 0x62    
   \              0x69 0x6E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1:/MKS_WEB_CONTROL_CUR">`:
   \   00000000   0x31 0x3A          DC8 "1:/MKS_WEB_CONTROL_CUR"
   \              0x2F 0x4D    
   \              0x4B 0x53    
   \              0x5F 0x57    
   \              0x45 0x42    
   \              0x5F 0x43    
   \              0x4F 0x4E    
   \              0x54 0x52    
   \              0x4F 0x4C    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "/MKS_WEB_CONTROL_CUR">`:
   \   00000000   0x2F 0x4D          DC8 "/MKS_WEB_CONTROL_CUR"
   \              0x4B 0x53    
   \              0x5F 0x57    
   \              0x45 0x42    
   \              0x5F 0x43    
   \              0x4F 0x4E    
   \              0x54 0x52    
   \              0x4F 0x4C    
   \              0x5F 0x43    
   \              0x55 0x52    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "1:">`:
   \   00000000   0x31 0x3A          DC8 "1:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ".g">`:
   \   00000000   0x2E 0x67          DC8 ".g"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ".G">`:
   \   00000000   0x2E 0x47          DC8 ".G"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(int8_t)'\\000'}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\n">`:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "G">`:
   \   00000000   0x47 0x00          DC8 "G"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "M">`:
   \   00000000   0x4D 0x00          DC8 "M"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "T">`:
   \   00000000   0x54 0x00          DC8 "T"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\r">`:
   \   00000000   0x0D 0x00          DC8 "\015"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "*">`:
   \   00000000   0x2A 0x00          DC8 "*"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant " ">`:
   \   00000000   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "0:">`:
   \   00000000   0x30 0x3A          DC8 "0:"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "/">`:
   \   00000000   0x2F 0x00          DC8 "/"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(uint8_t)'\\000'}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(uint8_t)'\\000'}>_1`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000091   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000101   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000111   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000121   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000131   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000141   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000151   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000161   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000171   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000181   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000191   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000201   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000211   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000221   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000231   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000241   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000251   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000261   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000271   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000281   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000291   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000301   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000311   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000321   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000331   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000341   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000351   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000361   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000371   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000381   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000391   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   4028          #endif
   4029          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   DMA1_Channel5_IRQHandler
        24   -- Indirect call
         0   -> GPIO_ResetBits
        24   -> GPIO_SetBits
        24   -> esp_dma_pre()
        24   -> storeRcvData(uint8_t *, int32_t)
    1008   Explore_Disk(char *, uint8_t)
      1008   -> f_mount
      1008   -> f_opendir
      1008   -> f_readdir
      1008   -> memset
      1008   -> send_to_wifi(char *, int)
      1008   -> strcat
      1008   -> strcpy
      1008   -> strlen
      1008   -> strstr(char *, char const *)
       8   USART1_IRQHandler
         8   -> mksWifiIrqHandlerUser()
       4   charAtArray(uint8_t const *, uint32_t, uint8_t)
       0   computeBinarySize(char *)
      16   cut_msg_head(uint8_t *, uint16_t, uint16_t)
        16   -> memset
      16   dma_init()
        16   -> Error_Handler
        16   -> HAL_DMA_Init
        16   -> HAL_DMA_Start_IT
        16   -> HAL_NVIC_EnableIRQ
        16   -> HAL_NVIC_SetPriority
        16   -> memset
      32   esp_data_parser(char *, int)
        32   -> charAtArray(uint8_t const *, uint32_t, uint8_t)
        32   -> cut_msg_head(uint8_t *, uint16_t, uint16_t)
        32   -> file_first_msg_handle(uint8_t *, uint16_t)
        32   -> file_fragment_msg_handle(uint8_t *, uint16_t)
        32   -> gcode_msg_handle(uint8_t *, uint16_t)
        32   -> memcpy
        32   -> memset
        32   -> net_msg_handle(uint8_t *, uint16_t)
       0   esp_dma_pre()
      16   esp_port_begin(uint8_t)
        16   -> HAL_UART_DeInit
         0   -> HAL_UART_Receive_IT
        16   -> MX_USART1_UART_Init
         0   -> dma_init()
        16   -> memset
      24   file_first_msg_handle(uint8_t *, uint16_t)
        24   -> GUI_Exec
        24   -> clear_cur_ui
         0   -> draw_dialog
        24   -> draw_dialog
        24   -> f_close
        24   -> f_mount
        24   -> f_open
        24   -> getWifiTick()
        24   -> memcpy
        24   -> memset
        24   -> sprintf
        24   -> strlen
        24   -> wifi_delay(int)
      16   file_fragment_msg_handle(uint8_t *, uint16_t)
        16   -> f_write
        16   -> getWifiTick()
        16   -> getWifiTickDiff(int32_t, int32_t)
        16   -> memset
        16   -> write_to_file(char *, int)
     120   gcode_msg_handle(uint8_t *, uint16_t)
       120   -> __aeabi_memclr4
       120   -> memcpy
       120   -> memset
       120   -> strstr(char *, char const *)
       120   -> wifi_gcode_exec(uint8_t *)
       0   getWifiTick()
       0   getWifiTickDiff(int32_t, int32_t)
      16   get_file_list(char *)
         0   -> Explore_Disk(char *, uint8_t)
        16   -> __aeabi_memcpy4
        16   -> f_mount
       0   hlk_data_parser(char *, int)
       0   init_queue(QUEUE *)
         0   -> memset
       8   mksWifiIrqHandlerUser()
         0   -> GPIO_SetBits
         8   -> HAL_UART_IRQHandler
         8   -> writeUsartFifo(SZ_USART_FIFO *, int8_t *, int32_t)
       0   mount_file_sys(uint8_t)
         0   -> f_mount
      40   net_msg_handle(uint8_t *, uint16_t)
        40   -> memcpy
        40   -> memset
         0   -> package_to_wifi(WIFI_RET_TYPE, char *, int)
        40   -> package_to_wifi(WIFI_RET_TYPE, char *, int)
        40   -> sprintf
        40   -> strncmp
      32   package_to_wifi(WIFI_RET_TYPE, char *, int)
        32   -> memcpy
        32   -> memset
        32   -> raw_send_to_wifi(char *, int)
        32   -> strlen
        32   -> strncpy
      24   pop_queue(QUEUE *, char *, int)
        24   -> memcpy
        24   -> memset
        24   -> strlen
      32   push_queue(QUEUE *, char *, int)
        32   -> memcpy
        32   -> memset
      24   raw_send_to_wifi(char *, int)
        24   -> USART_GetFlagStatus
        24   -> USART_SendData
       8   readUsartFifo(SZ_USART_FIFO *, int8_t *, int32_t)
      16   readWifiFifo(uint8_t *, uint32_t)
        16   -> memcpy
       0   send_to_wifi(char *, int)
         0   -> package_to_wifi(WIFI_RET_TYPE, char *, int)
       0   set_cur_file_sys(int)
      16   stopEspTransfer()
         0   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> HAL_DMA_Abort
        16   -> HAL_DMA_DeInit
        16   -> esp_port_begin(uint8_t)
        16   -> exchangeFlashMode
        16   -> f_close
        16   -> f_unlink
        16   -> getWifiTick()
        16   -> wifi_delay(int)
      16   storeRcvData(uint8_t *, int32_t)
        16   -> memcpy
       0   strstr(char *, char const *)
         0   -> __iar_Strstr
       0   usartFifoAvailable(SZ_USART_FIFO *)
      16   wifi_delay(int)
        16   -> getWifiTick()
        16   -> getWifiTickDiff(int32_t, int32_t)
     752   wifi_gcode_exec(uint8_t *)
       752   -> CardReader::openFile(char *, bool, bool)
       752   -> CardReader::pauseSDPrint()
       752   -> CardReader::startFileprint()
       752   -> CardReader::stopSDPrint()
       752   -> Stopwatch::pause()
       752   -> __aeabi_f2d
       752   -> __aeabi_f2iz
       752   -> __aeabi_i2f
       752   -> __aeabi_memclr4
       752   -> __aeabi_memcpy
       752   -> atoi
       752   -> clear_cur_ui
       752   -> draw_dialog_filetransfer
       752   -> draw_printing
       752   -> draw_ready_print
       752   -> enqueue_and_echo_commands_P(char const *)
       752   -> f_open
       752   -> get_file_list(char *)
       752   -> memset
       752   -> mount_file_sys(uint8_t)
       752   -> preview_gcode_prehandle
       752   -> reset_file_info
       752   -> reset_print_time
       752   -> send_to_wifi(char *, int)
       752   -> set_cur_file_sys(int)
       752   -> sprintf
       752   -> start_print_time
       752   -> stop_print_time
       752   -> strcat
       752   -> strcmp
       752   -> strcpy
       752   -> strlen
       752   -> strncmp
       752   -> strstr(char *, char const *)
       752   -> wifi_ret_ack()
      40   wifi_init()
        40   -> GPIO_SetBits
        40   -> HAL_GPIO_Init
        40   -> clear_cur_ui
        40   -> draw_dialog
        40   -> draw_return_ui
        40   -> esp_port_begin(uint8_t)
        40   -> f_close
        40   -> f_open
        40   -> f_rename
        40   -> f_unlink
        40   -> usartFifoAvailable(SZ_USART_FIFO *)
        40   -> wifi_delay(int)
        40   -> wifi_reset()
        40   -> wifi_upload
       8   wifi_looping()
         8   -> wifi_rcv_handle()
    1040   wifi_rcv_handle()
      1040   -> GPIO_ResetBits
      1040   -> GPIO_SetBits
      1040   -> __aeabi_memclr4
      1040   -> clear_cur_ui
      1040   -> draw_dialog
      1040   -> esp_data_parser(char *, int)
      1040   -> esp_dma_pre()
      1040   -> esp_port_begin(uint8_t)
      1040   -> exchangeFlashMode
      1040   -> getWifiTick()
      1040   -> getWifiTickDiff(int32_t, int32_t)
      1040   -> readUsartFifo(SZ_USART_FIFO *, int8_t *, int32_t)
      1040   -> readWifiFifo(uint8_t *, uint32_t)
      1040   -> stopEspTransfer()
      1040   -> storeRcvData(uint8_t *, int32_t)
      1040   -> wifi_delay(int)
      1040   -> wifi_reset()
      16   wifi_reset()
        16   -> GPIO_ResetBits
         0   -> GPIO_SetBits
        16   -> getWifiTick()
        16   -> getWifiTickDiff(int32_t, int32_t)
       0   wifi_ret_ack()
         0   -> raw_send_to_wifi(char *, int)
      12   writeUsartFifo(SZ_USART_FIFO *, int8_t *, int32_t)
      24   write_to_file(char *, int)
        24   -> f_write
        24   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant " ">
      12  ?<Constant "%d.%d.%d.%d">
       2  ?<Constant "*">
       8  ?<Constant ".DIR\r\n">
       4  ?<Constant ".G">
       4  ?<Constant ".g">
       2  ?<Constant "/">
      24  ?<Constant "/MKS_WEB_CONTROL_CUR">
      16  ?<Constant "/MKS_WIFI_CUR">
       4  ?<Constant "0:">
       8  ?<Constant "0:/%s">
       4  ?<Constant "1:">
       8  ?<Constant "1:/%s">
      24  ?<Constant "1:/MKS_WEB_CONTROL_CUR">
      16  ?<Constant "1:/MKS_WIFI_CUR">
      16  ?<Constant "1:/MksWifi.bin">
      20  ?<Constant "1:/MksWifi_Web.bin">
      24  ?<Constant "1:/MksWifi_WebView.bin">
      20  ?<Constant "Begin file list\r\n">
      16  ?<Constant "End file list\r\n">
      24  ?<Constant "FIRMWARE_NAME:TFT24\r\n">
      16  ?<Constant "File selected\r\n">
       2  ?<Constant "G">
       2  ?<Constant "M">
       8  ?<Constant "M105\n">
      12  ?<Constant "M27 %d\r\n">
      24  ?<Constant "M992 %d%d:%d%d:%d%d\r\n">
      12  ?<Constant "M994 %s;%d\n">
      12  ?<Constant "M997 IDLE\r\n">
      16  ?<Constant "M997 PAUSE\r\n">
      16  ?<Constant "M997 PRINTING\r\n">
       2  ?<Constant "T">
      68  ?<Constant "T:%.1f /%.1f B:%.1f /...">
      52  ?<Constant "T:%d /%d B:%d /%d T0:...">
      24  ?<Constant "Writing to file: %s\r\n">
       2  ?<Constant "\n">
       2  ?<Constant "\r">
       4  ?<Constant "\r\n">
      20  ?<Constant "file.open failed\r\n">
      12  ?<Constant "notValid">
       8  ?<Constant "ok\r\n">
     100  ?<Constant {(int8_t)'\000'}>
     100  ?<Constant {(uint8_t)'\000'}>
    1028  ?<Constant {(uint8_t)'\000'}>_1
       4  ??DataTable54
       4  ??DataTable55
       4  ??DataTable55_1
       4  ??DataTable55_10
       4  ??DataTable55_11
       4  ??DataTable55_12
       4  ??DataTable55_13
       4  ??DataTable55_14
       4  ??DataTable55_15
       4  ??DataTable55_16
       4  ??DataTable55_17
       4  ??DataTable55_18
       4  ??DataTable55_2
       4  ??DataTable55_3
       4  ??DataTable55_4
       4  ??DataTable55_5
       4  ??DataTable55_6
       4  ??DataTable55_7
       4  ??DataTable55_8
       4  ??DataTable55_9
       4  ??DataTable56
       4  ??DataTable56_1
       4  ??DataTable56_2
       4  ??DataTable57
       4  ??DataTable57_1
       4  ??DataTable60
       4  ??DataTable60_1
       4  ??DataTable60_2
       4  ??DataTable60_3
       4  ??DataTable60_4
       4  ??DataTable60_5
       4  ??DataTable60_6
       4  ??DataTable60_7
       4  ??DataTable61
       4  ??DataTable61_1
       4  ??DataTable61_2
       4  ??DataTable62
       4  ??DataTable64
       4  ??DataTable64_1
       4  ??DataTable65
       4  ??DataTable65_1
       4  ??DataTable65_2
       4  ??DataTable65_3
       4  ??DataTable65_4
       4  ??DataTable65_5
       4  ??DataTable66
       4  ??DataTable68
       4  ??DataTable68_1
       4  ??DataTable68_2
       4  ??DataTable69
       4  ??DataTable69_1
       4  ??DataTable71
       4  ??DataTable71_1
       4  ??DataTable71_10
       4  ??DataTable71_11
       4  ??DataTable71_12
       4  ??DataTable71_13
       4  ??DataTable71_14
       4  ??DataTable71_15
       4  ??DataTable71_16
       4  ??DataTable71_17
       4  ??DataTable71_18
       4  ??DataTable71_19
       4  ??DataTable71_2
       4  ??DataTable71_20
       4  ??DataTable71_21
       4  ??DataTable71_22
       4  ??DataTable71_23
       4  ??DataTable71_3
       4  ??DataTable71_4
       4  ??DataTable71_5
       4  ??DataTable71_6
       4  ??DataTable71_7
       4  ??DataTable71_8
       4  ??DataTable71_9
     246  DMA1_Channel5_IRQHandler
     262  Explore_Disk(char *, uint8_t)
      56  USART1_IRQHandler
    1032  WifiRxFifo
       1  binary_data_len
       2  binary_head
     260  buf_to_wifi
          index_to_wifi
      30  charAtArray(uint8_t const *, uint32_t, uint8_t)
     320  cloud_para
          cfg_wifi_flag
          cfg_cloud_flag
          wifi_firm_ver
          ipPara
     116  computeBinarySize(char *)
      56  cut_msg_head(uint8_t *, uint16_t, uint16_t)
     176  dma_init()
     108  espGcodeFifo
          total_write
     506  esp_data_parser(char *, int)
      46  esp_dma_pre()
    1026  esp_msg_buf
          esp_msg_index
      76  esp_port_begin(uint8_t)
     258  file_first_msg_handle(uint8_t *, uint16_t)
     196  file_fragment_msg_handle(uint8_t *, uint16_t)
    1124  file_writer
          save_File
     134  gcode_msg_handle(uint8_t *, uint16_t)
       8  getWifiTick()
      18  getWifiTickDiff(int32_t, int32_t)
      78  get_file_list(char *)
       2  hlk_data_parser(char *, int)
      24  init_queue(QUEUE *)
      52  lastBinaryCmd
      96  left_to_save
       1  left_to_send
     256  lfn
      40  mksWifiIrqHandlerUser()
      20  mount_file_sys(uint8_t)
     442  net_msg_handle(uint8_t *, uint16_t)
     654  package_to_wifi(WIFI_RET_TYPE, char *, int)
     126  pop_queue(QUEUE *, char *, int)
     118  push_queue(QUEUE *, char *, int)
      58  raw_send_to_wifi(char *, int)
      50  readUsartFifo(SZ_USART_FIFO *, int8_t *, int32_t)
      76  readWifiFifo(uint8_t *, uint32_t)
       8  send_to_wifi(char *, int)
      10  set_cur_file_sys(int)
     148  stopEspTransfer()
      74  storeRcvData(uint8_t *, int32_t)
       4  strstr(char *, char const *)
      20  usartFifoAvailable(SZ_USART_FIFO *)
       1  wait_ip_back_flag
      48  wifiDmaRcvFifo
     108  wifiPara
       1  wifi_check_time
       1  wifi_connect_flg
      30  wifi_delay(int)
    2240  wifi_gcode_exec(uint8_t *)
     492  wifi_init()
      92  wifi_link_state
          esp_state
          wifiTransError
          upload_result
          upload_time
          upload_size
          lastFragment
          tick_net_time1
          tick_net_time2
          saveFilePath
       1  wifi_loop_time
      34  wifi_looping()
     408  wifi_rcv_handle()
      56  wifi_reset()
      22  wifi_ret_ack()
      70  writeUsartFifo(SZ_USART_FIFO *, int8_t *, int32_t)
      98  write_to_file(char *, int)
       1  -- Other

 
 4 530 bytes in section .bss
 1 265 bytes in section .rodata
 8 422 bytes in section .text
 
 8 418 bytes of CODE  memory (+ 4 bytes shared)
 1 264 bytes of CONST memory (+ 1 byte  shared)
 4 530 bytes of DATA  memory

Errors: none
Warnings: 94
