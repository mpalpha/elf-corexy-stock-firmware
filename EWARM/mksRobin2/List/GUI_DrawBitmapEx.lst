###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:41
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DrawBitmapEx.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DrawBitmapEx.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUI_DrawBitmapEx.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUI_DrawBitmapEx.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DrawBitmapEx.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_DrawBitmapEx.c
     16          Purpose     : Draws a bitmap with free magnification
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "GUI_Private.h"
     21          #include "stdlib.h"
     22          
     23          /*********************************************************************
     24          *
     25          *       static code
     26          *
     27          **********************************************************************
     28          */
     29          /*********************************************************************
     30          *
     31          *       GL_DrawBitmapEx
     32          */

   \                                 In section .text, align 2, keep-with-next
     33          static void GL_DrawBitmapEx(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0,
     34                                      int xCenter, int yCenter, int xMag, int yMag) {
   \                     GL_DrawBitmapEx: (+1)
   \   00000000   0xE92D 0x4FFD      PUSH     {R0,R2-R11,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
     35            LCD_PIXELINDEX Index, IndexPrev = 0;
   \   00000006   0xF04F 0x0B00      MOV      R11,#+0
     36            LCD_COLOR Color;
     37            int x, y, xi, yi, xSize, ySize, xAct, xStart, xMagAbs, xiMag, yMin, yMax, yEnd, yPrev, yStep;
     38            char Cached, HasTrans = 0;
   \   0000000A   0x4658             MOV      R0,R11
   \   0000000C   0x9008             STR      R0,[SP, #+32]
     39            /* Use clipping rect to reduce calculation */
     40            yMin = GUI_Context.ClipRect.y0;
   \   0000000E   0x....             LDR.N    R0,??DataTable1
   \   00000010   0xF9B0 0x2006      LDRSH    R2,[R0, #+6]
   \   00000014   0x920B             STR      R2,[SP, #+44]
     41            yMax = GUI_Context.ClipRect.y1;
   \   00000016   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \   0000001A   0x900A             STR      R0,[SP, #+40]
     42            /* Init some values */
     43            xSize    = pBitmap->XSize;
   \   0000001C   0x980C             LDR      R0,[SP, #+48]
   \   0000001E   0x8800             LDRH     R0,[R0, #+0]
   \   00000020   0x9003             STR      R0,[SP, #+12]
     44            ySize    = pBitmap->YSize;
   \   00000022   0x980C             LDR      R0,[SP, #+48]
   \   00000024   0x8840             LDRH     R0,[R0, #+2]
   \   00000026   0x9009             STR      R0,[SP, #+36]
     45            xMagAbs  = ((xMag < 0) ? -xMag : xMag);
   \   00000028   0x9819             LDR      R0,[SP, #+100]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD500             BPL.N    ??GL_DrawBitmapEx_0
   \   0000002E   0x4240             RSBS     R0,R0,#+0
   \                     ??GL_DrawBitmapEx_0: (+1)
   \   00000030   0x9007             STR      R0,[SP, #+28]
     46            x0      -= (I32)((xMag < 0) ? xSize - xCenter - 1 : xCenter) * (I32)(xMagAbs) / (I32)(1000);
   \   00000032   0x9819             LDR      R0,[SP, #+100]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD505             BPL.N    ??GL_DrawBitmapEx_1
   \   00000038   0x9803             LDR      R0,[SP, #+12]
   \   0000003A   0x9A0E             LDR      R2,[SP, #+56]
   \   0000003C   0x1A80             SUBS     R0,R0,R2
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0xE001             B.N      ??GL_DrawBitmapEx_2
   \                     ??GL_DrawBitmapEx_1: (+1)
   \   00000044   0x980E             LDR      R0,[SP, #+56]
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \                     ??GL_DrawBitmapEx_2: (+1)
   \   00000048   0x9800             LDR      R0,[SP, #+0]
   \   0000004A   0x9A07             LDR      R2,[SP, #+28]
   \   0000004C   0x4350             MULS     R0,R2,R0
   \   0000004E   0xF44F 0x727A      MOV      R2,#+1000
   \   00000052   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   00000056   0x1A08             SUBS     R0,R1,R0
   \   00000058   0x9001             STR      R0,[SP, #+4]
     47            yEnd     = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
   \   0000005A   0x9C0D             LDR      R4,[SP, #+52]
   \   0000005C   0x4611             MOV      R1,R2
   \   0000005E   0x9818             LDR      R0,[SP, #+96]
   \   00000060   0x9A1A             LDR      R2,[SP, #+104]
   \   00000062   0x4350             MULS     R0,R2,R0
   \   00000064   0x4240             RSBS     R0,R0,#+0
   \   00000066   0x.... 0x....      BL       GUI__DivideRound32
   \   0000006A   0x1900             ADDS     R0,R0,R4
   \   0000006C   0x9000             STR      R0,[SP, #+0]
     48            yPrev    = yEnd + 1;
   \   0000006E   0x1C40             ADDS     R0,R0,#+1
   \   00000070   0x9006             STR      R0,[SP, #+24]
     49            yStep = (yMag < 0) ? -1 : 1;
   \   00000072   0x981A             LDR      R0,[SP, #+104]
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD503             BPL.N    ??GL_DrawBitmapEx_3
   \   00000078   0xF04F 0x30FF      MOV      R0,#-1
   \   0000007C   0x9005             STR      R0,[SP, #+20]
   \   0000007E   0xE001             B.N      ??GL_DrawBitmapEx_4
   \                     ??GL_DrawBitmapEx_3: (+1)
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x9005             STR      R0,[SP, #+20]
     50            if (pBitmap->pPal) {
   \                     ??GL_DrawBitmapEx_4: (+1)
   \   00000084   0x980C             LDR      R0,[SP, #+48]
   \   00000086   0x68C0             LDR      R0,[R0, #+12]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD005             BEQ.N    ??GL_DrawBitmapEx_5
     51              if (pBitmap->pPal->HasTrans) {
   \   0000008C   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD001             BEQ.N    ??GL_DrawBitmapEx_5
     52                HasTrans = 1;
   \   00000094   0x2001             MOVS     R0,#+1
   \   00000096   0x9008             STR      R0,[SP, #+32]
     53              }
     54            }
     55            for (yi = 0; yi < ySize; yi++) {
   \                     ??GL_DrawBitmapEx_5: (+1)
   \   00000098   0x4658             MOV      R0,R11
   \   0000009A   0x9002             STR      R0,[SP, #+8]
   \   0000009C   0xE004             B.N      ??GL_DrawBitmapEx_6
     56              y = yEnd;
     57              yEnd = y0 + GUI__DivideRound32(((I32)(yi + 1 - yCenter) * (I32)(yMag)), 1000);
     58              if (y != yPrev) {
     59                yPrev = y;
     60                do {
     61                  if ((y >= yMin) && (y <= yMax)) {
     62                    xStart = -1;
     63                    x      =  0;
     64                    xiMag  =  0;
     65                    Cached =  0;
     66                    for (xi = 0; xi < xSize; xi++) {
     67                      xiMag += xMagAbs;
     68                      if (xiMag >= 1000) {
     69                        xAct  = (xMag > 0) ? xi : xSize - xi - 1;
     70                        Index = GUI_GetBitmapPixelIndex(pBitmap, xAct, yi);
     71                        if (Index != IndexPrev || xStart == -1) {
     72                          if ((Index == 0) && HasTrans) {
     73                            /* Transparent color ... clear cache */
     74                            if (Cached) {
     75                              LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
     76                              Cached = 0;
     77                            }
     78                          } else {
     79                            /* Another color ... draw contents of cache */
     80                            if (Cached && xStart != -1) {
     81                              LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
     82                            }
     83                            xStart    = x;
     84                            Cached    = 1;
     85                            if (pBitmap->pMethods) {
     86                              Color = pBitmap->pMethods->pfIndex2Color(Index);
     87                            } else {
     88                              Color = pBitmap->pPal->pPalEntries[Index];
     89                            }
     90                            LCD_SetColorIndex(LCDDEV_L0_Color2Index(Color));
     91                          }
     92                          IndexPrev = Index;
     93                        }
     94                        do {
     95                          x++;
     96                          xiMag -= 1000;
     97                        } while (xiMag >= 1000);
     98                      }
     99                    }
    100                    /* Clear cache */
    101                    if (Cached) {
    102                      LCD_DrawHLine(x0 + xStart, y, x0 + x - 1);
    103                    }
    104                  }
    105                  y += yStep;
    106                } while ((yMag < 0) ? (y > yEnd) : (y < yEnd));
   \                     ??GL_DrawBitmapEx_7: (+1)
   \   0000009E   0x2000             MOVS     R0,#+0
   \                     ??GL_DrawBitmapEx_8: (+1)
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD118             BNE.N    ??GL_DrawBitmapEx_9
   \                     ??GL_DrawBitmapEx_10: (+1)
   \   000000A4   0x9804             LDR      R0,[SP, #+16]
   \   000000A6   0x9002             STR      R0,[SP, #+8]
   \                     ??GL_DrawBitmapEx_6: (+1)
   \   000000A8   0x9802             LDR      R0,[SP, #+8]
   \   000000AA   0x9909             LDR      R1,[SP, #+36]
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xF280 0x8096      BGE.W    ??GL_DrawBitmapEx_11
   \   000000B2   0x9C00             LDR      R4,[SP, #+0]
   \   000000B4   0x1C40             ADDS     R0,R0,#+1
   \   000000B6   0x9004             STR      R0,[SP, #+16]
   \   000000B8   0x9D0D             LDR      R5,[SP, #+52]
   \   000000BA   0xF44F 0x717A      MOV      R1,#+1000
   \   000000BE   0x9A18             LDR      R2,[SP, #+96]
   \   000000C0   0x1A80             SUBS     R0,R0,R2
   \   000000C2   0x9A1A             LDR      R2,[SP, #+104]
   \   000000C4   0x4350             MULS     R0,R2,R0
   \   000000C6   0x.... 0x....      BL       GUI__DivideRound32
   \   000000CA   0x1940             ADDS     R0,R0,R5
   \   000000CC   0x9000             STR      R0,[SP, #+0]
   \   000000CE   0x9806             LDR      R0,[SP, #+24]
   \   000000D0   0x4284             CMP      R4,R0
   \   000000D2   0xD0E7             BEQ.N    ??GL_DrawBitmapEx_10
   \   000000D4   0x9406             STR      R4,[SP, #+24]
   \                     ??GL_DrawBitmapEx_9: (+1)
   \   000000D6   0x980B             LDR      R0,[SP, #+44]
   \   000000D8   0x4284             CMP      R4,R0
   \   000000DA   0xDB6F             BLT.N    ??GL_DrawBitmapEx_12
   \   000000DC   0x980A             LDR      R0,[SP, #+40]
   \   000000DE   0x42A0             CMP      R0,R4
   \   000000E0   0xDB6C             BLT.N    ??GL_DrawBitmapEx_12
   \   000000E2   0xF04F 0x35FF      MOV      R5,#-1
   \   000000E6   0x2600             MOVS     R6,#+0
   \   000000E8   0x4637             MOV      R7,R6
   \   000000EA   0x46B0             MOV      R8,R6
   \   000000EC   0x46B1             MOV      R9,R6
   \   000000EE   0xE010             B.N      ??GL_DrawBitmapEx_13
   \                     ??GL_DrawBitmapEx_14: (+1)
   \   000000F0   0x68C0             LDR      R0,[R0, #+12]
   \   000000F2   0x6880             LDR      R0,[R0, #+8]
   \   000000F4   0xF850 0x002A      LDR      R0,[R0, R10, LSL #+2]
   \                     ??GL_DrawBitmapEx_15: (+1)
   \   000000F8   0x.... 0x....      BL       LCD_L0_Color2Index
   \   000000FC   0x.... 0x....      BL       LCD_SetColorIndex
   \                     ??GL_DrawBitmapEx_16: (+1)
   \   00000100   0x46D3             MOV      R11,R10
   \                     ??GL_DrawBitmapEx_17: (+1)
   \   00000102   0x1C76             ADDS     R6,R6,#+1
   \   00000104   0xF5A7 0x777A      SUB      R7,R7,#+1000
   \   00000108   0xF5B7 0x7F7A      CMP      R7,#+1000
   \   0000010C   0xDAF9             BGE.N    ??GL_DrawBitmapEx_17
   \                     ??GL_DrawBitmapEx_18: (+1)
   \   0000010E   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??GL_DrawBitmapEx_13: (+1)
   \   00000112   0x9803             LDR      R0,[SP, #+12]
   \   00000114   0x4581             CMP      R9,R0
   \   00000116   0xDA46             BGE.N    ??GL_DrawBitmapEx_19
   \   00000118   0x9807             LDR      R0,[SP, #+28]
   \   0000011A   0x19C7             ADDS     R7,R0,R7
   \   0000011C   0xF5B7 0x7F7A      CMP      R7,#+1000
   \   00000120   0xDBF5             BLT.N    ??GL_DrawBitmapEx_18
   \   00000122   0x9819             LDR      R0,[SP, #+100]
   \   00000124   0x2801             CMP      R0,#+1
   \   00000126   0xDB01             BLT.N    ??GL_DrawBitmapEx_20
   \   00000128   0x4649             MOV      R1,R9
   \   0000012A   0xE003             B.N      ??GL_DrawBitmapEx_21
   \                     ??GL_DrawBitmapEx_20: (+1)
   \   0000012C   0x9803             LDR      R0,[SP, #+12]
   \   0000012E   0xEBA0 0x0009      SUB      R0,R0,R9
   \   00000132   0x1E41             SUBS     R1,R0,#+1
   \                     ??GL_DrawBitmapEx_21: (+1)
   \   00000134   0x9A02             LDR      R2,[SP, #+8]
   \   00000136   0x980C             LDR      R0,[SP, #+48]
   \   00000138   0x.... 0x....      BL       GUI_GetBitmapPixelIndex
   \   0000013C   0x4682             MOV      R10,R0
   \   0000013E   0xFA1F 0xFA8A      UXTH     R10,R10
   \   00000142   0x45DA             CMP      R10,R11
   \   00000144   0xD102             BNE.N    ??GL_DrawBitmapEx_22
   \   00000146   0xF115 0x0F01      CMN      R5,#+1
   \   0000014A   0xD1DA             BNE.N    ??GL_DrawBitmapEx_17
   \                     ??GL_DrawBitmapEx_22: (+1)
   \   0000014C   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000150   0xD110             BNE.N    ??GL_DrawBitmapEx_23
   \   00000152   0x9808             LDR      R0,[SP, #+32]
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD00D             BEQ.N    ??GL_DrawBitmapEx_23
   \   00000158   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000015C   0xD0D0             BEQ.N    ??GL_DrawBitmapEx_16
   \   0000015E   0x9801             LDR      R0,[SP, #+4]
   \   00000160   0x1830             ADDS     R0,R6,R0
   \   00000162   0x1E42             SUBS     R2,R0,#+1
   \   00000164   0x4621             MOV      R1,R4
   \   00000166   0x9801             LDR      R0,[SP, #+4]
   \   00000168   0x1828             ADDS     R0,R5,R0
   \   0000016A   0x.... 0x....      BL       LCD_DrawHLine
   \   0000016E   0xF04F 0x0800      MOV      R8,#+0
   \   00000172   0xE7C5             B.N      ??GL_DrawBitmapEx_16
   \                     ??GL_DrawBitmapEx_23: (+1)
   \   00000174   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000178   0xD00A             BEQ.N    ??GL_DrawBitmapEx_24
   \   0000017A   0xF115 0x0F01      CMN      R5,#+1
   \   0000017E   0xD007             BEQ.N    ??GL_DrawBitmapEx_24
   \   00000180   0x9801             LDR      R0,[SP, #+4]
   \   00000182   0x1830             ADDS     R0,R6,R0
   \   00000184   0x1E42             SUBS     R2,R0,#+1
   \   00000186   0x4621             MOV      R1,R4
   \   00000188   0x9801             LDR      R0,[SP, #+4]
   \   0000018A   0x1828             ADDS     R0,R5,R0
   \   0000018C   0x.... 0x....      BL       LCD_DrawHLine
   \                     ??GL_DrawBitmapEx_24: (+1)
   \   00000190   0x4635             MOV      R5,R6
   \   00000192   0xF04F 0x0801      MOV      R8,#+1
   \   00000196   0x980C             LDR      R0,[SP, #+48]
   \   00000198   0x6901             LDR      R1,[R0, #+16]
   \   0000019A   0x2900             CMP      R1,#+0
   \   0000019C   0xD0A8             BEQ.N    ??GL_DrawBitmapEx_14
   \   0000019E   0x4650             MOV      R0,R10
   \   000001A0   0x6849             LDR      R1,[R1, #+4]
   \   000001A2   0x4788             BLX      R1
   \   000001A4   0xE7A8             B.N      ??GL_DrawBitmapEx_15
   \                     ??GL_DrawBitmapEx_19: (+1)
   \   000001A6   0xF1B8 0x0F00      CMP      R8,#+0
   \   000001AA   0xD007             BEQ.N    ??GL_DrawBitmapEx_12
   \   000001AC   0x9801             LDR      R0,[SP, #+4]
   \   000001AE   0x1830             ADDS     R0,R6,R0
   \   000001B0   0x1E42             SUBS     R2,R0,#+1
   \   000001B2   0x4621             MOV      R1,R4
   \   000001B4   0x9801             LDR      R0,[SP, #+4]
   \   000001B6   0x1828             ADDS     R0,R5,R0
   \   000001B8   0x.... 0x....      BL       LCD_DrawHLine
   \                     ??GL_DrawBitmapEx_12: (+1)
   \   000001BC   0x9805             LDR      R0,[SP, #+20]
   \   000001BE   0x1904             ADDS     R4,R0,R4
   \   000001C0   0x981A             LDR      R0,[SP, #+104]
   \   000001C2   0x2800             CMP      R0,#+0
   \   000001C4   0x9800             LDR      R0,[SP, #+0]
   \   000001C6   0xD505             BPL.N    ??GL_DrawBitmapEx_25
   \   000001C8   0x42A0             CMP      R0,R4
   \   000001CA   0xDA01             BGE.N    ??GL_DrawBitmapEx_26
   \   000001CC   0x2001             MOVS     R0,#+1
   \   000001CE   0xE767             B.N      ??GL_DrawBitmapEx_8
   \                     ??GL_DrawBitmapEx_26: (+1)
   \   000001D0   0x2000             MOVS     R0,#+0
   \   000001D2   0xE765             B.N      ??GL_DrawBitmapEx_8
   \                     ??GL_DrawBitmapEx_25: (+1)
   \   000001D4   0x4284             CMP      R4,R0
   \   000001D6   0xF6BF 0xAF62      BGE.W    ??GL_DrawBitmapEx_7
   \   000001DA   0x2001             MOVS     R0,#+1
   \   000001DC   0xE760             B.N      ??GL_DrawBitmapEx_8
    107              }
    108            }
    109          }
   \                     ??GL_DrawBitmapEx_11: (+1)
   \   000001DE   0xB00F             ADD      SP,SP,#+60
   \   000001E0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    110          
    111          /*********************************************************************
    112          *
    113          *       public code
    114          *
    115          **********************************************************************
    116          */
    117          /*********************************************************************
    118          *
    119          *       GUI_DrawBitmapEx
    120          */

   \                                 In section .text, align 2, keep-with-next
    121          void GUI_DrawBitmapEx(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0,
    122                                int xCenter, int yCenter, int xMag, int yMag) {
   \                     GUI_DrawBitmapEx: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460F             MOV      R7,R1
   \   0000000A   0x4690             MOV      R8,R2
   \   0000000C   0x461D             MOV      R5,R3
    123            GUI_COLOR OldColor;
    124            #if (GUI_WINSUPPORT)
    125              GUI_RECT r;
    126            #endif
    127            GUI_LOCK();
    128            OldColor = GUI_GetColor();
   \   0000000E   0x.... 0x....      BL       GUI_GetColor
   \   00000012   0x4606             MOV      R6,R0
    129            #if (GUI_WINSUPPORT)
    130              WM_ADDORG(x0, y0);
   \   00000014   0x....             LDR.N    R0,??DataTable1
   \   00000016   0x6C01             LDR      R1,[R0, #+64]
   \   00000018   0x19CF             ADDS     R7,R1,R7
   \   0000001A   0x6C40             LDR      R0,[R0, #+68]
   \   0000001C   0x4480             ADD      R8,R0,R8
   \   0000001E   0xF8DD 0x903C      LDR      R9,[SP, #+60]
    131              if (xMag >= 0) {
   \   00000022   0xFB09 0xF005      MUL      R0,R9,R5
   \   00000026   0x4240             RSBS     R0,R0,#+0
   \   00000028   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000002C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000030   0xD411             BMI.N    ??GUI_DrawBitmapEx_0
    132                r.x0 = x0 + GUI__DivideRound32(((I32)(-xCenter) * (I32)(xMag)), 1000);
   \   00000032   0x.... 0x....      BL       GUI__DivideRound32
   \   00000036   0x19C0             ADDS     R0,R0,R7
   \   00000038   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    133                r.x1 = x0 + GUI__DivideRound32(((I32)(pBitmap->XSize - xCenter - 1) * (I32)(xMag)), 1000);
   \   0000003C   0xF44F 0x717A      MOV      R1,#+1000
   \   00000040   0x8820             LDRH     R0,[R4, #+0]
   \   00000042   0x1B40             SUBS     R0,R0,R5
   \   00000044   0x1E40             SUBS     R0,R0,#+1
   \   00000046   0xFB09 0xF000      MUL      R0,R9,R0
   \   0000004A   0x.... 0x....      BL       GUI__DivideRound32
   \   0000004E   0x19C0             ADDS     R0,R0,R7
   \   00000050   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   00000054   0xE010             B.N      ??GUI_DrawBitmapEx_1
    134              } else {
    135                r.x1 = x0 + GUI__DivideRound32(((I32)(-xCenter) * (I32)(xMag)), 1000);
   \                     ??GUI_DrawBitmapEx_0: (+1)
   \   00000056   0x.... 0x....      BL       GUI__DivideRound32
   \   0000005A   0x19C0             ADDS     R0,R0,R7
   \   0000005C   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    136                r.x0 = x0 + GUI__DivideRound32(((I32)(pBitmap->XSize - xCenter - 1) * (I32)(xMag)), 1000);
   \   00000060   0xF44F 0x717A      MOV      R1,#+1000
   \   00000064   0x8820             LDRH     R0,[R4, #+0]
   \   00000066   0x1B40             SUBS     R0,R0,R5
   \   00000068   0x1E40             SUBS     R0,R0,#+1
   \   0000006A   0xFB09 0xF000      MUL      R0,R9,R0
   \   0000006E   0x.... 0x....      BL       GUI__DivideRound32
   \   00000072   0x19C0             ADDS     R0,R0,R7
   \   00000074   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   \                     ??GUI_DrawBitmapEx_1: (+1)
   \   00000078   0xF8DD 0xA038      LDR      R10,[SP, #+56]
   \   0000007C   0xF8DD 0xB040      LDR      R11,[SP, #+64]
    137              }
    138              if (yMag >= 0) {
   \   00000080   0xFB0B 0xF00A      MUL      R0,R11,R10
   \   00000084   0x4240             RSBS     R0,R0,#+0
   \   00000086   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000008A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000008E   0xD412             BMI.N    ??GUI_DrawBitmapEx_2
    139                r.y0 = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
   \   00000090   0x.... 0x....      BL       GUI__DivideRound32
   \   00000094   0x4440             ADD      R0,R0,R8
   \   00000096   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    140                r.y1 = y0 + GUI__DivideRound32(((I32)(pBitmap->YSize - yCenter - 1) * (I32)(yMag)), 1000);
   \   0000009A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000009E   0x8860             LDRH     R0,[R4, #+2]
   \   000000A0   0xEBA0 0x000A      SUB      R0,R0,R10
   \   000000A4   0x1E40             SUBS     R0,R0,#+1
   \   000000A6   0xFB0B 0xF000      MUL      R0,R11,R0
   \   000000AA   0x.... 0x....      BL       GUI__DivideRound32
   \   000000AE   0x4440             ADD      R0,R0,R8
   \   000000B0   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   \   000000B4   0xE011             B.N      ??GUI_DrawBitmapEx_3
    141              } else {
    142                r.y1 = y0 + GUI__DivideRound32(((I32)(-yCenter) * (I32)(yMag)), 1000);
   \                     ??GUI_DrawBitmapEx_2: (+1)
   \   000000B6   0x.... 0x....      BL       GUI__DivideRound32
   \   000000BA   0x4440             ADD      R0,R0,R8
   \   000000BC   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    143                r.y0 = y0 + GUI__DivideRound32(((I32)(pBitmap->YSize - yCenter - 1) * (I32)(yMag)), 1000);
   \   000000C0   0xF44F 0x717A      MOV      R1,#+1000
   \   000000C4   0x8860             LDRH     R0,[R4, #+2]
   \   000000C6   0xEBA0 0x000A      SUB      R0,R0,R10
   \   000000CA   0x1E40             SUBS     R0,R0,#+1
   \   000000CC   0xFB0B 0xF000      MUL      R0,R11,R0
   \   000000D0   0x.... 0x....      BL       GUI__DivideRound32
   \   000000D4   0x4440             ADD      R0,R0,R8
   \   000000D6   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    144              }
    145              WM_ITERATE_START(&r) {
   \                     ??GUI_DrawBitmapEx_3: (+1)
   \   000000DA   0xA803             ADD      R0,SP,#+12
   \   000000DC   0x.... 0x....      BL       WM__InitIVRSearch
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD00F             BEQ.N    ??GUI_DrawBitmapEx_4
    146            #endif
    147            GL_DrawBitmapEx(pBitmap, x0, y0, xCenter, yCenter, xMag, yMag);
   \                     ??GUI_DrawBitmapEx_5: (+1)
   \   000000E4   0xF8CD 0xB008      STR      R11,[SP, #+8]
   \   000000E8   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   000000EC   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   000000F0   0x462B             MOV      R3,R5
   \   000000F2   0x4642             MOV      R2,R8
   \   000000F4   0x4639             MOV      R1,R7
   \   000000F6   0x4620             MOV      R0,R4
   \   000000F8   0x.... 0x....      BL       GL_DrawBitmapEx
    148            #if (GUI_WINSUPPORT)
    149              } WM_ITERATE_END();
   \   000000FC   0x.... 0x....      BL       WM__GetNextIVR
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD1EF             BNE.N    ??GUI_DrawBitmapEx_5
    150            #endif
    151            GUI_SetColor(OldColor);
   \                     ??GUI_DrawBitmapEx_4: (+1)
   \   00000104   0x4630             MOV      R0,R6
   \   00000106   0x.... 0x....      BL       GUI_SetColor
    152            GUI_UNLOCK();
    153          }
   \   0000010A   0xB005             ADD      SP,SP,#+20
   \   0000010C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     GUI_Context
    154          
    155          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      96   GL_DrawBitmapEx
        96   -- Indirect call
        96   -> GUI_GetBitmapPixelIndex
        96   -> GUI__DivideRound32
        96   -> LCD_DrawHLine
        96   -> LCD_L0_Color2Index
        96   -> LCD_SetColorIndex
      56   GUI_DrawBitmapEx
        56   -> GL_DrawBitmapEx
        56   -> GUI_GetColor
        56   -> GUI_SetColor
        56   -> GUI__DivideRound32
        56   -> WM__GetNextIVR
        56   -> WM__InitIVRSearch


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
     484  GL_DrawBitmapEx
     272  GUI_DrawBitmapEx

 
 760 bytes in section .text
 
 760 bytes of CODE memory

Errors: none
Warnings: none
