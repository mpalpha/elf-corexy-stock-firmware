###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:12
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\EDITBin.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\EDITBin.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\EDITBin.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\EDITBin.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\EDITBin.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : EDITBin.c
     16          Purpose     : Support for binary editing for widgets
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <string.h>
     21          
     22          #include "EDIT.h"
     23          #include "GUIDebug.h"
     24          #include "GUI_Protected.h"
     25          #include "EDIT_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *             Helpers
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       _BinChar2Int
     38          */

   \                                 In section .text, align 2, keep-with-next
     39          static int _BinChar2Int(int Char) {
     40            if ((Char >= '0') && (Char <= '1'))
   \                     _BinChar2Int: (+1)
   \   00000000   0xF1A0 0x0130      SUB      R1,R0,#+48
   \   00000004   0x2902             CMP      R1,#+2
   \   00000006   0xD201             BCS.N    ??_BinChar2Int_0
     41              return Char - '0';
   \   00000008   0x3830             SUBS     R0,R0,#+48
   \   0000000A   0x4770             BX       LR
     42            return -1;
   \                     ??_BinChar2Int_0: (+1)
   \   0000000C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000010   0x4770             BX       LR               ;; return
     43          }
     44          
     45          /*********************************************************************
     46          *
     47          *       _GetNumDigits
     48          */

   \                                 In section .text, align 2, keep-with-next
     49          static int _GetNumDigits(U32 Value) {
     50            int Ret;
     51            for (Ret = 0; Value; Value >>= 1, Ret++);
   \                     _GetNumDigits: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE001             B.N      ??_GetNumDigits_0
   \                     ??_GetNumDigits_1: (+1)
   \   00000004   0x0840             LSRS     R0,R0,#+1
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??_GetNumDigits_0: (+1)
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD1FB             BNE.N    ??_GetNumDigits_1
     52            return Ret;
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x4770             BX       LR               ;; return
     53          }
     54          
     55          /*********************************************************************
     56          *
     57          *       _UpdateBuffer
     58          */

   \                                 In section .text, align 2, keep-with-next
     59          static void _UpdateBuffer(EDIT_Handle hObj) {
   \                     _UpdateBuffer: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     60            char * s;
     61            EDIT_Obj * pObj;
     62            pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
   \   00000004   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000008   0x4604             MOV      R4,R0
     63            s = (char*) GUI_ALLOC_h2p(pObj->hpText);
   \   0000000A   0xF9B4 0x0028      LDRSH    R0,[R4, #+40]
   \   0000000E   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000012   0x9000             STR      R0,[SP, #+0]
     64            GUI_AddBin(pObj->CurrentValue, pObj->MaxLen, &s);
   \   00000014   0xAA00             ADD      R2,SP,#+0
   \   00000016   0x8D61             LDRH     R1,[R4, #+42]
   \   00000018   0xB2C9             UXTB     R1,R1
   \   0000001A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000001C   0x.... 0x....      BL       GUI_AddBin
     65          }
   \   00000020   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     66          
     67          /*********************************************************************
     68          *
     69          *       _EditBin
     70          */

   \                                 In section .text, align 2, keep-with-next
     71          static void _EditBin(U8 Bit, EDIT_Obj* pObj, EDIT_Handle hObj) {
   \                     _EditBin: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
   \   00000002   0x4603             MOV      R3,R0
   \   00000004   0x4610             MOV      R0,R2
     72            int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
   \   00000006   0xF9B1 0x202A      LDRSH    R2,[R1, #+42]
   \   0000000A   0x6C0C             LDR      R4,[R1, #+64]
   \   0000000C   0x1B12             SUBS     R2,R2,R4
   \   0000000E   0x1E52             SUBS     R2,R2,#+1
     73            U32 AndMask = ~(1   << Pos);
     74            U32 OrMask  =   Bit << Pos;
     75            I32 Result  = pObj->CurrentValue & AndMask;
     76            Result     |= OrMask;
     77            EDIT_SetValue(hObj, Result);
   \   00000010   0x6BC9             LDR      R1,[R1, #+60]
   \   00000012   0x2401             MOVS     R4,#+1
   \   00000014   0x4094             LSLS     R4,R4,R2
   \   00000016   0x43A1             BICS     R1,R1,R4
   \   00000018   0xFA03 0xF202      LSL      R2,R3,R2
   \   0000001C   0x4311             ORRS     R1,R2,R1
   \   0000001E   0xBC14             POP      {R2,R4}
   \   00000020   0x.... 0x....      B.W      EDIT_SetValue
     78          }
     79          
     80          /*********************************************************************
     81          *
     82          *       _GetCurrentBit
     83          */

   \                                 In section .text, align 2, keep-with-next
     84          static U8 _GetCurrentBit(EDIT_Obj* pObj) {
     85            int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Bit position */
   \                     _GetCurrentBit: (+1)
   \   00000000   0xF9B0 0x102A      LDRSH    R1,[R0, #+42]
   \   00000004   0x6C02             LDR      R2,[R0, #+64]
   \   00000006   0x1A89             SUBS     R1,R1,R2
   \   00000008   0x1E49             SUBS     R1,R1,#+1
     86            U32 AndMask = 1 << Pos;
     87            U8 Bit = (pObj->CurrentValue & AndMask) >> Pos;
     88            return Bit;
   \   0000000A   0x6BC0             LDR      R0,[R0, #+60]
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x4010             ANDS     R0,R2,R0
   \   00000012   0x40C8             LSRS     R0,R0,R1
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0x4770             BX       LR               ;; return
     89          }
     90          
     91          /*********************************************************************
     92          *
     93          *             Handle input
     94          *
     95          **********************************************************************
     96          */
     97          /*********************************************************************
     98          *
     99          *       _AddKeyBin
    100          */

   \                                 In section .text, align 2, keep-with-next
    101          static void _AddKeyBin(EDIT_Handle hObj, int Key) {
   \                     _AddKeyBin: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    102            EDIT_Obj * pObj;
    103            pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
   \   00000006   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000A   0x0006             MOVS     R6,R0
    104            if (pObj) {
   \   0000000C   0xD03E             BEQ.N    ??_AddKeyBin_0
    105              switch (Key) {
   \   0000000E   0x2D10             CMP      R5,#+16
   \   00000010   0xD023             BEQ.N    ??_AddKeyBin_1
   \   00000012   0xD328             BCC.N    ??_AddKeyBin_2
   \   00000014   0x2D12             CMP      R5,#+18
   \   00000016   0xD01A             BEQ.N    ??_AddKeyBin_3
   \   00000018   0xD302             BCC.N    ??_AddKeyBin_4
   \   0000001A   0x2D13             CMP      R5,#+19
   \   0000001C   0xD00C             BEQ.N    ??_AddKeyBin_5
   \   0000001E   0xE022             B.N      ??_AddKeyBin_2
    106              case GUI_KEY_UP:
    107                {
    108                  int Bit = _GetCurrentBit(pObj) + 1;
   \                     ??_AddKeyBin_4: (+1)
   \   00000020   0x.... 0x....      BL       _GetCurrentBit
   \   00000024   0x1C40             ADDS     R0,R0,#+1
    109                  if (Bit > 1) {
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xDB00             BLT.N    ??_AddKeyBin_6
    110                    Bit = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
    111                  }
    112                  _EditBin(Bit, pObj, hObj);
   \                     ??_AddKeyBin_6: (+1)
   \   0000002C   0x4622             MOV      R2,R4
   \   0000002E   0x4631             MOV      R1,R6
   \   00000030   0xB2C0             UXTB     R0,R0
   \   00000032   0x.... 0x....      BL       _EditBin
    113                }
    114                break;
   \   00000036   0xE025             B.N      ??_AddKeyBin_7
    115              case GUI_KEY_DOWN:
    116                {
    117                  int Bit = _GetCurrentBit(pObj) - 1;
   \                     ??_AddKeyBin_5: (+1)
   \   00000038   0x.... 0x....      BL       _GetCurrentBit
   \   0000003C   0x1E40             SUBS     R0,R0,#+1
    118                  if (Bit < 0) {
   \   0000003E   0xD500             BPL.N    ??_AddKeyBin_8
    119                    Bit = 1;
   \   00000040   0x2001             MOVS     R0,#+1
    120                  }
    121                  _EditBin(Bit, pObj, hObj);
   \                     ??_AddKeyBin_8: (+1)
   \   00000042   0x4622             MOV      R2,R4
   \   00000044   0x4631             MOV      R1,R6
   \   00000046   0xB2C0             UXTB     R0,R0
   \   00000048   0x.... 0x....      BL       _EditBin
    122                }
    123                break;
   \   0000004C   0xE01A             B.N      ??_AddKeyBin_7
    124              case GUI_KEY_RIGHT:
    125                EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
   \                     ??_AddKeyBin_3: (+1)
   \   0000004E   0x6C30             LDR      R0,[R6, #+64]
   \   00000050   0x1C41             ADDS     R1,R0,#+1
   \   00000052   0x4630             MOV      R0,R6
   \   00000054   0x.... 0x....      BL       EDIT__SetCursorPos
    126                break;
   \   00000058   0xE014             B.N      ??_AddKeyBin_7
    127              case GUI_KEY_LEFT:
    128                EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
   \                     ??_AddKeyBin_1: (+1)
   \   0000005A   0x6C30             LDR      R0,[R6, #+64]
   \   0000005C   0x1E41             SUBS     R1,R0,#+1
   \   0000005E   0x4630             MOV      R0,R6
   \   00000060   0x.... 0x....      BL       EDIT__SetCursorPos
    129                break;
   \   00000064   0xE00E             B.N      ??_AddKeyBin_7
    130              default:
    131                {
    132                  int Bit = _BinChar2Int(Key);
   \                     ??_AddKeyBin_2: (+1)
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       _BinChar2Int
    133                  if (Bit >= 0) {
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD409             BMI.N    ??_AddKeyBin_7
    134                    _EditBin(Bit, pObj, hObj);
   \   00000070   0x4622             MOV      R2,R4
   \   00000072   0x4631             MOV      R1,R6
   \   00000074   0xB2C0             UXTB     R0,R0
   \   00000076   0x.... 0x....      BL       _EditBin
    135                    EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
   \   0000007A   0x6C30             LDR      R0,[R6, #+64]
   \   0000007C   0x1C41             ADDS     R1,R0,#+1
   \   0000007E   0x4630             MOV      R0,R6
   \   00000080   0x.... 0x....      BL       EDIT__SetCursorPos
    136                  }
    137                }
    138                break;
    139              }
    140              _UpdateBuffer(hObj);
   \                     ??_AddKeyBin_7: (+1)
   \   00000084   0x4620             MOV      R0,R4
   \   00000086   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000008A   0x....             B.N      _UpdateBuffer
    141            }
    142          }
   \                     ??_AddKeyBin_0: (+1)
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
    143          
    144          /*********************************************************************
    145          *
    146          *             Exported routines
    147          *
    148          **********************************************************************
    149          */
    150          /*********************************************************************
    151          *
    152          *       EDIT_SetBinMode
    153          */

   \                                 In section .text, align 2, keep-with-next
    154          void EDIT_SetBinMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
   \                     EDIT_SetBinMode: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
    155            EDIT_Obj* pObj;
    156            int MaxLen;
    157            WM_LOCK();
    158            if (hEdit) {
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD02F             BEQ.N    ??EDIT_SetBinMode_0
    159              pObj = EDIT_H2P(hEdit);
   \   00000010   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000014   0x4607             MOV      R7,R0
    160              pObj->pfAddKeyEx    = _AddKeyBin;
   \   00000016   0xF107 0x0830      ADD      R8,R7,#+48
   \   0000001A   0x....             LDR.N    R0,??DataTable0
   \   0000001C   0xF8C8 0x001C      STR      R0,[R8, #+28]
    161              pObj->pfUpdateBuffer = _UpdateBuffer;
   \   00000020   0x....             LDR.N    R0,??DataTable0_1
   \   00000022   0xF8C8 0x0020      STR      R0,[R8, #+32]
    162              pObj->CurrentValue = Value;
   \   00000026   0xF8C8 0x900C      STR      R9,[R8, #+12]
    163              pObj->CursorPos = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8C8 0x0010      STR      R0,[R8, #+16]
    164              MaxLen = pObj->MaxLen;
   \   00000030   0xF9B7 0x002A      LDRSH    R0,[R7, #+42]
    165              if (MaxLen <= 0 ) {
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xDA02             BGE.N    ??EDIT_SetBinMode_1
    166                MaxLen = _GetNumDigits(Max);
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       _GetNumDigits
    167              }
    168              if (MaxLen > 32) {
   \                     ??EDIT_SetBinMode_1: (+1)
   \   0000003E   0x2821             CMP      R0,#+33
   \   00000040   0xDB00             BLT.N    ??EDIT_SetBinMode_2
    169                MaxLen = 32;
   \   00000042   0x2020             MOVS     R0,#+32
    170              }
    171              if (MaxLen != pObj->MaxLen) {
   \                     ??EDIT_SetBinMode_2: (+1)
   \   00000044   0xF9B7 0x102A      LDRSH    R1,[R7, #+42]
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xD003             BEQ.N    ??EDIT_SetBinMode_3
    172                EDIT_SetMaxLen(hEdit, MaxLen);
   \   0000004C   0x4601             MOV      R1,R0
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       EDIT_SetMaxLen
    173              }
    174              pObj->Min = Min;
   \                     ??EDIT_SetBinMode_3: (+1)
   \   00000054   0x633D             STR      R5,[R7, #+48]
    175              pObj->Max = Max;
   \   00000056   0xF8C8 0x6004      STR      R6,[R8, #+4]
    176              pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xF888 0x0018      STRB     R0,[R8, #+24]
    177              _UpdateBuffer(hEdit);
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       _UpdateBuffer
    178              WM_Invalidate(hEdit);
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0xE8BD 0x43F2      POP      {R1,R4-R9,LR}
   \   0000006C   0x.... 0x....      B.W      WM_InvalidateWindow
    179            }
    180            WM_UNLOCK();
    181          }
   \                     ??EDIT_SetBinMode_0: (+1)
   \   00000070   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     _AddKeyBin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     _UpdateBuffer
    182          
    183          #else  /* avoid empty object files */
    184          
    185          void EditBin_C(void);
    186          void EditBin_C(void){}
    187          
    188          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   EDIT_SetBinMode
        32   -> EDIT_SetMaxLen
        32   -> GUI_ALLOC_h2p
         0   -> WM_InvalidateWindow
        32   -> _GetNumDigits
        32   -> _UpdateBuffer
      16   _AddKeyBin
        16   -> EDIT__SetCursorPos
        16   -> GUI_ALLOC_h2p
        16   -> _BinChar2Int
        16   -> _EditBin
        16   -> _GetCurrentBit
         0   -> _UpdateBuffer
       0   _BinChar2Int
       8   _EditBin
         0   -> EDIT_SetValue
       0   _GetCurrentBit
       0   _GetNumDigits
      16   _UpdateBuffer
        16   -> GUI_ALLOC_h2p
        16   -> GUI_AddBin


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
     116  EDIT_SetBinMode
     142  _AddKeyBin
      18  _BinChar2Int
      36  _EditBin
      24  _GetCurrentBit
      16  _GetNumDigits
      34  _UpdateBuffer

 
 394 bytes in section .text
 
 394 bytes of CODE memory

Errors: none
Warnings: none
