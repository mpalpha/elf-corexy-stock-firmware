###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  18:23:01
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\..\Middlewares\GUI\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\main.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\main.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp
      1          /**
      2            ******************************************************************************
      3            * File Name          : main.c
      4            * Description        : Main program body
      5            ******************************************************************************
      6            *
      7            * COPYRIGHT(c) 2017 STMicroelectronics
      8            *
      9            * Redistribution and use in source and binary forms, with or without modification,
     10            * are permitted provided that the following conditions are met:
     11            *   1. Redistributions of source code must retain the above copyright notice,
     12            *      this list of conditions and the following disclaimer.
     13            *   2. Redistributions in binary form must reproduce the above copyright notice,
     14            *      this list of conditions and the following disclaimer in the documentation
     15            *      and/or other materials provided with the distribution.
     16            *   3. Neither the name of STMicroelectronics nor the names of its contributors
     17            *      may be used to endorse or promote products derived from this software
     18            *      without specific prior written permission.
     19            *
     20            * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     21            * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     22            * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     23            * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
     24            * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
     25            * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
     26            * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
     27            * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
     28            * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     29            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     30            *
     31            ******************************************************************************
     32            */
     33          /* Includes ------------------------------------------------------------------*/
     34          //#include "Arduino.h"
     35          
     36          #include "main.h"
     37          #include "stm32f1xx_hal.h"
     38          #include "adc.h"
     39          #include "dma.h"
     40          #include "fatfs.h"
     41          #include "i2c.h"
     42          #include "rtc.h"
     43          #include "sdio.h"
     44          #include "spi.h"
     45          #include "tim.h"
     46          #include "usart.h"
     47          #include "usb_host.h"
     48          #include "gpio.h"
     49          #include "fsmc.h"
     50          //#include "iwdg.h"
     51          #include "misc.h"

  #define IS_NVIC_PRIORITY_GROUP(GROUP) (((GROUP) == NVIC_PriorityGroup_0) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\misc.h",152  Warning[Pe047]: 
          incompatible redefinition of macro "IS_NVIC_PRIORITY_GROUP"
          (declared at line 277 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h")

  #define IS_SYSTICK_CLK_SOURCE(SOURCE) (((SOURCE) == SysTick_CLKSource_HCLK) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\misc.h",174  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SYSTICK_CLK_SOURCE" (declared
          at line 296 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h")
     52          /* USER CODE BEGIN Includes */
     53          #include "Marlin.h"

  #define UNUSED(x) (void) (x)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\macros.h",101  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 87 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Inc\mks_cfg.h",609  Warning[Pe083]: 
          type qualifier specified more than once

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??serialprintPGM_0
   \                     ??serialprintPGM_1: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x4803             LDR.N    R0,??serialprintPGM_2
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_0: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xD1F7             BNE.N    ??serialprintPGM_1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   \                     ??serialprintPGM_2:
   \   00000018   0x........         DC32     Serial3

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\Marlin.h",538  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     54          #include "Marlin_export.h"
     55          #include "mks_test.h"

  #define IS_SPI_DIRECTION_MODE(MODE) (((MODE) == SPI_Direction_2Lines_FullDuplex) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",132  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_DIRECTION_MODE" (declared
          at line 466 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_MODE(MODE) (((MODE) == SPI_Mode_Master) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",146  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_MODE" (declared at line
          459 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_DATASIZE(DATASIZE) (((DATASIZE) == SPI_DataSize_16b) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",158  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_DATASIZE" (declared at
          line 488 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_CPOL(CPOL) (((CPOL) == SPI_CPOL_Low) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",170  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_CPOL" (declared at line
          496 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_CPHA(CPHA) (((CPHA) == SPI_CPHA_1Edge) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",182  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_CPHA" (declared at line
          504 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_NSS(NSS) (((NSS) == SPI_NSS_Soft) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",194  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_NSS" (declared at line
          512 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_BAUDRATE_PRESCALER(PRESCALER) (((PRESCALER) == SPI_BaudRatePrescaler_2) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",212  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_BAUDRATE_PRESCALER"
          (declared at line 521 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_FIRST_BIT(BIT) (((BIT) == SPI_FirstBit_MSB) || \
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",230  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_FIRST_BIT" (declared at
          line 535 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define SPI_FLAG_CRCERR                 ((uint16_t)0x0010)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",408  Warning[Pe047]: 
          incompatible redefinition of macro "SPI_FLAG_CRCERR" (declared at
          line 308 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define SPI_FLAG_MODF                   ((uint16_t)0x0020)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",409  Warning[Pe047]: 
          incompatible redefinition of macro "SPI_FLAG_MODF" (declared at line
          309 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #define IS_SPI_CRC_POLYNOMIAL(POLYNOMIAL) ((POLYNOMIAL) >= 0x1)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F10x_StdPeriph_Driver\inc\stm32f10x_spi.h",425  Warning[Pe047]: 
          incompatible redefinition of macro "IS_SPI_CRC_POLYNOMIAL" (declared
          at line 558 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_spi.h")

  #else defined(MKS_ROBIN_NANO)
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\BSP\Components\w25qxx\spi_flash.h",40  Warning[Pe014]: 
          extra text after expected end of preprocessing directive
     56          #include "mks_reprint.h"

  #define SD_DETECT_INVERTED false
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",27  Warning[Pe047]: 
          incompatible redefinition of macro "SD_DETECT_INVERTED" (declared at
          line 524 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Configuration_adv.h")

  #define PSTR(s) s
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",31  Warning[Pe047]: 
          incompatible redefinition of macro "PSTR" (declared at line 63 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\EWARM/../Middlewares/Third_Party/Marlin\Marlin.h")

  #define pgm_read_byte(x) (*(char*)x)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",32  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_byte" (declared at line
          64 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

      static constexpr int8_t next_block_index(const int8_t block_index) { return BLOCK_MOD(block_index + 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\planner.h",627  Warning[Pe815]: 
          type qualifier on return type is meaningless

      static constexpr int8_t prev_block_index(const int8_t block_index) { return BLOCK_MOD(block_index - 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\planner.h",628  Warning[Pe815]: 
          type qualifier on return type is meaningless

        target_temperature[HOTEND_INDEX] = celsius;
                                         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\temperature.h",406  Warning[Pa093]: 
          implicit conversion from floating point to integer

          target_temperature_bed =
                                 ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\temperature.h",414  Warning[Pa093]: 
          implicit conversion from floating point to integer

  #define LONG_FILENAME_LENGTH (13*MAX_VFAT_ENTRIES+1)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",61  Warning[Pe047]: 
          incompatible redefinition of macro "LONG_FILENAME_LENGTH" (declared
          at line 119 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")

  #define ALLOW_DEPRECATED_FUNCTIONS 0
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\SdFat.h",635  Warning[Pe047]: 
          incompatible redefinition of macro "ALLOW_DEPRECATED_FUNCTIONS"
          (declared at line 67 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")

  #define SPI_SD_INIT_RATE 11
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\SdFat.h",647  Warning[Pe047]: 
          incompatible redefinition of macro "SPI_SD_INIT_RATE" (declared at
          line 79 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")
     57              
     58          #include "spi_flash.h"
     59          #include "cardreader.h"
     60          //#ifdef USE_MKS_WIFI
     61          #include "wifi_module.h"
     62          //#endif    
     63          #include "serial.h"  
     64          
     65          #include "gui.h"
     66          #include "ili9320.h"
     67          #include "draw_ui.h"

    #define FILAMENT_CHANGE_TEXT_EN				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_en.h",135  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_EN"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_CN            "Ëß£Èô§ÁªëÂÆö?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_s_cn.h",218  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_CN"
          (declared at line 213)

    #define FILAMENT_CHANGE_TEXT_T_CN				"ÂæÖÊâìÂç∞Ê©üÊö´ÂÅúÂêé,\nË´ãÊåâ<ÈÄ≤Êñô>Êàñ<ÈÄÄÊñô>"
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_t_cn.h",127  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_T_CN"
          (declared at line 113)

    #define FILAMENT_CHANGE_TEXT_RU				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_ru.h",133  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_RU"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_RU            "Unbind the printer?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_ru.h",230  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_RU"
          (declared at line 225)

    #define FILAMENT_CHANGE_TEXT_FR				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_fr.h",133  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_FR"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_FR        "Unbind the printer?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_fr.h",233  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_FR"
          (declared at line 229)

    #define FILAMENT_CHANGE_TEXT_SP				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_sp.h",132  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_SP"
          (declared at line 113)

    #define FILAMENT_CHANGE_TEXT_IT				"Please click <Load> \nor <unload>,After \npinter pause."
            ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_it.h",133  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_IT"
          (declared at line 113)

  #define DIALOG_UNBIND_PRINTER_IT                "Unbind the printer?"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Language_it.h",229  Warning[Pe047]: 
          incompatible redefinition of macro "DIALOG_UNBIND_PRINTER_IT"
          (declared at line 224)

  #define FILAMENT_CHANGE_TEXT_JP				"Please click <Load> \nor <unload>,After \npinter pause."
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Multi_language.h",652  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_JP"
          (declared at line 645)

  #define FILAMENT_CHANGE_TEXT_GN				"Please click <Load> \nor <unload>,After \npinter pause."
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\Multi_language\Multi_language.h",860  Warning[Pe047]: 
          incompatible redefinition of macro "FILAMENT_CHANGE_TEXT_GN"
          (declared at line 854)

  #define Simple_Dec"ºı…Ÿ"
                    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\draw_ui.h",492  Warning[Pe1649]: 
          white space is required between the macro name "Simple_Dec" and its
          replacement text

  #define Simple_Speed "ÀŸ∂»"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\draw_ui.h",547  Warning[Pe047]: 
          incompatible redefinition of macro "Simple_Speed" (declared at line
          544)

  #define Complex_Speed "ÀŸ∂»"
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\User\ui\draw_ui.h",548  Warning[Pe047]: 
          incompatible redefinition of macro "Complex_Speed" (declared at line
          545)
     68          #include "draw_ready_print.h"
     69          #include "draw_printing.h"
     70          #include "sdio_sdcard.h"

  #define SDIO_INIT_CLK_DIV        0x166//0xB2 		//SDIO≥ı ºªØ∆µ¬ £¨◊Ó¥Û400Kh  
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",36  Warning[Pe047]: 
          incompatible redefinition of macro "SDIO_INIT_CLK_DIV" (declared at
          line 479 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_sdmmc.h")

  #define SDIO_TRANSFER_CLK_DIV    0x07//0x02//0x01		//SDIO¥´ ‰∆µ¬ £¨◊Ó¥Û24Mhz(4bit)°£∏√÷µÃ´–°ø…ƒ‹ª·µº÷¬∂¡–¥Œƒº˛≥ˆ¥Ì 
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",37  Warning[Pe047]: 
          incompatible redefinition of macro "SDIO_TRANSFER_CLK_DIV" (declared
          at line 482 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_sdmmc.h")

  #define SD_CMD_GO_IDLE_STATE                       ((u8)0)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",170  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_GO_IDLE_STATE" (declared
          at line 304 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SEND_OP_COND                        ((u8)1)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",171  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SEND_OP_COND" (declared
          at line 305 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_ALL_SEND_CID                        ((u8)2)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",172  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_ALL_SEND_CID" (declared
          at line 306 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SET_REL_ADDR                        ((u8)3) /*!< SDIO_SEND_REL_ADDR for SD Card */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",173  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SET_REL_ADDR" (declared
          at line 307 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SET_DSR                             ((u8)4)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",174  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SET_DSR" (declared at
          line 308 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SDIO_SEN_OP_COND                    ((u8)5)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",175  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SDIO_SEN_OP_COND"
          (declared at line 309 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_HS_SWITCH                           ((u8)6)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",176  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_HS_SWITCH" (declared at
          line 311 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SEL_DESEL_CARD                      ((u8)7)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",177  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SEL_DESEL_CARD" (declared
          at line 312 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_HS_SEND_EXT_CSD                     ((u8)8)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",178  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_HS_SEND_EXT_CSD"
          (declared at line 313 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SEND_CSD                            ((u8)9)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",179  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SEND_CSD" (declared at
          line 315 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SEND_CID                            ((u8)10)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",180  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SEND_CID" (declared at
          line 316 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_READ_DAT_UNTIL_STOP                 ((u8)11) /*!< SD Card doesn't support it */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",181  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_READ_DAT_UNTIL_STOP"
          (declared at line 317 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_STOP_TRANSMISSION                   ((u8)12)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",182  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_STOP_TRANSMISSION"
          (declared at line 318 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SEND_STATUS                         ((u8)13)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",183  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SEND_STATUS" (declared at
          line 319 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_HS_BUSTEST_READ                     ((u8)14)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",184  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_HS_BUSTEST_READ"
          (declared at line 320 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_GO_INACTIVE_STATE                   ((u8)15)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",185  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_GO_INACTIVE_STATE"
          (declared at line 321 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SET_BLOCKLEN                        ((u8)16)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",186  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SET_BLOCKLEN" (declared
          at line 322 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_READ_SINGLE_BLOCK                   ((u8)17)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",187  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_READ_SINGLE_BLOCK"
          (declared at line 325 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_READ_MULT_BLOCK                     ((u8)18)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",188  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_READ_MULT_BLOCK"
          (declared at line 327 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_HS_BUSTEST_WRITE                    ((u8)19)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",189  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_HS_BUSTEST_WRITE"
          (declared at line 329 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_WRITE_DAT_UNTIL_STOP                ((u8)20) 
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",190  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_WRITE_DAT_UNTIL_STOP"
          (declared at line 330 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SET_BLOCK_COUNT                     ((u8)23) 
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",191  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SET_BLOCK_COUNT"
          (declared at line 331 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_WRITE_SINGLE_BLOCK                  ((u8)24)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",192  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_WRITE_SINGLE_BLOCK"
          (declared at line 332 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_WRITE_MULT_BLOCK                    ((u8)25)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",193  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_WRITE_MULT_BLOCK"
          (declared at line 334 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_PROG_CID                            ((u8)26)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",194  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_PROG_CID" (declared at
          line 335 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_PROG_CSD                            ((u8)27)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",195  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_PROG_CSD" (declared at
          line 336 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SET_WRITE_PROT                      ((u8)28)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",196  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SET_WRITE_PROT" (declared
          at line 337 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_CLR_WRITE_PROT                      ((u8)29)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",197  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_CLR_WRITE_PROT" (declared
          at line 338 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SEND_WRITE_PROT                     ((u8)30)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",198  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SEND_WRITE_PROT"
          (declared at line 339 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_ERASE_GRP_START                  ((u8)32) /*!< To set the address of the first write
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",199  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_ERASE_GRP_START"
          (declared at line 340 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_ERASE_GRP_END                    ((u8)33) /*!< To set the address of the last write block of the
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",201  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_ERASE_GRP_END"
          (declared at line 341 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_ERASE_GRP_START                     ((u8)35) /*!< To set the address of the first write block to be erased.
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",203  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_ERASE_GRP_START"
          (declared at line 342 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_ERASE_GRP_END                       ((u8)36) /*!< To set the address of the last write block of the
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",206  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_ERASE_GRP_END" (declared
          at line 344 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_ERASE                               ((u8)38)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",209  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_ERASE" (declared at line
          346 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_FAST_IO                             ((u8)39) /*!< SD Card doesn't support it */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",210  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_FAST_IO" (declared at
          line 347 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_GO_IRQ_STATE                        ((u8)40) /*!< SD Card doesn't support it */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",211  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_GO_IRQ_STATE" (declared
          at line 348 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_LOCK_UNLOCK                         ((u8)42)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",212  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_LOCK_UNLOCK" (declared at
          line 349 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_APP_CMD                             ((u8)55)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",213  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_APP_CMD" (declared at
          line 351 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_GEN_CMD                             ((u8)56)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",214  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_GEN_CMD" (declared at
          line 353 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_NO_CMD                              ((u8)64)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",215  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_NO_CMD" (declared at line
          355 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_APP_SD_SET_BUSWIDTH                 ((u8)6)  /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",221  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_APP_SD_SET_BUSWIDTH"
          (declared at line 361 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_STAUS                        ((u8)13) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",222  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_STAUS" (declared
          at line 2841 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy/stm32_hal_legacy.h")

  #define SD_CMD_SD_APP_SEND_NUM_WRITE_BLOCKS        ((u8)22) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",223  Warning[Pe047]: 
          incompatible redefinition of macro
          "SD_CMD_SD_APP_SEND_NUM_WRITE_BLOCKS" (declared at line 364 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_OP_COND                      ((u8)41) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",224  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_OP_COND" (declared
          at line 366 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SET_CLR_CARD_DETECT          ((u8)42) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",225  Warning[Pe047]: 
          incompatible redefinition of macro
          "SD_CMD_SD_APP_SET_CLR_CARD_DETECT" (declared at line 368 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SEND_SCR                     ((u8)51) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",226  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_SEND_SCR"
          (declared at line 369 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SDIO_RW_DIRECT                      ((u8)52) /*!< For SD I/O Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",227  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SDIO_RW_DIRECT" (declared
          at line 370 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SDIO_RW_EXTENDED                    ((u8)53) /*!< For SD I/O Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",228  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SDIO_RW_EXTENDED"
          (declared at line 371 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_GET_MKB                      ((u8)43) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",234  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_GET_MKB" (declared
          at line 377 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_GET_MID                      ((u8)44) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",235  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_GET_MID" (declared
          at line 378 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SET_CER_RN1                  ((u8)45) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",236  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_SET_CER_RN1"
          (declared at line 379 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_GET_CER_RN2                  ((u8)46) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",237  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_GET_CER_RN2"
          (declared at line 380 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SET_CER_RES2                 ((u8)47) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",238  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_SET_CER_RES2"
          (declared at line 381 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_GET_CER_RES1                 ((u8)48) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",239  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_GET_CER_RES1"
          (declared at line 382 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SECURE_READ_MULTIPLE_BLOCK   ((u8)18) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",240  Warning[Pe047]: 
          incompatible redefinition of macro
          "SD_CMD_SD_APP_SECURE_READ_MULTIPLE_BLOCK" (declared at line 383 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SECURE_WRITE_MULTIPLE_BLOCK  ((u8)25) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",241  Warning[Pe047]: 
          incompatible redefinition of macro
          "SD_CMD_SD_APP_SECURE_WRITE_MULTIPLE_BLOCK" (declared at line 384 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SECURE_ERASE                 ((u8)38) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",242  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_SECURE_ERASE"
          (declared at line 385 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_CHANGE_SECURE_AREA           ((u8)49) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",243  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_CHANGE_SECURE_AREA"
          (declared at line 386 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define SD_CMD_SD_APP_SECURE_WRITE_MKB             ((u8)48) /*!< For SD Card only */
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",244  Warning[Pe047]: 
          incompatible redefinition of macro "SD_CMD_SD_APP_SECURE_WRITE_MKB"
          (declared at line 387 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_sd.h")

  #define NULL 0
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",257  Warning[Pe047]: 
          incompatible redefinition of macro "NULL" (declared at line 22 of
          "C:\Program Files (x86)\IAR Systems\Embedded Workbench
          7.0\arm\inc\c\stdio.h")

  #define SD_OCR_CID_CSD_OVERWRIETE       ((u32)0x00010000)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",278  Warning[Pe047]: 
          incompatible redefinition of macro "SD_OCR_CID_CSD_OVERWRIETE"
          (declared at line 2840 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy/stm32_hal_legacy.h")

  #define SD_DATATIMEOUT                  ((u32)0x000FFFFF)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\sdio_sdcard.h",310  Warning[Pe047]: 
          incompatible redefinition of macro "SD_DATATIMEOUT" (declared at
          line 78 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Inc\bsp_driver_sd.h")
     71          #include "draw_pause_ui.h"
     72          #include "pic_manager.h"
     73          #include "stmflash.h"
     74          extern "C"void setTouchBound(int32_t x0, int32_t x1, int32_t y0, int32_t y1 );
     75          
     76          
     77          /* USER CODE END Includes */
     78          /* Private variables ---------------------------------------------------------*/
     79          /* USER CODE BEGIN PV */
     80          /* Private variables ---------------------------------------------------------*/
     81          void testAllStepAndMosFET();
     82          /* USER CODE END PV */
     83          
     84          /* Private function prototypes -----------------------------------------------*/
     85          void SystemClock_Config(void);
     86          void Error_Handler(void);
     87          static void MX_NVIC_Init(void);
     88          //void MX_USB_HOST_Process(void);
     89          
     90          /* USER CODE BEGIN PFP */
     91          /* Private function prototypes -----------------------------------------------*/
     92          
     93          /* USER CODE END PFP */
     94          /* USER CODE BEGIN 0 */
     95          /* USER CODE END 0 */
     96          extern "C" u16 DeviceCode;
     97          

   \                                 In section .bss, align 4
     98          uint32_t logo_tick1,logo_tick2;
   \                     logo_tick1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     logo_tick2:
   \   00000000                      DS8 4
     99          
    100          extern void draw_Hardwaretest();
    101          
    102          volatile uint8_t pause_from_high_level=0;
    103          
    104          extern void check_sd_firmware(void);
    105          
    106          

   \                                 In section .text, align 4, keep-with-next
    107          int main(void)
    108          {
   \                     main: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
    109          
    110            /* USER CODE BEGIN 1 */
    111                  //÷–∂œœÚ¡ø…Ë÷√
    112                  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
    113                  //SCB->VTOR = 0x08000000 | (0x7000 & (uint32_t)0x1FFFFF80);  /* Vector Table Relocation in Internal FLASH */
    114                                                                          //”–bootloader ±£¨…Ë÷√Œ™0x5000, Options ->Linker ->Edit...-> 0x08005000
    115                                                                           //Œﬁbootloader ±£¨…Ë÷√Œ™0x0000, Options ->Linker ->Edit...-> 0x08000000 
    116          
    117            /* USER CODE END 1 */
    118          
    119            /* MCU Configuration----------------------------------------------------------*/
    120            
    121          
    122            /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    123            HAL_Init();
   \   00000004   0x.... 0x....      BL       HAL_Init
    124            //”–bootloader ±£¨…Ë÷√Œ™0x7000, Options ->Linker ->Edit...-> Vector Table ->0x08007000
    125            //¡ÌÕ‚◊¢“‚µƒ «£∫µ±BootLoaderÃ¯◊™≤ª’˝≥£ ±£¨ROM–Ë“™…Ë÷√Œ™ 0x8007000, Options ->Linker ->Edit...-> Memony Regions ->Rom ->0x08007000
    126            NVIC_SetVectorTable(NVIC_VectTab_FLASH, (uint32_t)0x7000);
   \   00000008   0xF44F 0x41E0      MOV      R1,#+28672
   \   0000000C   0xF04F 0x6000      MOV      R0,#+134217728
   \   00000010   0x.... 0x....      BL       NVIC_SetVectorTable
    127                                                                      
    128            /* Configure the system clock */
    129            SystemClock_Config();
   \   00000014   0x.... 0x....      BL       _Z18SystemClock_Configv
    130            
    131          
    132            /* Initialize all configured peripherals */
    133            MX_GPIO_Init();
   \   00000018   0x.... 0x....      BL       MX_GPIO_Init
    134            MX_DMA_Init();
   \   0000001C   0x.... 0x....      BL       MX_DMA_Init
    135           // MX_FSMC_Init();
    136            //MX_FATFS_Init();
    137            //MX_RTC_Init();
    138            //MX_I2C1_Init();
    139            AT24CXX_Init();
   \   00000020   0x.... 0x....      BL       AT24CXX_Init
    140            //MX_SDIO_SD_Init();
    141            SD_Init();
   \   00000024   0x.... 0x....      BL       SD_Init
    142            MX_SPI2_Init();
   \   00000028   0x.... 0x....      BL       MX_SPI2_Init
    143            DMAx_Init();
   \   0000002C   0x.... 0x....      BL       DMAx_Init
    144            MX_TIM1_Init();
   \   00000030   0x.... 0x....      BL       MX_TIM1_Init
    145            MX_TIM2_Init();
   \   00000034   0x.... 0x....      BL       MX_TIM2_Init
    146            MX_TIM3_Init();
   \   00000038   0x.... 0x....      BL       MX_TIM3_Init
    147            MX_TIM4_Init();
   \   0000003C   0x.... 0x....      BL       MX_TIM4_Init
    148            //MX_TIM5_Init();
    149            MX_ADC1_Init();
   \   00000040   0x.... 0x....      BL       MX_ADC1_Init
    150            
    151          #if defined(MKS_ROBINPRO) 
    152            MX_USART6_UART_Init();
    153          #elif defined(MKS_ROBIN) || defined(MKS_ROBIN2) || defined(MKS_ROBIN_NANO)
    154             //MX_USART1_UART_Init(3);
    155          #endif
    156          
    157            MX_USART3_UART_Init();
   \   00000044   0x.... 0x....      BL       MX_USART3_UART_Init
    158          
    159          #if unused
    160            MX_USB_HOST_Init();
    161          #endif
    162            //MX_DAC_Init();
    163            //MX_SPI1_Init();
    164            //MX_IWDG_Init();     //Œππ∑
    165            /* Initialize interrupts */
    166            MX_NVIC_Init();
   \   00000048   0x.... 0x....      BL       _Z12MX_NVIC_Initv
    167          
    168            /* USER CODE BEGIN 2 */
    169          
    170              MYSERIAL.begin(BAUDRATE);
   \   0000004C   0x.... 0x....      LDR.W    R4,??DataTable15
   \   00000050   0xF44F 0x31E1      MOV      R1,#+115200
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       _ZN10USARTClass5beginEj
    171              SERIAL_PROTOCOLLNPGM("mksRobinNano start");
   \   0000005A   0x.... 0x....      ADR.W    R0,`?<Constant "mksRobinNano start\\n">`
   \   0000005E   0x.... 0x....      BL       _Z14serialprintPGMPKc
    172              SERIAL_PROTOCOLPAIR("EPR_END_ADDR:",EPR_END_ADDR);
   \   00000062   0xF240 0x713E      MOVW     R1,#+1854
   \   00000066   0x.... 0x....      ADR.W    R0,`?<Constant "EPR_END_ADDR:">`
   \   0000006A   0x.... 0x....      BL       _Z17serial_echopair_PPKci
    173              SERIAL_EOL();
   \   0000006E   0x210A             MOVS     R1,#+10
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       _ZN10USARTClass5writeEh
    174              SERIAL_ECHO_START();
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \   0000007A   0x.... 0x....      BL       _Z14serialprintPGMPKc
    175              
    176          #ifdef USE_MKS_WIFI  
    177          	WIFISERIAL.begin(115200);   
    178          #endif
    179          
    180            // πƒ‹SPIÕ‚…Ë
    181            SPI_Cmd(SPI2, ENABLE); 
   \   0000007E   0x2101             MOVS     R1,#+1
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable15_2  ;; 0x40003800
   \   00000084   0x.... 0x....      BL       SPI_Cmd
    182            GUI_Init();
   \   00000088   0x.... 0x....      BL       GUI_Init
    183            Lcd_Light_ON;
   \   0000008C   0x.... 0x....      LDR.W    R4,??DataTable15_3  ;; 0x422281b4
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x6020             STR      R0,[R4, #+0]
    184            DRAW_LOGO();
   \   00000094   0x.... 0x....      BL       DRAW_LOGO
    185            Lcd_Light_ON; 
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x6020             STR      R0,[R4, #+0]
    186            logo_tick1 = getTick();
   \   0000009C   0x.... 0x....      BL       getTick
   \   000000A0   0x.... 0x....      LDR.W    R1,??DataTable15_4
   \   000000A4   0x6008             STR      R0,[R1, #+0]
    187            gui_view_init();
   \   000000A6   0x.... 0x....      BL       gui_view_init
    188            init_win_id();
   \   000000AA   0x.... 0x....      BL       init_win_id
    189            /*---------test begin-----------*/
    190           //LCD_Init();
    191           //mksEeprom_test();
    192           //mksW25Q64Test();
    193           //mksSdCardTest();
    194           //mksUSBTest();
    195              /*---------test end-------------*/
    196          	//∆Ù∂ØPWM
    197          #if defined(MKS_ROBINPRO) || defined(MKS_ROBIN_NANO)
    198              HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
   \   000000AE   0x210C             MOVS     R1,#+12
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \   000000B4   0x.... 0x....      BL       HAL_TIM_PWM_Start
    199          #elif defined(MKS_ROBIN) || defined(MKS_ROBIN2) 
    200              HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
    201          #endif  	
    202          
    203          #if defined(MKS_ROBIN2) 
    204          	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
    205          	MKS_TOUCH_TIM = 0;
    206          #endif 
    207          
    208          #if defined(MKS_ROBIN_NANO) 
    209                  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x.... 0x....      LDR.W    R0,??DataTable15_6
   \   000000BE   0x.... 0x....      BL       HAL_TIM_PWM_Start
    210                  MKS_TOUCH_TIM = 0;
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x.... 0x....      LDR.W    R1,??DataTable15_7  ;; 0x40012c34
   \   000000C8   0x6008             STR      R0,[R1, #+0]
    211          #endif 
    212          
    213          	
    214          
    215              MKS_FAN_TIM = 0;
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable15_8  ;; 0x40000440
   \   000000CE   0x6008             STR      R0,[R1, #+0]
    216          
    217              //∆Ù∂ØTIMER
    218              HAL_TIM_Base_Start_IT(&htim2);
   \   000000D0   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \   000000D4   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
    219              HAL_TIM_Base_Start_IT(&htim4);
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable15_10
   \   000000DC   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
    220              //∆Ù∂ØADC DMA
    221              HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);//πÿ±’DMA1_Channel1_IRQHandler÷–∂œ
   \   000000E0   0x200B             MOVS     R0,#+11
   \   000000E2   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    222              if(HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&uhADCxConvertedValue,3)!=HAL_OK)    
   \   000000E6   0x2203             MOVS     R2,#+3
   \   000000E8   0x.... 0x....      LDR.W    R1,??DataTable15_11
   \   000000EC   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \   000000F0   0x.... 0x....      BL       HAL_ADC_Start_DMA
   \   000000F4   0x2800             CMP      R0,#+0
   \   000000F6   0xD001             BEQ.N    ??main_1
    223                Error_Handler();
   \   000000F8   0x.... 0x....      BL       Error_Handler
    224              HAL_NVIC_DisableIRQ(DMA1_Channel1_IRQn);//πÿ±’DMA1_Channel1_IRQn÷–∂œ
   \                     ??main_1: (+1)
   \   000000FC   0x200B             MOVS     R0,#+11
   \   000000FE   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    225           
    226              //∆Ù∂ØPWM
    227              /*
    228              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
    229              TIM1->CCR1 = 0;
    230              HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
    231              TIM3->CCR1 = 0;
    232              HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
    233              TIM3->CCR2 = 0;
    234          
    235              HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
    236              TIM3->CCR3 = 0;
    237            */
    238            
    239           mkstft_ui_init();
   \   00000102   0x.... 0x....      BL       mkstft_ui_init
    240              
    241           setTouchBound(gCfgItems.touch_adj_xMin, gCfgItems.touch_adj_xMax, gCfgItems.touch_adj_yMax, gCfgItems.touch_adj_yMin);
   \   00000106   0x.... 0x....      LDR.W    R6,??DataTable15_13
   \   0000010A   0xF106 0x07B8      ADD      R7,R6,#+184
   \   0000010E   0x68FB             LDR      R3,[R7, #+12]
   \   00000110   0x693A             LDR      R2,[R7, #+16]
   \   00000112   0x68B9             LDR      R1,[R7, #+8]
   \   00000114   0x6878             LDR      R0,[R7, #+4]
   \   00000116   0x.... 0x....      BL       setTouchBound
    242          #if 1
    243          
    244           mksTmp.cfg_hardware_test_enable = 0;
   \   0000011A   0x.... 0x....      LDR.W    R10,??DataTable15_14
   \   0000011E   0x2000             MOVS     R0,#+0
   \   00000120   0xF88A 0x0013      STRB     R0,[R10, #+19]
    245          
    246            if(SD_DET_IP == 0)
   \   00000124   0x.... 0x....      LDR.W    R0,??DataTable15_15  ;; 0x42228130
   \   00000128   0x6800             LDR      R0,[R0, #+0]
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD107             BNE.N    ??main_2
    247            {
    248            	card.initsd();
   \   0000012E   0x.... 0x....      LDR.W    R4,??DataTable15_16
   \   00000132   0x4620             MOV      R0,R4
   \   00000134   0x.... 0x....      BL       _ZN10CardReader6initsdEv
    249            	card.mksConfiguration();
   \   00000138   0x4620             MOV      R0,R4
   \   0000013A   0x.... 0x....      BL       _ZN10CardReader16mksConfigurationEv
    250            }
    251          
    252            //À¢–¥Õº∆¨◊‹ ˝
    253            SPI_FLASH_BufferRead((u8*)&gCfgItems.total_pic,PIC_COUNTER_ADDR,1);
   \                     ??main_2: (+1)
   \   0000013E   0x2201             MOVS     R2,#+1
   \   00000140   0xF44F 0x4100      MOV      R1,#+32768
   \   00000144   0xF206 0x101F      ADDW     R0,R6,#+287
   \   00000148   0x.... 0x....      BL       SPI_FLASH_BufferRead
    254            #if 0//tan_mask
    255            else
    256            {
    257              FATFS_UnLinkDriver(SD_Path); 
    258            }
    259            #endif
    260          
    261            switch(gCfgItems.language_bak)
   \   0000014C   0xF896 0x011D      LDRB     R0,[R6, #+285]
   \   00000150   0x1E40             SUBS     R0,R0,#+1
   \   00000152   0x2806             CMP      R0,#+6
   \   00000154   0xD820             BHI.N    ??main_3
   \   00000156   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??main_0:
   \   0000015A   0x04 0x08          DC8      0x4,0x8,0xC,0x10
   \              0x0C 0x10    
   \   0000015E   0x14 0x18          DC8      0x14,0x18,0x1C,0x0
   \              0x1C 0x00    
    262            {
    263            	case 1:
    264          		gCfgItems.language_bak= LANG_SIMPLE_CHINESE;
   \                     ??main_4: (+1)
   \   00000162   0x2001             MOVS     R0,#+1
   \   00000164   0xF886 0x011D      STRB     R0,[R6, #+285]
    265          		break;
   \   00000168   0xE016             B.N      ??main_3
    266          	case 2:
    267          		gCfgItems.language_bak= LANG_COMPLEX_CHINESE;
   \                     ??main_5: (+1)
   \   0000016A   0x2002             MOVS     R0,#+2
   \   0000016C   0xF886 0x011D      STRB     R0,[R6, #+285]
    268          		break;
   \   00000170   0xE012             B.N      ??main_3
    269          	case 3:
    270          		gCfgItems.language_bak= LANG_ENGLISH;
   \                     ??main_6: (+1)
   \   00000172   0x2003             MOVS     R0,#+3
   \   00000174   0xF886 0x011D      STRB     R0,[R6, #+285]
    271          		break;
   \   00000178   0xE00E             B.N      ??main_3
    272          	case 4:
    273          		gCfgItems.language_bak= LANG_RUSSIAN;
   \                     ??main_7: (+1)
   \   0000017A   0x2007             MOVS     R0,#+7
   \   0000017C   0xF886 0x011D      STRB     R0,[R6, #+285]
    274          		break;
   \   00000180   0xE00A             B.N      ??main_3
    275          	case 5:
    276          		gCfgItems.language_bak= LANG_SPANISH;
   \                     ??main_8: (+1)
   \   00000182   0x200A             MOVS     R0,#+10
   \   00000184   0xF886 0x011D      STRB     R0,[R6, #+285]
    277          		break;
   \   00000188   0xE006             B.N      ??main_3
    278          	case 6:
    279          		gCfgItems.language_bak= LANG_FRENCH;
   \                     ??main_9: (+1)
   \   0000018A   0x2006             MOVS     R0,#+6
   \   0000018C   0xF886 0x011D      STRB     R0,[R6, #+285]
    280          		break;
   \   00000190   0xE002             B.N      ??main_3
    281          	case 7:
    282          		gCfgItems.language_bak= LANG_ITALY;
   \                     ??main_10: (+1)
   \   00000192   0x200C             MOVS     R0,#+12
   \   00000194   0xF886 0x011D      STRB     R0,[R6, #+285]
    283          		break;
    284            }
    285            
    286            if(gCfgItems.multiple_language == 0)
   \                     ??main_3: (+1)
   \   00000198   0xF896 0x01BF      LDRB     R0,[R6, #+447]
   \   0000019C   0x2800             CMP      R0,#+0
   \   0000019E   0xD10D             BNE.N    ??main_11
    287            {
    288          	if(gCfgItems.language_bak != 0)
   \   000001A0   0xF896 0x011D      LDRB     R0,[R6, #+285]
   \   000001A4   0x2800             CMP      R0,#+0
   \   000001A6   0xD009             BEQ.N    ??main_11
    289          	{
    290          		gCfgItems.language = gCfgItems.language_bak;
   \   000001A8   0xF996 0x011D      LDRSB    R0,[R6, #+285]
   \   000001AC   0xF886 0x00B8      STRB     R0,[R6, #+184]
    291          		AT24CXX_Write(EPR_LANGUAGE,(uint8_t *)&gCfgItems.language,1);	
   \   000001B0   0x2201             MOVS     R2,#+1
   \   000001B2   0x4639             MOV      R1,R7
   \   000001B4   0xF240 0x60DF      MOVW     R0,#+1759
   \   000001B8   0x.... 0x....      BL       AT24CXX_Write
    292          	}
    293            }
    294            GUI_SetFont(&FONT_TITLE);
   \                     ??main_11: (+1)
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable15_17
   \   000001C0   0x.... 0x....      BL       GUI_SetFont
    295          
    296            setup();
   \   000001C4   0x.... 0x....      BL       setup
    297          #endif  
    298            disp_language_init();	
   \   000001C8   0x.... 0x....      BL       _Z18disp_language_initv
    299            GUI_UC_SetEncodeUTF8();
   \   000001CC   0x.... 0x....      BL       GUI_UC_SetEncodeUTF8
    300            check_sd_firmware();
   \   000001D0   0x.... 0x....      BL       _Z17check_sd_firmwarev
    301            /*
    302            if(DeviceCode==0x9488)
    303            {
    304          	TFT_screen.display_style = gCfgItems.display_style;// 1:ºÚ‘º∞Ê£ª0:æ≠µ‰∞Ê£ª
    305          	TFT_screen.firstpage_gap = 32;
    306          	TFT_screen.gap_h = 2;
    307          	TFT_screen.gap_v = 2;
    308          	TFT_screen.width = 480;
    309          	TFT_screen.high = 320;
    310          	TFT_screen.btn_x_pixel = 117;
    311          	TFT_screen.btn_y_pixel = 140;
    312          	TFT_screen.title_xpos = 3;
    313          	TFT_screen.title_ypos = 5;
    314          	TFT_screen.title_high = 36;		
    315            }
    316            else //if(DeviceCode==0x1505)
    317            {
    318          	TFT_screen.display_style = 0;//gCfgItems.display_style;// 1:ºÚ‘º∞Ê£ª0:æ≠µ‰∞Ê£ª
    319          	TFT_screen.firstpage_gap = 32;
    320          	TFT_screen.gap_h = 2;
    321          	TFT_screen.gap_v = 2;
    322          	TFT_screen.width = 320;
    323          	TFT_screen.high = 240;
    324          	TFT_screen.btn_x_pixel = 78;
    325          	TFT_screen.btn_y_pixel = 104;
    326          	TFT_screen.title_xpos = 0;
    327          	TFT_screen.title_ypos = 0;
    328          	TFT_screen.title_high = 30;    
    329            }
    330            */
    331          #if 1	
    332            gCfgItems.filament_loading_time = (uint32_t)((gCfgItems.filamentchange_load_length*60.0/gCfgItems.filamentchange_load_speed)+0.5);
   \   000001D4   0xF04F 0x0800      MOV      R8,#+0
   \   000001D8   0x.... 0x....      LDR.W    R9,??DataTable15_18  ;; 0x3fe00000
   \   000001DC   0x4644             MOV      R4,R8
   \   000001DE   0x.... 0x....      LDR.W    R5,??DataTable15_19  ;; 0x404e0000
   \   000001E2   0x6AF8             LDR      R0,[R7, #+44]
   \   000001E4   0x.... 0x....      BL       __aeabi_ui2d
   \   000001E8   0x4622             MOV      R2,R4
   \   000001EA   0x462B             MOV      R3,R5
   \   000001EC   0x.... 0x....      BL       __aeabi_dmul
   \   000001F0   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000001F4   0x6A78             LDR      R0,[R7, #+36]
   \   000001F6   0x.... 0x....      BL       __aeabi_ui2d
   \   000001FA   0x4602             MOV      R2,R0
   \   000001FC   0x460B             MOV      R3,R1
   \   000001FE   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000202   0x.... 0x....      BL       __aeabi_ddiv
   \   00000206   0x4642             MOV      R2,R8
   \   00000208   0x464B             MOV      R3,R9
   \   0000020A   0x.... 0x....      BL       __aeabi_dadd
   \   0000020E   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000212   0x63F8             STR      R0,[R7, #+60]
    333            gCfgItems.filament_unloading_time = (uint32_t)((gCfgItems.filamentchange_unload_length*60.0/gCfgItems.filamentchange_unload_speed)+0.5);
   \   00000214   0x6B38             LDR      R0,[R7, #+48]
   \   00000216   0x.... 0x....      BL       __aeabi_ui2d
   \   0000021A   0x4622             MOV      R2,R4
   \   0000021C   0x462B             MOV      R3,R5
   \   0000021E   0x.... 0x....      BL       __aeabi_dmul
   \   00000222   0x4604             MOV      R4,R0
   \   00000224   0x460D             MOV      R5,R1
   \   00000226   0x6AB8             LDR      R0,[R7, #+40]
   \   00000228   0x.... 0x....      BL       __aeabi_ui2d
   \   0000022C   0x4602             MOV      R2,R0
   \   0000022E   0x460B             MOV      R3,R1
   \   00000230   0x4620             MOV      R0,R4
   \   00000232   0x4629             MOV      R1,R5
   \   00000234   0x.... 0x....      BL       __aeabi_ddiv
   \   00000238   0x4642             MOV      R2,R8
   \   0000023A   0x464B             MOV      R3,R9
   \   0000023C   0x.... 0x....      BL       __aeabi_dadd
   \   00000240   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000244   0x6438             STR      R0,[R7, #+64]
    334          
    335            if(gCfgItems.pwroff_save_mode == 1)
   \   00000246   0xF896 0x019F      LDRB     R0,[R6, #+415]
   \   0000024A   0x2801             CMP      R0,#+1
   \   0000024C   0xD103             BNE.N    ??main_12
    336            {
    337            	FALA_CTRL = 1;
   \   0000024E   0x2001             MOVS     R0,#+1
   \   00000250   0x.... 0x....      LDR.W    R1,??DataTable15_20  ;; 0x422381a8
   \   00000254   0x6008             STR      R0,[R1, #+0]
    338          	//
    339            }
    340          
    341            mks_initPrint();
   \                     ??main_12: (+1)
   \   00000256   0x.... 0x....      BL       mks_initPrint
    342          #if 1
    343              
    344                //mksTmp.cfg_hardware_test_enable = 1;  //for test
    345              
    346                if(mksTmp.cfg_hardware_test_enable)   //…˙≤˙”≤º˛≤‚ ‘
   \   0000025A   0xF89A 0x0013      LDRB     R0,[R10, #+19]
   \   0000025E   0x2800             CMP      R0,#+0
   \   00000260   0xD006             BEQ.N    ??main_13
    347                {
    348                 /*
    349                  GUI_SetBkColor(gCfgItems.background_color);
    350                  GUI_SetColor(gCfgItems.title_color);
    351                  GUI_Clear();
    352                  GUI_UC_SetEncodeNone();
    353                  GUI_SetFont(&GUI_FontHZ16);
    354                  GUI_DispStringAt("”≤º˛≤‚ ‘-(»Ìº˛ƒ⁄≤ø∞Ê±æV1.0.0_000)", 20, 0);
    355                  mksHardwareTest();
    356                  */
    357                  mksCfg.extruders=2;
   \   00000262   0x2002             MOVS     R0,#+2
   \   00000264   0x.... 0x....      LDR.W    R1,??DataTable15_21
   \   00000268   0xF881 0x00F7      STRB     R0,[R1, #+247]
    358                  draw_Hardwaretest();
   \   0000026C   0x.... 0x....      BL       draw_Hardwaretest
    359                }
    360            #endif
    361            
    362          /*
    363            if(gCfgItems.fileSysType == FILE_SYS_USB)
    364            {
    365            	card.initusb();
    366            }
    367            else
    368          */
    369            {
    370            	card.initsd();
   \                     ??main_13: (+1)
   \   00000270   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   00000274   0x.... 0x....      BL       _ZN10CardReader6initsdEv
    371            }
    372            mks_rePrintCheck();
   \   00000278   0x.... 0x....      BL       mks_rePrintCheck
    373          
    374          /*
    375            if(SD_DET_IP == 0)
    376            {
    377            	mks_rePrintCheck();
    378            }
    379            else//√ª”–∂œµÁ–¯¥Ú
    380            {
    381          	  while(1)
    382          	  {
    383          		  logo_tick2 = getTick();
    384          		  if(getTickDiff(logo_tick2, logo_tick1)>=3000)
    385          		  {
    386          			  draw_ready_print();
    387          			  break;
    388          		  }
    389          	  }  
    390            }
    391            */
    392          
    393          
    394            if(gCfgItems.wifi_type == ESP_WIFI)
   \   0000027C   0xF896 0x022C      LDRB     R0,[R6, #+556]
   \   00000280   0x2802             CMP      R0,#+2
   \   00000282   0xD101             BNE.N    ??main_14
    395            {
    396          	wifi_init();
   \   00000284   0x.... 0x....      BL       _Z9wifi_initv
    397            }
    398            /* USER CODE END 2 */
    399          #endif
    400          
    401          
    402            /* Infinite loop */
    403            /* USER CODE BEGIN WHILE */
    404            while (1)
    405            {
    406                if(mksTmp.cfg_hardware_test_enable==1)
   \                     ??main_14: (+1)
   \   00000288   0xF89A 0x0013      LDRB     R0,[R10, #+19]
   \   0000028C   0x2801             CMP      R0,#+1
   \   0000028E   0xD101             BNE.N    ??main_15
    407                {
    408                  mksHardwareTest();
   \   00000290   0x.... 0x....      BL       mksHardwareTest
    409                }
    410                /* USER CODE END WHILE */
    411                //IsrTemperatureHandler();
    412                /* USER CODE BEGIN 3 */
    413                loop();
   \                     ??main_15: (+1)
   \   00000294   0x.... 0x....      BL       loop
   \   00000298   0xE7F6             B.N      ??main_14
    414                #if unused  
    415                MX_USB_HOST_Process();
    416                #endif
    417               // mksEeprom_test();
    418            }
    419            /* USER CODE END 3 */
    420          
    421          }

   \                                 In section .bss, align 4
   \                     pause_from_high_level:
   \   00000000                      DS8 1
    422          
    423          uint8_t poweroff_det_flg;
   \                     poweroff_det_flg:
   \   00000001                      DS8 1
    424          uint32_t poweroff_det_cnt;
    425          uint8_t poweroff_det_low_flg;
   \                     poweroff_det_low_flg:
   \   00000002                      DS8 1
    426          uint32_t poweroff_det_low_cnt;
    427          uint8_t poweroff_det_high_flg;
   \                     poweroff_det_high_flg:
   \   00000003                      DS8 1
    428          uint32_t poweroff_det_high_cnt;
    429          
    430          uint8_t filament_det1_flg;
   \                     filament_det1_flg:
   \   00000004                      DS8 1
    431          uint32_t filament_det1_cnt;
    432          uint8_t filament_det1_low_flg;
   \                     filament_det1_low_flg:
   \   00000005                      DS8 1
    433          uint32_t filament_det1_low_cnt;
    434          uint8_t filament_det1_high_flg;
   \                     filament_det1_high_flg:
   \   00000006                      DS8 1
    435          uint32_t filament_det1_high_cnt;
    436          uint8_t filament_det1_check;
   \                     filament_det1_check:
   \   00000007                      DS8 1
    437          
    438          uint8_t filament_det2_flg;
   \                     filament_det2_flg:
   \   00000008                      DS8 1
    439          uint32_t filament_det2_cnt;
    440          uint8_t filament_det2_low_flg;
   \                     filament_det2_low_flg:
   \   00000009                      DS8 1
    441          uint32_t filament_det2_low_cnt;
    442          uint8_t filament_det2_high_flg;
   \                     filament_det2_high_flg:
   \   0000000A                      DS8 1
    443          uint32_t filament_det2_high_cnt;
    444          uint8_t filament_det2_check;
   \                     filament_det2_check:
   \   0000000B                      DS8 1
    445          
    446          volatile unsigned long BeeperFreq=0;
    447          volatile unsigned char BeeperCnt=0;
   \                     BeeperCnt:
   \   0000000C                      DS8 1
    448          volatile unsigned char mksBpAlrmEn=0;
   \                     mksBpAlrmEn:
   \   0000000D                      DS8 1
    449          
    450          
    451          static uint8_t beeper_cnt;
    452          static uint8_t check_beeper_cnt;
    453          
    454          extern uint8_t from_flash_pic;
    455          __IO uint32_t delaycnt = 0;
    456          __IO uint8_t beeper_flg = 0;
    457          
    458          uint8_t beep_pwdet=0;
   \                     beep_pwdet:
   \   0000000E                      DS8 1
    459          uint8_t beep_mtdet1=0;
   \                     beep_mtdet1:
   \   0000000F                      DS8 1
    460          uint8_t beep_mtdet2=0;
   \                     beep_mtdet2:
   \   00000010                      DS8 1
   \   00000011                      DS8 3
   \                     poweroff_det_cnt:
   \   00000014                      DS8 4
   \                     poweroff_det_low_cnt:
   \   00000018                      DS8 4
   \                     poweroff_det_high_cnt:
   \   0000001C                      DS8 4
   \                     filament_det1_cnt:
   \   00000020                      DS8 4
   \                     filament_det1_low_cnt:
   \   00000024                      DS8 4
   \                     filament_det1_high_cnt:
   \   00000028                      DS8 4
   \                     filament_det2_cnt:
   \   0000002C                      DS8 4
   \                     filament_det2_low_cnt:
   \   00000030                      DS8 4
   \                     filament_det2_high_cnt:
   \   00000034                      DS8 4
   \                     delaycnt:
   \   00000038                      DS8 4

   \                                 In section .bss, align 4
   \                     BeeperFreq:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     beeper_flg:
   \   00000000                      DS8 1
    461          

   \                                 In section .text, align 2, keep-with-next
    462          void mksBeeperAlarm(void)
    463          {
    464          #if 0
    465          		if((gCfgItems.filament_det1_level_flg==1)||(gCfgItems.filament_det2_level_flg==1))
    466          		{
    467          			//”…”⁄∏ﬂµÁ∆Ω¥•∑¢ ±£¨
    468          			//±»Ωœƒ—Õ®π˝π‹Ω≈µÁ∆Ω¿¥≈–∂œ
    469          			//–≈∫≈Ω≈µƒµÁ∆Ω π∆‰¡¢º¥Õ£÷π√˘œÏ£¨
    470          			//À˘“‘ƒ¨»œ√ø¥Œ∂œ¡œ√˘œÏ5¥Œ°£
    471          			beeper_cnt = 10;
    472          		}
    473          		else
    474          		{
    475          			if((MKS_PWRDN == 1) && (MKS_MTRDN == 1))
    476          			{
    477          				check_beeper_cnt++;
    478          			}
    479          			if(check_beeper_cnt >=5)
    480          			{
    481          					mksBpAlrmEn = 0;
    482          					BeeperFreq = 0;
    483          					BeeperCnt = 0;	
    484          					SPEAKER = 0;
    485          					check_beeper_cnt = 0;
    486          			}
    487          			beeper_cnt = 20;
    488          		}
    489          
    490          		if(mksBpAlrmEn)
    491          		{
    492          			BeeperFreq++;
    493          			
    494          			
    495          			if(BeeperFreq%3000 == 0)
    496          			{
    497          				BeeperCnt++;
    498          				SPEAKER = BeeperCnt%2;
    499          				//HAL_Delay(3000);
    500          			}
    501          		
    502          			if(BeeperCnt > beeper_cnt)	
    503          			{	
    504          				SPEAKER = 0;
    505          				mksBpAlrmEn=0;
    506          				BeeperCnt=0;
    507          				BeeperFreq = 0;
    508          			}
    509          		}
    510          		#endif
    511                  
    512                  if(beep_pwdet)
   \                     _Z14mksBeeperAlarmv: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable15_22
   \   00000004   0x7B81             LDRB     R1,[R0, #+14]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD00C             BEQ.N    ??mksBeeperAlarm_0
    513                  {
    514                      if(MKS_PW_DET_OP== 1)
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable15_23  ;; 0x42210108
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD107             BNE.N    ??mksBeeperAlarm_0
    515                      {
    516                          beep_pwdet=0;
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x7381             STRB     R1,[R0, #+14]
    517                          BeeperCnt = 0;
   \   00000018   0x7301             STRB     R1,[R0, #+12]
    518                          delaycnt = 0;
   \   0000001A   0x6381             STR      R1,[R0, #+56]
    519                          mksBpAlrmEn = 0;    
   \   0000001C   0x7341             STRB     R1,[R0, #+13]
    520                          BEEPER_OP = 0;
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable15_24  ;; 0x42220194
   \   00000022   0x6011             STR      R1,[R2, #+0]
    521                      }
    522                  }
    523          
    524                  if(beep_mtdet1)
   \                     ??mksBeeperAlarm_0: (+1)
   \   00000024   0x7BC1             LDRB     R1,[R0, #+15]
   \   00000026   0x2900             CMP      R1,#+0
   \   00000028   0xD00C             BEQ.N    ??mksBeeperAlarm_1
    525                  {
    526                      if(MKS_MT_DET1_OP== 1)
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable15_23  ;; 0x42210108
   \   0000002E   0x6889             LDR      R1,[R1, #+8]
   \   00000030   0x2901             CMP      R1,#+1
   \   00000032   0xD107             BNE.N    ??mksBeeperAlarm_1
    527                      {
    528                          beep_mtdet1=0;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x73C1             STRB     R1,[R0, #+15]
    529                          BeeperCnt = 0;
   \   00000038   0x7301             STRB     R1,[R0, #+12]
    530                          delaycnt = 0;
   \   0000003A   0x6381             STR      R1,[R0, #+56]
    531                          mksBpAlrmEn = 0;    
   \   0000003C   0x7341             STRB     R1,[R0, #+13]
    532                          BEEPER_OP = 0;
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable15_24  ;; 0x42220194
   \   00000042   0x6011             STR      R1,[R2, #+0]
    533                      }
    534                  }
    535                  
    536                  if(beep_mtdet2)
   \                     ??mksBeeperAlarm_1: (+1)
   \   00000044   0x7C01             LDRB     R1,[R0, #+16]
   \   00000046   0x2900             CMP      R1,#+0
   \   00000048   0xD00C             BEQ.N    ??mksBeeperAlarm_2
    537                  {
    538                      if(MKS_MT_DET2_OP== 1)
   \   0000004A   0x.... 0x....      LDR.W    R1,??DataTable15_25  ;; 0x42230118
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0x2901             CMP      R1,#+1
   \   00000052   0xD107             BNE.N    ??mksBeeperAlarm_2
    539                      {
    540                          beep_mtdet2=0;
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x7401             STRB     R1,[R0, #+16]
    541                          BeeperCnt = 0;
   \   00000058   0x7301             STRB     R1,[R0, #+12]
    542                          delaycnt = 0;
   \   0000005A   0x6381             STR      R1,[R0, #+56]
    543                          mksBpAlrmEn = 0;    
   \   0000005C   0x7341             STRB     R1,[R0, #+13]
    544                          BEEPER_OP = 0;
   \   0000005E   0x.... 0x....      LDR.W    R2,??DataTable15_24  ;; 0x42220194
   \   00000062   0x6011             STR      R1,[R2, #+0]
    545                      }
    546                  }
    547                  
    548          		if(mksBpAlrmEn)
   \                     ??mksBeeperAlarm_2: (+1)
   \   00000064   0x7B41             LDRB     R1,[R0, #+13]
   \   00000066   0x2900             CMP      R1,#+0
   \   00000068   0xD01C             BEQ.N    ??mksBeeperAlarm_3
    549          		{
    550          			delaycnt++;
   \   0000006A   0x6B81             LDR      R1,[R0, #+56]
   \   0000006C   0x1C49             ADDS     R1,R1,#+1
   \   0000006E   0x6381             STR      R1,[R0, #+56]
    551          			if(delaycnt >= 1000)
   \   00000070   0x6B81             LDR      R1,[R0, #+56]
   \   00000072   0xF5B1 0x7F7A      CMP      R1,#+1000
   \   00000076   0xD30A             BCC.N    ??mksBeeperAlarm_4
    552          			{
    553          				BeeperCnt++;
   \   00000078   0x7B01             LDRB     R1,[R0, #+12]
   \   0000007A   0x1C49             ADDS     R1,R1,#+1
   \   0000007C   0x7301             STRB     R1,[R0, #+12]
    554          				delaycnt = 0;
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x6381             STR      R1,[R0, #+56]
    555          				BEEPER_OP = BeeperCnt%2;
   \   00000082   0x7B01             LDRB     R1,[R0, #+12]
   \   00000084   0xF001 0x0101      AND      R1,R1,#0x1
   \   00000088   0x.... 0x....      LDR.W    R2,??DataTable15_24  ;; 0x42220194
   \   0000008C   0x6011             STR      R1,[R2, #+0]
    556          			}
    557          			if(BeeperCnt>=20)
   \                     ??mksBeeperAlarm_4: (+1)
   \   0000008E   0x7B01             LDRB     R1,[R0, #+12]
   \   00000090   0x2914             CMP      R1,#+20
   \   00000092   0xDB07             BLT.N    ??mksBeeperAlarm_3
    558          			{
    559          				BeeperCnt = 0;
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x7301             STRB     R1,[R0, #+12]
    560          				delaycnt = 0;
   \   00000098   0x6381             STR      R1,[R0, #+56]
    561          				mksBpAlrmEn = 0;	
   \   0000009A   0x7341             STRB     R1,[R0, #+13]
    562          				BEEPER_OP = 0;
   \   0000009C   0x4608             MOV      R0,R1
   \   0000009E   0x.... 0x....      LDR.W    R1,??DataTable15_24  ;; 0x42220194
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    563          			}
    564          		}
    565          }
   \                     ??mksBeeperAlarm_3: (+1)
   \   000000A4   0x4770             BX       LR               ;; return
    566          

   \                                 In section .text, align 2, keep-with-next
    567          void Close_machine_display()
    568          {
   \                     _Z21Close_machine_displayv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    569          	clear_cur_ui();
   \   00000002   0x.... 0x....      BL       clear_cur_ui
    570          	disp_state = PRINT_READY_UI;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable15_26
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    571          	GUI_SetBkColor(gCfgItems.background_color);
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable15_13
   \   00000012   0x6860             LDR      R0,[R4, #+4]
   \   00000014   0x.... 0x....      BL       GUI_SetBkColor
    572          	GUI_SetColor(gCfgItems.title_color);
   \   00000018   0x68A0             LDR      R0,[R4, #+8]
   \   0000001A   0x.... 0x....      BL       GUI_SetColor
    573          	GUI_Clear();
   \   0000001E   0x.... 0x....      BL       GUI_Clear
    574          	GUI_DispStringAt(common_menu.close_machine_tips, 190, 140);
   \   00000022   0x228C             MOVS     R2,#+140
   \   00000024   0x21BE             MOVS     R1,#+190
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable15_27
   \   0000002A   0x6880             LDR      R0,[R0, #+8]
   \   0000002C   0x.... 0x....      BL       GUI_DispStringAt
    575          	MKS_PW_OFF_OP = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      LDR.W    R1,??DataTable15_28  ;; 0x42218188
   \   00000036   0x6008             STR      R0,[R1, #+0]
    576          }
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
    577          
    578          //∂œµÁ∂œ¡œºÏ≤‚
    579          //∂œµÁ:PB0∂œµÁºÏ≤‚£¨ø…“‘◊˜Œ™µ⁄∂˛≈ÁÕ∑µƒ∂œ¡œºÏ≤‚Ω”ø⁄°£
    580          //∂œ¡œ:PB1∂œ¡œºÏ≤‚£¨
    581          //πÿª˙ƒ£øÈºÏ≤‚π‹Ω≈:
    582          //PB4£¨ø…“‘Õ®π˝≈‰÷√Œƒº˛¿¥—°‘ÒΩ”220DETƒ£øÈªÚΩ”PWCƒ£øÈ;
    583          //ƒ¨»œΩ”PWCƒ£øÈ°£

   \                                 In section .text, align 2, keep-with-next
    584          void PowerOff_Filament_Check()
    585          {
   \                     _Z23PowerOff_Filament_Checkv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    586          	volatile uint8_t i;
    587          
    588          	//∂œµÁºÏ≤‚
    589          	if(gCfgItems.insert_det_module == 1)//Ω”220detƒ£øÈ£¨∂œµÁºÏ≤‚
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable15_22
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable15_13
   \   0000000A   0xF890 0x11BC      LDRB     R1,[R0, #+444]
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xD14F             BNE.N    ??PowerOff_Filament_Check_0
    590          	{
    591          		if((mksReprint.mks_printer_state == MKS_WORKING)&&(gCfgItems.mask_det_Function!=1))//¥Ú”°÷–‘ÚΩ¯»Î‘›Õ£ΩÁ√Ê
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable15_29
   \   00000016   0xF895 0x10B4      LDRB     R1,[R5, #+180]
   \   0000001A   0x29A7             CMP      R1,#+167
   \   0000001C   0xF040 0x80A3      BNE.W    ??PowerOff_Filament_Check_1
   \   00000020   0xF500 0x71DE      ADD      R1,R0,#+444
   \   00000024   0x7B89             LDRB     R1,[R1, #+14]
   \   00000026   0x2901             CMP      R1,#+1
   \   00000028   0xF000 0x809D      BEQ.W    ??PowerOff_Filament_Check_1
    592          		{
    593          			if(MKS_PW_DET_OP== 0)
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable15_23  ;; 0x42210108
   \   00000030   0x680A             LDR      R2,[R1, #+0]
   \   00000032   0x2A00             CMP      R2,#+0
   \   00000034   0xD139             BNE.N    ??PowerOff_Filament_Check_2
    594          			{
    595          				poweroff_det_flg = 1;
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x7062             STRB     R2,[R4, #+1]
    596          				if(poweroff_det_cnt >= 1000)
   \   0000003A   0x6962             LDR      R2,[R4, #+20]
   \   0000003C   0xF5B2 0x7F7A      CMP      R2,#+1000
   \   00000040   0xF0C0 0x8091      BCC.W    ??PowerOff_Filament_Check_1
    597          				{
    598          					if((MKS_PW_DET_OP==0)&&(gCfgItems.have_ups==1))//”–UPS‘Úœ»‘›Õ£
   \   00000044   0x6809             LDR      R1,[R1, #+0]
   \   00000046   0x2900             CMP      R1,#+0
   \   00000048   0xD12B             BNE.N    ??PowerOff_Filament_Check_3
   \   0000004A   0xF890 0x00CD      LDRB     R0,[R0, #+205]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD127             BNE.N    ??PowerOff_Filament_Check_3
    599          					{
    600          						poweroff_det_flg = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x7060             STRB     R0,[R4, #+1]
    601          						poweroff_det_cnt= 0;
   \   00000056   0x6160             STR      R0,[R4, #+20]
    602          						
    603          						clear_cur_ui();
   \   00000058   0x.... 0x....      BL       clear_cur_ui
    604          						stop_print_time();
   \   0000005C   0x.... 0x....      BL       stop_print_time
    605                					card.pauseSDPrint();
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   00000064   0x.... 0x....      BL       _ZN10CardReader12pauseSDPrintEv
    606                					print_job_timer.pause();
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable15_30
   \   0000006C   0x.... 0x....      BL       _ZN9Stopwatch5pauseEv
    607          						mksReprint.mks_printer_state = MKS_PAUSING;
   \   00000070   0x20A9             MOVS     R0,#+169
   \   00000072   0xF885 0x00B4      STRB     R0,[R5, #+180]
    608                                  
    609                                  #if defined(TFT35)
    610          					if(from_flash_pic==1)
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable15_31
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD104             BNE.N    ??PowerOff_Filament_Check_4
    611          						flash_preview_begin = 1;
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0x.... 0x....      LDR.W    R1,??DataTable15_32
   \   00000086   0x7008             STRB     R0,[R1, #+0]
   \   00000088   0xE003             B.N      ??PowerOff_Filament_Check_5
    612          					else
    613          						default_preview_flg = 1;						
   \                     ??PowerOff_Filament_Check_4: (+1)
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable15_33
   \   00000090   0x7008             STRB     R0,[R1, #+0]
    614          					draw_printing();
   \                     ??PowerOff_Filament_Check_5: (+1)
   \   00000092   0x.... 0x....      BL       draw_printing
    615          			#else
    616          					draw_pause();
    617          			#endif
    618          						mksBpAlrmEn = 1;
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0x7360             STRB     R0,[R4, #+13]
    619                                  beep_pwdet=1;
   \   0000009A   0x73A0             STRB     R0,[R4, #+14]
    620          						delaycnt = 0;
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x63A0             STR      R0,[R4, #+56]
    621          
    622          						return;				
   \   000000A0   0xBD31             POP      {R0,R4,R5,PC}
    623          					}
    624          					//ŒﬁUPS÷±Ω”πÿª˙
    625          					poweroff_det_flg = 0;
   \                     ??PowerOff_Filament_Check_3: (+1)
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x7060             STRB     R0,[R4, #+1]
    626          					poweroff_det_cnt= 0;
   \   000000A6   0x6160             STR      R0,[R4, #+20]
    627          
    628          					//Close_machine_display();
    629          
    630          					return;
   \   000000A8   0xBD31             POP      {R0,R4,R5,PC}
    631          				}
    632          			}
    633          			else
    634          			{
    635          				poweroff_det_flg = 0;
   \                     ??PowerOff_Filament_Check_2: (+1)
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0x7061             STRB     R1,[R4, #+1]
    636          				poweroff_det_cnt= 0;
   \   000000AE   0x6161             STR      R1,[R4, #+20]
   \   000000B0   0xE059             B.N      ??PowerOff_Filament_Check_1
    637          			}
    638          		}		
    639          	}
    640          	else//Ω”PWCπÿª˙ƒ£øÈ
    641          	{
    642          		if(MKS_PW_DET_OP == 0)//
   \                     ??PowerOff_Filament_Check_0: (+1)
   \   000000B2   0x.... 0x....      LDR.W    R1,??DataTable15_23  ;; 0x42210108
   \   000000B6   0x680A             LDR      R2,[R1, #+0]
   \   000000B8   0x2A00             CMP      R2,#+0
   \   000000BA   0xD101             BNE.N    ??PowerOff_Filament_Check_6
    643          		{
    644          			poweroff_det_low_flg = 1;//∆Ù∂Øº∆ ±
   \   000000BC   0x2201             MOVS     R2,#+1
   \   000000BE   0x70A2             STRB     R2,[R4, #+2]
    645          		}
    646          		
    647          		if(poweroff_det_low_cnt >= 80)// 1sÃ¯±‰Œ™∏ﬂµÁ∆Ω
   \                     ??PowerOff_Filament_Check_6: (+1)
   \   000000C0   0x69A2             LDR      R2,[R4, #+24]
   \   000000C2   0x2A50             CMP      R2,#+80
   \   000000C4   0xD30B             BCC.N    ??PowerOff_Filament_Check_7
    648          		{
    649          			if(MKS_PW_DET_OP == 1)
   \   000000C6   0x680A             LDR      R2,[R1, #+0]
   \   000000C8   0x2A01             CMP      R2,#+1
   \   000000CA   0xD105             BNE.N    ??PowerOff_Filament_Check_8
    650          			{
    651          				poweroff_det_low_flg = 0;
   \   000000CC   0x2200             MOVS     R2,#+0
   \   000000CE   0x70A2             STRB     R2,[R4, #+2]
    652          				poweroff_det_low_cnt = 0;
   \   000000D0   0x61A2             STR      R2,[R4, #+24]
    653          				poweroff_det_flg=1;
   \   000000D2   0x2201             MOVS     R2,#+1
   \   000000D4   0x7062             STRB     R2,[R4, #+1]
   \   000000D6   0xE002             B.N      ??PowerOff_Filament_Check_7
    654          			}
    655          			else
    656          			{
    657          				poweroff_det_low_flg = 0;
   \                     ??PowerOff_Filament_Check_8: (+1)
   \   000000D8   0x2200             MOVS     R2,#+0
   \   000000DA   0x70A2             STRB     R2,[R4, #+2]
    658          				poweroff_det_low_cnt = 0;
   \   000000DC   0x61A2             STR      R2,[R4, #+24]
    659          			}
    660          		}
    661          		
    662          		if(poweroff_det_flg==1)
   \                     ??PowerOff_Filament_Check_7: (+1)
   \   000000DE   0x7862             LDRB     R2,[R4, #+1]
   \   000000E0   0x2A01             CMP      R2,#+1
   \   000000E2   0xD140             BNE.N    ??PowerOff_Filament_Check_1
    663          		{
    664          			poweroff_det_high_flg = 1;
   \   000000E4   0x2201             MOVS     R2,#+1
   \   000000E6   0x70E2             STRB     R2,[R4, #+3]
    665          			if(poweroff_det_high_cnt >= 80)
   \   000000E8   0x69E2             LDR      R2,[R4, #+28]
   \   000000EA   0x2A50             CMP      R2,#+80
   \   000000EC   0xD33B             BCC.N    ??PowerOff_Filament_Check_1
    666          			{
    667          				if(MKS_PW_DET_OP == 1)
   \   000000EE   0x6809             LDR      R1,[R1, #+0]
   \   000000F0   0x2901             CMP      R1,#+1
   \   000000F2   0xD132             BNE.N    ??PowerOff_Filament_Check_9
    668          				{
    669          					if((mksReprint.mks_printer_state == MKS_WORKING)&&(gCfgItems.have_ups==1))//¥Ú”°÷–«“”–UPS∫Û±∏µÁ‘¥£¨‘ÚΩ¯»Î‘›Õ£ΩÁ√Ê
   \   000000F4   0x.... 0x....      LDR.W    R5,??DataTable15_29
   \   000000F8   0xF895 0x10B4      LDRB     R1,[R5, #+180]
   \   000000FC   0x29A7             CMP      R1,#+167
   \   000000FE   0xD125             BNE.N    ??PowerOff_Filament_Check_10
   \   00000100   0xF890 0x00CD      LDRB     R0,[R0, #+205]
   \   00000104   0x2801             CMP      R0,#+1
   \   00000106   0xD121             BNE.N    ??PowerOff_Filament_Check_10
    670          					{
    671          						poweroff_det_high_flg = 0;
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x70E0             STRB     R0,[R4, #+3]
    672          						poweroff_det_high_cnt = 0;
   \   0000010C   0x61E0             STR      R0,[R4, #+28]
    673          						poweroff_det_flg=0;
   \   0000010E   0x7060             STRB     R0,[R4, #+1]
    674          
    675          						clear_cur_ui();
   \   00000110   0x.... 0x....      BL       clear_cur_ui
    676          						stop_print_time();
   \   00000114   0x.... 0x....      BL       stop_print_time
    677                					card.pauseSDPrint();
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   0000011C   0x.... 0x....      BL       _ZN10CardReader12pauseSDPrintEv
    678                					print_job_timer.pause();
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable15_30
   \   00000124   0x.... 0x....      BL       _ZN9Stopwatch5pauseEv
    679          						mksReprint.mks_printer_state = MKS_PAUSING;
   \   00000128   0x20A9             MOVS     R0,#+169
   \   0000012A   0xF885 0x00B4      STRB     R0,[R5, #+180]
    680          
    681          						
    682          						#if defined(TFT35)
    683          						if(from_flash_pic==1)
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable15_31
   \   00000132   0x7800             LDRB     R0,[R0, #+0]
   \   00000134   0x2801             CMP      R0,#+1
   \   00000136   0xD104             BNE.N    ??PowerOff_Filament_Check_11
    684          							flash_preview_begin = 1;
   \   00000138   0x2001             MOVS     R0,#+1
   \   0000013A   0x.... 0x....      LDR.W    R1,??DataTable15_32
   \   0000013E   0x7008             STRB     R0,[R1, #+0]
   \   00000140   0xE0FE             B.N      ??PowerOff_Filament_Check_12
    685          						else
    686          							default_preview_flg = 1;						
   \                     ??PowerOff_Filament_Check_11: (+1)
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x.... 0x....      LDR.W    R1,??DataTable15_33
   \   00000148   0x7008             STRB     R0,[R1, #+0]
   \   0000014A   0xE0F9             B.N      ??PowerOff_Filament_Check_12
    687          						draw_printing();
    688          						#else
    689          						draw_pause();
    690          						#endif
    691          						mksBpAlrmEn = 1;
    692          						delaycnt = 0;
    693          
    694          						return;
    695          					}
    696          					//√ªUPSµÁ‘¥ªÚ√ª‘⁄¥Ú”°£¨÷±Ω”πÿª˙°£
    697          					poweroff_det_high_flg = 0;
   \                     ??PowerOff_Filament_Check_10: (+1)
   \   0000014C   0x2000             MOVS     R0,#+0
   \   0000014E   0x70E0             STRB     R0,[R4, #+3]
    698          					poweroff_det_high_cnt = 0;
   \   00000150   0x61E0             STR      R0,[R4, #+28]
    699          					poweroff_det_flg=0;
   \   00000152   0x7060             STRB     R0,[R4, #+1]
    700          					Close_machine_display();
   \   00000154   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000158   0x....             B.N      _Z21Close_machine_displayv
    701          					return;					
    702          				}
    703          				else
    704          				{
    705          					poweroff_det_low_flg = 0;
   \                     ??PowerOff_Filament_Check_9: (+1)
   \   0000015A   0x2100             MOVS     R1,#+0
   \   0000015C   0x70A1             STRB     R1,[R4, #+2]
    706          					poweroff_det_low_cnt = 0;
   \   0000015E   0x61A1             STR      R1,[R4, #+24]
    707          					poweroff_det_high_flg = 0;
   \   00000160   0x70E1             STRB     R1,[R4, #+3]
    708          					poweroff_det_high_cnt = 0;
   \   00000162   0x61E1             STR      R1,[R4, #+28]
    709          					poweroff_det_flg = 0;
   \   00000164   0x7061             STRB     R1,[R4, #+1]
    710          				}
    711          			}
    712          		}
    713          	}
    714          	//∂œ¡œºÏ≤‚2
    715          	if((mksCfg.extruders == 2)&&(mksReprint.mks_printer_state == MKS_WORKING)&&(gCfgItems.mask_det_Function!=1))//¥Ú”°÷–‘ÚΩ¯»Î‘›Õ£ΩÁ√Ê
   \                     ??PowerOff_Filament_Check_1: (+1)
   \   00000166   0x.... 0x....      LDR.W    R5,??DataTable15_29
   \   0000016A   0x.... 0x....      LDR.W    R1,??DataTable15_21
   \   0000016E   0xF891 0x10F7      LDRB     R1,[R1, #+247]
   \   00000172   0x2902             CMP      R1,#+2
   \   00000174   0xF040 0x8091      BNE.W    ??PowerOff_Filament_Check_13
   \   00000178   0xF895 0x10B4      LDRB     R1,[R5, #+180]
   \   0000017C   0x29A7             CMP      R1,#+167
   \   0000017E   0xF040 0x808C      BNE.W    ??PowerOff_Filament_Check_13
   \   00000182   0xF500 0x72DE      ADD      R2,R0,#+444
   \   00000186   0x7B91             LDRB     R1,[R2, #+14]
   \   00000188   0x2901             CMP      R1,#+1
   \   0000018A   0xF000 0x8086      BEQ.W    ??PowerOff_Filament_Check_13
    716          	{
    717          		if(gCfgItems.filament_det1_level_flg == 1)//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™∏ﬂµÁ∆Ω¥•∑¢ ±µƒ¥¶¿Ì
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable15_25  ;; 0x42230118
   \   00000192   0x7892             LDRB     R2,[R2, #+2]
   \   00000194   0x2A01             CMP      R2,#+1
   \   00000196   0x680A             LDR      R2,[R1, #+0]
   \   00000198   0xD149             BNE.N    ??PowerOff_Filament_Check_14
    718          		{
    719          			//∏ﬂµÁ∆Ω¥•∑¢ ±£¨ «ºÏ≤‚2sµÕµÁ∆Ω∫Õ2s∏ﬂµÁ∆Ω
    720                		if(MKS_MT_DET2_OP == 0)
   \   0000019A   0x2A00             CMP      R2,#+0
   \   0000019C   0xD101             BNE.N    ??PowerOff_Filament_Check_15
    721          			{
    722          				filament_det2_low_flg = 1;//∆Ù∂Øº∆ ±
   \   0000019E   0x2201             MOVS     R2,#+1
   \   000001A0   0x7262             STRB     R2,[R4, #+9]
    723          			}
    724          			
    725          			if(filament_det2_low_cnt >= 2000)// 2s
   \                     ??PowerOff_Filament_Check_15: (+1)
   \   000001A2   0x6B22             LDR      R2,[R4, #+48]
   \   000001A4   0xF5B2 0x6FFA      CMP      R2,#+2000
   \   000001A8   0xD30C             BCC.N    ??PowerOff_Filament_Check_16
    726          			{
    727                  		if(MKS_MT_DET2_OP == 1)
   \   000001AA   0x680A             LDR      R2,[R1, #+0]
   \   000001AC   0x2A01             CMP      R2,#+1
   \   000001AE   0xD106             BNE.N    ??PowerOff_Filament_Check_17
    728          				{
    729          					filament_det2_high_flg = 1;
   \   000001B0   0x2201             MOVS     R2,#+1
   \   000001B2   0x72A2             STRB     R2,[R4, #+10]
    730          					filament_det2_check=1;
   \   000001B4   0x72E2             STRB     R2,[R4, #+11]
    731          
    732          					filament_det2_low_flg = 0;
   \   000001B6   0x2200             MOVS     R2,#+0
   \   000001B8   0x7262             STRB     R2,[R4, #+9]
    733          					filament_det2_low_cnt = 0;
   \   000001BA   0x6322             STR      R2,[R4, #+48]
   \   000001BC   0xE002             B.N      ??PowerOff_Filament_Check_16
    734          				}
    735          				else
    736          				{
    737          					filament_det2_low_flg = 0;
   \                     ??PowerOff_Filament_Check_17: (+1)
   \   000001BE   0x2200             MOVS     R2,#+0
   \   000001C0   0x7262             STRB     R2,[R4, #+9]
    738          					filament_det2_low_cnt = 0;
   \   000001C2   0x6322             STR      R2,[R4, #+48]
    739          				}
    740          			}
    741          				
    742          			if(filament_det2_check ==1)
   \                     ??PowerOff_Filament_Check_16: (+1)
   \   000001C4   0x7AE2             LDRB     R2,[R4, #+11]
   \   000001C6   0x2A01             CMP      R2,#+1
   \   000001C8   0xD167             BNE.N    ??PowerOff_Filament_Check_13
    743          			{
    744          				if(filament_det2_high_cnt >= 2000)
   \   000001CA   0x6B62             LDR      R2,[R4, #+52]
   \   000001CC   0xF5B2 0x6FFA      CMP      R2,#+2000
   \   000001D0   0xD363             BCC.N    ??PowerOff_Filament_Check_13
    745          				{
    746          					if(MKS_MT_DET2_OP == 1)
   \   000001D2   0x6809             LDR      R1,[R1, #+0]
   \   000001D4   0x2901             CMP      R1,#+1
   \   000001D6   0xD123             BNE.N    ??PowerOff_Filament_Check_18
    747          					{
    748          						filament_det2_high_flg= 0;
   \   000001D8   0x2000             MOVS     R0,#+0
   \   000001DA   0x72A0             STRB     R0,[R4, #+10]
    749          						filament_det2_high_cnt= 0;
   \   000001DC   0x6360             STR      R0,[R4, #+52]
    750          						filament_det2_check=0;
   \   000001DE   0x72E0             STRB     R0,[R4, #+11]
    751          						
    752          						clear_cur_ui();
   \   000001E0   0x.... 0x....      BL       clear_cur_ui
    753          						stop_print_time();
   \   000001E4   0x.... 0x....      BL       stop_print_time
    754                					card.pauseSDPrint();
   \   000001E8   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   000001EC   0x.... 0x....      BL       _ZN10CardReader12pauseSDPrintEv
    755                					print_job_timer.pause();
   \   000001F0   0x.... 0x....      LDR.W    R0,??DataTable15_30
   \   000001F4   0x.... 0x....      BL       _ZN9Stopwatch5pauseEv
    756          						mksReprint.mks_printer_state = MKS_PAUSING;
   \   000001F8   0x20A9             MOVS     R0,#+169
   \   000001FA   0xF885 0x00B4      STRB     R0,[R5, #+180]
    757                                  
    758                                  pause_from_high_level=1;
   \   000001FE   0x2001             MOVS     R0,#+1
   \   00000200   0x7020             STRB     R0,[R4, #+0]
    759          
    760          						
    761          						#if defined(TFT35)
    762          						if(from_flash_pic==1)
   \   00000202   0x.... 0x....      LDR.W    R0,??DataTable15_31
   \   00000206   0x7800             LDRB     R0,[R0, #+0]
   \   00000208   0x2801             CMP      R0,#+1
   \   0000020A   0xD104             BNE.N    ??PowerOff_Filament_Check_19
    763          							flash_preview_begin = 1;
   \   0000020C   0x2001             MOVS     R0,#+1
   \   0000020E   0x.... 0x....      LDR.W    R1,??DataTable15_32
   \   00000212   0x7008             STRB     R0,[R1, #+0]
   \   00000214   0xE094             B.N      ??PowerOff_Filament_Check_12
    764          						else
    765          							default_preview_flg = 1;						
   \                     ??PowerOff_Filament_Check_19: (+1)
   \   00000216   0x2001             MOVS     R0,#+1
   \   00000218   0x.... 0x....      LDR.W    R1,??DataTable15_33
   \   0000021C   0x7008             STRB     R0,[R1, #+0]
   \   0000021E   0xE08F             B.N      ??PowerOff_Filament_Check_12
    766          						draw_printing();
    767          						#else
    768          						draw_pause();
    769          						#endif
    770          						mksBpAlrmEn = 1;
    771          						delaycnt = 0;
    772          
    773          						return;		
    774          					}
    775          					else
    776          					{
    777          						filament_det2_low_flg = 0;
   \                     ??PowerOff_Filament_Check_18: (+1)
   \   00000220   0x2100             MOVS     R1,#+0
   \   00000222   0x7261             STRB     R1,[R4, #+9]
    778          						filament_det2_low_cnt = 0;
   \   00000224   0x6321             STR      R1,[R4, #+48]
    779          						filament_det2_high_flg= 0;
   \   00000226   0x72A1             STRB     R1,[R4, #+10]
    780          						filament_det2_high_cnt= 0;
   \   00000228   0x6361             STR      R1,[R4, #+52]
    781          						filament_det2_check=0;
   \   0000022A   0x72E1             STRB     R1,[R4, #+11]
   \   0000022C   0xE035             B.N      ??PowerOff_Filament_Check_13
    782          					}
    783          				}
    784          			}
    785          		}
    786          		else//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™µÕµÁ∆Ω¥•∑¢ ±¥¶¿Ì
    787          		{
    788          			if(MKS_MT_DET2_OP == 0)
   \                     ??PowerOff_Filament_Check_14: (+1)
   \   0000022E   0x2A00             CMP      R2,#+0
   \   00000230   0xD130             BNE.N    ??PowerOff_Filament_Check_20
    789          			{
    790          				filament_det2_flg = 1;
   \   00000232   0x2201             MOVS     R2,#+1
   \   00000234   0x7222             STRB     R2,[R4, #+8]
    791          				if(filament_det2_cnt >= 1000)
   \   00000236   0x6AE2             LDR      R2,[R4, #+44]
   \   00000238   0xF5B2 0x7F7A      CMP      R2,#+1000
   \   0000023C   0xD32D             BCC.N    ??PowerOff_Filament_Check_13
    792          				{
    793          					if(MKS_MT_DET2_OP == 0)
   \   0000023E   0x6809             LDR      R1,[R1, #+0]
   \   00000240   0x2900             CMP      R1,#+0
   \   00000242   0xD12A             BNE.N    ??PowerOff_Filament_Check_13
    794          					{
    795          						filament_det2_flg = 0;
   \   00000244   0x2000             MOVS     R0,#+0
   \   00000246   0x7220             STRB     R0,[R4, #+8]
    796          						filament_det2_cnt= 0;
   \   00000248   0x62E0             STR      R0,[R4, #+44]
    797          
    798          						clear_cur_ui();
   \   0000024A   0x.... 0x....      BL       clear_cur_ui
    799          						stop_print_time();
   \   0000024E   0x.... 0x....      BL       stop_print_time
    800                					card.pauseSDPrint();
   \   00000252   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   00000256   0x.... 0x....      BL       _ZN10CardReader12pauseSDPrintEv
    801                					print_job_timer.pause();
   \   0000025A   0x.... 0x....      LDR.W    R0,??DataTable15_30
   \   0000025E   0x.... 0x....      BL       _ZN9Stopwatch5pauseEv
    802          						mksReprint.mks_printer_state = MKS_PAUSING;
   \   00000262   0x20A9             MOVS     R0,#+169
   \   00000264   0xF885 0x00B4      STRB     R0,[R5, #+180]
    803                                  
    804                                  			#if defined(TFT35)
    805          						if(from_flash_pic==1)
   \   00000268   0x.... 0x....      LDR.W    R0,??DataTable15_31
   \   0000026C   0x7800             LDRB     R0,[R0, #+0]
   \   0000026E   0x2801             CMP      R0,#+1
   \   00000270   0xD104             BNE.N    ??PowerOff_Filament_Check_21
    806          							flash_preview_begin = 1;
   \   00000272   0x2001             MOVS     R0,#+1
   \   00000274   0x.... 0x....      LDR.W    R1,??DataTable15_32
   \   00000278   0x7008             STRB     R0,[R1, #+0]
   \   0000027A   0xE003             B.N      ??PowerOff_Filament_Check_22
    807          						else
    808          							default_preview_flg = 1;						
   \                     ??PowerOff_Filament_Check_21: (+1)
   \   0000027C   0x2001             MOVS     R0,#+1
   \   0000027E   0x.... 0x....      LDR.W    R1,??DataTable15_33
   \   00000282   0x7008             STRB     R0,[R1, #+0]
    809          						draw_printing();
   \                     ??PowerOff_Filament_Check_22: (+1)
   \   00000284   0x.... 0x....      BL       draw_printing
    810          						#else
    811          						draw_pause();
    812          						#endif
    813          						mksBpAlrmEn = 1;
   \   00000288   0x2001             MOVS     R0,#+1
   \   0000028A   0x7360             STRB     R0,[R4, #+13]
    814                                  beep_mtdet2=1;
   \   0000028C   0x7420             STRB     R0,[R4, #+16]
    815          						delaycnt = 0;
   \   0000028E   0x2000             MOVS     R0,#+0
   \   00000290   0x63A0             STR      R0,[R4, #+56]
    816          
    817          						return;				
   \   00000292   0xBD31             POP      {R0,R4,R5,PC}
    818          					}
    819          				}
    820          			}
    821          			else
    822          			{
    823          				filament_det2_flg = 0;
   \                     ??PowerOff_Filament_Check_20: (+1)
   \   00000294   0x2100             MOVS     R1,#+0
   \   00000296   0x7221             STRB     R1,[R4, #+8]
    824                          filament_det2_cnt = 0;
   \   00000298   0x62E1             STR      R1,[R4, #+44]
    825          			}
    826          		}
    827          	}	
    828          	//∂œ¡œºÏ≤‚1
    829          	if((mksReprint.mks_printer_state == MKS_WORKING)&&(gCfgItems.mask_det_Function!=1))//¥Ú”°÷–‘ÚΩ¯»Î‘›Õ£ΩÁ√Ê
   \                     ??PowerOff_Filament_Check_13: (+1)
   \   0000029A   0xF895 0x10B4      LDRB     R1,[R5, #+180]
   \   0000029E   0x29A7             CMP      R1,#+167
   \   000002A0   0xF040 0x8092      BNE.W    ??PowerOff_Filament_Check_23
   \   000002A4   0xF500 0x72DE      ADD      R2,R0,#+444
   \   000002A8   0x7B90             LDRB     R0,[R2, #+14]
   \   000002AA   0x2801             CMP      R0,#+1
   \   000002AC   0xF000 0x808C      BEQ.W    ??PowerOff_Filament_Check_23
    830          	{
    831          		if(gCfgItems.filament_det0_level_flg == 1)//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™∏ﬂµÁ∆Ω¥•∑¢ ±µƒ¥¶¿Ì
   \   000002B0   0x.... 0x....      LDR.W    R1,??DataTable15_23  ;; 0x42210108
   \   000002B4   0x7850             LDRB     R0,[R2, #+1]
   \   000002B6   0x2801             CMP      R0,#+1
   \   000002B8   0x6888             LDR      R0,[R1, #+8]
   \   000002BA   0xD14F             BNE.N    ??PowerOff_Filament_Check_24
    832          		{
    833          			//∏ﬂµÁ∆Ω¥•∑¢ ±£¨ «ºÏ≤‚2sµÕµÁ∆Ω∫Õ2s∏ﬂµÁ∆Ω
    834                		if(MKS_MT_DET1_OP == 0)
   \   000002BC   0x2800             CMP      R0,#+0
   \   000002BE   0xD101             BNE.N    ??PowerOff_Filament_Check_25
    835          			{
    836          				filament_det1_low_flg = 1;//∆Ù∂Øº∆ ±
   \   000002C0   0x2001             MOVS     R0,#+1
   \   000002C2   0x7160             STRB     R0,[R4, #+5]
    837          			}
    838          			
    839          			if(filament_det1_low_cnt >= 2000)// 2s
   \                     ??PowerOff_Filament_Check_25: (+1)
   \   000002C4   0x6A60             LDR      R0,[R4, #+36]
   \   000002C6   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   000002CA   0xD30C             BCC.N    ??PowerOff_Filament_Check_26
    840          			{
    841                  		if(MKS_MT_DET1_OP == 1)
   \   000002CC   0x6888             LDR      R0,[R1, #+8]
   \   000002CE   0x2801             CMP      R0,#+1
   \   000002D0   0xD106             BNE.N    ??PowerOff_Filament_Check_27
    842          				{
    843          					filament_det1_high_flg = 1;
   \   000002D2   0x2001             MOVS     R0,#+1
   \   000002D4   0x71A0             STRB     R0,[R4, #+6]
    844          					filament_det1_check=1;
   \   000002D6   0x71E0             STRB     R0,[R4, #+7]
    845          
    846          					filament_det1_low_flg = 0;
   \   000002D8   0x2000             MOVS     R0,#+0
   \   000002DA   0x7160             STRB     R0,[R4, #+5]
    847          					filament_det1_low_cnt = 0;
   \   000002DC   0x6260             STR      R0,[R4, #+36]
   \   000002DE   0xE002             B.N      ??PowerOff_Filament_Check_26
    848          				}
    849          				else
    850          				{
    851          					filament_det1_low_flg = 0;
   \                     ??PowerOff_Filament_Check_27: (+1)
   \   000002E0   0x2000             MOVS     R0,#+0
   \   000002E2   0x7160             STRB     R0,[R4, #+5]
    852          					filament_det1_low_cnt = 0;
   \   000002E4   0x6260             STR      R0,[R4, #+36]
    853          				}
    854          			}
    855          				
    856          			if(filament_det1_check ==1)
   \                     ??PowerOff_Filament_Check_26: (+1)
   \   000002E6   0x79E0             LDRB     R0,[R4, #+7]
   \   000002E8   0x2801             CMP      R0,#+1
   \   000002EA   0xD16D             BNE.N    ??PowerOff_Filament_Check_23
    857          			{
    858          				if(filament_det1_high_cnt >= 2000)
   \   000002EC   0x6AA0             LDR      R0,[R4, #+40]
   \   000002EE   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   000002F2   0xD369             BCC.N    ??PowerOff_Filament_Check_23
    859          				{
    860          					if(MKS_MT_DET1_OP == 1)
   \   000002F4   0x6888             LDR      R0,[R1, #+8]
   \   000002F6   0x2801             CMP      R0,#+1
   \   000002F8   0xD129             BNE.N    ??PowerOff_Filament_Check_28
    861          					{
    862          						filament_det1_high_flg= 0;
   \   000002FA   0x2000             MOVS     R0,#+0
   \   000002FC   0x71A0             STRB     R0,[R4, #+6]
    863          						filament_det1_high_cnt= 0;
   \   000002FE   0x62A0             STR      R0,[R4, #+40]
    864          						filament_det1_check=0;
   \   00000300   0x71E0             STRB     R0,[R4, #+7]
    865          
    866          						clear_cur_ui();
   \   00000302   0x.... 0x....      BL       clear_cur_ui
    867          						stop_print_time();
   \   00000306   0x.... 0x....      BL       stop_print_time
    868                					card.pauseSDPrint();
   \   0000030A   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   0000030E   0x.... 0x....      BL       _ZN10CardReader12pauseSDPrintEv
    869                					print_job_timer.pause();
   \   00000312   0x.... 0x....      LDR.W    R0,??DataTable15_30
   \   00000316   0x.... 0x....      BL       _ZN9Stopwatch5pauseEv
    870          						mksReprint.mks_printer_state = MKS_PAUSING;
   \   0000031A   0x20A9             MOVS     R0,#+169
   \   0000031C   0xF885 0x00B4      STRB     R0,[R5, #+180]
    871                                  
    872                                  pause_from_high_level=1;
   \   00000320   0x2001             MOVS     R0,#+1
   \   00000322   0x7020             STRB     R0,[R4, #+0]
    873          
    874                                  
    875                                  			#if defined(TFT35)
    876          						if(from_flash_pic==1)
   \   00000324   0x.... 0x....      LDR.W    R0,??DataTable15_31
   \   00000328   0x7800             LDRB     R0,[R0, #+0]
   \   0000032A   0x2801             CMP      R0,#+1
   \   0000032C   0xD104             BNE.N    ??PowerOff_Filament_Check_29
    877          							flash_preview_begin = 1;
   \   0000032E   0x2001             MOVS     R0,#+1
   \   00000330   0x.... 0x....      LDR.W    R1,??DataTable15_32
   \   00000334   0x7008             STRB     R0,[R1, #+0]
   \   00000336   0xE003             B.N      ??PowerOff_Filament_Check_12
    878          						else
    879          							default_preview_flg = 1;						
   \                     ??PowerOff_Filament_Check_29: (+1)
   \   00000338   0x2001             MOVS     R0,#+1
   \   0000033A   0x.... 0x....      LDR.W    R1,??DataTable15_33
   \   0000033E   0x7008             STRB     R0,[R1, #+0]
    880          						draw_printing();
   \                     ??PowerOff_Filament_Check_12: (+1)
   \   00000340   0x.... 0x....      BL       draw_printing
    881          						#else
    882          						draw_pause();
    883          						#endif
    884          						mksBpAlrmEn = 1;
   \   00000344   0x2001             MOVS     R0,#+1
   \   00000346   0x7360             STRB     R0,[R4, #+13]
    885          						delaycnt = 0;
   \   00000348   0x2000             MOVS     R0,#+0
   \   0000034A   0x63A0             STR      R0,[R4, #+56]
    886          
    887          						return;		
   \   0000034C   0xBD31             POP      {R0,R4,R5,PC}
    888          					}
    889          					else
    890          					{
    891          						filament_det1_low_flg = 0;
   \                     ??PowerOff_Filament_Check_28: (+1)
   \   0000034E   0x2000             MOVS     R0,#+0
   \   00000350   0x7160             STRB     R0,[R4, #+5]
    892          						filament_det1_low_cnt = 0;
   \   00000352   0x6260             STR      R0,[R4, #+36]
    893          						filament_det1_high_flg= 0;
   \   00000354   0x71A0             STRB     R0,[R4, #+6]
    894          						filament_det1_high_cnt= 0;
   \   00000356   0x62A0             STR      R0,[R4, #+40]
    895          						filament_det1_check=0;
   \   00000358   0x71E0             STRB     R0,[R4, #+7]
   \   0000035A   0xBD31             POP      {R0,R4,R5,PC}
    896          					}
    897          				}
    898          			}
    899          		}
    900          		else//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™µÕµÁ∆Ω¥•∑¢ ±¥¶¿Ì
    901          		{
    902          			if(MKS_MT_DET1_OP == 0)
   \                     ??PowerOff_Filament_Check_24: (+1)
   \   0000035C   0x2800             CMP      R0,#+0
   \   0000035E   0xD130             BNE.N    ??PowerOff_Filament_Check_30
    903          			{
    904          				filament_det1_flg = 1;
   \   00000360   0x2001             MOVS     R0,#+1
   \   00000362   0x7120             STRB     R0,[R4, #+4]
    905          				if(filament_det1_cnt >= 1000)
   \   00000364   0x6A20             LDR      R0,[R4, #+32]
   \   00000366   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   0000036A   0xD32D             BCC.N    ??PowerOff_Filament_Check_23
    906          				{
    907          					if(MKS_MT_DET1_OP == 0)
   \   0000036C   0x6888             LDR      R0,[R1, #+8]
   \   0000036E   0x2800             CMP      R0,#+0
   \   00000370   0xD12A             BNE.N    ??PowerOff_Filament_Check_23
    908          					{
    909          						filament_det1_flg = 0;
   \   00000372   0x2000             MOVS     R0,#+0
   \   00000374   0x7120             STRB     R0,[R4, #+4]
    910          						filament_det1_cnt= 0;
   \   00000376   0x6220             STR      R0,[R4, #+32]
    911          
    912          						clear_cur_ui();
   \   00000378   0x.... 0x....      BL       clear_cur_ui
    913          						stop_print_time();
   \   0000037C   0x.... 0x....      BL       stop_print_time
    914                					card.pauseSDPrint();
   \   00000380   0x.... 0x....      LDR.W    R0,??DataTable15_16
   \   00000384   0x.... 0x....      BL       _ZN10CardReader12pauseSDPrintEv
    915                					print_job_timer.pause();
   \   00000388   0x.... 0x....      LDR.W    R0,??DataTable15_30
   \   0000038C   0x.... 0x....      BL       _ZN9Stopwatch5pauseEv
    916          						mksReprint.mks_printer_state = MKS_PAUSING;
   \   00000390   0x20A9             MOVS     R0,#+169
   \   00000392   0xF885 0x00B4      STRB     R0,[R5, #+180]
    917                                  			#if defined(TFT35)
    918          						if(from_flash_pic==1)
   \   00000396   0x.... 0x....      LDR.W    R0,??DataTable15_31
   \   0000039A   0x7800             LDRB     R0,[R0, #+0]
   \   0000039C   0x2801             CMP      R0,#+1
   \   0000039E   0xD104             BNE.N    ??PowerOff_Filament_Check_31
    919          							flash_preview_begin = 1;
   \   000003A0   0x2001             MOVS     R0,#+1
   \   000003A2   0x.... 0x....      LDR.W    R1,??DataTable15_32
   \   000003A6   0x7008             STRB     R0,[R1, #+0]
   \   000003A8   0xE003             B.N      ??PowerOff_Filament_Check_32
    920          						else
    921          							default_preview_flg = 1;						
   \                     ??PowerOff_Filament_Check_31: (+1)
   \   000003AA   0x2001             MOVS     R0,#+1
   \   000003AC   0x.... 0x....      LDR.W    R1,??DataTable15_33
   \   000003B0   0x7008             STRB     R0,[R1, #+0]
    922          						draw_printing();
   \                     ??PowerOff_Filament_Check_32: (+1)
   \   000003B2   0x.... 0x....      BL       draw_printing
    923          						#else
    924          						draw_pause();
    925          						#endif
    926          						mksBpAlrmEn = 1;
   \   000003B6   0x2001             MOVS     R0,#+1
   \   000003B8   0x7360             STRB     R0,[R4, #+13]
    927                                  beep_mtdet1=1;
   \   000003BA   0x73E0             STRB     R0,[R4, #+15]
    928          						delaycnt = 0;
   \   000003BC   0x2000             MOVS     R0,#+0
   \   000003BE   0x63A0             STR      R0,[R4, #+56]
    929          
    930          						return;				
   \   000003C0   0xBD31             POP      {R0,R4,R5,PC}
    931          					}
    932          				}
    933          			}
    934          			else
    935          			{
    936          				filament_det1_flg = 0;
   \                     ??PowerOff_Filament_Check_30: (+1)
   \   000003C2   0x2000             MOVS     R0,#+0
   \   000003C4   0x7120             STRB     R0,[R4, #+4]
    937                          filament_det1_cnt = 0;
   \   000003C6   0x6220             STR      R0,[R4, #+32]
    938          			}
    939          		}
    940          	}
    941          }
   \                     ??PowerOff_Filament_Check_23: (+1)
   \   000003C8   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    942          
    943          //sean 19.7.24
    944          //start
    945          //no filament :return 0;
    946          //have filament:return 1;
    947          #if 0
    948          uint8_t no_filament_print=0;
    949          uint8_t Filament_Check()
    950          {
    951          	//∂œ¡œºÏ≤‚2
    952          	if((mksCfg.extruders == 2)&&(gCfgItems.mask_det_Function!=1))//¥Ú”°÷–‘ÚΩ¯»Î‘›Õ£ΩÁ√Ê
    953          	{
    954          		if(gCfgItems.filament_det1_level_flg == 1)//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™∏ﬂµÁ∆Ω¥•∑¢ ±µƒ¥¶¿Ì
    955          		{
    956          			//∏ﬂµÁ∆Ω¥•∑¢ ±£¨ «ºÏ≤‚2sµÕµÁ∆Ω∫Õ2s∏ﬂµÁ∆Ω
    957                			if(MKS_MT_DET2_OP == 0)
    958          			{
    959          				HAL_Delay(100);
    960          				if(MKS_MT_DET2_OP == 0)
    961          				{
    962          					//have filament
    963          					clear_cur_ui();
    964          					mksReprint.mks_printer_state = MKS_PAUSED;
    965          					no_filament_print = 1;
    966                              
    967          					#if defined(TFT35)
    968          					if(from_flash_pic==1)
    969          						flash_preview_begin = 1;
    970          					else
    971          						default_preview_flg = 1;						
    972          					draw_printing();
    973          					#else
    974          					draw_pause();
    975          					#endif
    976          					mksBpAlrmEn = 1;
    977          					delaycnt = 0;
    978          					return 0;
    979          				}
    980          			}
    981          			return 1;
    982          		}
    983          		else//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™µÕµÁ∆Ω¥•∑¢ ±¥¶¿Ì
    984          		{
    985          			if(MKS_MT_DET2_OP == 0)
    986          			{
    987          				HAL_Delay(100);
    988          				if(MKS_MT_DET2_OP == 0)
    989          				{
    990          					clear_cur_ui();
    991          					mksReprint.mks_printer_state = MKS_PAUSED;
    992          					no_filament_print = 1;
    993                              
    994                              			#if defined(TFT35)
    995          					if(from_flash_pic==1)
    996          						flash_preview_begin = 1;
    997          					else
    998          						default_preview_flg = 1;						
    999          					draw_printing();
   1000          					#else
   1001          					draw_pause();
   1002          					#endif
   1003          					mksBpAlrmEn = 1;
   1004                              			beep_mtdet2=1;
   1005          					delaycnt = 0;
   1006          
   1007          					return 0;				
   1008          				}
   1009          			}
   1010          			return 1;	
   1011          		}
   1012          	}	
   1013          	//∂œ¡œºÏ≤‚1
   1014          	if(gCfgItems.mask_det_Function!=1)//¥Ú”°÷–‘ÚΩ¯»Î‘›Õ£ΩÁ√Ê
   1015          	{
   1016          		if(gCfgItems.filament_det0_level_flg == 1)//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™∏ﬂµÁ∆Ω¥•∑¢ ±µƒ¥¶¿Ì
   1017          		{
   1018          			//∏ﬂµÁ∆Ω¥•∑¢ ±£¨ «ºÏ≤‚2sµÕµÁ∆Ω∫Õ2s∏ﬂµÁ∆Ω
   1019                			if(MKS_MT_DET1_OP == 0)
   1020          			{
   1021          				HAL_Delay(100);
   1022          				if(MKS_MT_DET1_OP == 0)
   1023          				{
   1024          					//have filament
   1025          					clear_cur_ui();
   1026          					mksReprint.mks_printer_state = MKS_PAUSED;
   1027          					no_filament_print = 1;
   1028                              
   1029          					#if defined(TFT35)
   1030          					if(from_flash_pic==1)
   1031          						flash_preview_begin = 1;
   1032          					else
   1033          						default_preview_flg = 1;						
   1034          					draw_printing();
   1035          					#else
   1036          					draw_pause();
   1037          					#endif
   1038          					mksBpAlrmEn = 1;
   1039          					delaycnt = 0;
   1040          					return 0;
   1041          				}
   1042          			}
   1043          			return 1;	
   1044          			
   1045          		}
   1046          		else//∂œ¡œΩ”ø⁄Ω”»ÎµÁ∆ΩŒ™µÕµÁ∆Ω¥•∑¢ ±¥¶¿Ì
   1047          		{
   1048          			if(MKS_MT_DET1_OP == 0)
   1049          			{
   1050          				HAL_Delay(100);
   1051          				if(MKS_MT_DET1_OP == 0)
   1052          				{
   1053          					clear_cur_ui();
   1054          					mksReprint.mks_printer_state = MKS_PAUSED;
   1055          					no_filament_print = 1;
   1056                              
   1057                              			#if defined(TFT35)
   1058          					if(from_flash_pic==1)
   1059          						flash_preview_begin = 1;
   1060          					else
   1061          						default_preview_flg = 1;						
   1062          					draw_printing();
   1063          					#else
   1064          					draw_pause();
   1065          					#endif
   1066          					mksBpAlrmEn = 1;
   1067                              			beep_mtdet2=1;
   1068          					delaycnt = 0;
   1069          
   1070          					return 0;				
   1071          				}
   1072          			}
   1073          			return 1;	
   1074          		}
   1075          	}
   1076          }
   1077          #endif
   1078          //end
   1079          #if 0
   1080          /** System Clock Configuration
   1081          */
   1082          void SystemClock_Config(void)
   1083          {
   1084          
   1085            RCC_OscInitTypeDef RCC_OscInitStruct;
   1086            RCC_ClkInitTypeDef RCC_ClkInitStruct;
   1087            RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;
   1088          
   1089              /**Configure the main internal regulator output voltage 
   1090              */
   1091            __HAL_RCC_PWR_CLK_ENABLE();
   1092          
   1093            __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
   1094          
   1095              /**Initializes the CPU, AHB and APB busses clocks 
   1096              */
   1097            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
   1098            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   1099            RCC_OscInitStruct.LSIState = RCC_LSI_ON;
   1100            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   1101            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   1102            RCC_OscInitStruct.PLL.PLLM = 4;
   1103            RCC_OscInitStruct.PLL.PLLN = 168;
   1104            RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
   1105            RCC_OscInitStruct.PLL.PLLQ = 7;
   1106            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   1107            {
   1108              Error_Handler();
   1109            }
   1110          
   1111              /**Initializes the CPU, AHB and APB busses clocks 
   1112              */
   1113            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
   1114                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   1115            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   1116            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   1117            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
   1118            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
   1119          
   1120            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
   1121            {
   1122              Error_Handler();
   1123            }
   1124            
   1125          
   1126            PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
   1127            PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
   1128            if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
   1129            {
   1130              Error_Handler();
   1131            }
   1132          
   1133              /**Configure the Systick interrupt time 
   1134              */
   1135            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   1136          
   1137              /**Configure the Systick 
   1138              */
   1139            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   1140          
   1141            /* SysTick_IRQn interrupt configuration */
   1142            HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
   1143          }
   1144          #endif
   1145          /** System Clock Configuration
   1146          */

   \                                 In section .text, align 2, keep-with-next
   1147          void SystemClock_Config(void)
   1148          {
   \                     _Z18SystemClock_Configv: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
   1149          
   1150            RCC_OscInitTypeDef RCC_OscInitStruct;
   1151            RCC_ClkInitTypeDef RCC_ClkInitStruct;
   1152            RCC_PeriphCLKInitTypeDef PeriphClkInit;
   1153          
   1154              /**Initializes the CPU, AHB and APB busses clocks 
   1155              */
   1156            RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
   \   00000004   0x2009             MOVS     R0,#+9
   \   00000006   0x9005             STR      R0,[SP, #+20]
   1157            RCC_OscInitStruct.HSEState = RCC_HSE_ON;
   \   00000008   0xF44F 0x3080      MOV      R0,#+65536
   \   0000000C   0x9006             STR      R0,[SP, #+24]
   1158            RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x9107             STR      R1,[SP, #+28]
   1159            RCC_OscInitStruct.HSIState = RCC_HSI_ON;
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x9109             STR      R1,[SP, #+36]
   1160            RCC_OscInitStruct.LSIState = RCC_LSI_ON;
   \   00000016   0x910B             STR      R1,[SP, #+44]
   1161            RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   \   00000018   0x2102             MOVS     R1,#+2
   \   0000001A   0x910C             STR      R1,[SP, #+48]
   1162            RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   \   0000001C   0x900D             STR      R0,[SP, #+52]
   1163            RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
   \   0000001E   0xF44F 0x10E0      MOV      R0,#+1835008
   \   00000022   0x900E             STR      R0,[SP, #+56]
   1164            if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
   \   00000024   0xA805             ADD      R0,SP,#+20
   \   00000026   0x.... 0x....      BL       HAL_RCC_OscConfig
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD001             BEQ.N    ??SystemClock_Config_0
   1165            {
   1166              Error_Handler();
   \   0000002E   0x.... 0x....      BL       Error_Handler
   1167            }
   1168          
   1169              /**Initializes the CPU, AHB and APB busses clocks 
   1170              */
   1171            RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
   1172                                        |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   \                     ??SystemClock_Config_0: (+1)
   \   00000032   0x200F             MOVS     R0,#+15
   \   00000034   0x9000             STR      R0,[SP, #+0]
   1173            RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x9001             STR      R0,[SP, #+4]
   1174            RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   1175            RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
   \   0000003E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000042   0x9003             STR      R0,[SP, #+12]
   1176            RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x9004             STR      R0,[SP, #+16]
   1177          
   1178            if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
   \   00000048   0x2102             MOVS     R1,#+2
   \   0000004A   0xA800             ADD      R0,SP,#+0
   \   0000004C   0x.... 0x....      BL       HAL_RCC_ClockConfig
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD001             BEQ.N    ??SystemClock_Config_1
   1179            {
   1180              Error_Handler();
   \   00000054   0x.... 0x....      BL       Error_Handler
   1181            }
   1182          
   1183            PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
   \                     ??SystemClock_Config_1: (+1)
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0x900F             STR      R0,[SP, #+60]
   1184            PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
   \   0000005C   0xF44F 0x7000      MOV      R0,#+512
   \   00000060   0x9010             STR      R0,[SP, #+64]
   1185            PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
   \   00000062   0xF44F 0x4000      MOV      R0,#+32768
   \   00000066   0x9011             STR      R0,[SP, #+68]
   1186            if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
   \   00000068   0xA80F             ADD      R0,SP,#+60
   \   0000006A   0x.... 0x....      BL       HAL_RCCEx_PeriphCLKConfig
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD001             BEQ.N    ??SystemClock_Config_2
   1187            {
   1188              Error_Handler();
   \   00000072   0x.... 0x....      BL       Error_Handler
   1189            }
   1190          
   1191              /**Configure the Systick interrupt time 
   1192              */
   1193            HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
   \                     ??SystemClock_Config_2: (+1)
   \   00000076   0x.... 0x....      BL       HAL_RCC_GetHCLKFreq
   \   0000007A   0xF44F 0x717A      MOV      R1,#+1000
   \   0000007E   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000082   0x.... 0x....      BL       HAL_SYSTICK_Config
   1194          
   1195              /**Configure the Systick 
   1196              */
   1197            HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
   \   00000086   0x2004             MOVS     R0,#+4
   \   00000088   0x.... 0x....      BL       HAL_SYSTICK_CLKSourceConfig
   1198          
   1199            /* SysTick_IRQn interrupt configuration */
   1200            HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0x4611             MOV      R1,R2
   \   00000090   0xF04F 0x30FF      MOV      R0,#-1
   \   00000094   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1201          }
   \   00000098   0xB015             ADD      SP,SP,#+84
   \   0000009A   0xBD00             POP      {PC}             ;; return
   1202          
   1203          /** NVIC Configuration
   1204          */

   \                                 In section .text, align 2, keep-with-next
   1205          static void MX_NVIC_Init(void)
   1206          {
   \                     _Z12MX_NVIC_Initv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1207            /* TIM2_IRQn interrupt configuration */
   1208            HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x2102             MOVS     R1,#+2
   \   00000006   0x201C             MOVS     R0,#+28
   \   00000008   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1209            HAL_NVIC_EnableIRQ(TIM2_IRQn);
   \   0000000C   0x201C             MOVS     R0,#+28
   \   0000000E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1210            /* TIM3_IRQn interrupt configuration */
   1211            HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0x201D             MOVS     R0,#+29
   \   00000018   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1212            HAL_NVIC_EnableIRQ(TIM3_IRQn);
   \   0000001C   0x201D             MOVS     R0,#+29
   \   0000001E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1213            /* TIM4_IRQn interrupt configuration */
   1214            HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2102             MOVS     R1,#+2
   \   00000026   0x201E             MOVS     R0,#+30
   \   00000028   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1215            HAL_NVIC_EnableIRQ(TIM4_IRQn);
   \   0000002C   0x201E             MOVS     R0,#+30
   \   0000002E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   1216            /* TIM5_IRQn interrupt configuration */
   1217            HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0x2032             MOVS     R0,#+50
   \   00000038   0x.... 0x....      BL       HAL_NVIC_SetPriority
   1218            HAL_NVIC_EnableIRQ(TIM5_IRQn);
   \   0000003C   0x2032             MOVS     R0,#+50
   \   0000003E   0xE8BD 0x4002      POP      {R1,LR}
   \   00000042   0x.... 0x....      B.W      HAL_NVIC_EnableIRQ
   1219          }
   1220          /* USER CODE BEGIN 4 */
   1221          
   1222          /* USER CODE END 4 */
   1223          
   1224          /**
   1225            * @brief  This function is executed in case of error occurrence.
   1226            * @param  None
   1227            * @retval None
   1228            */

   \                                 In section .text, align 2, keep-with-next
   1229          void Error_Handler(void)
   1230          {
   1231            /* USER CODE BEGIN Error_Handler */
   1232            /* User can add his own implementation to report the HAL error return state */
   1233            while(1) 
   \                     Error_Handler: (+1)
   \                     ??Error_Handler_0: (+1)
   \   00000000   0xE7FE             B.N      ??Error_Handler_0
   1234            {
   1235            }
   1236            /* USER CODE END Error_Handler */ 
   1237          }
   1238          
   1239          #ifdef USE_FULL_ASSERT
   1240          
   1241          /**
   1242             * @brief Reports the name of the source file and the source line number
   1243             * where the assert_param error has occurred.
   1244             * @param file: pointer to the source file name
   1245             * @param line: assert_param error line source number
   1246             * @retval None
   1247             */
   1248          void assert_failed(uint8_t* file, uint32_t line)
   1249          {
   1250            /* USER CODE BEGIN 6 */
   1251            /* User can add his own implementation to report the file name and line number,
   1252              ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
   1253            /* USER CODE END 6 */
   1254          
   1255          }
   1256          
   1257          #endif
   1258          
   1259          /**
   1260            * @}
   1261            */ 
   1262          
   1263          /**
   1264            * @}
   1265          */ 
   1266          

   \                                 In section .text, align 2, keep-with-next
   1267          void testAllStepAndMosFET()
   1268          {
   \                     _Z20testAllStepAndMosFETv: (+1)
   \   00000000   0xB4F8             PUSH     {R3-R7}
   1269          
   1270            XENA_OP = 0;YENA_OP = 0;ZENA_OP = 0;E0ENA_OP = 0;
   \   00000002   0x....             LDR.N    R0,??DataTable15_34  ;; 0x42230180
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6101             STR      R1,[R0, #+16]
   \   00000008   0x6041             STR      R1,[R0, #+4]
   \   0000000A   0x....             LDR.N    R1,??DataTable15_35  ;; 0x42218184
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x61CA             STR      R2,[R1, #+28]
   \   00000010   0x608A             STR      R2,[R1, #+8]
   1271          
   1272          
   1273            uint32_t testCnt=0;
   1274            volatile uint32_t delayCnt=0;
   \   00000012   0x4613             MOV      R3,R2
   \   00000014   0x9300             STR      R3,[SP, #+0]
   \   00000016   0xF640 0x15C5      MOVW     R5,#+2501
   \   0000001A   0x....             LDR.N    R7,??DataTable15_36  ;; 0x42210180
   1275            
   1276            while(1)
   1277            {
   1278              testCnt++;
   \                     ??testAllStepAndMosFET_0: (+1)
   \   0000001C   0x1C52             ADDS     R2,R2,#+1
   1279              if(testCnt % 5000 > 2500)
   \   0000001E   0xF241 0x3388      MOVW     R3,#+5000
   \   00000022   0xFBB2 0xF3F3      UDIV     R3,R2,R3
   \   00000026   0xF241 0x3488      MOVW     R4,#+5000
   \   0000002A   0xFB04 0x2413      MLS      R4,R4,R3,R2
   \   0000002E   0x....             LDR.N    R3,??DataTable15_37  ;; 0x4222818c
   \   00000030   0x42AC             CMP      R4,R5
   \   00000032   0xD305             BCC.N    ??testAllStepAndMosFET_1
   1280                {XDIR_OP = 0;YDIR_OP = 0;ZDIR_OP = 0;E0DIR_OP = 0;}
   \   00000034   0x2600             MOVS     R6,#+0
   \   00000036   0x6086             STR      R6,[R0, #+8]
   \   00000038   0x620E             STR      R6,[R1, #+32]
   \   0000003A   0x60CE             STR      R6,[R1, #+12]
   \   0000003C   0x601E             STR      R6,[R3, #+0]
   \   0000003E   0xE004             B.N      ??testAllStepAndMosFET_2
   1281              else
   1282              	{XDIR_OP = 1;YDIR_OP = 1;ZDIR_OP = 1;E0DIR_OP = 1;}
   \                     ??testAllStepAndMosFET_1: (+1)
   \   00000040   0x2601             MOVS     R6,#+1
   \   00000042   0x6086             STR      R6,[R0, #+8]
   \   00000044   0x620E             STR      R6,[R1, #+32]
   \   00000046   0x60CE             STR      R6,[R1, #+12]
   \   00000048   0x601E             STR      R6,[R3, #+0]
   1283              
   1284              if(testCnt % 5000 > 2500)   //MOS
   \                     ??testAllStepAndMosFET_2: (+1)
   \   0000004A   0x....             LDR.N    R6,??DataTable15_38  ;; 0x4222018c
   \   0000004C   0x42AC             CMP      R4,R5
   \   0000004E   0xD304             BCC.N    ??testAllStepAndMosFET_3
   1285                {BED_OP=1;HEATER1_OP=1;FAN_OP=1;}
   \   00000050   0x2401             MOVS     R4,#+1
   \   00000052   0x603C             STR      R4,[R7, #+0]
   \   00000054   0x6034             STR      R4,[R6, #+0]
   \   00000056   0x600C             STR      R4,[R1, #+0]
   \   00000058   0xE003             B.N      ??testAllStepAndMosFET_4
   1286              else
   1287                {BED_OP=0;HEATER1_OP=0;FAN_OP=0;}
   \                     ??testAllStepAndMosFET_3: (+1)
   \   0000005A   0x2400             MOVS     R4,#+0
   \   0000005C   0x603C             STR      R4,[R7, #+0]
   \   0000005E   0x6034             STR      R4,[R6, #+0]
   \   00000060   0x600C             STR      R4,[R1, #+0]
   1288          	
   1289              XSTEP_OP =0;YSTEP_OP =0;ZSTEP_OP =0;E0STEP_OP =0;
   \                     ??testAllStepAndMosFET_4: (+1)
   \   00000062   0x2400             MOVS     R4,#+0
   \   00000064   0x60C4             STR      R4,[R0, #+12]
   \   00000066   0x6004             STR      R4,[R0, #+0]
   \   00000068   0x610C             STR      R4,[R1, #+16]
   \   0000006A   0x60DC             STR      R4,[R3, #+12]
   1290              delayCnt = 0; while(delayCnt < 2000) delayCnt++;
   \   0000006C   0x9400             STR      R4,[SP, #+0]
   \   0000006E   0xE002             B.N      ??testAllStepAndMosFET_5
   \                     ??testAllStepAndMosFET_6: (+1)
   \   00000070   0x9C00             LDR      R4,[SP, #+0]
   \   00000072   0x1C64             ADDS     R4,R4,#+1
   \   00000074   0x9400             STR      R4,[SP, #+0]
   \                     ??testAllStepAndMosFET_5: (+1)
   \   00000076   0x9C00             LDR      R4,[SP, #+0]
   \   00000078   0xF5B4 0x6FFA      CMP      R4,#+2000
   \   0000007C   0xD3F8             BCC.N    ??testAllStepAndMosFET_6
   1291              XSTEP_OP =1;YSTEP_OP =1;ZSTEP_OP =1;E0STEP_OP =1;
   \   0000007E   0x2401             MOVS     R4,#+1
   \   00000080   0x60C4             STR      R4,[R0, #+12]
   \   00000082   0x6004             STR      R4,[R0, #+0]
   \   00000084   0x610C             STR      R4,[R1, #+16]
   \   00000086   0x60DC             STR      R4,[R3, #+12]
   1292              delayCnt = 0; while(delayCnt < 2000) delayCnt++;
   \   00000088   0x2300             MOVS     R3,#+0
   \   0000008A   0x9300             STR      R3,[SP, #+0]
   \                     ??testAllStepAndMosFET_7: (+1)
   \   0000008C   0x9B00             LDR      R3,[SP, #+0]
   \   0000008E   0xF5B3 0x6FFA      CMP      R3,#+2000
   \   00000092   0xD2C3             BCS.N    ??testAllStepAndMosFET_0
   \   00000094   0x9B00             LDR      R3,[SP, #+0]
   \   00000096   0x1C5B             ADDS     R3,R3,#+1
   \   00000098   0x9300             STR      R3,[SP, #+0]
   \   0000009A   0xE7F7             B.N      ??testAllStepAndMosFET_7
   1293            }
   1294            
   1295            
   1296          }
   1297          
   1298          #if 1
   1299          #define FLASH_PAGE_SIZE    ((u16)0x400) //“ª“≥µƒ¥Û–°Œ™1K
                         ^
Warning[Pe047]: incompatible redefinition of macro "FLASH_PAGE_SIZE" (declared
          at line 266 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash_ex.h")
   1300          #define USER_FLASH_START   ((u32)0x08000000)//–¥»Îµƒ∆ ºµÿ÷∑		//bootloader’º”√48K
   1301          #define USER_FLASH_END     ((uint32_t)0x08006FFF )//–¥»ÎµƒΩ· ¯µÿ÷∑
   1302          #define USER_FLASH_SIZE  ((USER_FLASH_END - USER_FLASH_START) + 1)
   1303          
   1304          uint8_t barString[20]="0%\0";
   1305          uint16_t progressBar=0;		
   1306          uint16_t percentBar = 0;
   1307          unsigned int progCnt = 0; 
   1308          uint8_t bufCmp = 0;
   1309          

   \                                 In section .bss, align 4
   1310          uint32_t EraseCounter = 0x00, Address = 0x00;//≤¡≥˝º∆ ˝£¨≤¡≥˝µÿ÷∑
   \                     EraseCounter:
   \   00000000                      DS8 4
   1311          uint32_t Data = 0x3210ABCD;

   \                                 In section .bss, align 4
   1312          uint32_t NbrOfPage = 0x00;
   \                     NbrOfPage:
   \   00000000                      DS8 4
   1313          
   1314          //BYTE buffer_st[FLASH_PAGE_SIZE]; 
   1315          #define BUFSIZE2 1024//FLASH_PAGE_SIZE
   1316          

   \                                 In section .text, align 2, keep-with-next
   1317          void BufferSet(u8* pBuffer, u8 data, u16 BufferLength)
   1318          {
   1319            u16 i;
   1320            for(i = 0; i<BufferLength; i++)
   \                     _Z9BufferSetPhht: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0xE001             B.N      ??BufferSet_0
   1321            {
   1322              pBuffer[i] = data;
   \                     ??BufferSet_1: (+1)
   \   00000004   0x5419             STRB     R1,[R3, R0]
   1323            }
   \   00000006   0x1C5B             ADDS     R3,R3,#+1
   \                     ??BufferSet_0: (+1)
   \   00000008   0xB29B             UXTH     R3,R3
   \   0000000A   0x4293             CMP      R3,R2
   \   0000000C   0xD3FA             BCC.N    ??BufferSet_1
   1324          }
   \   0000000E   0x4770             BX       LR               ;; return
   1325          #if 0
   1326          void mksFlashErase(void)
   1327          {
   1328          /*-----------------FLASH--------------------*/
   1329          	HAL_FLASH_Unlock();//FLASH_Unlock();
   1330          #if 0        
   1331          	NbrOfPage = (USER_FLASH_END - USER_FLASH_START + 1) / FLASH_PAGE_SIZE;
   1332          	//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR); //«Â≥˝±Í÷æŒª
   1333                  
   1334          	for(EraseCounter = 0; (EraseCounter < NbrOfPage) && (FLASHStatus == FLASH_COMPLETE); EraseCounter++)	
   1335          	{
   1336          		FLASHStatus = FLASH_ErasePage(USER_FLASH_START + (FLASH_PAGE_SIZE * EraseCounter));
   1337          	}
   1338          #endif
   1339            //≤¡≥˝bootloader ÷Æ∫ÛµƒÀ˘”–…»«¯
   1340              //GUI_Exec();
   1341              //GUI_SetFont(&FONT_TITLE);
   1342              //GUI_SetBkColor(GUI_BLACK);
   1343              //GUI_SetBkColor(gCfgItems.background_color);
   1344          	//GUI_SetColor(gCfgItems.title_color);
   1345          //GUI_Clear();
   1346              //GUI_SetColor(GUI_GREEN);
   1347              GUI_Clear();GUI_DispStringAt("Erase Sector 0",160,140);
   1348              FLASH_Erase_Sector(FLASH_SECTOR_0,FLASH_VOLTAGE_RANGE_3);
   1349              GUI_Clear();GUI_DispStringAt("Erase Sector 1",160,140);
   1350              FLASH_Erase_Sector(FLASH_SECTOR_1,FLASH_VOLTAGE_RANGE_3);
   1351              GUI_Clear(); GUI_DispStringAt("Erase Sector 2",160,140);
   1352              FLASH_Erase_Sector(FLASH_SECTOR_2,FLASH_VOLTAGE_RANGE_3);
   1353              //GUI_Clear(); GUI_DispStringAt("Erase Sector 3",160,140);
   1354              //FLASH_Erase_Sector(FLASH_SECTOR_3,FLASH_VOLTAGE_RANGE_3);
   1355              /*LCD_Clear(BLACK); LCD_ShowString(160,140,200,24,24,"Erase Sector 5");
   1356              FLASH_Erase_Sector(FLASH_SECTOR_5,FLASH_VOLTAGE_RANGE_3);
   1357              LCD_Clear(BLACK); LCD_ShowString(160,140,200,24,24,"Erase Sector 6");
   1358              FLASH_Erase_Sector(FLASH_SECTOR_6,FLASH_VOLTAGE_RANGE_3);
   1359              LCD_Clear(BLACK); LCD_ShowString(160,140,200,24,24,"Erase Sector 7");
   1360              FLASH_Erase_Sector(FLASH_SECTOR_7,FLASH_VOLTAGE_RANGE_3);*/
   1361              GUI_Clear();GUI_DispStringAt("Erase Finish!",160,140);
   1362              HAL_Delay(500);
   1363          /*-----------------FLASH--------------------*/
   1364          	
   1365          }
   1366          #endif
   1367          //unsigned long tms=0;
   1368          //unsigned char first_time = 1;
   1369          #define NO_ENCRYPTION_SIZE 320 //
   1370          #define	ENCRYPTION_SIZE (30*1024)
   1371          BYTE buffer[1024]; 

   \                                 In section .bss, align 4
   1372          FIL fsrc, fdst;      // file objects
   \                     fsrc:
   \   00000000                      DS8 556

   \                                 In section .bss, align 4
   \                     fdst:
   \   00000000                      DS8 556
   1373          FRESULT res;         // FatFs function common result code

   \                                 In section .bss, align 4
   1374          UINT br, bw;         // File R/W count
   \                     bw:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   \                     barString:
   \   00000000   0x30 0x25          DC8 30H, 25H, 0, 0
   \              0x00 0x00    
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     bufCmp:
   \   00000014   0x00               DC8 0
   \                     res:
   \   00000015   0x00               DC8 0
   \                     progressBar:
   \   00000016   0x0000             DC16 0
   \                     percentBar:
   \   00000018   0x0000             DC16 0
   \   0000001A   0x00 0x00          DC8 0, 0
   \                     buffer:
   \   0000001C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000005C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000006C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000007C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000008C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000009C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000010C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000011C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000012C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000013C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000014C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000015C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000016C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000017C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000018C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000019C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000020C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000021C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000022C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000023C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000024C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000025C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000026C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000027C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000028C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000029C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000002FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000030C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000031C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000032C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000033C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000034C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000035C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000036C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000037C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000038C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000039C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003AC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003CC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003DC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003EC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000003FC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000040C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     progCnt:
   \   0000041C   0x00000000         DC32 0
   \                     Address:
   \   00000420   0x00000000         DC32 0
   \                     br:
   \   00000424   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   1375          uint32_t fileSize = 0;
   1376          uint32_t msp = 0;
   \                     msp:
   \   00000428   0x00000000         DC32 0
   1377          uint32_t reset = 0;
   \                     reset:
   \   0000042C   0x00000000         DC32 0
   1378          uint16_t *hlfP = (uint16_t *)buffer;
   \                     hlfP:
   \   00000430   0x........         DC32 buffer

   \                                 In section .data, align 4
   \                     `Data`:
   \   00000000   0x3210ABCD         DC32 839953357
   1379          //Ω‚¬Î√ÿ‘ø£∫a3bdad0d4111bb8ddc802dd0d2c49b1e26ebe3334a15e40ab3b13c93bbaff73e
   1380          uint8_t key[32] = {0xa3,0xbd,0xad,0x0d,0x41,0x11,0xbb,0x8d,0xdc,0x80,
   1381          													0x2d,0xd0,0xd2,0xc4,0x9b,0x1e,0x26,0xeb,0xe3,0x33,
   1382          													0x4a,0x15,0xe4,0x0a,0xb3,0xb1,0x3c,0x93,0xbb,0xaf,0xf7,0x3e};

   \                                 In section .bss, align 4
   1383          unsigned long tms=0;
   \                     tms:
   \   00000000                      DS8 4
   1384          unsigned char first_time = 1;

   \                                 In section .text, align 2, keep-with-next
   1385          void mksProgram(void)
   1386          {
   \                     _Z10mksProgramv: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   1387          		unsigned int i;
                 		             ^
Warning[Pe177]: variable "i" was declared but never referenced
   1388          		unsigned long k=0;
                 		              ^
Warning[Pe177]: variable "k" was declared but never referenced
   1389          		unsigned long j=0;
                 		              ^
Warning[Pe177]: variable "j" was declared but never referenced
   1390          		volatile long filesize= 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   1391          		volatile long filesize_end= 0;
   \   00000008   0x9000             STR      R0,[SP, #+0]
   1392          		//FLASH_Unlock();
   1393          		//FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
   1394          		//mksFlashErase();
   1395          
   1396          		/*LCD_Clear(BLACK);
   1397          		LCD_ShowString(180,100,200,24,24,"Updating");	
   1398          		LCD_ShowString(200,160,200,24,24,barString);	*/
   1399          		GUI_Clear();
   \   0000000A   0x.... 0x....      BL       GUI_Clear
   1400          		GUI_DispStringAt("Updating",180,100);
   \   0000000E   0x2264             MOVS     R2,#+100
   \   00000010   0x21B4             MOVS     R1,#+180
   \   00000012   0x.... 0x....      ADR.W    R0,`?<Constant "Updating">`
   \   00000016   0x.... 0x....      BL       GUI_DispStringAt
   1401          		GUI_DispStringAt((const char*)barString,200,160);
   \   0000001A   0x....             LDR.N    R4,??DataTable15_39
   \   0000001C   0x22A0             MOVS     R2,#+160
   \   0000001E   0x21C8             MOVS     R1,#+200
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       GUI_DispStringAt
   1402                          
   1403          		Address = USER_FLASH_START;
   \   00000026   0xF04F 0x6000      MOV      R0,#+134217728
   \   0000002A   0xF8C4 0x0420      STR      R0,[R4, #+1056]
   1404          		progCnt = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xF8C4 0x041C      STR      R0,[R4, #+1052]
   1405          		bufCmp = 0;
   \   00000034   0x7520             STRB     R0,[R4, #+20]
   1406          		filesize = fsrc.fsize;
   \   00000036   0x....             LDR.N    R5,??DataTable15_40
   \   00000038   0xF8D5 0x020C      LDR      R0,[R5, #+524]
   \   0000003C   0x9001             STR      R0,[SP, #+4]
   \   0000003E   0x....             LDR.N    R6,??DataTable15_41
   1407          		while(1)
   1408          		{
   1409          			BufferSet(buffer, 0xff, BUFSIZE2);
   \                     ??mksProgram_0: (+1)
   \   00000040   0xF44F 0x6280      MOV      R2,#+1024
   \   00000044   0x21FF             MOVS     R1,#+255
   \   00000046   0xF104 0x001C      ADD      R0,R4,#+28
   \   0000004A   0x.... 0x....      BL       _Z9BufferSetPhht
   1410          			res = f_read(&fsrc, buffer, BUFSIZE2, &br);
   \   0000004E   0xF204 0x4324      ADDW     R3,R4,#+1060
   \   00000052   0xF44F 0x6280      MOV      R2,#+1024
   \   00000056   0xF104 0x011C      ADD      R1,R4,#+28
   \   0000005A   0x4628             MOV      R0,R5
   \   0000005C   0x.... 0x....      BL       f_read
   \   00000060   0x7560             STRB     R0,[R4, #+21]
   1411          		#if 0	
   1412          		/*****************Ω‚√‹π˝≥Ã*************************/
   1413          		if(tms < (ENCRYPTION_SIZE)/32)
   1414          		{
   1415          			if(first_time==1)
   1416          			{
   1417          				k=0;
   1418          				for(j=0;j<(1024-NO_ENCRYPTION_SIZE)/32;j++)
   1419          				{
   1420          					for(i=0;i<32;i++)
   1421          					{
   1422          						buffer[320+k] = buffer[320+k]^key[i]; 
   1423          						k++;
   1424          					}
   1425          					tms++;
   1426          				}
   1427          				first_time = 0;
   1428          			}
   1429          			else
   1430          			{
   1431          					k=0;
   1432          					for(j=0;j<1024/32;j++)
   1433          					{
   1434          						for(i=0;i<32;i++)
   1435          						{
   1436          							buffer[k] = buffer[k]^key[i];
   1437          							k++;
   1438          						}
   1439          						tms++;
   1440          						if(tms >= (ENCRYPTION_SIZE)/32)
   1441          						{
   1442          							
   1443          							break;
   1444          						}
   1445          					}				
   1446          				}
   1447          			}
   1448          		/*******************************************************/
   1449          		#else
   1450          		/*
   1451          			if(tms < (ENCRYPTION_SIZE)/32)
   1452          			{
   1453          				if(first_time==1)
   1454          				{
   1455          					first_time=0;
   1456          				}
   1457          				else
   1458          				{
   1459          					k=0;
   1460          					for(j=0;j<(1024)/32;j++)
   1461          					{
   1462          						for(i=0;i<32;i++)
   1463          						{
   1464          							buffer[k] = buffer[k]^key[i]; 
   1465          							k++;
   1466          						}
   1467          						tms++;
   1468          					}
   1469          				}
   1470          			}
   1471          			*/
   1472          		#endif
   1473          		#if 0
   1474          			if(bufBak == buffer[0])	bufCmp++;
   1475          			else	bufCmp=0;
   1476          			
   1477          			if(bufCmp > 5)	break;
   1478          				
   1479          			bufBak = buffer[0];
   1480          			
   1481          		#endif
   1482          			if(msp == 0 && reset == 0)
   \   00000062   0xF8D4 0x0428      LDR      R0,[R4, #+1064]
   \   00000066   0xF8D4 0x142C      LDR      R1,[R4, #+1068]
   \   0000006A   0x4308             ORRS     R0,R1,R0
   \   0000006C   0xD105             BNE.N    ??mksProgram_1
   1483          			{
   1484          					msp = *((uint32_t *)(buffer));
   \   0000006E   0x69E0             LDR      R0,[R4, #+28]
   \   00000070   0xF8C4 0x0428      STR      R0,[R4, #+1064]
   1485          					reset = *((uint32_t *)(buffer+4));
   \   00000074   0x6A20             LDR      R0,[R4, #+32]
   \   00000076   0xF8C4 0x042C      STR      R0,[R4, #+1068]
   1486          			}
   1487          			
   1488          			//bufP=(uint32_t *)buffer;
   1489          			hlfP = (uint16_t *)buffer;
   \                     ??mksProgram_1: (+1)
   \   0000007A   0xF104 0x001C      ADD      R0,R4,#+28
   \   0000007E   0xF8C4 0x0430      STR      R0,[R4, #+1072]
   1490          			
   1491          			STMFLASH_Write(Address,hlfP,BUFSIZE2/2);
   \   00000082   0xF44F 0x7200      MOV      R2,#+512
   \   00000086   0xF104 0x011C      ADD      R1,R4,#+28
   \   0000008A   0xF8D4 0x0420      LDR      R0,[R4, #+1056]
   \   0000008E   0x.... 0x....      BL       STMFLASH_Write
   1492          			Address += BUFSIZE2;
   \   00000092   0xF8D4 0x0420      LDR      R0,[R4, #+1056]
   \   00000096   0xF500 0x6080      ADD      R0,R0,#+1024
   \   0000009A   0xF8C4 0x0420      STR      R0,[R4, #+1056]
   1493          			
   1494          			progCnt++;
   \   0000009E   0xF8D4 0x041C      LDR      R0,[R4, #+1052]
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0xF8C4 0x041C      STR      R0,[R4, #+1052]
   1495          			progressBar = percentBar;
   \   000000A8   0x8B21             LDRH     R1,[R4, #+24]
   \   000000AA   0x82E1             STRH     R1,[R4, #+22]
   1496          			percentBar = (uint16_t )(4.8 * ((float )(progCnt*BUFSIZE2)*100/(float )fileSize));
   \   000000AC   0x....             LDR.N    R7,??DataTable15_42  ;; 0x42c80000
   \   000000AE   0x0280             LSLS     R0,R0,#+10
   \   000000B0   0x.... 0x....      BL       __aeabi_ui2f
   \   000000B4   0x4639             MOV      R1,R7
   \   000000B6   0x.... 0x....      BL       __aeabi_fmul
   \   000000BA   0x4680             MOV      R8,R0
   \   000000BC   0x6830             LDR      R0,[R6, #+0]
   \   000000BE   0x.... 0x....      BL       __aeabi_ui2f
   \   000000C2   0x4601             MOV      R1,R0
   \   000000C4   0x4640             MOV      R0,R8
   \   000000C6   0x.... 0x....      BL       __aeabi_fdiv
   \   000000CA   0x.... 0x....      BL       __aeabi_f2d
   \   000000CE   0xF04F 0x3233      MOV      R2,#+858993459
   \   000000D2   0x....             LDR.N    R3,??DataTable15_43  ;; 0x40133333
   \   000000D4   0x.... 0x....      BL       __aeabi_dmul
   \   000000D8   0x.... 0x....      BL       __aeabi_d2iz
   \   000000DC   0x4602             MOV      R2,R0
   \   000000DE   0x8322             STRH     R2,[R4, #+24]
   1497          			if(percentBar < 480 )
   \   000000E0   0xB292             UXTH     R2,R2
   \   000000E2   0xF5B2 0x7FF0      CMP      R2,#+480
   \   000000E6   0xDA04             BGE.N    ??mksProgram_2
   1498          			{
   1499          				//for(i=progressBar;i<percentBar;i++)
   1500          					//LCD_DrawFullRect(110,i,20,1);			//320
   1501          					//LCD_Fill(20,i,110,1,GREEN);
   1502          					//void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color);
   1503          					//LCD_Fill2(0,130,percentBar,155,GUI_GREEN);
   1504          					GUI_FillRect(0,130,percentBar,155);
   \   000000E8   0x239B             MOVS     R3,#+155
   \   000000EA   0x2182             MOVS     R1,#+130
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x.... 0x....      BL       GUI_FillRect
   1505          			}
   1506          			
   1507          			percentBar= (uint16_t )(((float )(progCnt*BUFSIZE2)*100/(float )fileSize));
   \                     ??mksProgram_2: (+1)
   \   000000F2   0xF8D4 0x041C      LDR      R0,[R4, #+1052]
   \   000000F6   0x0280             LSLS     R0,R0,#+10
   \   000000F8   0x.... 0x....      BL       __aeabi_ui2f
   \   000000FC   0x4639             MOV      R1,R7
   \   000000FE   0x.... 0x....      BL       __aeabi_fmul
   \   00000102   0x4607             MOV      R7,R0
   \   00000104   0x6830             LDR      R0,[R6, #+0]
   \   00000106   0x.... 0x....      BL       __aeabi_ui2f
   \   0000010A   0x4601             MOV      R1,R0
   \   0000010C   0x4638             MOV      R0,R7
   \   0000010E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000112   0x.... 0x....      BL       __aeabi_f2iz
   \   00000116   0x8320             STRH     R0,[R4, #+24]
   1508          			if(percentBar > 99)	percentBar=99;
   \   00000118   0xB280             UXTH     R0,R0
   \   0000011A   0x2864             CMP      R0,#+100
   \   0000011C   0xDB01             BLT.N    ??mksProgram_3
   \   0000011E   0x2063             MOVS     R0,#+99
   \   00000120   0x8320             STRH     R0,[R4, #+24]
   \                     ??mksProgram_3: (+1)
   \   00000122   0x8B20             LDRH     R0,[R4, #+24]
   \   00000124   0x210A             MOVS     R1,#+10
   \   00000126   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000012A   0x220A             MOVS     R2,#+10
   \   0000012C   0x280A             CMP      R0,#+10
   \   0000012E   0xDA08             BGE.N    ??mksProgram_4
   1509          			
   1510          			if(percentBar < 10)
   1511          			{
   1512          				barString[0] = percentBar%10 + 0x30;
   \   00000130   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000134   0x3030             ADDS     R0,R0,#+48
   \   00000136   0x7020             STRB     R0,[R4, #+0]
   1513          				barString[1] = '%';
   \   00000138   0x2025             MOVS     R0,#+37
   \   0000013A   0x7060             STRB     R0,[R4, #+1]
   1514          				barString[2] = '\0';
   \   0000013C   0x2000             MOVS     R0,#+0
   \   0000013E   0x70A0             STRB     R0,[R4, #+2]
   \   00000140   0xE00A             B.N      ??mksProgram_5
   1515          			}
   1516          			else
   1517          			{
   1518          				barString[0] = percentBar/10 + 0x30;
   \                     ??mksProgram_4: (+1)
   \   00000142   0xF101 0x0330      ADD      R3,R1,#+48
   \   00000146   0x7023             STRB     R3,[R4, #+0]
   1519          				barString[1] = percentBar%10 + 0x30;
   \   00000148   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   0000014C   0x3030             ADDS     R0,R0,#+48
   \   0000014E   0x7060             STRB     R0,[R4, #+1]
   1520          				barString[2] = '%';
   \   00000150   0x2025             MOVS     R0,#+37
   \   00000152   0x70A0             STRB     R0,[R4, #+2]
   1521          				barString[3] = '\0';
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x70E0             STRB     R0,[R4, #+3]
   1522          			}
   1523          			//LCD_DisplayString(140,130,barString);
   1524          			//LCD_ShowString(200,160,200,24,24,barString);
   1525          			GUI_DispStringAt((const char*)barString,200,160);
   \                     ??mksProgram_5: (+1)
   \   00000158   0x22A0             MOVS     R2,#+160
   \   0000015A   0x21C8             MOVS     R1,#+200
   \   0000015C   0x4620             MOV      R0,R4
   \   0000015E   0x.... 0x....      BL       GUI_DispStringAt
   1526          			//LCD_DrawFullRect(110,20,20,50);
   1527          //for(i=0;i<32;i++)				LCD_DrawFullRect(110,i*10,20,10);			//32
   1528          //for(i=0;i<64;i++)				LCD_DrawFullRect(110,i*5,20,5);			//64
   1529          //for(i=0;i<160;i++)				LCD_DrawFullRect(110,i*2,20,2);			//160
   1530          
   1531          			filesize_end += br;			
   \   00000162   0xF8D4 0x0424      LDR      R0,[R4, #+1060]
   \   00000166   0x9900             LDR      R1,[SP, #+0]
   \   00000168   0x1841             ADDS     R1,R0,R1
   \   0000016A   0x9100             STR      R1,[SP, #+0]
   1532          			if(br < BUFSIZE2)	break;	//Œƒº˛Ω· ¯
   \   0000016C   0xF5B0 0x6F80      CMP      R0,#+1024
   \   00000170   0xF4BF 0xAF66      BCS.W    ??mksProgram_0
   1533          		}
   1534          		
   1535          		//if(bufCmp > 5)
   1536          		if(filesize_end < filesize)
   \   00000174   0x9800             LDR      R0,[SP, #+0]
   \   00000176   0x9901             LDR      R1,[SP, #+4]
   \   00000178   0x4288             CMP      R0,R1
   \   0000017A   0xDA06             BGE.N    ??mksProgram_6
   1537          		{
   1538          			//LCD_DisplayString(80,100,"SD ERR");
   1539          			//LCD_ShowString(120,80,200,24,24,"Update");
   1540          			//LCD_ShowString(180,100,200,24,24,"SD ERR");
   1541          			GUI_DispStringAt("SD ERR",180,100);
   \   0000017C   0x2264             MOVS     R2,#+100
   \   0000017E   0x21B4             MOVS     R1,#+180
   \   00000180   0x.... 0x....      ADR.W    R0,`?<Constant "SD ERR">`
   \   00000184   0x.... 0x....      BL       GUI_DispStringAt
   1542          			while(1);
   \                     ??mksProgram_7: (+1)
   \   00000188   0xE7FE             B.N      ??mksProgram_7
   1543          		}
   1544          		//LCD_DisplayString(140,130,"100%");
   1545          		//LCD_ShowString(200,160,200,24,24,"100%");
   1546          		GUI_DispStringAt("100%",200,160);
   \                     ??mksProgram_6: (+1)
   \   0000018A   0x22A0             MOVS     R2,#+160
   \   0000018C   0x21C8             MOVS     R1,#+200
   \   0000018E   0x.... 0x....      ADR.W    R0,`?<Constant "100%">`
   \   00000192   0x.... 0x....      BL       GUI_DispStringAt
   1547          		//RESET_E2PROM();//«Â≥˝E2PROM ˝æ›°£
   1548          		//delay(0xfffff);
   1549                          HAL_Delay(1000);
   \   00000196   0xF44F 0x707A      MOV      R0,#+1000
   \   0000019A   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   0000019E   0x.... 0x....      B.W      HAL_Delay
   1550          		//FLASH_Lock();
   1551          }

   \                                 In section .data, align 4
   \                     fileSize:
   \   00000000   0x00000000         DC32 0
   1552          const char *firmware_file = "Robin_nano_boot.bin";
   \                     firmware_file:
   \   00000004   0x........         DC32 `?<Constant "Robin_nano_boot.bin">`
   1553          const char *firmware_old  = "ROBIN_NANO_BOOT.CUR";
   \                     firmware_old:
   \   00000008   0x........         DC32 `?<Constant "ROBIN_NANO_BOOT.CUR">`

   \                                 In section .data, align 4
   \                     key:
   \   00000000   0xA3 0xBD          DC8 163, 189, 173, 13, 65, 17, 187, 141, 220, 128, 45, 208, 210, 196
   \              0xAD 0x0D    
   \              0x41 0x11    
   \              0xBB 0x8D    
   \              0xDC 0x80    
   \              0x2D 0xD0    
   \              0xD2 0xC4    
   \   0000000E   0x9B 0x1E          DC8 155, 30, 38, 235, 227, 51, 74, 21, 228, 10, 179, 177, 60, 147, 187
   \              0x26 0xEB    
   \              0xE3 0x33    
   \              0x4A 0x15    
   \              0xE4 0x0A    
   \              0xB3 0xB1    
   \              0x3C 0x93    
   \              0xBB         
   \   0000001D   0xAF 0xF7          DC8 175, 247, 62
   \              0x3E         

   \                                 In section .data, align 1
   \                     first_time:
   \   00000000   0x01               DC8 1
   1554          extern FATFS fs;            // Work area (file system object) for logical drive
   1555          

   \                                 In section .text, align 2, keep-with-next
   1556          void check_sd_firmware(void)
   1557          {
   \                     _Z17check_sd_firmwarev: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB092             SUB      SP,SP,#+72
   1558          	int r;
                 	    ^
Warning[Pe550]: variable "r" was set but never used
   1559          	char oldname[30]={0};
   \   00000004   0xA809             ADD      R0,SP,#+36
   \   00000006   0x2120             MOVS     R1,#+32
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
   1560          	char newname[30]={0};
   \   0000000C   0xA801             ADD      R0,SP,#+4
   \   0000000E   0x2120             MOVS     R1,#+32
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
   1561          
   1562          	volatile unsigned long cnt=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9000             STR      R0,[SP, #+0]
   1563          	unsigned long counter = 0,counter2 = 0;
                 	              ^
Warning[Pe177]: variable "counter" was declared but never referenced

  	unsigned long counter = 0,counter2 = 0;
  	                          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp",1563  Warning[Pe177]: 
          variable "counter2" was declared but never referenced

  static uint8_t beeper_cnt;
                 ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp",451  Warning[Pe177]: 
          variable "beeper_cnt" was declared but never referenced

  static uint8_t check_beeper_cnt;
                 ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp",452  Warning[Pe177]: 
          variable "check_beeper_cnt" was declared but never referenced

   setTouchBound(gCfgItems.touch_adj_xMin, gCfgItems.touch_adj_xMax, gCfgItems.touch_adj_yMax, gCfgItems.touch_adj_yMin);
   ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp",241  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

  		if(filesize_end < filesize)
  		^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Src\main.cpp",1536  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   1564          	
   1565          //	printf("Check SD\n");
   1566          	//f_mount(0, &fs);	
   1567          	strcat(oldname,SD_Path);
   \   00000018   0x....             LDR.N    R4,??DataTable15_44
   \   0000001A   0x4621             MOV      R1,R4
   \   0000001C   0xA809             ADD      R0,SP,#+36
   \   0000001E   0x.... 0x....      BL       strcat
   1568          	strcat(oldname,firmware_file);
   \   00000022   0x....             LDR.N    R5,??DataTable15_41
   \   00000024   0x6869             LDR      R1,[R5, #+4]
   \   00000026   0x.... 0x....      BL       strcat
   1569          	//f_mount(&fs,(TCHAR const*)SD_Path, 0);	
   1570          	if ((r = f_open(&fsrc, oldname, FA_READ|FA_WRITE)) == FR_OK)
   \   0000002A   0x....             LDR.N    R6,??DataTable15_40
   \   0000002C   0x2203             MOVS     R2,#+3
   \   0000002E   0xA909             ADD      R1,SP,#+36
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       f_open
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD115             BNE.N    ??check_sd_firmware_0
   1571          	{
   1572          		fileSize = fsrc.fsize;
   \   0000003A   0xF8D6 0x020C      LDR      R0,[R6, #+524]
   \   0000003E   0x6028             STR      R0,[R5, #+0]
   1573          		
   1574          		mksProgram();
   \   00000040   0x.... 0x....      BL       _Z10mksProgramv
   1575          		f_close(&fsrc);
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0x.... 0x....      BL       f_close
   1576          		//if(SDPROTECT == SD_UNLOCK)	//–¥±£ª§
   1577          		{
   1578          			strcat(newname,SD_Path);
   \   0000004A   0x4621             MOV      R1,R4
   \   0000004C   0xA801             ADD      R0,SP,#+4
   \   0000004E   0x.... 0x....      BL       strcat
   1579          			strcat(newname,firmware_old);
   \   00000052   0x68A9             LDR      R1,[R5, #+8]
   \   00000054   0x.... 0x....      BL       strcat
   1580          			r = f_unlink(newname);
   \   00000058   0xA801             ADD      R0,SP,#+4
   \   0000005A   0x.... 0x....      BL       f_unlink
   1581          			r = f_rename(oldname, newname);
   \   0000005E   0xA901             ADD      R1,SP,#+4
   \   00000060   0xA809             ADD      R0,SP,#+36
   \   00000062   0x.... 0x....      BL       f_rename
   1582          		}
   1583          		//BootLoaderJump(USER_FLASH_START,msp,reset);
   1584          			
   1585          	}
   1586          	else
   1587          	{
   1588          		//msp = *((uint32_t *)(USER_FLASH_START));
   1589          		//reset = *((uint32_t *)(USER_FLASH_START+4));
   1590          		//BootLoaderJump(USER_FLASH_START,msp,reset);
   1591          	}
   1592          }
   \                     ??check_sd_firmware_0: (+1)
   \   00000066   0xB012             ADD      SP,SP,#+72
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   0x........         DC32     echomagic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \   00000000   0x422281B4         DC32     0x422281b4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \   00000000   0x........         DC32     logo_tick1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \   00000000   0x........         DC32     htim3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \   00000000   0x........         DC32     htim1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \   00000000   0x40012C34         DC32     0x40012c34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \   00000000   0x40000440         DC32     0x40000440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \   00000000   0x........         DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \   00000000   0x........         DC32     htim4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \   00000000   0x........         DC32     uhADCxConvertedValue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \   00000000   0x........         DC32     hadc1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \   00000000   0x........         DC32     gCfgItems

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \   00000000   0x42228130         DC32     0x42228130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \   00000000   0x........         DC32     card

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \   00000000   0x........         DC32     GUI_FontHZ_fontHz14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_19:
   \   00000000   0x404E0000         DC32     0x404e0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_20:
   \   00000000   0x422381A8         DC32     0x422381a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_21:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_22:
   \   00000000   0x........         DC32     pause_from_high_level

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_23:
   \   00000000   0x42210108         DC32     0x42210108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_24:
   \   00000000   0x42220194         DC32     0x42220194

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_25:
   \   00000000   0x42230118         DC32     0x42230118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_26:
   \   00000000   0x........         DC32     disp_state

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_27:
   \   00000000   0x........         DC32     common_menu

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_28:
   \   00000000   0x42218188         DC32     0x42218188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_29:
   \   00000000   0x........         DC32     mksReprint

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_30:
   \   00000000   0x........         DC32     print_job_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_31:
   \   00000000   0x........         DC32     from_flash_pic

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_32:
   \   00000000   0x........         DC32     flash_preview_begin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_33:
   \   00000000   0x........         DC32     default_preview_flg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_34:
   \   00000000   0x42230180         DC32     0x42230180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_35:
   \   00000000   0x42218184         DC32     0x42218184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_36:
   \   00000000   0x42210180         DC32     0x42210180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_37:
   \   00000000   0x4222818C         DC32     0x4222818c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_38:
   \   00000000   0x4222018C         DC32     0x4222018c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_39:
   \   00000000   0x........         DC32     barString

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_40:
   \   00000000   0x........         DC32     fsrc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_41:
   \   00000000   0x........         DC32     fileSize

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_42:
   \   00000000   0x42C80000         DC32     0x42c80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_43:
   \   00000000   0x40133333         DC32     0x40133333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_44:
   \   00000000   0x........         DC32     SD_Path

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "mksRobinNano start\\n">`:
   \   00000000   0x6D 0x6B          DC8 "mksRobinNano start\012"
   \              0x73 0x52    
   \              0x6F 0x62    
   \              0x69 0x6E    
   \              0x4E 0x61    
   \              0x6E 0x6F    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EPR_END_ADDR:">`:
   \   00000000   0x45 0x50          DC8 "EPR_END_ADDR:"
   \              0x52 0x5F    
   \              0x45 0x4E    
   \              0x44 0x5F    
   \              0x41 0x44    
   \              0x44 0x52    
   \              0x3A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Updating">`:
   \   00000000   0x55 0x70          DC8 "Updating"
   \              0x64 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SD ERR">`:
   \   00000000   0x53 0x44          DC8 "SD ERR"
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "100%">`:
   \   00000000   0x31 0x30          DC8 "100%"
   \              0x30 0x25    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Robin_nano_boot.bin">`:
   \   00000000   0x52 0x6F          DC8 "Robin_nano_boot.bin"
   \              0x62 0x69    
   \              0x6E 0x5F    
   \              0x6E 0x61    
   \              0x6E 0x6F    
   \              0x5F 0x62    
   \              0x6F 0x6F    
   \              0x74 0x2E    
   \              0x62 0x69    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ROBIN_NANO_BOOT.CUR">`:
   \   00000000   0x52 0x4F          DC8 "ROBIN_NANO_BOOT.CUR"
   \              0x42 0x49    
   \              0x4E 0x5F    
   \              0x4E 0x41    
   \              0x4E 0x4F    
   \              0x5F 0x42    
   \              0x4F 0x4F    
   \              0x54 0x2E    
   \              0x43 0x55    
   \              0x52 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {'\\000'}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {'\\000'}>_1`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   1593          #endif
   1594          
   1595          
   1596          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BufferSet(u8 *, u8, u16)
       8   Close_machine_display()
         8   -> GUI_Clear
         8   -> GUI_DispStringAt
         8   -> GUI_SetBkColor
         8   -> GUI_SetColor
         8   -> clear_cur_ui
       0   Error_Handler
       8   MX_NVIC_Init()
         0   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
      16   PowerOff_Filament_Check()
        16   -> CardReader::pauseSDPrint()
         0   -> Close_machine_display()
        16   -> Stopwatch::pause()
        16   -> clear_cur_ui
        16   -> draw_printing
        16   -> stop_print_time
      88   SystemClock_Config()
        88   -> Error_Handler
        88   -> HAL_NVIC_SetPriority
        88   -> HAL_RCCEx_PeriphCLKConfig
        88   -> HAL_RCC_ClockConfig
        88   -> HAL_RCC_GetHCLKFreq
        88   -> HAL_RCC_OscConfig
        88   -> HAL_SYSTICK_CLKSourceConfig
        88   -> HAL_SYSTICK_Config
      88   check_sd_firmware()
        88   -> __aeabi_memclr4
        88   -> f_close
        88   -> f_open
        88   -> f_rename
        88   -> f_unlink
        88   -> mksProgram()
        88   -> strcat
      40   main()
        40   -> AT24CXX_Init
        40   -> AT24CXX_Write
        40   -> CardReader::initsd()
        40   -> CardReader::mksConfiguration()
        40   -> DMAx_Init
        40   -> DRAW_LOGO
        40   -> Error_Handler
        40   -> GUI_Init
        40   -> GUI_SetFont
        40   -> GUI_UC_SetEncodeUTF8
        40   -> HAL_ADC_Start_DMA
        40   -> HAL_Init
        40   -> HAL_NVIC_DisableIRQ
        40   -> HAL_TIM_Base_Start_IT
        40   -> HAL_TIM_PWM_Start
        40   -> MX_ADC1_Init
        40   -> MX_DMA_Init
        40   -> MX_GPIO_Init
        40   -> MX_NVIC_Init()
        40   -> MX_SPI2_Init
        40   -> MX_TIM1_Init
        40   -> MX_TIM2_Init
        40   -> MX_TIM3_Init
        40   -> MX_TIM4_Init
        40   -> MX_USART3_UART_Init
        40   -> NVIC_SetVectorTable
        40   -> SD_Init
        40   -> SPI_Cmd
        40   -> SPI_FLASH_BufferRead
        40   -> SystemClock_Config()
        40   -> USARTClass::begin(uint32_t)
        40   -> USARTClass::write(uint8_t)
        40   -> __aeabi_d2uiz
        40   -> __aeabi_dadd
        40   -> __aeabi_ddiv
        40   -> __aeabi_dmul
        40   -> __aeabi_ui2d
        40   -> check_sd_firmware()
        40   -> disp_language_init()
        40   -> draw_Hardwaretest
        40   -> getTick
        40   -> gui_view_init
        40   -> init_win_id
        40   -> loop
        40   -> mksHardwareTest
        40   -> mks_initPrint
        40   -> mks_rePrintCheck
        40   -> mkstft_ui_init
        40   -> serial_echopair_P(char const *, int)
        40   -> serialprintPGM(char const *)
        40   -> setTouchBound
        40   -> setup
        40   -> wifi_init()
       0   mksBeeperAlarm()
      32   mksProgram()
        32   -> BufferSet(u8 *, u8, u16)
        32   -> GUI_Clear
        32   -> GUI_DispStringAt
        32   -> GUI_FillRect
         0   -> HAL_Delay
        32   -> STMFLASH_Write
        32   -> __aeabi_d2iz
        32   -> __aeabi_dmul
        32   -> __aeabi_f2d
        32   -> __aeabi_f2iz
        32   -> __aeabi_fdiv
        32   -> __aeabi_fmul
        32   -> __aeabi_ui2f
        32   -> f_read
       8   serialprintPGM(char const *)
         8   -> USARTClass::write(uint8_t)
      20   testAllStepAndMosFET()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "100%">
      16  ?<Constant "EPR_END_ADDR:">
      20  ?<Constant "ROBIN_NANO_BOOT.CUR">
      20  ?<Constant "Robin_nano_boot.bin">
       8  ?<Constant "SD ERR">
      12  ?<Constant "Updating">
      20  ?<Constant "mksRobinNano start\n">
      32  ?<Constant {'\000'}>
      32  ?<Constant {'\000'}>_1
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_21
       4  ??DataTable15_22
       4  ??DataTable15_23
       4  ??DataTable15_24
       4  ??DataTable15_25
       4  ??DataTable15_26
       4  ??DataTable15_27
       4  ??DataTable15_28
       4  ??DataTable15_29
       4  ??DataTable15_3
       4  ??DataTable15_30
       4  ??DataTable15_31
       4  ??DataTable15_32
       4  ??DataTable15_33
       4  ??DataTable15_34
       4  ??DataTable15_35
       4  ??DataTable15_36
       4  ??DataTable15_37
       4  ??DataTable15_38
       4  ??DataTable15_39
       4  ??DataTable15_4
       4  ??DataTable15_40
       4  ??DataTable15_41
       4  ??DataTable15_42
       4  ??DataTable15_43
       4  ??DataTable15_44
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       4  BeeperFreq
      16  BufferSet(u8 *, u8, u16)
      58  Close_machine_display()
       4  Data
       4  EraseCounter
       2  Error_Handler
      70  MX_NVIC_Init()
       4  NbrOfPage
     970  PowerOff_Filament_Check()
     156  SystemClock_Config()
    1076  barString
          bufCmp
          res
          progressBar
          percentBar
          buffer
          progCnt
          Address
          br
          msp
          reset
          hlfP
       1  beeper_flg
       4  bw
     106  check_sd_firmware()
     556  fdst
      12  fileSize
          firmware_file
          firmware_old
       1  first_time
     556  fsrc
      32  key
       4  logo_tick1
       4  logo_tick2
     666  main()
     166  mksBeeperAlarm()
     418  mksProgram()
      60  pause_from_high_level
          poweroff_det_flg
          poweroff_det_low_flg
          poweroff_det_high_flg
          filament_det1_flg
          filament_det1_low_flg
          filament_det1_high_flg
          filament_det1_check
          filament_det2_flg
          filament_det2_low_flg
          filament_det2_high_flg
          filament_det2_check
          BeeperCnt
          mksBpAlrmEn
          beep_pwdet
          beep_mtdet1
          beep_mtdet2
          poweroff_det_cnt
          poweroff_det_low_cnt
          poweroff_det_high_cnt
          filament_det1_cnt
          filament_det1_low_cnt
          filament_det1_high_cnt
          filament_det2_cnt
          filament_det2_low_cnt
          filament_det2_high_cnt
          delaycnt
      28  serialprintPGM(char const *)
     156  testAllStepAndMosFET()
       4  tms
       1  -- Other

 
 1 201 bytes in section .bss
 1 125 bytes in section .data
   105 bytes in section .rodata
 3 056 bytes in section .text
 
 3 028 bytes of CODE  memory (+ 28 bytes shared)
   104 bytes of CONST memory (+  1 byte  shared)
 2 326 bytes of DATA  memory

Errors: none
Warnings: 121
