###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:53
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTVIEW_DeleteRow.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTVIEW_DeleteRow.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\LISTVIEW_DeleteRow.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LISTVIEW_DeleteRow.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTVIEW_DeleteRow.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LISTVIEW_DeleteRow.c
     16          Purpose     : Implementation of LISTVIEW_DeleteRow
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "LISTVIEW_Private.h"
     21          
     22          #if GUI_WINSUPPORT
     23          
     24          /*********************************************************************
     25          *
     26          *       Static routines
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       _InvalidateRowAndBelow
     33          */

   \                                 In section .text, align 2, keep-with-next
     34          static void _InvalidateRowAndBelow(LISTVIEW_Handle hObj, LISTVIEW_Obj* pObj, int Sel) {
   \                     _InvalidateRowAndBelow: (+1)
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x0017             MOVS     R7,R2
     35            if (Sel >= 0) {
   \   0000000A   0xD419             BMI.N    ??_InvalidateRowAndBelow_0
     36              GUI_RECT Rect;
     37              int HeaderHeight, RowDistY;
     38              HeaderHeight = HEADER_GetHeight(pObj->hHeader);
   \   0000000C   0xF9B6 0x0028      LDRSH    R0,[R6, #+40]
   \   00000010   0x.... 0x....      BL       HEADER_GetHeight
   \   00000014   0x4680             MOV      R8,R0
     39              RowDistY     = LISTVIEW__GetRowDistY(pObj);
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x.... 0x....      BL       LISTVIEW__GetRowDistY
   \   0000001C   0x4605             MOV      R5,R0
     40              WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
     41              Rect.y0 += HeaderHeight + (Sel - pObj->ScrollStateV.v) * RowDistY;
   \   00000026   0xF9BD 0x0002      LDRSH    R0,[SP, #+2]
   \   0000002A   0x4440             ADD      R0,R8,R0
   \   0000002C   0x6EF1             LDR      R1,[R6, #+108]
   \   0000002E   0x1A79             SUBS     R1,R7,R1
   \   00000030   0xFB05 0x0001      MLA      R0,R5,R1,R0
   \   00000034   0xF8AD 0x0002      STRH     R0,[SP, #+2]
     42              WM_InvalidateRect(hObj, &Rect);
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       WM_InvalidateRect
     43            }
     44          }
   \                     ??_InvalidateRowAndBelow_0: (+1)
   \   00000040   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}  ;; return
     45          
     46          /*********************************************************************
     47          *
     48          *       Public routines
     49          *
     50          **********************************************************************
     51          */
     52          /*********************************************************************
     53          *
     54          *       LISTVIEW_DeleteRow
     55          */

   \                                 In section .text, align 2, keep-with-next
     56          void LISTVIEW_DeleteRow(LISTVIEW_Handle hObj, unsigned Index) {
   \                     LISTVIEW_DeleteRow: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     57            if (hObj) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD047             BEQ.N    ??LISTVIEW_DeleteRow_0
     58              LISTVIEW_Obj* pObj;
     59              unsigned NumRows;
     60              WM_LOCK();
     61              pObj = LISTVIEW_H2P(hObj);
   \   0000000C   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000010   0x4606             MOV      R6,R0
     62              NumRows = GUI_ARRAY_GetNumItems(&pObj->RowArray);
     63              if (Index < NumRows) {
   \   00000012   0xF106 0x002A      ADD      R0,R6,#+42
   \   00000016   0x.... 0x....      BL       GUI_ARRAY_GetNumItems
   \   0000001A   0x4285             CMP      R5,R0
   \   0000001C   0xD23E             BCS.N    ??LISTVIEW_DeleteRow_0
     64                unsigned NumColumns, i;
     65                GUI_ARRAY* pRow;
     66                pRow = (GUI_ARRAY*)GUI_ARRAY_GetpItem(&pObj->RowArray, Index);
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0xF106 0x002A      ADD      R0,R6,#+42
   \   00000024   0x.... 0x....      BL       GUI_ARRAY_GetpItem
   \   00000028   0x4607             MOV      R7,R0
     67                /* Delete attached info items */
     68                NumColumns = GUI_ARRAY_GetNumItems(pRow);
   \   0000002A   0x.... 0x....      BL       GUI_ARRAY_GetNumItems
   \   0000002E   0x4680             MOV      R8,R0
     69                for (i = 0; i < NumColumns; i++) {
   \   00000030   0xF04F 0x0900      MOV      R9,#+0
   \   00000034   0xE00B             B.N      ??LISTVIEW_DeleteRow_1
     70                  LISTVIEW_ITEM * pItem;
     71                  pItem = (LISTVIEW_ITEM *)GUI_ARRAY_GetpItem(pRow, i);
   \                     ??LISTVIEW_DeleteRow_2: (+1)
   \   00000036   0x4649             MOV      R1,R9
   \   00000038   0x4638             MOV      R0,R7
   \   0000003A   0x.... 0x....      BL       GUI_ARRAY_GetpItem
     72                  if (pItem->hItemInfo) {
   \   0000003E   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD001             BEQ.N    ??LISTVIEW_DeleteRow_3
     73                    GUI_ALLOC_Free(pItem->hItemInfo);
   \   00000046   0x.... 0x....      BL       GUI_ALLOC_Free
     74                  }
     75                }
   \                     ??LISTVIEW_DeleteRow_3: (+1)
   \   0000004A   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??LISTVIEW_DeleteRow_1: (+1)
   \   0000004E   0x45C1             CMP      R9,R8
   \   00000050   0xD3F1             BCC.N    ??LISTVIEW_DeleteRow_2
     76                /* Delete row */
     77                GUI_ARRAY_Delete(pRow);
   \   00000052   0x4638             MOV      R0,R7
   \   00000054   0x.... 0x....      BL       GUI_ARRAY_Delete
     78                GUI_ARRAY_DeleteItem(&pObj->RowArray, Index);
   \   00000058   0x4629             MOV      R1,R5
   \   0000005A   0xF106 0x002A      ADD      R0,R6,#+42
   \   0000005E   0x.... 0x....      BL       GUI_ARRAY_DeleteItem
     79                /* Adjust properties */
     80                if (pObj->Sel == (signed int)Index) {
   \   00000062   0x6D70             LDR      R0,[R6, #+84]
   \   00000064   0x42A8             CMP      R0,R5
   \   00000066   0xD102             BNE.N    ??LISTVIEW_DeleteRow_4
     81                  pObj->Sel = -1;
   \   00000068   0xF04F 0x30FF      MOV      R0,#-1
   \   0000006C   0x6570             STR      R0,[R6, #+84]
     82                }
     83                if (pObj->Sel > (signed int)Index) {
   \                     ??LISTVIEW_DeleteRow_4: (+1)
   \   0000006E   0x6D70             LDR      R0,[R6, #+84]
   \   00000070   0x4285             CMP      R5,R0
   \   00000072   0xDA01             BGE.N    ??LISTVIEW_DeleteRow_5
     84                  pObj->Sel--;
   \   00000074   0x1E40             SUBS     R0,R0,#+1
   \   00000076   0x6570             STR      R0,[R6, #+84]
     85                }
     86                if (LISTVIEW__UpdateScrollParas(hObj, pObj)) {
   \                     ??LISTVIEW_DeleteRow_5: (+1)
   \   00000078   0x4631             MOV      R1,R6
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0x.... 0x....      BL       LISTVIEW__UpdateScrollParas
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD005             BEQ.N    ??LISTVIEW_DeleteRow_6
     87                  LISTVIEW__InvalidateInsideArea(hObj, pObj);
   \   00000084   0x4631             MOV      R1,R6
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   0000008C   0x.... 0x....      B.W      LISTVIEW__InvalidateInsideArea
     88                } else {
     89                  _InvalidateRowAndBelow(hObj, pObj, Index);
   \                     ??LISTVIEW_DeleteRow_6: (+1)
   \   00000090   0x462A             MOV      R2,R5
   \   00000092   0x4631             MOV      R1,R6
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0xE8BD 0x43F8      POP      {R3-R9,LR}
   \   0000009A   0x....             B.N      _InvalidateRowAndBelow
     90                }
     91              }
     92              WM_UNLOCK();
     93            }
     94          }
   \                     ??LISTVIEW_DeleteRow_0: (+1)
   \   0000009C   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
     95          
     96          
     97          #else                            /* Avoid problems with empty object modules */
     98            void LISTVIEW_DeleteRow_C(void);
     99            void LISTVIEW_DeleteRow_C(void) {}
    100          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   LISTVIEW_DeleteRow
        32   -> GUI_ALLOC_Free
        32   -> GUI_ALLOC_h2p
        32   -> GUI_ARRAY_Delete
        32   -> GUI_ARRAY_DeleteItem
        32   -> GUI_ARRAY_GetNumItems
        32   -> GUI_ARRAY_GetpItem
         0   -> LISTVIEW__InvalidateInsideArea
        32   -> LISTVIEW__UpdateScrollParas
         0   -> _InvalidateRowAndBelow
      32   _InvalidateRowAndBelow
        32   -> HEADER_GetHeight
        32   -> LISTVIEW__GetRowDistY
        32   -> WM_GetInsideRectExScrollbar
        32   -> WM_InvalidateRect


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     160  LISTVIEW_DeleteRow
      68  _InvalidateRowAndBelow

 
 228 bytes in section .text
 
 228 bytes of CODE memory

Errors: none
Warnings: none
