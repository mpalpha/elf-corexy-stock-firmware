###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCDL0Mag.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCDL0Mag.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\LCDL0Mag.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LCDL0Mag.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCDL0Mag.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCD.c
     16          Purpose     : Link between GUI and LCD_L0
     17                        Performs most of the clipping.
     18          ---------------------------END-OF-HEADER------------------------------
     19          */
     20          
     21          #include <stddef.h>             /* needed for definition of NULL */
     22          #include "GUI_Private.h"
     23          #include "GUIDebug.h"
     24          #include "LCD_Private.h"        /* private modul definitions & config */
     25          
     26          #if LCD_XMAG > 2
     27            #error Not yet supported
     28          #endif
     29          
     30          #if LCD_XMAG == 2
     31          
     32          /*********************************************************************
     33          *
     34          *       Static data
     35          *
     36          **********************************************************************
     37          */
     38          
     39          static const U8 abData12[16] = {
     40            0x0, 0x3, 0xc, 0xf, 0x30, 0x33, 0x3c, 0x3f, 0xC0, 0xC3, 0xCc, 0xcf, 0xf0, 0xf3, 0xfc, 0xff
     41          };
     42          
     43          static const U8 abData22[16] = {
     44            0x0,   0x5, 0x5*2, 0x5*3,
     45            0x50*1+0x0, 0x50*1+0x5, 0x50*1+0x5*2, 0x50*1+0x5*3,
     46            0x50*2+0x0, 0x50*2+0x5, 0x50*2+0x5*2, 0x50*2+0x5*3,
     47            0x50*3+0x0, 0x50*3+0x5, 0x50*3+0x5*2, 0x50*3+0x5*3
     48          };
     49          
     50          static const U8 abData32[16] = {
     51            0x0, 0x11, 0x22, 0x33,
     52            0x44, 0x55, 0x66, 0x77,
     53            0x88, 0x99, 0xaa, 0xbb,
     54            0xcc, 0xdd, 0xee, 0xff
     55          };
     56          
     57          /*********************************************************************
     58          *
     59          *       Static code
     60          *
     61          **********************************************************************
     62          */
     63          /*********************************************************************
     64          *
     65          *       _DrawBitline
     66          */
     67          static void _DrawBitline(int x0, int y0, int xsize, int BPP, const U8*pData, int Diff, const LCD_PIXELINDEX* pTrans) {
     68            union {
     69              U8  ab[100];     /* Byte Buffer */
     70              U16 au16[50];    /* Word Buffer */
     71            } Buffer;
     72            int i;
     73            int NumPixels;
     74            int NumPixelsMax = sizeof(Buffer.ab)*8/BPP/LCD_XMAG;
     75            while (xsize >0) {
     76              int iOff =0;
     77              NumPixels = (xsize < NumPixelsMax) ? xsize : NumPixelsMax;
     78              switch (BPP) {
     79              case 1:
     80                for (i=0; i<NumPixels; i+=8) {
     81                  /* load the byte */
     82                  U16 Data;
     83                  if (Diff) {
     84                    Data = ((*pData) << 8) | (*(pData+1));
     85                    Data >>= 8-Diff;
     86                    Data &= 0xff;
     87                  } else {
     88                    Data = *pData;
     89                  }
     90                  pData++;
     91                  Buffer.ab[iOff++] = abData12[Data>>4]; 
     92                  Buffer.ab[iOff++] = abData12[Data&15]; 
     93                }
     94                break;
     95              case 2:
     96                for (i=0; i<NumPixels; i+=4) {
     97                  /* load the byte */
     98                  U16 Data;
     99                  if (Diff) {
    100                    Data = ((*pData) << 8) | (*(pData+1));
    101                    Data >>= 8-(Diff<<1);
    102                    Data &= 0xff;
    103                  } else {
    104                    Data = *pData;
    105                  }
    106                  pData++;
    107                  Buffer.ab[iOff++] = abData22[Data>>4]; 
    108                  Buffer.ab[iOff++] = abData22[Data&15]; 
    109                }
    110                break;
    111              case 4:
    112                for (i=0; i<NumPixels; i+=2) {
    113                  /* load the byte */
    114                  U16 Data;
    115                  if (Diff) {
    116                    Data = ((*pData) << 8) | (*(pData+1));
    117                    Data >>= 8-(Diff<<2);
    118                    Data &= 0xff;
    119                  } else {
    120                    Data = *pData;
    121                  }
    122                  pData++;
    123                  Buffer.ab[iOff++] = abData32[Data>>4]; 
    124                  Buffer.ab[iOff++] = abData32[Data&15]; 
    125                }
    126                break;
    127              case 8:
    128                for (i=0; i<NumPixels; i++) {
    129                  #if LCD_XMAG > 2
    130                    GUI_MEMSET (&Buffer.ab[i*LCD_XMAG], *(pData+i), LCD_XMAG);
    131                  #else
    132                    Buffer.ab[i*LCD_XMAG] = Buffer.ab[i*LCD_XMAG+1] = *pData++; 
    133                  #endif
    134                }
    135                break;
    136              case 16:
    137                for (i=0; i<NumPixels; i++) {
    138                  #if LCD_XMAG > 2
    139                    GUI_MEMSET (&Buffer.ab[i*LCD_XMAG], *(pData+i), LCD_XMAG);
    140                  #else
    141                    Buffer.au16[i*LCD_XMAG] = Buffer.au16[i*LCD_XMAG+1] = *(U16*)pData;
    142                    pData += 2; /* Move to next word */
    143                  #endif
    144                }
    145                break;
    146              }
    147              LCD_L0_DrawBitmap(x0 + Diff * LCD_XMAG, y0, NumPixels * LCD_XMAG, LCD_YMAG, BPP, 0, Buffer.ab, 0, pTrans);
    148              x0 += NumPixels*LCD_XMAG;
    149              xsize -= NumPixels;
    150            }
    151          }
    152          
    153          /*********************************************************************
    154          *
    155          *       Public code
    156          *
    157          **********************************************************************
    158          */
    159          /*********************************************************************
    160          *
    161          *       LCD_L0_MAG_DrawBitmap
    162          */
    163          void LCD_L0_MAG_DrawBitmap(int x0, int y0, int xsize, int ysize,
    164                                     int BPP, int BytesPerLine, const U8* pData, int Diff,
    165                                     const LCD_PIXELINDEX* pTrans)
    166          {
    167            int iLine;
    168            y0 *= LCD_YMAG;
    169            x0 *= LCD_XMAG;
    170            for (iLine = 0; iLine < ysize; iLine++) {
    171              #if LCD_XMAG == 1
    172                LCD_L0_DrawBitmap(x0, y0, xsize, LCD_YMAG, BPP, 0, pData, Diff, pTrans);
    173              #else
    174                _DrawBitline(x0, y0, xsize, BPP, pData, Diff, pTrans);
    175              #endif
    176              y0+= LCD_YMAG;
    177              pData += BytesPerLine;
    178            }
    179          }
    180          
    181          /*********************************************************************
    182          *
    183          *       LCD_L0_MAG_DrawHLine
    184          */
    185          void LCD_L0_MAG_DrawHLine(int x0, int y0,  int x1) {
    186            x0 *= LCD_XMAG;
    187            x1 = x1*(LCD_XMAG) + LCD_XMAG-1;
    188            y0 *= LCD_YMAG;
    189            LCD_L0_FillRect(x0, y0, x1, y0 + LCD_YMAG-1);
    190          }
    191          
    192          /*********************************************************************
    193          *
    194          *       LCD_L0_MAG_DrawVLine
    195          */
    196          void LCD_L0_MAG_DrawVLine(int x0 , int y0,  int y1) {
    197            y0 *= LCD_YMAG;
    198            y1 = y1*(LCD_YMAG) + LCD_YMAG-1;
    199            x0 *= LCD_XMAG;
    200            LCD_L0_FillRect(x0, y0, x0 + LCD_XMAG-1, y1);
    201          }
    202          
    203          /*********************************************************************
    204          *
    205          *       LCD_L0_MAG_FillRect
    206          */
    207          void LCD_L0_MAG_FillRect(int x0, int y0, int x1, int y1) {
    208            y0 *= LCD_YMAG;
    209            y1 = y1*(LCD_YMAG) + LCD_YMAG-1;
    210            x0 *= LCD_XMAG;
    211            x1 = x1*(LCD_XMAG) + LCD_XMAG-1;
    212            LCD_L0_FillRect(x0, y0, x1, y1);
    213          }
    214          
    215          /*********************************************************************
    216          *
    217          *       LCD_L0_MAG_GetPixelIndex
    218          */
    219          unsigned int LCD_L0_MAG_GetPixelIndex(int x, int y) {
    220            return LCD_L0_GetPixelIndex(x* LCD_XMAG, y* LCD_YMAG);
    221          }
    222          
    223          /*********************************************************************
    224          *
    225          *       LCD_L0_MAG_SetPixelIndex
    226          */
    227          void LCD_L0_MAG_SetPixelIndex(int x, int y, int ColorIndex) {
    228            int ix, iy;
    229            y *= LCD_YMAG;
    230            x *= LCD_XMAG;
    231            for (iy=0; iy< LCD_YMAG; iy++) {
    232              for (ix=0; ix< LCD_XMAG; ix++) {
    233                LCD_L0_SetPixelIndex(x+ix, y+iy, ColorIndex);
    234              }
    235            }
    236          }
    237          
    238          /*********************************************************************
    239          *
    240          *       LCD_L0_MAG_XorPixel
    241          */
    242          void LCD_L0_MAG_XorPixel(int x, int y) {
    243            int ix, iy;
    244            y *= LCD_YMAG;
    245            x *= LCD_XMAG;
    246            for (iy=0; iy< LCD_YMAG; iy++) {
    247              for (ix=0; ix< LCD_XMAG; ix++) {
    248                LCD_L0_XorPixel(x+ix, y+iy);
    249              }
    250            }
    251          }
    252          
    253          #else
    254          
    255          void LCDL0Mag_c(void);

   \                                 In section .text, align 2, keep-with-next
    256          void LCDL0Mag_c(void) { } /* avoid empty object files */
   \                     LCDL0Mag_c: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    257          
    258          #endif
    259          
    260          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LCDL0Mag_c


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  LCDL0Mag_c

 
 2 bytes in section .text
 
 2 bytes of CODE memory

Errors: none
Warnings: none
