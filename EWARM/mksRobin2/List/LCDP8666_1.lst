###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:45
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\ConvertColor\LCDP8666_1.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\ConvertColor\LCDP8666_1.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\LCDP8666_1.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LCDP8666_1.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\ConvertColor\LCDP8666_1.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCDP8666_1.C
     16          Purpose     : Color conversion routines for 86661 mode
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "LCD_Protected.h"    /* inter modul definitions */
     21          
     22          /*********************************************************************
     23          *
     24          *       Public code,
     25          *
     26          **********************************************************************
     27          */
     28          /*********************************************************************
     29          *
     30          *       LCD_Color2Index_8666_1
     31          */

   \                                 In section .text, align 2, keep-with-next
     32          unsigned LCD_Color2Index_8666_1(LCD_COLOR Color) {
     33            int r, g, b, Index;
     34            r = Color & 255;
   \                     LCD_Color2Index_8666_1: (+1)
   \   00000000   0xB2C1             UXTB     R1,R0
     35            g = (Color >> 8) & 255;
   \   00000002   0xF3C0 0x2207      UBFX     R2,R0,#+8,#+8
     36            b = Color >> 16;
   \   00000006   0x0C00             LSRS     R0,R0,#+16
     37          /* Check if image is a gray scale ... */
     38          	if ((r == g) && (g == b)) {
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD108             BNE.N    ??LCD_Color2Index_8666_1_0
   \   0000000C   0x4282             CMP      R2,R0
   \   0000000E   0xD106             BNE.N    ??LCD_Color2Index_8666_1_0
     39              return 120 + (r + 8) / 17;  /* Convert into colors from 120 - 135 */
   \   00000010   0xF101 0x0008      ADD      R0,R1,#+8
   \   00000014   0x2111             MOVS     R1,#+17
   \   00000016   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000001A   0x3078             ADDS     R0,R0,#+120
   \   0000001C   0x4770             BX       LR
     40          	}
     41          /* Convert into the 6*6*6 colors ... */
     42            r = (r * 5 + 127) / 255;
     43            g = (g * 5 + 127) / 255;
     44            b = (b * 5 + 127) / 255;
     45            Index = r + 6 * g + 36 * b;
   \                     ??LCD_Color2Index_8666_1_0: (+1)
   \   0000001E   0xEB01 0x0181      ADD      R1,R1,R1, LSL #+2
   \   00000022   0x317F             ADDS     R1,R1,#+127
   \   00000024   0x23FF             MOVS     R3,#+255
   \   00000026   0xFB91 0xF1F3      SDIV     R1,R1,R3
   \   0000002A   0xEB02 0x0282      ADD      R2,R2,R2, LSL #+2
   \   0000002E   0x327F             ADDS     R2,R2,#+127
   \   00000030   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \   00000034   0xEB02 0x0342      ADD      R3,R2,R2, LSL #+1
   \   00000038   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   0000003C   0xEB00 0x0080      ADD      R0,R0,R0, LSL #+2
   \   00000040   0x307F             ADDS     R0,R0,#+127
   \   00000042   0x22FF             MOVS     R2,#+255
   \   00000044   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \   00000048   0xEB00 0x02C0      ADD      R2,R0,R0, LSL #+3
   \   0000004C   0xEB01 0x0082      ADD      R0,R1,R2, LSL #+2
     46            return (Index < 108) ? Index + 12 : Index + 28;
   \   00000050   0x286C             CMP      R0,#+108
   \   00000052   0xDA01             BGE.N    ??LCD_Color2Index_8666_1_1
   \   00000054   0x300C             ADDS     R0,R0,#+12
   \   00000056   0x4770             BX       LR
   \                     ??LCD_Color2Index_8666_1_1: (+1)
   \   00000058   0x301C             ADDS     R0,R0,#+28
   \   0000005A   0x4770             BX       LR               ;; return
     47          }
     48          
     49          /*********************************************************************
     50          *
     51          *       LCD_Index2Color_8666_1
     52          */

   \                                 In section .text, align 2, keep-with-next
     53          LCD_COLOR LCD_Index2Color_8666_1(int Index) {
   \                     LCD_Index2Color_8666_1: (+1)
   \   00000000   0xB410             PUSH     {R4}
     54            unsigned int r,g;
     55            U32 b;
     56            /* 16 Gray scale range ? */
     57            if ((Index >= 120) && (Index < 136)) {
   \   00000002   0xF1A0 0x0178      SUB      R1,R0,#+120
   \   00000006   0x2910             CMP      R1,#+16
   \   00000008   0xD203             BCS.N    ??LCD_Index2Color_8666_1_0
     58              return (U32)0x111111 * (U32)(Index - 120);
   \   0000000A   0x3878             SUBS     R0,R0,#+120
   \   0000000C   0x....             LDR.N    R1,??DataTable0  ;; 0x111111
   \   0000000E   0x4348             MULS     R0,R1,R0
   \   00000010   0xE020             B.N      ??LCD_Index2Color_8666_1_1
     59          	}
     60            if ((Index < 12) || (Index > 243)) {
   \                     ??LCD_Index2Color_8666_1_0: (+1)
   \   00000012   0xF1A0 0x010C      SUB      R1,R0,#+12
   \   00000016   0x29E8             CMP      R1,#+232
   \   00000018   0xD301             BCC.N    ??LCD_Index2Color_8666_1_2
     61              return 0;  /* Black for illegal indices */
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xE01A             B.N      ??LCD_Index2Color_8666_1_1
     62            }
     63            if (Index >= 120) {
   \                     ??LCD_Index2Color_8666_1_2: (+1)
   \   0000001E   0x2878             CMP      R0,#+120
   \   00000020   0xDB01             BLT.N    ??LCD_Index2Color_8666_1_3
     64              Index -= 28;
   \   00000022   0x381C             SUBS     R0,R0,#+28
   \   00000024   0xE000             B.N      ??LCD_Index2Color_8666_1_4
     65            } else {
     66              Index -= 12;
   \                     ??LCD_Index2Color_8666_1_3: (+1)
   \   00000026   0x380C             SUBS     R0,R0,#+12
     67            }
     68            r = (Index % 6) * (255 / 5);
     69            g = ((Index / 6) % 6) * (255 / 5);
   \                     ??LCD_Index2Color_8666_1_4: (+1)
   \   00000028   0x2106             MOVS     R1,#+6
   \   0000002A   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000002E   0x2233             MOVS     R2,#+51
   \   00000030   0x2306             MOVS     R3,#+6
   \   00000032   0x461C             MOV      R4,R3
   \   00000034   0xFB91 0xF4F4      SDIV     R4,R1,R4
   \   00000038   0xFB03 0x1414      MLS      R4,R3,R4,R1
   \   0000003C   0x4354             MULS     R4,R2,R4
     70            b = (Index / 36) * (255 / 5);
     71            return r + (g << 8) + ((U32)b << 16);
   \   0000003E   0xFB03 0x0111      MLS      R1,R3,R1,R0
   \   00000042   0x0223             LSLS     R3,R4,#+8
   \   00000044   0xFB02 0x3101      MLA      R1,R2,R1,R3
   \   00000048   0x2324             MOVS     R3,#+36
   \   0000004A   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \   0000004E   0x4350             MULS     R0,R2,R0
   \   00000050   0xEB01 0x4000      ADD      R0,R1,R0, LSL #+16
   \                     ??LCD_Index2Color_8666_1_1: (+1)
   \   00000054   0xBC10             POP      {R4}
   \   00000056   0x4770             BX       LR               ;; return
     72          }
     73          
     74          /*********************************************************************
     75          *
     76          *       LCD_GetIndexMask_8666_1
     77          */

   \                                 In section .text, align 2, keep-with-next
     78          unsigned LCD_GetIndexMask_8666_1(void) {
     79            return 0xff;
   \                     LCD_GetIndexMask_8666_1: (+1)
   \   00000000   0x20FF             MOVS     R0,#+255
   \   00000002   0x4770             BX       LR               ;; return
     80          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x00111111         DC32     0x111111
     81          
     82          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LCD_Color2Index_8666_1
       0   LCD_GetIndexMask_8666_1
       4   LCD_Index2Color_8666_1


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      92  LCD_Color2Index_8666_1
       4  LCD_GetIndexMask_8666_1
      88  LCD_Index2Color_8666_1

 
 188 bytes in section .text
 
 188 bytes of CODE memory

Errors: none
Warnings: none
