###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:13
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\EDITHex.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\EDITHex.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\EDITHex.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\EDITHex.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\EDITHex.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : EditHex
     16          Purpose     : Edit hexadecimal values
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <string.h>
     21          
     22          #include "EDIT.h"
     23          #include "GUIDebug.h"
     24          #include "GUI_Protected.h"
     25          #include "EDIT_Private.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *        Defaults for config switches
     32          *
     33          **********************************************************************
     34          */
     35          #ifndef EDIT_HEX_DIGITONLY
     36            #define EDIT_HEX_DIGITONLY     0
     37          #endif
     38          
     39          /*********************************************************************
     40          *
     41          *             Helpers
     42          *
     43          **********************************************************************
     44          */
     45          /*********************************************************************
     46          *
     47          *       _HexChar2Int
     48          */

   \                                 In section .text, align 2, keep-with-next
     49          static int _HexChar2Int(int Char) {
     50            if ((Char >= '0') && (Char <= '9'))
   \                     _HexChar2Int: (+1)
   \   00000000   0xF1A0 0x0130      SUB      R1,R0,#+48
   \   00000004   0x290A             CMP      R1,#+10
   \   00000006   0xD201             BCS.N    ??_HexChar2Int_0
     51              return Char - '0';
   \   00000008   0x3830             SUBS     R0,R0,#+48
   \   0000000A   0x4770             BX       LR
     52            Char &= ~0x20;
   \                     ??_HexChar2Int_0: (+1)
   \   0000000C   0xF020 0x0020      BIC      R0,R0,#0x20
     53            if ((Char >= 'A') && (Char <= 'F'))
   \   00000010   0xF1A0 0x0141      SUB      R1,R0,#+65
   \   00000014   0x2906             CMP      R1,#+6
   \   00000016   0xD201             BCS.N    ??_HexChar2Int_1
     54              return Char - 'A' + 10;
   \   00000018   0x3837             SUBS     R0,R0,#+55
   \   0000001A   0x4770             BX       LR
     55            return -1;
   \                     ??_HexChar2Int_1: (+1)
   \   0000001C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000020   0x4770             BX       LR               ;; return
     56          }
     57          
     58          /*********************************************************************
     59          *
     60          *       _UpdateBuffer
     61          */

   \                                 In section .text, align 2, keep-with-next
     62          static void _UpdateBuffer(EDIT_Handle hObj) {
   \                     _UpdateBuffer: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     63            char * s;
     64            EDIT_Obj * pObj;
     65            pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
   \   00000004   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000008   0x4604             MOV      R4,R0
     66            s = (char*) GUI_ALLOC_h2p(pObj->hpText);
   \   0000000A   0xF9B4 0x0028      LDRSH    R0,[R4, #+40]
   \   0000000E   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000012   0x9000             STR      R0,[SP, #+0]
     67            GUI_AddHex(pObj->CurrentValue, pObj->MaxLen, &s);
   \   00000014   0xAA00             ADD      R2,SP,#+0
   \   00000016   0x8D61             LDRH     R1,[R4, #+42]
   \   00000018   0xB2C9             UXTB     R1,R1
   \   0000001A   0x6BE0             LDR      R0,[R4, #+60]
   \   0000001C   0x.... 0x....      BL       GUI_AddHex
     68          }
   \   00000020   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     69          
     70          /*********************************************************************
     71          *
     72          *       _EditHex
     73          */

   \                                 In section .text, align 2, keep-with-next
     74          static void _EditHex(int Nibble, EDIT_Obj* pObj, EDIT_Handle hObj) {
   \                     _EditHex: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
   \   00000002   0x4603             MOV      R3,R0
   \   00000004   0x4610             MOV      R0,R2
     75            int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Nibble position */
   \   00000006   0xF9B1 0x202A      LDRSH    R2,[R1, #+42]
   \   0000000A   0x6C0C             LDR      R4,[R1, #+64]
   \   0000000C   0x1B12             SUBS     R2,R2,R4
   \   0000000E   0x1E52             SUBS     R2,R2,#+1
     76            U32 AndMask = ~(15     << (Pos << 2));
     77            U32 OrMask  =   Nibble << (Pos << 2);
     78            I32 Result  = pObj->CurrentValue & AndMask;
     79            Result     |= OrMask;
     80            EDIT_SetValue(hObj, Result);
   \   00000010   0x0092             LSLS     R2,R2,#+2
   \   00000012   0x6BC9             LDR      R1,[R1, #+60]
   \   00000014   0x240F             MOVS     R4,#+15
   \   00000016   0x4094             LSLS     R4,R4,R2
   \   00000018   0x43A1             BICS     R1,R1,R4
   \   0000001A   0xFA03 0xF202      LSL      R2,R3,R2
   \   0000001E   0x4311             ORRS     R1,R2,R1
   \   00000020   0xBC14             POP      {R2,R4}
   \   00000022   0x.... 0x....      B.W      EDIT_SetValue
     81          }
     82          
     83          /*********************************************************************
     84          *
     85          *       _GetCurrentNibble
     86          */
     87          #if EDIT_HEX_DIGITONLY
     88            static U8 _GetCurrentNibble(EDIT_Obj* pObj) {
     89              int Pos = pObj->MaxLen - pObj->CursorPos - 1;   /* Nibble position */
     90              U32 AndMask = 0xf << (Pos << 2);
     91              U8 Nibble = (pObj->CurrentValue & AndMask) >> (Pos << 2);
     92              return Nibble;
     93            }
     94          #endif
     95          
     96          /*********************************************************************
     97          *
     98          *       _GetNumDigits
     99          */

   \                                 In section .text, align 2, keep-with-next
    100          static int _GetNumDigits(U32 Value) {
    101            int Ret;
    102            for (Ret = 0; Value; Value >>= 4, Ret++);
   \                     _GetNumDigits: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xE001             B.N      ??_GetNumDigits_0
   \                     ??_GetNumDigits_1: (+1)
   \   00000004   0x0900             LSRS     R0,R0,#+4
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \                     ??_GetNumDigits_0: (+1)
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD1FB             BNE.N    ??_GetNumDigits_1
    103            return Ret;
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x4770             BX       LR               ;; return
    104          }
    105          
    106          /*********************************************************************
    107          *
    108          *       _AddPosition
    109          */

   \                                 In section .text, align 2, keep-with-next
    110          static void _AddPosition(EDIT_Obj* pObj, EDIT_Handle hObj, int Sign) {
   \                     _AddPosition: (+1)
   \   00000000   0xB43C             PUSH     {R2-R5}
   \   00000002   0x4603             MOV      R3,R0
   \   00000004   0x4608             MOV      R0,R1
    111            int Pos;
    112            U32 v;
    113            v = 1;
   \   00000006   0x2101             MOVS     R1,#+1
    114            Pos = pObj->MaxLen - pObj->CursorPos - 1;
   \   00000008   0xF9B3 0x402A      LDRSH    R4,[R3, #+42]
   \   0000000C   0x6C1D             LDR      R5,[R3, #+64]
   \   0000000E   0x1B64             SUBS     R4,R4,R5
   \   00000010   0x1E64             SUBS     R4,R4,#+1
   \   00000012   0xE000             B.N      ??_AddPosition_0
    115            while (Pos--) {
    116              v <<= 4;
   \                     ??_AddPosition_1: (+1)
   \   00000014   0x0109             LSLS     R1,R1,#+4
    117            }
   \                     ??_AddPosition_0: (+1)
   \   00000016   0x4625             MOV      R5,R4
   \   00000018   0x1E6C             SUBS     R4,R5,#+1
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD1FA             BNE.N    ??_AddPosition_1
    118            if (Sign < 0)
   \   0000001E   0x2A00             CMP      R2,#+0
   \   00000020   0xD501             BPL.N    ??_AddPosition_2
    119              v = ~v + 1;
   \   00000022   0x43C9             MVNS     R1,R1
   \   00000024   0x1C49             ADDS     R1,R1,#+1
    120            EDIT_SetValue(hObj, pObj->CurrentValue + v);
   \                     ??_AddPosition_2: (+1)
   \   00000026   0x6BDA             LDR      R2,[R3, #+60]
   \   00000028   0x1889             ADDS     R1,R1,R2
   \   0000002A   0xBC3C             POP      {R2-R5}
   \   0000002C   0x.... 0x....      B.W      EDIT_SetValue
    121          }
    122          
    123          /*********************************************************************
    124          *
    125          *             Handle input
    126          *
    127          **********************************************************************
    128          */
    129          /*********************************************************************
    130          *
    131          *       _AddKeyHex
    132          */

   \                                 In section .text, align 2, keep-with-next
    133          static void _AddKeyHex(EDIT_Handle hObj, int Key) {
   \                     _AddKeyHex: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    134            EDIT_Obj * pObj;
    135            pObj = EDIT_H2P(hObj); /* The GUI needs not to be locked here. This function is called only from EDIT_AddKey which has already locked the GUI */
   \   00000006   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000A   0x0006             MOVS     R6,R0
    136            if (pObj) {
   \   0000000C   0xD02D             BEQ.N    ??_AddKeyHex_0
    137              switch (Key) {
   \   0000000E   0x2D10             CMP      R5,#+16
   \   00000010   0xD017             BEQ.N    ??_AddKeyHex_1
   \   00000012   0xD31C             BCC.N    ??_AddKeyHex_2
   \   00000014   0x2D12             CMP      R5,#+18
   \   00000016   0xD00E             BEQ.N    ??_AddKeyHex_3
   \   00000018   0xD302             BCC.N    ??_AddKeyHex_4
   \   0000001A   0x2D13             CMP      R5,#+19
   \   0000001C   0xD005             BEQ.N    ??_AddKeyHex_5
   \   0000001E   0xE016             B.N      ??_AddKeyHex_2
    138                #if EDIT_HEX_DIGITONLY
    139                case GUI_KEY_UP:
    140                  {
    141                    int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
    142                    _EditHex(Nibble, pObj, hObj);
    143                  }
    144                  break;
    145                case GUI_KEY_DOWN:
    146                  {
    147                    int Nibble = (_GetCurrentNibble(pObj) + 1) & 15;
    148                    _EditHex(Nibble, pObj, hObj);
    149                  }
    150                  break;
    151                #else
    152                case GUI_KEY_UP:
    153                  _AddPosition(pObj, hObj, 1);
   \                     ??_AddKeyHex_4: (+1)
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0x4621             MOV      R1,R4
   \   00000024   0x.... 0x....      BL       _AddPosition
    154                  break;
   \   00000028   0xE01F             B.N      ??_AddKeyHex_0
    155                case GUI_KEY_DOWN:
    156                  _AddPosition(pObj, hObj, -1);
   \                     ??_AddKeyHex_5: (+1)
   \   0000002A   0xF04F 0x32FF      MOV      R2,#-1
   \   0000002E   0x4621             MOV      R1,R4
   \   00000030   0x.... 0x....      BL       _AddPosition
    157                  break;
   \   00000034   0xE019             B.N      ??_AddKeyHex_0
    158                #endif
    159                case GUI_KEY_RIGHT:
    160                  EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
   \                     ??_AddKeyHex_3: (+1)
   \   00000036   0x6C30             LDR      R0,[R6, #+64]
   \   00000038   0x1C41             ADDS     R1,R0,#+1
   \   0000003A   0x4630             MOV      R0,R6
   \   0000003C   0x.... 0x....      BL       EDIT__SetCursorPos
    161                  break;
   \   00000040   0xE013             B.N      ??_AddKeyHex_0
    162                case GUI_KEY_LEFT:
    163                  EDIT__SetCursorPos(pObj, pObj->CursorPos - 1);
   \                     ??_AddKeyHex_1: (+1)
   \   00000042   0x6C30             LDR      R0,[R6, #+64]
   \   00000044   0x1E41             SUBS     R1,R0,#+1
   \   00000046   0x4630             MOV      R0,R6
   \   00000048   0x.... 0x....      BL       EDIT__SetCursorPos
    164                  break;
   \   0000004C   0xE00D             B.N      ??_AddKeyHex_0
    165                default:
    166                  {
    167                    int Nibble = _HexChar2Int(Key);
   \                     ??_AddKeyHex_2: (+1)
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0x.... 0x....      BL       _HexChar2Int
    168                    if (Nibble >= 0) {
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD408             BMI.N    ??_AddKeyHex_0
    169                      _EditHex(Nibble, pObj, hObj);
   \   00000058   0x4622             MOV      R2,R4
   \   0000005A   0x4631             MOV      R1,R6
   \   0000005C   0x.... 0x....      BL       _EditHex
    170                      EDIT__SetCursorPos(pObj, pObj->CursorPos + 1);
   \   00000060   0x6C30             LDR      R0,[R6, #+64]
   \   00000062   0x1C41             ADDS     R1,R0,#+1
   \   00000064   0x4630             MOV      R0,R6
   \   00000066   0x.... 0x....      BL       EDIT__SetCursorPos
    171                    }
    172                  }
    173                  break;
    174              }
    175            }
    176            _UpdateBuffer(hObj);
   \                     ??_AddKeyHex_0: (+1)
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000070   0x....             B.N      _UpdateBuffer
    177          }
    178          
    179          /*********************************************************************
    180          *
    181          *             Exported routines
    182          *
    183          **********************************************************************
    184          */
    185          /*********************************************************************
    186          *
    187          *       EDIT_SetHexMode
    188          */

   \                                 In section .text, align 2, keep-with-next
    189          void EDIT_SetHexMode(EDIT_Handle hEdit, U32 Value, U32 Min, U32 Max) {
   \                     EDIT_SetHexMode: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
    190            EDIT_Obj* pObj;
    191            WM_LOCK();
    192            if (hEdit) {
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD02F             BEQ.N    ??EDIT_SetHexMode_0
    193              int MaxLen;
    194              pObj = EDIT_H2P(hEdit);
   \   00000010   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000014   0x4607             MOV      R7,R0
    195              pObj->pfAddKeyEx = _AddKeyHex;
   \   00000016   0xF107 0x0830      ADD      R8,R7,#+48
   \   0000001A   0x....             LDR.N    R0,??DataTable0
   \   0000001C   0xF8C8 0x001C      STR      R0,[R8, #+28]
    196              pObj->pfUpdateBuffer= _UpdateBuffer;
   \   00000020   0x....             LDR.N    R0,??DataTable0_1
   \   00000022   0xF8C8 0x0020      STR      R0,[R8, #+32]
    197              pObj->CurrentValue = Value;
   \   00000026   0xF8C8 0x900C      STR      R9,[R8, #+12]
    198              pObj->CursorPos = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8C8 0x0010      STR      R0,[R8, #+16]
    199              MaxLen = pObj->MaxLen;
   \   00000030   0xF9B7 0x002A      LDRSH    R0,[R7, #+42]
    200              if (MaxLen <= 0 ) {
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xDA02             BGE.N    ??EDIT_SetHexMode_1
    201                MaxLen = _GetNumDigits(Max);
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       _GetNumDigits
    202              }
    203              if (MaxLen > 8) {
   \                     ??EDIT_SetHexMode_1: (+1)
   \   0000003E   0x2809             CMP      R0,#+9
   \   00000040   0xDB00             BLT.N    ??EDIT_SetHexMode_2
    204                MaxLen = 8;
   \   00000042   0x2008             MOVS     R0,#+8
    205              }
    206              if (MaxLen != pObj->MaxLen) {
   \                     ??EDIT_SetHexMode_2: (+1)
   \   00000044   0xF9B7 0x102A      LDRSH    R1,[R7, #+42]
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xD003             BEQ.N    ??EDIT_SetHexMode_3
    207                EDIT_SetMaxLen(hEdit, MaxLen);
   \   0000004C   0x4601             MOV      R1,R0
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       EDIT_SetMaxLen
    208              }
    209              pObj->Min = Min;
   \                     ??EDIT_SetHexMode_3: (+1)
   \   00000054   0x633D             STR      R5,[R7, #+48]
    210              pObj->Max = Max;
   \   00000056   0xF8C8 0x6004      STR      R6,[R8, #+4]
    211              pObj->EditMode = GUI_EDIT_MODE_OVERWRITE;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xF888 0x0018      STRB     R0,[R8, #+24]
    212              _UpdateBuffer(hEdit);
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       _UpdateBuffer
    213              WM_Invalidate(hEdit);
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0xE8BD 0x43F2      POP      {R1,R4-R9,LR}
   \   0000006C   0x.... 0x....      B.W      WM_InvalidateWindow
    214            }
    215            WM_UNLOCK();
    216          }
   \                     ??EDIT_SetHexMode_0: (+1)
   \   00000070   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     _AddKeyHex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0x........         DC32     _UpdateBuffer
    217          
    218          #else  /* avoid empty object files */
    219          
    220          void EditHex_C(void);
    221          void EditHex_C(void){}
    222          
    223          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   EDIT_SetHexMode
        32   -> EDIT_SetMaxLen
        32   -> GUI_ALLOC_h2p
         0   -> WM_InvalidateWindow
        32   -> _GetNumDigits
        32   -> _UpdateBuffer
      16   _AddKeyHex
        16   -> EDIT__SetCursorPos
        16   -> GUI_ALLOC_h2p
        16   -> _AddPosition
        16   -> _EditHex
        16   -> _HexChar2Int
         0   -> _UpdateBuffer
      16   _AddPosition
         0   -> EDIT_SetValue
       8   _EditHex
         0   -> EDIT_SetValue
       0   _GetNumDigits
       0   _HexChar2Int
      16   _UpdateBuffer
        16   -> GUI_ALLOC_h2p
        16   -> GUI_AddHex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
     116  EDIT_SetHexMode
     114  _AddKeyHex
      48  _AddPosition
      38  _EditHex
      16  _GetNumDigits
      34  _HexChar2Int
      34  _UpdateBuffer

 
 408 bytes in section .text
 
 408 bytes of CODE memory

Errors: none
Warnings: none
