###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:32
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_BMP_Serialize.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_BMP_Serialize.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUI_BMP_Serialize.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUI_BMP_Serialize.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_BMP_Serialize.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_BMP_Serialize.c
     16          Purpose     : Implementation of GUI_BMP_Serialize
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "GUI.h"
     21          
     22          /*********************************************************************
     23          *
     24          *       Defines
     25          *
     26          **********************************************************************
     27          */
     28          
     29          #define DIB_HEADER_MARKER ((U16) ('M' << 8) | 'B') /* DIB Header Marker - used in writing DIBs to files */
     30          
     31          #define SIZEOF_BITMAPFILEHEADER 14
     32          #define SIZEOF_BITMAPINFOHEADER 40
     33          
     34          /*********************************************************************
     35          *
     36          *       Static code
     37          *
     38          **********************************************************************
     39          */
     40          /*********************************************************************
     41          *
     42          *       _SendU16
     43          */

   \                                 In section .text, align 2, keep-with-next
     44          static void _SendU16(GUI_CALLBACK_VOID_U8_P * pfSerialize, U16 Data, void * p) {
   \                     _SendU16: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     45            (*pfSerialize)((U8)Data, p);
   \   00000008   0x4631             MOV      R1,R6
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x47A0             BLX      R4
     46            (*pfSerialize)(Data >> 8, p);
   \   00000010   0x4631             MOV      R1,R6
   \   00000012   0x0A28             LSRS     R0,R5,#+8
   \   00000014   0x47A0             BLX      R4
     47          }
   \   00000016   0xBD70             POP      {R4-R6,PC}       ;; return
     48          
     49          /*********************************************************************
     50          *
     51          *       _SendU32
     52          */

   \                                 In section .text, align 2, keep-with-next
     53          static void _SendU32(GUI_CALLBACK_VOID_U8_P * pfSerialize, U32 Data, void * p) {
   \                     _SendU32: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     54            _SendU16(pfSerialize, (U16)Data, p);
   \   00000008   0xB289             UXTH     R1,R1
   \   0000000A   0x.... 0x....      BL       _SendU16
     55            _SendU16(pfSerialize, Data >> 16, p);
   \   0000000E   0x4632             MOV      R2,R6
   \   00000010   0x0C29             LSRS     R1,R5,#+16
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000018   0x....             B.N      _SendU16
     56          }
     57          
     58          /*********************************************************************
     59          *
     60          *       Exported routines
     61          *
     62          **********************************************************************
     63          */
     64          /*********************************************************************
     65          *
     66          *       GUI_BMP_SerializeEx
     67          */

   \                                 In section .text, align 2, keep-with-next
     68          void GUI_BMP_SerializeEx(GUI_CALLBACK_VOID_U8_P * pfSerialize, int x0, int y0, int xSize, int ySize, void * p) {
   \                     GUI_BMP_SerializeEx: (+1)
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
     69            int x, y, i;
     70            U32 BitmapOffset, FileSize;
     71            int BPP          = LCD_GetBitsPerPixel();
   \   0000000C   0x.... 0x....      BL       LCD_GetBitsPerPixel
   \   00000010   0x4607             MOV      R7,R0
     72            int BytesPerLine = ((BPP > 8) ? (2 * xSize + 2) : (xSize + 3)) & ~3;
   \   00000012   0x2F09             CMP      R7,#+9
   \   00000014   0xDB02             BLT.N    ??GUI_BMP_SerializeEx_0
   \   00000016   0x0070             LSLS     R0,R6,#+1
   \   00000018   0x1C80             ADDS     R0,R0,#+2
   \   0000001A   0xE000             B.N      ??GUI_BMP_SerializeEx_1
   \                     ??GUI_BMP_SerializeEx_0: (+1)
   \   0000001C   0x1CF0             ADDS     R0,R6,#+3
   \                     ??GUI_BMP_SerializeEx_1: (+1)
   \   0000001E   0xF020 0x0003      BIC      R0,R0,#0x3
   \   00000022   0x9000             STR      R0,[SP, #+0]
     73            int NumColors    = (BPP > 8) ? 0 : (1 << BPP);
   \   00000024   0x2F09             CMP      R7,#+9
   \   00000026   0xDB02             BLT.N    ??GUI_BMP_SerializeEx_2
   \   00000028   0xF04F 0x0800      MOV      R8,#+0
   \   0000002C   0xE002             B.N      ??GUI_BMP_SerializeEx_3
   \                     ??GUI_BMP_SerializeEx_2: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xFA00 0xF807      LSL      R8,R0,R7
     74            /* Write BITMAPFILEHEADER */
     75            BitmapOffset   = SIZEOF_BITMAPFILEHEADER
     76                           + SIZEOF_BITMAPINFOHEADER
     77                           + NumColors * 4;
   \                     ??GUI_BMP_SerializeEx_3: (+1)
   \   00000034   0xEA4F 0x0088      LSL      R0,R8,#+2
   \   00000038   0xF100 0x0936      ADD      R9,R0,#+54
   \   0000003C   0xF8DD 0xA034      LDR      R10,[SP, #+52]
     78            FileSize       = BitmapOffset
     79                           + ySize * BytesPerLine;
     80            _SendU16(pfSerialize, DIB_HEADER_MARKER, p);       /* bfType */
   \   00000040   0x4652             MOV      R2,R10
   \   00000042   0xF644 0x5142      MOVW     R1,#+19778
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       _SendU16
   \   0000004C   0xF8DD 0xB030      LDR      R11,[SP, #+48]
     81            _SendU32(pfSerialize, FileSize, p);                /* bfSize */
   \   00000050   0x4652             MOV      R2,R10
   \   00000052   0x9800             LDR      R0,[SP, #+0]
   \   00000054   0xFB00 0x910B      MLA      R1,R0,R11,R9
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0x.... 0x....      BL       _SendU32
     82            _SendU32(pfSerialize, 0, p);                       /* bfReserved1, bfReserved2 */
   \   0000005E   0x4652             MOV      R2,R10
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       _SendU32
     83            _SendU32(pfSerialize, BitmapOffset, p);            /* bfOffBits */
   \   00000068   0x4652             MOV      R2,R10
   \   0000006A   0x4649             MOV      R1,R9
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       _SendU32
     84            /* Write BITMAPINFOHEADER */
     85            _SendU32(pfSerialize, SIZEOF_BITMAPINFOHEADER, p); /* biSize */
   \   00000072   0x4652             MOV      R2,R10
   \   00000074   0x2128             MOVS     R1,#+40
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       _SendU32
     86            _SendU32(pfSerialize, xSize, p);                   /* biWidth */
   \   0000007C   0x4652             MOV      R2,R10
   \   0000007E   0x4631             MOV      R1,R6
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       _SendU32
     87            _SendU32(pfSerialize, ySize, p);                   /* biHeighth */
   \   00000086   0x4652             MOV      R2,R10
   \   00000088   0x4659             MOV      R1,R11
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       _SendU32
     88            _SendU16(pfSerialize, 1, p);                       /* biPlanes */
   \   00000090   0x4652             MOV      R2,R10
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       _SendU16
     89            _SendU16(pfSerialize, (BPP  <= 8) ? 8 : 16, p);    /* biBitCount */
   \   0000009A   0x2F09             CMP      R7,#+9
   \   0000009C   0xDA01             BGE.N    ??GUI_BMP_SerializeEx_4
   \   0000009E   0x2108             MOVS     R1,#+8
   \   000000A0   0xE000             B.N      ??GUI_BMP_SerializeEx_5
   \                     ??GUI_BMP_SerializeEx_4: (+1)
   \   000000A2   0x2110             MOVS     R1,#+16
   \                     ??GUI_BMP_SerializeEx_5: (+1)
   \   000000A4   0x4652             MOV      R2,R10
   \   000000A6   0x4620             MOV      R0,R4
   \   000000A8   0x.... 0x....      BL       _SendU16
     90            _SendU32(pfSerialize, 0, p);                       /* biCompression */
   \   000000AC   0x4652             MOV      R2,R10
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       _SendU32
     91            _SendU32(pfSerialize, 0, p);                       /* biSizeImage */
   \   000000B6   0x4652             MOV      R2,R10
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       _SendU32
     92            _SendU32(pfSerialize, 0, p);                       /* biXPelsPerMeter */
   \   000000C0   0x4652             MOV      R2,R10
   \   000000C2   0x2100             MOVS     R1,#+0
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       _SendU32
     93            _SendU32(pfSerialize, 0, p);                       /* biYPelsPerMeter */
   \   000000CA   0x4652             MOV      R2,R10
   \   000000CC   0x2100             MOVS     R1,#+0
   \   000000CE   0x4620             MOV      R0,R4
   \   000000D0   0x.... 0x....      BL       _SendU32
     94            _SendU32(pfSerialize, NumColors, p);               /* biClrUsed */
   \   000000D4   0x4652             MOV      R2,R10
   \   000000D6   0x4641             MOV      R1,R8
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0x.... 0x....      BL       _SendU32
     95            _SendU32(pfSerialize, 0, p);                       /* biClrImportant */
   \   000000DE   0x4652             MOV      R2,R10
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0x4620             MOV      R0,R4
   \   000000E4   0x.... 0x....      BL       _SendU32
     96            /* Write palette */
     97            for (i = 0; i < NumColors; i++) {
   \   000000E8   0xF04F 0x0900      MOV      R9,#+0
   \   000000EC   0xE010             B.N      ??GUI_BMP_SerializeEx_6
     98              U32 Color;
     99              Color = GUI_Index2Color(i);
   \                     ??GUI_BMP_SerializeEx_7: (+1)
   \   000000EE   0x4648             MOV      R0,R9
   \   000000F0   0x.... 0x....      BL       GUI_Index2Color
    100              Color = ((Color >> 16) & 255) | (Color & 0xff00) | ((Color & 0xff) << 16);
    101              _SendU32(pfSerialize, Color, p);
   \   000000F4   0x4652             MOV      R2,R10
   \   000000F6   0xF3C0 0x4107      UBFX     R1,R0,#+16,#+8
   \   000000FA   0xF400 0x437F      AND      R3,R0,#0xFF00
   \   000000FE   0x4319             ORRS     R1,R3,R1
   \   00000100   0xB2C0             UXTB     R0,R0
   \   00000102   0xEA41 0x4100      ORR      R1,R1,R0, LSL #+16
   \   00000106   0x4620             MOV      R0,R4
   \   00000108   0x.... 0x....      BL       _SendU32
    102            }
   \   0000010C   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??GUI_BMP_SerializeEx_6: (+1)
   \   00000110   0x45C1             CMP      R9,R8
   \   00000112   0xDBEC             BLT.N    ??GUI_BMP_SerializeEx_7
    103            /* Write pixels */
    104            for (y = ySize - 1; y >= 0; y--) {
   \   00000114   0xF1AB 0x0801      SUB      R8,R11,#+1
   \   00000118   0xE009             B.N      ??GUI_BMP_SerializeEx_8
    105              for (x = 0; x < xSize; x++) {
    106                if (BPP <= 8) {
    107                  pfSerialize(LCD_GetPixelIndex(x0 + x, y0 + y), p);
    108                } else {
    109                  U16 Color16;
    110                  U32 Color = LCD_GetPixelColor(x0 + x, y0 + y);
    111                  int b = ((Color >> 16) * 31 + 127) / 255;
    112                  int g = (((Color >> 8) & 255) * 31 + 127) / 255;
    113                  int r = ((Color & 255) * 31 + 127) / 255;
    114                  Color16 = (r << 10) | (g << 5) | b;       /* 16 bpp Bitmaps in windows are 555: rrrrrgggggbbbbb */
    115                  _SendU16(pfSerialize, Color16, p);
    116                }
    117              }
    118              /* Align pointer to next U32 */
    119              for (i = BytesPerLine & 3; i > 0; i--) {
    120                pfSerialize(0, p);
   \                     ??GUI_BMP_SerializeEx_9: (+1)
   \   0000011A   0x4651             MOV      R1,R10
   \   0000011C   0x2000             MOVS     R0,#+0
   \   0000011E   0x47A0             BLX      R4
    121              }
   \   00000120   0xF1A9 0x0901      SUB      R9,R9,#+1
   \                     ??GUI_BMP_SerializeEx_10: (+1)
   \   00000124   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000128   0xDAF7             BGE.N    ??GUI_BMP_SerializeEx_9
   \   0000012A   0xF1A8 0x0801      SUB      R8,R8,#+1
   \                     ??GUI_BMP_SerializeEx_8: (+1)
   \   0000012E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000132   0xD437             BMI.N    ??GUI_BMP_SerializeEx_11
   \   00000134   0xF04F 0x0900      MOV      R9,#+0
   \   00000138   0xE023             B.N      ??GUI_BMP_SerializeEx_12
   \                     ??GUI_BMP_SerializeEx_13: (+1)
   \   0000013A   0x.... 0x....      BL       LCD_GetPixelColor
   \   0000013E   0x4652             MOV      R2,R10
   \   00000140   0xB2C1             UXTB     R1,R0
   \   00000142   0xEBC1 0x1141      RSB      R1,R1,R1, LSL #+5
   \   00000146   0x317F             ADDS     R1,R1,#+127
   \   00000148   0x23FF             MOVS     R3,#+255
   \   0000014A   0xFBB1 0xF1F3      UDIV     R1,R1,R3
   \   0000014E   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000152   0xEBC3 0x1343      RSB      R3,R3,R3, LSL #+5
   \   00000156   0x337F             ADDS     R3,R3,#+127
   \   00000158   0xF04F 0x0CFF      MOV      R12,#+255
   \   0000015C   0xFBB3 0xF3FC      UDIV     R3,R3,R12
   \   00000160   0x015B             LSLS     R3,R3,#+5
   \   00000162   0xEA43 0x2181      ORR      R1,R3,R1, LSL #+10
   \   00000166   0x0C00             LSRS     R0,R0,#+16
   \   00000168   0xEBC0 0x1040      RSB      R0,R0,R0, LSL #+5
   \   0000016C   0x307F             ADDS     R0,R0,#+127
   \   0000016E   0x4663             MOV      R3,R12
   \   00000170   0xFBB0 0xF0F3      UDIV     R0,R0,R3
   \   00000174   0x4301             ORRS     R1,R0,R1
   \   00000176   0xB289             UXTH     R1,R1
   \   00000178   0x4620             MOV      R0,R4
   \   0000017A   0x.... 0x....      BL       _SendU16
   \                     ??GUI_BMP_SerializeEx_14: (+1)
   \   0000017E   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??GUI_BMP_SerializeEx_12: (+1)
   \   00000182   0x45B1             CMP      R9,R6
   \   00000184   0xDA0B             BGE.N    ??GUI_BMP_SerializeEx_15
   \   00000186   0x9802             LDR      R0,[SP, #+8]
   \   00000188   0x4448             ADD      R0,R9,R0
   \   0000018A   0xEB08 0x0105      ADD      R1,R8,R5
   \   0000018E   0x2F09             CMP      R7,#+9
   \   00000190   0xDAD3             BGE.N    ??GUI_BMP_SerializeEx_13
   \   00000192   0x.... 0x....      BL       LCD_GetPixelIndex
   \   00000196   0x4651             MOV      R1,R10
   \   00000198   0xB2C0             UXTB     R0,R0
   \   0000019A   0x47A0             BLX      R4
   \   0000019C   0xE7EF             B.N      ??GUI_BMP_SerializeEx_14
   \                     ??GUI_BMP_SerializeEx_15: (+1)
   \   0000019E   0xF04F 0x0900      MOV      R9,#+0
   \   000001A2   0xE7BF             B.N      ??GUI_BMP_SerializeEx_10
    122            }
    123          }
   \                     ??GUI_BMP_SerializeEx_11: (+1)
   \   000001A4   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}  ;; return
    124          
    125          /*********************************************************************
    126          *
    127          *       GUI_BMP_Serialize
    128          */

   \                                 In section .text, align 2, keep-with-next
    129          void GUI_BMP_Serialize(GUI_CALLBACK_VOID_U8_P * pfSerialize, void * p) {
   \                     GUI_BMP_Serialize: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    130            GUI_BMP_SerializeEx(pfSerialize, 0, 0, LCD_GetXSize(), LCD_GetYSize(), p);
   \   00000006   0x.... 0x....      BL       LCD_GetYSize
   \   0000000A   0x4606             MOV      R6,R0
   \   0000000C   0x.... 0x....      BL       LCD_GetXSize
   \   00000010   0x9501             STR      R5,[SP, #+4]
   \   00000012   0x9600             STR      R6,[SP, #+0]
   \   00000014   0x4603             MOV      R3,R0
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x4611             MOV      R1,R2
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       GUI_BMP_SerializeEx
    131          }
   \   00000020   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    132          
    133          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   GUI_BMP_Serialize
        24   -> GUI_BMP_SerializeEx
        24   -> LCD_GetXSize
        24   -> LCD_GetYSize
      48   GUI_BMP_SerializeEx
        48   -- Indirect call
        48   -> GUI_Index2Color
        48   -> LCD_GetBitsPerPixel
        48   -> LCD_GetPixelColor
        48   -> LCD_GetPixelIndex
        48   -> _SendU16
        48   -> _SendU32
      16   _SendU16
        16   -- Indirect call
      16   _SendU32
         0   -> _SendU16
        16   -> _SendU16


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      34  GUI_BMP_Serialize
     424  GUI_BMP_SerializeEx
      24  _SendU16
      26  _SendU32

 
 508 bytes in section .text
 
 508 bytes of CODE memory

Errors: none
Warnings: none
