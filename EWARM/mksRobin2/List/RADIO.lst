###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:01:04
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\RADIO.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\RADIO.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\RADIO.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\RADIO.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\RADIO.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : RADIO.c
     16          Purpose     : Implementation of radio button widget
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stdlib.h>
     21          #include "GUI_Protected.h"
     22          #include "RADIO_Private.h"
     23          
     24          #if GUI_WINSUPPORT
     25          
     26          /*********************************************************************
     27          *
     28          *       Private config defaults
     29          *
     30          **********************************************************************
     31          */
     32          
     33          /* Define default image inactiv */
     34          #ifndef RADIO_IMAGE0_DEFAULT
     35            #define RADIO_IMAGE0_DEFAULT        &RADIO__abmRadio[0]
     36          #endif
     37          
     38          /* Define default image activ */
     39          #ifndef RADIO_IMAGE1_DEFAULT
     40            #define RADIO_IMAGE1_DEFAULT        &RADIO__abmRadio[1]
     41          #endif
     42          
     43          /* Define default image check */
     44          #ifndef RADIO_IMAGE_CHECK_DEFAULT
     45            #define RADIO_IMAGE_CHECK_DEFAULT   &RADIO__bmCheck
     46          #endif
     47          
     48          /* Define default font */
     49          #ifndef RADIO_FONT_DEFAULT
     50            #define RADIO_FONT_DEFAULT          &GUI_Font13_1
     51          #endif
     52          
     53          /* Define default text color */
     54          #ifndef RADIO_DEFAULT_TEXT_COLOR
     55            #define RADIO_DEFAULT_TEXT_COLOR    GUI_BLACK
     56          #endif
     57          
     58          /* Define default background color */
     59          #ifndef RADIO_DEFAULT_BKCOLOR
     60            #define RADIO_DEFAULT_BKCOLOR       0xC0C0C0
     61          #endif
     62          
     63          #define RADIO_BORDER                  2
     64          
     65          /*********************************************************************
     66          *
     67          *       Public data, modul internal
     68          *
     69          **********************************************************************
     70          */
     71          

   \                                 In section .bss, align 4
     72          tRADIO_SetValue* RADIO__pfHandleSetValue;
   \                     RADIO__pfHandleSetValue:
   \   00000000                      DS8 4
     73          

   \                                 In section .data, align 4
     74          GUI_COLOR         RADIO__DefaultTextColor       = RADIO_DEFAULT_TEXT_COLOR;
     75          const GUI_FONT GUI_UNI_PTR* RADIO__pDefaultFont = RADIO_FONT_DEFAULT;
     76          const GUI_BITMAP* RADIO__apDefaultImage[]       = {RADIO_IMAGE0_DEFAULT, RADIO_IMAGE1_DEFAULT};
   \                     RADIO__apDefaultImage:
   \   00000000   0x........         DC32 RADIO__abmRadio, RADIO__abmRadio + 14H
   \              0x........   
   \                     RADIO__DefaultTextColor:
   \   00000008   0x00000000         DC32 0
   \                     RADIO__pDefaultFont:
   \   0000000C   0x........         DC32 GUI_Font13_1
     77          const GUI_BITMAP* RADIO__pDefaultImageCheck     = RADIO_IMAGE_CHECK_DEFAULT;
   \                     RADIO__pDefaultImageCheck:
   \   00000010   0x........         DC32 RADIO__bmCheck
     78          
     79          /*********************************************************************
     80          *
     81          *       Macros for internal use
     82          *
     83          **********************************************************************
     84          */
     85          
     86          #define RADIO_ID 0x4544   /* Magic numer, should be unique if possible */
     87          
     88          #if GUI_DEBUG_LEVEL > 1
     89            #define RADIO_ASSERT_IS_VALID_PTR(p) DEBUG_ERROROUT_IF(p->DebugId != RADIO_ID, "xxx.c: Wrong handle type or Object not init'ed")
     90            #define RADIO_INIT_ID(p)   p->DebugId = RADIO_ID
     91            #define RADIO_DEINIT_ID(p) p->DebugId = RADIO_ID+1
     92          #else
     93            #define RADIO_ASSERT_IS_VALID_PTR(p)
     94            #define RADIO_INIT_ID(p)
     95            #define RADIO_DEINIT_ID(p)
     96          #endif
     97          
     98          /*********************************************************************
     99          *
    100          *       Static routines
    101          *
    102          **********************************************************************
    103          */
    104          /*********************************************************************
    105          *
    106          *       _ResizeRect
    107          */

   \                                 In section .text, align 2, keep-with-next
    108          static void _ResizeRect(GUI_RECT* pDest, const GUI_RECT* pSrc, int Diff) {
    109            pDest->y0 = pSrc->y0 - Diff;
   \                     _ResizeRect: (+1)
   \   00000000   0x884B             LDRH     R3,[R1, #+2]
   \   00000002   0x1A9B             SUBS     R3,R3,R2
   \   00000004   0x8043             STRH     R3,[R0, #+2]
    110            pDest->y1 = pSrc->y1 + Diff;
   \   00000006   0x88CB             LDRH     R3,[R1, #+6]
   \   00000008   0x18D3             ADDS     R3,R2,R3
   \   0000000A   0x80C3             STRH     R3,[R0, #+6]
    111            pDest->x0 = pSrc->x0 - Diff;
   \   0000000C   0x880B             LDRH     R3,[R1, #+0]
   \   0000000E   0x1A9B             SUBS     R3,R3,R2
   \   00000010   0x8003             STRH     R3,[R0, #+0]
    112            pDest->x1 = pSrc->x1 + Diff;
   \   00000012   0x8889             LDRH     R1,[R1, #+4]
   \   00000014   0x1851             ADDS     R1,R2,R1
   \   00000016   0x8081             STRH     R1,[R0, #+4]
    113          }
   \   00000018   0x4770             BX       LR               ;; return
    114          
    115          /*********************************************************************
    116          *
    117          *       _OnPaint
    118          *
    119          * Purpose:
    120          *   Paints the RADIO button.
    121          *   The button can actually consist of multiple buttons (NumItems).
    122          *   The focus rectangle will be drawn on top of the text if any text is set,
    123          *   otherwise around the entire buttons.
    124          */

   \                                 In section .text, align 2, keep-with-next
    125          static void _OnPaint(RADIO_Handle hObj, RADIO_Obj* pObj) {
   \                     _OnPaint: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x4681             MOV      R9,R0
   \   00000008   0x460C             MOV      R4,R1
    126            const GUI_BITMAP* pBmRadio;
    127            const GUI_BITMAP* pBmCheck;
    128            const char* pText;
    129            GUI_FONTINFO FontInfo;
    130            GUI_RECT Rect, r, rFocus = {0};
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant {0}>`
   \   0000000E   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   00000012   0xE9CD 0x2304      STRD     R2,R3,[SP, #+16]
    131            int i, y, HasFocus, FontDistY;
    132            U8 SpaceAbove, CHeight, FocusBorder;
    133          
    134            /* Init some data */
    135            WIDGET__GetClientRect(&pObj->Widget, &rFocus);
   \   00000016   0xA904             ADD      R1,SP,#+16
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       WIDGET__GetClientRect
    136            HasFocus  = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 1 : 0;
   \   0000001E   0xF894 0x0026      LDRB     R0,[R4, #+38]
   \   00000022   0xF000 0x0501      AND      R5,R0,#0x1
    137            pBmRadio  = pObj->apBmRadio[WM__IsEnabled(hObj)];
   \   00000026   0x4648             MOV      R0,R9
   \   00000028   0x.... 0x....      BL       WM__IsEnabled
   \   0000002C   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \   00000030   0x6A86             LDR      R6,[R0, #+40]
    138            pBmCheck  = pObj->pBmCheck;
   \   00000032   0x6B20             LDR      R0,[R4, #+48]
   \   00000034   0x9003             STR      R0,[SP, #+12]
    139            rFocus.x1 = pBmRadio->XSize + RADIO_BORDER * 2 - 1;
   \   00000036   0xF9B6 0x0000      LDRSH    R0,[R6, #+0]
   \   0000003A   0x1CC0             ADDS     R0,R0,#+3
   \   0000003C   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    140            rFocus.y1 = pObj->Height + ((pObj->NumItems - 1) * pObj->Spacing) - 1;
   \   00000040   0xF9B4 0x003C      LDRSH    R0,[R4, #+60]
   \   00000044   0xF9B4 0x103E      LDRSH    R1,[R4, #+62]
   \   00000048   0x1E49             SUBS     R1,R1,#+1
   \   0000004A   0xF9B4 0x203A      LDRSH    R2,[R4, #+58]
   \   0000004E   0xFB02 0x0001      MLA      R0,R2,R1,R0
   \   00000052   0x1E40             SUBS     R0,R0,#+1
   \   00000054   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    141          
    142            /* Select font and text color */
    143            LCD_SetColor(pObj->TextColor);
   \   00000058   0x6CA0             LDR      R0,[R4, #+72]
   \   0000005A   0x.... 0x....      BL       LCD_SetColor
    144            GUI_SetFont(pObj->pFont);
   \   0000005E   0x6CE0             LDR      R0,[R4, #+76]
   \   00000060   0x.... 0x....      BL       GUI_SetFont
    145            GUI_SetTextMode(GUI_TM_TRANS);
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       GUI_SetTextMode
    146          
    147            /* Get font infos */
    148            GUI_GetFontInfo(pObj->pFont, &FontInfo);
   \   0000006A   0xA907             ADD      R1,SP,#+28
   \   0000006C   0x6CE0             LDR      R0,[R4, #+76]
   \   0000006E   0x.... 0x....      BL       GUI_GetFontInfo
    149            FontDistY   = GUI_GetFontDistY();
   \   00000072   0x.... 0x....      BL       GUI_GetFontDistY
    150            CHeight     = FontInfo.CHeight;
   \   00000076   0xF89D 0x1020      LDRB     R1,[SP, #+32]
    151            SpaceAbove  = FontInfo.Baseline - CHeight;
   \   0000007A   0xF89D 0x201E      LDRB     R2,[SP, #+30]
   \   0000007E   0x1A52             SUBS     R2,R2,R1
   \   00000080   0xB2D2             UXTB     R2,R2
   \   00000082   0x9206             STR      R2,[SP, #+24]
    152            Rect.x0     = pBmRadio->XSize + RADIO_BORDER * 2 + 2;
   \   00000084   0xF9B6 0x2000      LDRSH    R2,[R6, #+0]
   \   00000088   0x1D92             ADDS     R2,R2,#+6
   \   0000008A   0xF8AD 0x200A      STRH     R2,[SP, #+10]
    153            Rect.y0     = (CHeight <= pObj->Height) ? ((pObj->Height - CHeight) / 2) : 0;
   \   0000008E   0x8FA2             LDRH     R2,[R4, #+60]
   \   00000090   0x428A             CMP      R2,R1
   \   00000092   0xDB04             BLT.N    ??_OnPaint_0
   \   00000094   0x1A52             SUBS     R2,R2,R1
   \   00000096   0xEB02 0x72D2      ADD      R2,R2,R2, LSR #+31
   \   0000009A   0x1057             ASRS     R7,R2,#+1
   \   0000009C   0xE000             B.N      ??_OnPaint_1
   \                     ??_OnPaint_0: (+1)
   \   0000009E   0x2700             MOVS     R7,#+0
    154            Rect.y1     = Rect.y0 + CHeight - 1;
   \                     ??_OnPaint_1: (+1)
   \   000000A0   0x19C9             ADDS     R1,R1,R7
   \   000000A2   0x1E49             SUBS     R1,R1,#+1
   \   000000A4   0xF8AD 0x1008      STRH     R1,[SP, #+8]
    155            FocusBorder = (FontDistY <= 12) ? 2 : 3;
   \   000000A8   0x280D             CMP      R0,#+13
   \   000000AA   0xDA02             BGE.N    ??_OnPaint_2
   \   000000AC   0xF04F 0x0802      MOV      R8,#+2
   \   000000B0   0xE001             B.N      ??_OnPaint_3
   \                     ??_OnPaint_2: (+1)
   \   000000B2   0xF04F 0x0803      MOV      R8,#+3
    156            if (Rect.y0 < FocusBorder) {
   \                     ??_OnPaint_3: (+1)
   \   000000B6   0xB23F             SXTH     R7,R7
   \   000000B8   0x4547             CMP      R7,R8
   \   000000BA   0xDA02             BGE.N    ??_OnPaint_4
    157              FocusBorder = Rect.y0;
   \   000000BC   0x46B8             MOV      R8,R7
   \   000000BE   0xFA5F 0xF888      UXTB     R8,R8
    158            }
    159          
    160            /* Clear inside ... Just in case      */
    161            /* Fill with parents background color */
    162          #if WM_SUPPORT_TRANSPARENCY
    163            if (!WM_GetHasTrans(hObj))
   \                     ??_OnPaint_4: (+1)
   \   000000C2   0x4648             MOV      R0,R9
   \   000000C4   0x.... 0x....      BL       WM_GetHasTrans
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD10C             BNE.N    ??_OnPaint_5
    164          #endif
    165            {
    166              if (pObj->BkColor != GUI_INVALID_COLOR) {
   \   000000CC   0x6C60             LDR      R0,[R4, #+68]
   \   000000CE   0xF06F 0x4170      MVN      R1,#-268435456
   \   000000D2   0x4288             CMP      R0,R1
   \   000000D4   0xD002             BEQ.N    ??_OnPaint_6
    167                LCD_SetBkColor(pObj->BkColor);
   \   000000D6   0x.... 0x....      BL       LCD_SetBkColor
   \   000000DA   0xE002             B.N      ??_OnPaint_7
    168              } else {
    169                LCD_SetBkColor(RADIO_DEFAULT_BKCOLOR);
   \                     ??_OnPaint_6: (+1)
   \   000000DC   0x....             LDR.N    R0,??DataTable3  ;; 0xc0c0c0
   \   000000DE   0x.... 0x....      BL       LCD_SetBkColor
    170              }
    171              GUI_Clear();
   \                     ??_OnPaint_7: (+1)
   \   000000E2   0x.... 0x....      BL       GUI_Clear
    172            }
    173          
    174            /* Iterate over all items */
    175            for (i = 0; i < pObj->NumItems; i++) {
   \                     ??_OnPaint_5: (+1)
   \   000000E6   0xF04F 0x0900      MOV      R9,#+0
   \   000000EA   0xE05F             B.N      ??_OnPaint_8
    176              y = i * pObj->Spacing;
   \                     ??_OnPaint_9: (+1)
   \   000000EC   0x8F60             LDRH     R0,[R4, #+58]
   \   000000EE   0xFB00 0xFA09      MUL      R10,R0,R9
    177              /* Draw the radio button bitmap */
    178              GUI_DrawBitmap(pBmRadio, RADIO_BORDER, RADIO_BORDER + y);
   \   000000F2   0xF10A 0x0202      ADD      R2,R10,#+2
   \   000000F6   0x2102             MOVS     R1,#+2
   \   000000F8   0x4630             MOV      R0,R6
   \   000000FA   0x.... 0x....      BL       GUI_DrawBitmap
    179              /* Draw the check bitmap */
    180              if (pObj->Sel == i) {
   \   000000FE   0xF9B4 0x0038      LDRSH    R0,[R4, #+56]
   \   00000102   0x4548             CMP      R0,R9
   \   00000104   0xD113             BNE.N    ??_OnPaint_10
    181                GUI_DrawBitmap(pBmCheck, RADIO_BORDER +  (pBmRadio->XSize - pBmCheck->XSize) / 2, 
    182                                         RADIO_BORDER + ((pBmRadio->YSize - pBmCheck->YSize) / 2) + y);
   \   00000106   0x8870             LDRH     R0,[R6, #+2]
   \   00000108   0x9903             LDR      R1,[SP, #+12]
   \   0000010A   0x8849             LDRH     R1,[R1, #+2]
   \   0000010C   0x1A40             SUBS     R0,R0,R1
   \   0000010E   0x8831             LDRH     R1,[R6, #+0]
   \   00000110   0x9A03             LDR      R2,[SP, #+12]
   \   00000112   0x8812             LDRH     R2,[R2, #+0]
   \   00000114   0x1A89             SUBS     R1,R1,R2
   \   00000116   0xEB00 0x70D0      ADD      R0,R0,R0, LSR #+31
   \   0000011A   0xEB0A 0x0060      ADD      R0,R10,R0, ASR #+1
   \   0000011E   0x1C82             ADDS     R2,R0,#+2
   \   00000120   0xEB01 0x70D1      ADD      R0,R1,R1, LSR #+31
   \   00000124   0x1040             ASRS     R0,R0,#+1
   \   00000126   0x1C81             ADDS     R1,R0,#+2
   \   00000128   0x9803             LDR      R0,[SP, #+12]
   \   0000012A   0x.... 0x....      BL       GUI_DrawBitmap
    183              }
    184              /* Draw text if available */
    185              pText = (const char*)GUI_ARRAY_GetpItem(&pObj->TextArray, i);
   \                     ??_OnPaint_10: (+1)
   \   0000012E   0x4649             MOV      R1,R9
   \   00000130   0xF104 0x0034      ADD      R0,R4,#+52
   \   00000134   0x.... 0x....      BL       GUI_ARRAY_GetpItem
   \   00000138   0x4683             MOV      R11,R0
    186              if (pText) {
   \   0000013A   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000013E   0xD033             BEQ.N    ??_OnPaint_11
    187                if (*pText) {
   \   00000140   0xF99B 0x0000      LDRSB    R0,[R11, #+0]
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD02F             BEQ.N    ??_OnPaint_11
    188                  r = Rect;
   \   00000148   0xF8BD 0x000A      LDRH     R0,[SP, #+10]
   \   0000014C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000150   0xF8AD 0x7002      STRH     R7,[SP, #+2]
   \   00000154   0xF8BD 0x0024      LDRH     R0,[SP, #+36]
   \   00000158   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000015C   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000160   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    189                  r.x1 = r.x0 + GUI_GetStringDistX(pText) - 2;
   \   00000164   0x4658             MOV      R0,R11
   \   00000166   0x.... 0x....      BL       GUI_GetStringDistX
   \   0000016A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000016E   0x1840             ADDS     R0,R0,R1
   \   00000170   0x1E80             SUBS     R0,R0,#+2
   \   00000172   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    190                  GUI_MoveRect(&r, 0, y);
   \   00000176   0x4652             MOV      R2,R10
   \   00000178   0x2100             MOVS     R1,#+0
   \   0000017A   0xA800             ADD      R0,SP,#+0
   \   0000017C   0x.... 0x....      BL       GUI_MoveRect
    191                  GUI_DispStringAt(pText, r.x0, r.y0 - SpaceAbove);
   \   00000180   0xF9BD 0x0002      LDRSH    R0,[SP, #+2]
   \   00000184   0x9906             LDR      R1,[SP, #+24]
   \   00000186   0x1A42             SUBS     R2,R0,R1
   \   00000188   0xF9BD 0x1000      LDRSH    R1,[SP, #+0]
   \   0000018C   0x4658             MOV      R0,R11
   \   0000018E   0x.... 0x....      BL       GUI_DispStringAt
    192                  /* Calculate focus rect */
    193                  if (HasFocus && (pObj->Sel == i)) {
   \   00000192   0x2D00             CMP      R5,#+0
   \   00000194   0xD008             BEQ.N    ??_OnPaint_11
   \   00000196   0xF9B4 0x0038      LDRSH    R0,[R4, #+56]
   \   0000019A   0x4548             CMP      R0,R9
   \   0000019C   0xD104             BNE.N    ??_OnPaint_11
    194                    _ResizeRect(&rFocus, &r, FocusBorder);
   \   0000019E   0x4642             MOV      R2,R8
   \   000001A0   0xA900             ADD      R1,SP,#+0
   \   000001A2   0xA804             ADD      R0,SP,#+16
   \   000001A4   0x.... 0x....      BL       _ResizeRect
    195                  }
    196                }
    197              }
    198            }
   \                     ??_OnPaint_11: (+1)
   \   000001A8   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??_OnPaint_8: (+1)
   \   000001AC   0x8FE0             LDRH     R0,[R4, #+62]
   \   000001AE   0x4581             CMP      R9,R0
   \   000001B0   0xDB9C             BLT.N    ??_OnPaint_9
    199          
    200            /* Draw the focus rect */
    201            if (HasFocus) {
   \   000001B2   0x2D00             CMP      R5,#+0
   \   000001B4   0xD007             BEQ.N    ??_OnPaint_12
    202              LCD_SetColor(GUI_BLACK);
   \   000001B6   0x2000             MOVS     R0,#+0
   \   000001B8   0x.... 0x....      BL       LCD_SetColor
    203              WIDGET__DrawFocusRect(&pObj->Widget, &rFocus, 0);
   \   000001BC   0x2200             MOVS     R2,#+0
   \   000001BE   0xA904             ADD      R1,SP,#+16
   \   000001C0   0x4620             MOV      R0,R4
   \   000001C2   0x.... 0x....      BL       WIDGET__DrawFocusRect
    204            }
    205          }
   \                     ??_OnPaint_12: (+1)
   \   000001C6   0xB00B             ADD      SP,SP,#+44
   \   000001C8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    206          
    207          /*********************************************************************
    208          *
    209          *       _OnTouch
    210          */

   \                                 In section .text, align 2, keep-with-next
    211          static void _OnTouch(RADIO_Handle hObj, RADIO_Obj* pObj, WM_MESSAGE*pMsg) {
   \                     _OnTouch: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    212            int Notification;
    213            int Hit = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    214            GUI_PID_STATE* pState = (GUI_PID_STATE*)pMsg->Data.p;
   \   00000008   0x6890             LDR      R0,[R2, #+8]
    215            if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD01B             BEQ.N    ??_OnTouch_0
    216              if (pState->Pressed) {
   \   0000000E   0x7A01             LDRB     R1,[R0, #+8]
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD015             BEQ.N    ??_OnTouch_1
    217                int y, Sel;
    218                y   = pState->y;
   \   00000014   0x6840             LDR      R0,[R0, #+4]
    219                Sel = y   / pObj->Spacing;
   \   00000016   0x8F6A             LDRH     R2,[R5, #+58]
   \   00000018   0xFB90 0xF1F2      SDIV     R1,R0,R2
    220                y  -= Sel * pObj->Spacing;
    221                if (y <= pObj->Height) {
   \   0000001C   0x8FAB             LDRH     R3,[R5, #+60]
   \   0000001E   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000022   0x4283             CMP      R3,R0
   \   00000024   0xDB02             BLT.N    ??_OnTouch_2
    222                  RADIO_SetValue(hObj, Sel);
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       RADIO_SetValue
    223                }
    224                if (WM_IsFocussable(hObj)) {
   \                     ??_OnTouch_2: (+1)
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       WM_IsFocussable
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD002             BEQ.N    ??_OnTouch_3
    225                  WM_SetFocus(hObj);
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       WM_SetFocus
    226                }
    227                Notification = WM_NOTIFICATION_CLICKED;
   \                     ??_OnTouch_3: (+1)
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0xE003             B.N      ??_OnTouch_4
    228              } else {
    229                Hit = 1;
   \                     ??_OnTouch_1: (+1)
   \   00000040   0x2601             MOVS     R6,#+1
    230                Notification = WM_NOTIFICATION_RELEASED;
   \   00000042   0x2102             MOVS     R1,#+2
   \   00000044   0xE000             B.N      ??_OnTouch_4
    231              }
    232            } else {
    233              Notification = WM_NOTIFICATION_MOVED_OUT;
   \                     ??_OnTouch_0: (+1)
   \   00000046   0x2103             MOVS     R1,#+3
    234            }
    235            WM_NotifyParent(hObj, Notification);
   \                     ??_OnTouch_4: (+1)
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       WM_NotifyParent
    236            if (Hit == 1) {
   \   0000004E   0x2E01             CMP      R6,#+1
   \   00000050   0xD105             BNE.N    ??_OnTouch_5
    237              GUI_DEBUG_LOG("RADIO: Hit\n");
    238              GUI_StoreKey(pObj->Widget.Id);
   \   00000052   0xF9B5 0x0024      LDRSH    R0,[R5, #+36]
   \   00000056   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000005A   0x.... 0x....      B.W      GUI_StoreKey
    239            }
    240          }
   \                     ??_OnTouch_5: (+1)
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
    241          
    242          /*********************************************************************
    243          *
    244          *       _OnKey
    245          */

   \                                 In section .text, align 2, keep-with-next
    246          static void  _OnKey(RADIO_Handle hObj, WM_MESSAGE* pMsg) {
    247            WM_KEY_INFO* pKeyInfo;
    248            pKeyInfo = (WM_KEY_INFO*)(pMsg->Data.p);
   \                     _OnKey: (+1)
   \   00000000   0x6889             LDR      R1,[R1, #+8]
    249            if (pKeyInfo->PressedCnt > 0) {
   \   00000002   0x684A             LDR      R2,[R1, #+4]
   \   00000004   0x2A01             CMP      R2,#+1
   \   00000006   0xDB07             BLT.N    ??_OnKey_0
    250              switch (pKeyInfo->Key) {
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x3910             SUBS     R1,R1,#+16
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD904             BLS.N    ??_OnKey_1
   \   00000010   0x1E89             SUBS     R1,R1,#+2
   \   00000012   0x2901             CMP      R1,#+1
   \   00000014   0xD800             BHI.N    ??_OnKey_0
    251              case GUI_KEY_RIGHT:
    252              case GUI_KEY_DOWN:
    253                RADIO_Inc(hObj);
   \   00000016   0x....             B.N      RADIO_Inc
    254                break;                    /* Send to parent by not doing anything */
    255              case GUI_KEY_LEFT:
    256              case GUI_KEY_UP:
    257                RADIO_Dec(hObj);
    258                break;                    /* Send to parent by not doing anything */
    259              default:
    260                return;
    261              }
    262            }
    263          }
   \                     ??_OnKey_0: (+1)
   \   00000018   0x4770             BX       LR               ;; return
   \                     ??_OnKey_1: (+1)
   \   0000001A   0x....             B.N      RADIO_Dec
    264          
    265          /*********************************************************************
    266          *
    267          *       _RADIO_Callback
    268          */

   \                                 In section .text, align 2, keep-with-next
    269          static void _RADIO_Callback (WM_MESSAGE* pMsg) {
   \                     _RADIO_Callback: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    270            RADIO_Handle hObj;
    271            RADIO_Obj*   pObj;
    272            hObj = pMsg->hWin;
   \   00000004   0xF9B4 0x5004      LDRSH    R5,[R4, #+4]
    273            pObj = RADIO_H2P(hObj);
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000E   0x4606             MOV      R6,R0
    274            /* Let widget handle the standard messages */
    275            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000010   0x4621             MOV      R1,R4
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      BL       WIDGET_HandleActive
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD028             BEQ.N    ??_RADIO_Callback_0
    276              return;
    277            }
    278            switch (pMsg->MsgId) {
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0x280B             CMP      R0,#+11
   \   00000020   0xD01C             BEQ.N    ??_RADIO_Callback_1
   \   00000022   0x280C             CMP      R0,#+12
   \   00000024   0xD00F             BEQ.N    ??_RADIO_Callback_2
   \   00000026   0x280E             CMP      R0,#+14
   \   00000028   0xD013             BEQ.N    ??_RADIO_Callback_3
   \   0000002A   0x280F             CMP      R0,#+15
   \   0000002C   0xD002             BEQ.N    ??_RADIO_Callback_4
   \   0000002E   0x282B             CMP      R0,#+43
   \   00000030   0xD005             BEQ.N    ??_RADIO_Callback_5
   \   00000032   0xE017             B.N      ??_RADIO_Callback_6
    279            case WM_PAINT:
    280              GUI_DEBUG_LOG("RADIO: _Callback(WM_PAINT)\n");
    281              _OnPaint(hObj, pObj);
   \                     ??_RADIO_Callback_4: (+1)
   \   00000034   0x4631             MOV      R1,R6
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003C   0x....             B.N      _OnPaint
    282              return;
    283            case WM_GET_RADIOGROUP:
    284              pMsg->Data.v = pObj->GroupId;
   \                     ??_RADIO_Callback_5: (+1)
   \   0000003E   0xF896 0x0040      LDRB     R0,[R6, #+64]
   \   00000042   0x60A0             STR      R0,[R4, #+8]
    285              return;
   \   00000044   0xBD70             POP      {R4-R6,PC}
    286            case WM_TOUCH:
    287              _OnTouch(hObj, pObj, pMsg);
   \                     ??_RADIO_Callback_2: (+1)
   \   00000046   0x4622             MOV      R2,R4
   \   00000048   0x4631             MOV      R1,R6
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       _OnTouch
    288              break;
   \   00000050   0xE008             B.N      ??_RADIO_Callback_6
    289            case WM_KEY:
    290              _OnKey(hObj, pMsg);
   \                     ??_RADIO_Callback_3: (+1)
   \   00000052   0x4621             MOV      R1,R4
   \   00000054   0x4628             MOV      R0,R5
   \   00000056   0x.... 0x....      BL       _OnKey
    291              break;
   \   0000005A   0xE003             B.N      ??_RADIO_Callback_6
    292            case WM_DELETE:
    293              GUI_ARRAY_Delete(&pObj->TextArray);
   \                     ??_RADIO_Callback_1: (+1)
   \   0000005C   0xF106 0x0034      ADD      R0,R6,#+52
   \   00000060   0x.... 0x....      BL       GUI_ARRAY_Delete
    294              break;
    295            }
    296            WM_DefaultProc(pMsg);
   \                     ??_RADIO_Callback_6: (+1)
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000006A   0x.... 0x....      B.W      WM_DefaultProc
   \                     ??_RADIO_Callback_0: (+1)
   \   0000006E   0xBD70             POP      {R4-R6,PC}       ;; return
    297          }
    298          
    299          /*********************************************************************
    300          *
    301          *       Exported routines, modul internal
    302          *
    303          **********************************************************************
    304          */
    305          /*********************************************************************
    306          *
    307          *       RADIO__SetValue
    308          */

   \                                 In section .text, align 2, keep-with-next
    309          void RADIO__SetValue(RADIO_Handle hObj, RADIO_Obj* pObj, int v) {
   \                     RADIO__SetValue: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    310            if (v >= pObj->NumItems) {
   \   00000004   0x8FC8             LDRH     R0,[R1, #+62]
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0xDB00             BLT.N    ??RADIO__SetValue_0
    311              v = (int)pObj->NumItems - 1;
   \   0000000A   0x1E42             SUBS     R2,R0,#+1
    312            }
    313            if (v != pObj->Sel) {
   \                     ??RADIO__SetValue_0: (+1)
   \   0000000C   0xF9B1 0x0038      LDRSH    R0,[R1, #+56]
   \   00000010   0x4282             CMP      R2,R0
   \   00000012   0xD009             BEQ.N    ??RADIO__SetValue_1
    314              pObj->Sel = v;
   \   00000014   0x870A             STRH     R2,[R1, #+56]
    315              WM_InvalidateWindow(hObj);
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       WM_InvalidateWindow
    316              WM_NotifyParent(hObj, WM_NOTIFICATION_VALUE_CHANGED);
   \   0000001C   0x2105             MOVS     R1,#+5
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xE8BD 0x4010      POP      {R4,LR}
   \   00000024   0x.... 0x....      B.W      WM_NotifyParent
    317            }
    318          }
   \                     ??RADIO__SetValue_1: (+1)
   \   00000028   0xBD10             POP      {R4,PC}          ;; return
    319          
    320          /*********************************************************************
    321          *
    322          *       Exported routines:  Create
    323          *
    324          **********************************************************************
    325          */
    326          
    327          /* Note: the parameters to a create function may vary.
    328                   Some widgets may have multiple create functions */
    329          
    330          /*********************************************************************
    331          *
    332          *       RADIO_CreateEx
    333          */

   \                                 In section .text, align 2, keep-with-next
    334          RADIO_Handle RADIO_CreateEx(int x0, int y0, int xSize, int ySize, WM_HWIN hParent,
    335                                      int WinFlags, int ExFlags, int Id, int NumItems, int Spacing)
    336          {
   \                     RADIO_CreateEx: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
    337            RADIO_Handle hObj;
    338            int Height, i;
    339            /* Calculate helper variables */
    340            Height   = RADIO__apDefaultImage[0]->YSize + RADIO_BORDER * 2;
   \   00000006   0x....             LDR.N    R4,??DataTable3_1
   \   00000008   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \   0000000C   0xF8BC 0x5002      LDRH     R5,[R12, #+2]
   \   00000010   0x1D2D             ADDS     R5,R5,#+4
   \   00000012   0x9E13             LDR      R6,[SP, #+76]
    341            Spacing  = (Spacing  <= 0) ? 20 : Spacing;
   \   00000014   0x2E01             CMP      R6,#+1
   \   00000016   0xDA00             BGE.N    ??RADIO_CreateEx_0
   \   00000018   0x2614             MOVS     R6,#+20
   \                     ??RADIO_CreateEx_0: (+1)
   \   0000001A   0x9F12             LDR      R7,[SP, #+72]
    342            NumItems = (NumItems <= 0) ?  2 : NumItems;
   \   0000001C   0x2F01             CMP      R7,#+1
   \   0000001E   0xDA00             BGE.N    ??RADIO_CreateEx_1
   \   00000020   0x2702             MOVS     R7,#+2
    343            if (ySize == 0) {
   \                     ??RADIO_CreateEx_1: (+1)
   \   00000022   0x2B00             CMP      R3,#+0
   \   00000024   0xD102             BNE.N    ??RADIO_CreateEx_2
    344              ySize  = Height + ((NumItems - 1) * Spacing);
   \   00000026   0x1E7B             SUBS     R3,R7,#+1
   \   00000028   0xFB06 0x5303      MLA      R3,R6,R3,R5
    345            }
    346            if (xSize == 0) {
   \                     ??RADIO_CreateEx_2: (+1)
   \   0000002C   0x2A00             CMP      R2,#+0
   \   0000002E   0xD102             BNE.N    ??RADIO_CreateEx_3
    347              xSize  = RADIO__apDefaultImage[0]->XSize + RADIO_BORDER * 2;
   \   00000030   0xF8BC 0x2000      LDRH     R2,[R12, #+0]
   \   00000034   0x1D12             ADDS     R2,R2,#+4
   \                     ??RADIO_CreateEx_3: (+1)
   \   00000036   0xF9BD 0x8038      LDRSH    R8,[SP, #+56]
    348            }
    349          #if WM_SUPPORT_TRANSPARENCY
    350            WinFlags |= WM_CF_HASTRANS;
    351          #endif
    352            /* Create the window */
    353            hObj = WM_CreateWindowAsChild(x0, y0, xSize, ySize, hParent, WinFlags, _RADIO_Callback, sizeof(RADIO_Obj) - sizeof(WM_Obj));
   \   0000003A   0xF04F 0x0C30      MOV      R12,#+48
   \   0000003E   0xF8CD 0xC00C      STR      R12,[SP, #+12]
   \   00000042   0x.... 0x....      LDR.W    R12,??DataTable3_2
   \   00000046   0xF8CD 0xC008      STR      R12,[SP, #+8]
   \   0000004A   0xF8DD 0xC03C      LDR      R12,[SP, #+60]
   \   0000004E   0xF04C 0x0C01      ORR      R12,R12,#0x1
   \   00000052   0xFA1F 0xFC8C      UXTH     R12,R12
   \   00000056   0xF8CD 0xC004      STR      R12,[SP, #+4]
   \   0000005A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000005E   0x.... 0x....      BL       WM_CreateWindowAsChild
   \   00000062   0x4681             MOV      R9,R0
    354            if (hObj) {
   \   00000064   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000068   0xD032             BEQ.N    ??RADIO_CreateEx_4
    355              RADIO_Obj* pObj;
    356              WM_LOCK();
    357              pObj = RADIO_H2P(hObj);
   \   0000006A   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000006E   0x4682             MOV      R10,R0
    358              /* Init sub-classes */
    359              GUI_ARRAY_CREATE(&pObj->TextArray);
    360              for (i = 0; i < NumItems; i++) {
   \   00000070   0xF04F 0x0B00      MOV      R11,#+0
   \   00000074   0xE007             B.N      ??RADIO_CreateEx_5
    361                GUI_ARRAY_AddItem(&pObj->TextArray, NULL, 0);
   \                     ??RADIO_CreateEx_6: (+1)
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0x4611             MOV      R1,R2
   \   0000007A   0xF10A 0x0034      ADD      R0,R10,#+52
   \   0000007E   0x.... 0x....      BL       GUI_ARRAY_AddItem
    362              }
   \   00000082   0xF10B 0x0B01      ADD      R11,R11,#+1
   \                     ??RADIO_CreateEx_5: (+1)
   \   00000086   0x45BB             CMP      R11,R7
   \   00000088   0xDBF5             BLT.N    ??RADIO_CreateEx_6
    363              /* Init widget specific variables */
    364              ExFlags &= RADIO_TEXTPOS_LEFT;
    365              WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE | ExFlags);
   \   0000008A   0x9810             LDR      R0,[SP, #+64]
   \   0000008C   0xF400 0x7080      AND      R0,R0,#0x100
   \   00000090   0xF040 0x0210      ORR      R2,R0,#0x10
   \   00000094   0x9911             LDR      R1,[SP, #+68]
   \   00000096   0x4650             MOV      R0,R10
   \   00000098   0x.... 0x....      BL       WIDGET__Init
    366              /* Init member variables */
    367              RADIO_INIT_ID(pObj);
    368              pObj->apBmRadio[0] = RADIO__apDefaultImage[0];
   \   0000009C   0x6820             LDR      R0,[R4, #+0]
   \   0000009E   0xF8CA 0x0028      STR      R0,[R10, #+40]
    369              pObj->apBmRadio[1] = RADIO__apDefaultImage[1];
   \   000000A2   0x6860             LDR      R0,[R4, #+4]
   \   000000A4   0xF8CA 0x002C      STR      R0,[R10, #+44]
    370              pObj->pBmCheck     = RADIO__pDefaultImageCheck;
   \   000000A8   0x6920             LDR      R0,[R4, #+16]
   \   000000AA   0xF8CA 0x0030      STR      R0,[R10, #+48]
    371              pObj->pFont        = RADIO__pDefaultFont;
   \   000000AE   0x68E0             LDR      R0,[R4, #+12]
   \   000000B0   0xF8CA 0x004C      STR      R0,[R10, #+76]
    372              pObj->TextColor    = RADIO__DefaultTextColor;
   \   000000B4   0x68A0             LDR      R0,[R4, #+8]
   \   000000B6   0xF8CA 0x0048      STR      R0,[R10, #+72]
    373              pObj->BkColor      = WM_GetBkColor(hParent);
   \   000000BA   0x4640             MOV      R0,R8
   \   000000BC   0x.... 0x....      BL       WM_GetBkColor
   \   000000C0   0xF8CA 0x0044      STR      R0,[R10, #+68]
    374              pObj->NumItems     = NumItems;
   \   000000C4   0xF8AA 0x703E      STRH     R7,[R10, #+62]
    375              pObj->Spacing      = Spacing;
   \   000000C8   0xF8AA 0x603A      STRH     R6,[R10, #+58]
    376              pObj->Height       = Height;
   \   000000CC   0xF8AA 0x503C      STRH     R5,[R10, #+60]
    377              WM_UNLOCK();
    378            } else {
    379              GUI_DEBUG_ERROROUT_IF(hObj==0, "RADIO_Create failed")
    380            }
    381            return hObj;
   \                     ??RADIO_CreateEx_4: (+1)
   \   000000D0   0x4648             MOV      R0,R9
   \   000000D2   0xB005             ADD      SP,SP,#+20
   \   000000D4   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    382          }
    383          
    384          /*********************************************************************
    385          *
    386          *       Exported routines:  Various methods
    387          *
    388          **********************************************************************
    389          */
    390          /*********************************************************************
    391          *
    392          *       RADIO_AddValue
    393          */

   \                                 In section .text, align 2, keep-with-next
    394          void RADIO_AddValue(RADIO_Handle hObj, int Add) {
   \                     RADIO_AddValue: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    395            if (hObj) {
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD008             BEQ.N    ??RADIO_AddValue_0
    396              RADIO_Obj* pObj;
    397              WM_LOCK();
    398              pObj = RADIO_H2P(hObj);
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
    399              RADIO_SetValue(hObj, pObj->Sel + Add);
   \   0000000E   0xF9B0 0x0038      LDRSH    R0,[R0, #+56]
   \   00000012   0x1829             ADDS     R1,R5,R0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000001A   0x....             B.N      RADIO_SetValue
    400              WM_UNLOCK();
    401            }
    402          }
   \                     ??RADIO_AddValue_0: (+1)
   \   0000001C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    403          
    404          /*********************************************************************
    405          *
    406          *       RADIO_Dec
    407          */

   \                                 In section .text, align 2, keep-with-next
    408          void RADIO_Dec(RADIO_Handle hObj) {
    409            RADIO_AddValue(hObj, -1);
   \                     RADIO_Dec: (+1)
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x....             B.N      RADIO_AddValue
    410          }
    411          
    412          /*********************************************************************
    413          *
    414          *       RADIO_Inc
    415          */

   \                                 In section .text, align 2, keep-with-next
    416          void RADIO_Inc(RADIO_Handle hObj) {
    417            RADIO_AddValue(hObj,  1);
   \                     RADIO_Inc: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x....             B.N      RADIO_AddValue
    418          }
    419          
    420          /*********************************************************************
    421          *
    422          *       RADIO_SetValue
    423          */

   \                                 In section .text, align 2, keep-with-next
    424          void RADIO_SetValue(RADIO_Handle hObj, int v) {
   \                     RADIO_SetValue: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    425            if (hObj) {
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD019             BEQ.N    ??RADIO_SetValue_0
    426              RADIO_Obj* pObj;
    427              WM_LOCK();
    428              pObj = RADIO_H2P(hObj);
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
    429              if (pObj->GroupId && RADIO__pfHandleSetValue) {
   \   0000000E   0xF890 0x1040      LDRB     R1,[R0, #+64]
   \   00000012   0x2900             CMP      R1,#+0
   \   00000014   0xD00A             BEQ.N    ??RADIO_SetValue_1
   \   00000016   0x....             LDR.N    R1,??DataTable3_3
   \   00000018   0x680B             LDR      R3,[R1, #+0]
   \   0000001A   0x0019             MOVS     R1,R3
   \   0000001C   0xD006             BEQ.N    ??RADIO_SetValue_1
    430                (*RADIO__pfHandleSetValue)(hObj, pObj, v);
   \   0000001E   0x462A             MOV      R2,R5
   \   00000020   0x4601             MOV      R1,R0
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0xB001             ADD      SP,SP,#+4
   \   00000026   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000002A   0x4718             BX       R3
    431              } else {
    432                if (v < 0) {
   \                     ??RADIO_SetValue_1: (+1)
   \   0000002C   0x2D00             CMP      R5,#+0
   \   0000002E   0xD500             BPL.N    ??RADIO_SetValue_2
    433                  v = 0;
   \   00000030   0x2500             MOVS     R5,#+0
    434                }
    435                RADIO__SetValue(hObj, pObj, v);
   \                     ??RADIO_SetValue_2: (+1)
   \   00000032   0x462A             MOV      R2,R5
   \   00000034   0x4601             MOV      R1,R0
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   0000003C   0x....             B.N      RADIO__SetValue
    436              }
    437              WM_UNLOCK();
    438            }
    439          }
   \                     ??RADIO_SetValue_0: (+1)
   \   0000003E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    440          
    441          /*********************************************************************
    442          *
    443          *       Exported routines:  Query state
    444          *
    445          **********************************************************************
    446          */
    447          /*********************************************************************
    448          *
    449          *       RADIO_GetValue
    450          */

   \                                 In section .text, align 2, keep-with-next
    451          int RADIO_GetValue(RADIO_Handle hObj) {
   \                     RADIO_GetValue: (+1)
   \   00000000   0x4601             MOV      R1,R0
    452            int r = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    453            if (hObj) {
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD100             BNE.N    ??RADIO_GetValue_0
   \   00000008   0x4770             BX       LR
    454              RADIO_Obj* pObj;
    455              WM_LOCK();
    456              pObj = RADIO_H2P(hObj);
   \                     ??RADIO_GetValue_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x.... 0x....      BL       GUI_ALLOC_h2p
    457              r = pObj->Sel;
   \   00000012   0xF9B0 0x0038      LDRSH    R0,[R0, #+56]
    458              WM_UNLOCK();
    459            }
    460            return r;
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    461          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x00C0C0C0         DC32     0xc0c0c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     RADIO__apDefaultImage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     _RADIO_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     RADIO__pfHandleSetValue

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    462          
    463          #else /* avoid empty object files */
    464          
    465          void RADIO_C(void);
    466          void RADIO_C(void){}
    467          
    468          #endif  /* #if GUI_WINSUPPORT */
    469          
    470          /************************* end of file ******************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RADIO_AddValue
        16   -> GUI_ALLOC_h2p
         0   -> RADIO_SetValue
      56   RADIO_CreateEx
        56   -> GUI_ALLOC_h2p
        56   -> GUI_ARRAY_AddItem
        56   -> WIDGET__Init
        56   -> WM_CreateWindowAsChild
        56   -> WM_GetBkColor
       0   RADIO_Dec
         0   -> RADIO_AddValue
       8   RADIO_GetValue
         8   -> GUI_ALLOC_h2p
       0   RADIO_Inc
         0   -> RADIO_AddValue
      16   RADIO_SetValue
         0   -- Indirect call
        16   -> GUI_ALLOC_h2p
         0   -> RADIO__SetValue
       8   RADIO__SetValue
         8   -> WM_InvalidateWindow
         0   -> WM_NotifyParent
       0   _OnKey
         0   -> RADIO_Dec
         0   -> RADIO_Inc
      80   _OnPaint
        80   -> GUI_ARRAY_GetpItem
        80   -> GUI_Clear
        80   -> GUI_DispStringAt
        80   -> GUI_DrawBitmap
        80   -> GUI_GetFontDistY
        80   -> GUI_GetFontInfo
        80   -> GUI_GetStringDistX
        80   -> GUI_MoveRect
        80   -> GUI_SetFont
        80   -> GUI_SetTextMode
        80   -> LCD_SetBkColor
        80   -> LCD_SetColor
        80   -> WIDGET__DrawFocusRect
        80   -> WIDGET__GetClientRect
        80   -> WM_GetHasTrans
        80   -> WM__IsEnabled
        80   -> _ResizeRect
      16   _OnTouch
         0   -> GUI_StoreKey
        16   -> RADIO_SetValue
        16   -> WM_IsFocussable
        16   -> WM_NotifyParent
        16   -> WM_SetFocus
      16   _RADIO_Callback
        16   -> GUI_ALLOC_h2p
        16   -> GUI_ARRAY_Delete
        16   -> WIDGET_HandleActive
         0   -> WM_DefaultProc
        16   -> _OnKey
         0   -> _OnPaint
        16   -> _OnTouch
       0   _ResizeRect


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0}>
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      30  RADIO_AddValue
     216  RADIO_CreateEx
       6  RADIO_Dec
      24  RADIO_GetValue
       4  RADIO_Inc
      64  RADIO_SetValue
      42  RADIO__SetValue
      20  RADIO__apDefaultImage
          RADIO__DefaultTextColor
          RADIO__pDefaultFont
          RADIO__pDefaultImageCheck
       4  RADIO__pfHandleSetValue
      28  _OnKey
     460  _OnPaint
      96  _OnTouch
     112  _RADIO_Callback
      26  _ResizeRect

 
     4 bytes in section .bss
    20 bytes in section .data
 1 132 bytes in section .text
 
 1 132 bytes of CODE memory
    24 bytes of DATA memory

Errors: none
Warnings: none
