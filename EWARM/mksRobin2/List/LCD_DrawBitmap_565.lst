###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCD_DrawBitmap_565.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCD_DrawBitmap_565.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\LCD_DrawBitmap_565.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LCD_DrawBitmap_565.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCD_DrawBitmap_565.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCD_DrawBitmap_565.c
     16          Purpose     : Drawing routine for drawing a 16bpp bitmap
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>           /* needed for definition of NULL */
     21          #include "GUI_Private.h"
     22          #include "LCD_Private.h"
     23          
     24          /*********************************************************************
     25          *
     26          *       Static code
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       _DrawBitmap_565
     33          */

   \                                 In section .text, align 2, keep-with-next
     34          static void _DrawBitmap_565(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR * pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_565: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
     35            const U16 * pData;
     36            int y, OldIndex, PrevIndex, Mode, SwapRB, Mag, BytesPerLine, UseDrawBitmap = 0;
   \   0000000C   0xF04F 0x0800      MOV      R8,#+0
     37            GUI_USE_PARA(pLogPal);
     38            OldIndex = LCD_GetColorIndex();
   \   00000010   0x.... 0x....      BL       LCD_GetColorIndex
   \   00000014   0x9003             STR      R0,[SP, #+12]
     39            PrevIndex = OldIndex;
   \   00000016   0x4683             MOV      R11,R0
   \   00000018   0xF8DD 0x9048      LDR      R9,[SP, #+72]
     40            pData = (const U16 *)pPixel;
   \   0000001C   0x464F             MOV      R7,R9
   \   0000001E   0x....             LDR.N    R0,??DataTable1
   \   00000020   0x7B40             LDRB     R0,[R0, #+13]
     41            Mode = LCD_GetFixedPaletteEx(GUI_Context.SelLayer);
   \   00000022   0x.... 0x....      BL       LCD_GetFixedPaletteEx
   \   00000026   0x4682             MOV      R10,R0
     42            SwapRB = LCD_GetSwapRBEx(GUI_Context.SelLayer);
   \   00000028   0x....             LDR.N    R0,??DataTable1
   \   0000002A   0x7B40             LDRB     R0,[R0, #+13]
   \   0000002C   0x.... 0x....      BL       LCD_GetSwapRBEx
     43            Mag = (xMag | yMag);
   \   00000030   0x9914             LDR      R1,[SP, #+80]
   \   00000032   0x9A15             LDR      R2,[SP, #+84]
   \   00000034   0x4311             ORRS     R1,R2,R1
     44            BytesPerLine = xsize * 2;
   \   00000036   0x006A             LSLS     R2,R5,#+1
   \   00000038   0x9206             STR      R2,[SP, #+24]
     45            #if GUI_SUPPORT_MEMDEV == 0
     46            if ((Mode == 565) && (SwapRB == 0) && (Mag == 1)) {
   \   0000003A   0xF240 0x2235      MOVW     R2,#+565
   \   0000003E   0x4592             CMP      R10,R2
   \   00000040   0xD105             BNE.N    ??_DrawBitmap_565_0
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD103             BNE.N    ??_DrawBitmap_565_0
   \   00000046   0x2901             CMP      R1,#+1
   \   00000048   0xD101             BNE.N    ??_DrawBitmap_565_0
     47              UseDrawBitmap = 1;
   \   0000004A   0xF04F 0x0801      MOV      R8,#+1
     48            }
     49            #else
     50            if (GUI_Context.pDeviceAPI->pMemDevAPI) {
     51              if (((GUI_Context.hDevData && (GUI_Context.pDeviceAPI->pMemDevAPI->pfIndex2Color == LCD_Index2Color_565)) ||
     52                  ((GUI_Context.hDevData == 0) && (Mode == 565) && (SwapRB == 0)))  && (Mag == 1)) {
     53                UseDrawBitmap = 1;
     54              }
     55            }
     56            #endif
     57            if (UseDrawBitmap) {
   \                     ??_DrawBitmap_565_0: (+1)
   \   0000004E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000052   0xD011             BEQ.N    ??_DrawBitmap_565_1
     58              LCD_DrawBitmap(x0, y0, xsize, ysize, 1, 1, 16, BytesPerLine, pPixel, 0);
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9005             STR      R0,[SP, #+20]
   \   00000058   0xF8CD 0x9010      STR      R9,[SP, #+16]
   \   0000005C   0x9806             LDR      R0,[SP, #+24]
   \   0000005E   0x9003             STR      R0,[SP, #+12]
   \   00000060   0x2010             MOVS     R0,#+16
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x9001             STR      R0,[SP, #+4]
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0x4633             MOV      R3,R6
   \   0000006C   0x462A             MOV      R2,R5
   \   0000006E   0x4621             MOV      R1,R4
   \   00000070   0x9808             LDR      R0,[SP, #+32]
   \   00000072   0x.... 0x....      BL       LCD_DrawBitmap
   \   00000076   0xE0A7             B.N      ??_DrawBitmap_565_2
     59            } else {
     60              if (Mag == 1) {
   \                     ??_DrawBitmap_565_1: (+1)
   \   00000078   0x2901             CMP      R1,#+1
   \   0000007A   0xD15C             BNE.N    ??_DrawBitmap_565_3
     61                /* Perform clipping */
     62                int x1, y1, Diff;
     63                y1 = y0 + ysize - 1;
   \   0000007C   0x1930             ADDS     R0,R6,R4
   \   0000007E   0x1E40             SUBS     R0,R0,#+1
     64                x1 = x0 + xsize - 1;
   \   00000080   0x9908             LDR      R1,[SP, #+32]
   \   00000082   0x1869             ADDS     R1,R5,R1
   \   00000084   0x1E49             SUBS     R1,R1,#+1
   \   00000086   0x....             LDR.N    R2,??DataTable1
   \   00000088   0xF9B2 0x2006      LDRSH    R2,[R2, #+6]
   \   0000008C   0x4294             CMP      R4,R2
   \   0000008E   0xDA07             BGE.N    ??_DrawBitmap_565_4
     65                /* Clip Y */
     66                if (y0 < GUI_Context.ClipRect.y0) {
     67                  Diff = GUI_Context.ClipRect.y0 -y0;
   \   00000090   0x1B13             SUBS     R3,R2,R4
     68                  y0   = GUI_Context.ClipRect.y0;
   \   00000092   0x4614             MOV      R4,R2
     69                  #if GUI_SUPPORT_LARGE_BITMAPS                       /* Required only for 16 bit CPUs if some bitmaps are >64kByte */
     70                    pData += (U32)Diff * (U32)BytesPerLine / 2;
     71                  #else
     72                    pData += (unsigned)Diff * (unsigned)BytesPerLine / 2;
   \   00000094   0x9A06             LDR      R2,[SP, #+24]
   \   00000096   0x435A             MULS     R2,R2,R3
   \   00000098   0x0852             LSRS     R2,R2,#+1
   \   0000009A   0xEB07 0x0742      ADD      R7,R7,R2, LSL #+1
     73                  #endif
     74                  ysize -= Diff;
   \   0000009E   0x1AF6             SUBS     R6,R6,R3
     75                }
     76                Diff = y1 - GUI_Context.ClipRect.y1;
   \                     ??_DrawBitmap_565_4: (+1)
   \   000000A0   0x....             LDR.N    R2,??DataTable1
   \   000000A2   0xF9B2 0x200A      LDRSH    R2,[R2, #+10]
   \   000000A6   0x1A80             SUBS     R0,R0,R2
     77                if (Diff > 0) {
   \   000000A8   0x2801             CMP      R0,#+1
   \   000000AA   0xDB00             BLT.N    ??_DrawBitmap_565_5
     78                  ysize -= Diff;
   \   000000AC   0x1A36             SUBS     R6,R6,R0
     79                }
     80                if (ysize <=0) {
   \                     ??_DrawBitmap_565_5: (+1)
   \   000000AE   0x2E01             CMP      R6,#+1
   \   000000B0   0xF2C0 0x808A      BLT.W    ??_DrawBitmap_565_2
     81          		    return;
     82                }
     83                /* Clip right side */
     84                Diff = x1 - GUI_Context.ClipRect.x1;
   \   000000B4   0x....             LDR.N    R0,??DataTable1
   \   000000B6   0xF9B0 0x0008      LDRSH    R0,[R0, #+8]
   \   000000BA   0x1A08             SUBS     R0,R1,R0
     85                if (Diff > 0) {
   \   000000BC   0x2801             CMP      R0,#+1
   \   000000BE   0xDB00             BLT.N    ??_DrawBitmap_565_6
     86                  xsize -= Diff;
   \   000000C0   0x1A2D             SUBS     R5,R5,R0
   \                     ??_DrawBitmap_565_6: (+1)
   \   000000C2   0x....             LDR.N    R0,??DataTable1
   \   000000C4   0xF9B0 0x0004      LDRSH    R0,[R0, #+4]
   \   000000C8   0x9908             LDR      R1,[SP, #+32]
   \   000000CA   0x4281             CMP      R1,R0
   \   000000CC   0xDA05             BGE.N    ??_DrawBitmap_565_7
     87                }
     88                /* Clip left side */
     89                Diff =0;
     90                if (x0 < GUI_Context.ClipRect.x0) {
     91                  Diff = GUI_Context.ClipRect.x0-x0;
   \   000000CE   0x1A40             SUBS     R0,R0,R1
     92          			  xsize -= Diff;
   \   000000D0   0x1A2D             SUBS     R5,R5,R0
     93                  pData += Diff; 
   \   000000D2   0xEB07 0x0740      ADD      R7,R7,R0, LSL #+1
     94                  x0 += Diff; 
   \   000000D6   0x1840             ADDS     R0,R0,R1
   \   000000D8   0x9008             STR      R0,[SP, #+32]
     95                }
     96                if (xsize <=0) {
   \                     ??_DrawBitmap_565_7: (+1)
   \   000000DA   0x2D01             CMP      R5,#+1
   \   000000DC   0xDB74             BLT.N    ??_DrawBitmap_565_2
     97          		    return;
     98                }
     99                /* Simple, unmagnified output using LCD_L0_SetPixel() */
    100                for (y = 0; y < ysize; y++) {
   \   000000DE   0xF04F 0x0800      MOV      R8,#+0
   \   000000E2   0xE022             B.N      ??_DrawBitmap_565_8
    101                  int x;
    102                  const U16 * p = pData;
    103                  for (x = 0; x < xsize; x++) {
    104                    U16 Index;
    105                    Index = *p++;
   \                     ??_DrawBitmap_565_9: (+1)
   \   000000E4   0x9800             LDR      R0,[SP, #+0]
   \   000000E6   0x1C80             ADDS     R0,R0,#+2
   \   000000E8   0x9000             STR      R0,[SP, #+0]
   \   000000EA   0x1E80             SUBS     R0,R0,#+2
   \   000000EC   0xF8B0 0xA000      LDRH     R10,[R0, #+0]
    106                    if (Index != PrevIndex) {
   \   000000F0   0x45DA             CMP      R10,R11
   \   000000F2   0xD005             BEQ.N    ??_DrawBitmap_565_10
    107                      LCD_SetColor(LCD_Index2Color_565(Index));
   \   000000F4   0x4650             MOV      R0,R10
   \   000000F6   0x.... 0x....      BL       LCD_Index2Color_565
   \   000000FA   0x.... 0x....      BL       LCD_SetColor
    108                      PrevIndex = Index;
   \   000000FE   0x46D3             MOV      R11,R10
    109                    }
    110                    LCDDEV_L0_SetPixelIndex(x + x0, y + y0, LCD_COLORINDEX);
   \                     ??_DrawBitmap_565_10: (+1)
   \   00000100   0x....             LDR.N    R0,??DataTable1
   \   00000102   0x8842             LDRH     R2,[R0, #+2]
   \   00000104   0xEB04 0x0108      ADD      R1,R4,R8
   \   00000108   0x9808             LDR      R0,[SP, #+32]
   \   0000010A   0x4448             ADD      R0,R0,R9
   \   0000010C   0x.... 0x....      BL       LCD_L0_SetPixelIndex
    111                  }
   \   00000110   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??_DrawBitmap_565_11: (+1)
   \   00000114   0x45A9             CMP      R9,R5
   \   00000116   0xDBE5             BLT.N    ??_DrawBitmap_565_9
    112                  pData += BytesPerLine / 2;
   \   00000118   0x9806             LDR      R0,[SP, #+24]
   \   0000011A   0x4601             MOV      R1,R0
   \   0000011C   0xEB01 0x70D0      ADD      R0,R1,R0, LSR #+31
   \   00000120   0x1040             ASRS     R0,R0,#+1
   \   00000122   0xEB07 0x0740      ADD      R7,R7,R0, LSL #+1
   \   00000126   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??_DrawBitmap_565_8: (+1)
   \   0000012A   0x45B0             CMP      R8,R6
   \   0000012C   0xDA46             BGE.N    ??_DrawBitmap_565_12
   \   0000012E   0x9700             STR      R7,[SP, #+0]
   \   00000130   0xF04F 0x0900      MOV      R9,#+0
   \   00000134   0xE7EE             B.N      ??_DrawBitmap_565_11
    113                }
    114              } else {
    115                /* Magnified output using LCD_FillRect() */
    116                int x,y;
    117                int yi;
    118                for (y = y0, yi = 0; yi < ysize; yi++, y += yMag, pPixel += BytesPerLine) {
   \                     ??_DrawBitmap_565_3: (+1)
   \   00000136   0x9400             STR      R4,[SP, #+0]
   \   00000138   0x2400             MOVS     R4,#+0
   \   0000013A   0xE026             B.N      ??_DrawBitmap_565_13
    119                  int yMax;
    120                  yMax = y + yMag - 1;
    121                  /* Draw if within clip area */
    122                  if ((yMax >= GUI_Context.ClipRect.y0) && (y <= GUI_Context.ClipRect.y1)) {
    123                    int xi;
    124                    const U16 GUI_UNI_PTR * p = pData;
    125                    for (x = x0, xi = 0; xi < xsize; xi++, x += xMag) {
    126                      U16 Index;
    127                      Index = *p++;
   \                     ??_DrawBitmap_565_14: (+1)
   \   0000013C   0x9804             LDR      R0,[SP, #+16]
   \   0000013E   0x1C80             ADDS     R0,R0,#+2
   \   00000140   0x9004             STR      R0,[SP, #+16]
   \   00000142   0x1E80             SUBS     R0,R0,#+2
   \   00000144   0xF8B0 0xA000      LDRH     R10,[R0, #+0]
    128                      if (Index != PrevIndex) {
   \   00000148   0x45DA             CMP      R10,R11
   \   0000014A   0xD005             BEQ.N    ??_DrawBitmap_565_15
    129                        LCD_SetColor(LCD_Index2Color_565(Index));
   \   0000014C   0x4650             MOV      R0,R10
   \   0000014E   0x.... 0x....      BL       LCD_Index2Color_565
   \   00000152   0x.... 0x....      BL       LCD_SetColor
    130                        PrevIndex = Index;
   \   00000156   0x46D3             MOV      R11,R10
    131                      }
    132                      LCD_FillRect(x, y, x + xMag - 1, yMax);
   \                     ??_DrawBitmap_565_15: (+1)
   \   00000158   0x9814             LDR      R0,[SP, #+80]
   \   0000015A   0xEB00 0x0A08      ADD      R10,R0,R8
   \   0000015E   0x9B02             LDR      R3,[SP, #+8]
   \   00000160   0xF1AA 0x0201      SUB      R2,R10,#+1
   \   00000164   0x9900             LDR      R1,[SP, #+0]
   \   00000166   0x4640             MOV      R0,R8
   \   00000168   0x.... 0x....      BL       LCD_FillRect
    133                    }
   \   0000016C   0xF109 0x0901      ADD      R9,R9,#+1
   \   00000170   0x46D0             MOV      R8,R10
   \                     ??_DrawBitmap_565_16: (+1)
   \   00000172   0x45A9             CMP      R9,R5
   \   00000174   0xDBE2             BLT.N    ??_DrawBitmap_565_14
    134                  }
    135                  pData += BytesPerLine / 2;
   \                     ??_DrawBitmap_565_17: (+1)
   \   00000176   0x9806             LDR      R0,[SP, #+24]
   \   00000178   0x4601             MOV      R1,R0
   \   0000017A   0xEB01 0x70D0      ADD      R0,R1,R0, LSR #+31
   \   0000017E   0x1040             ASRS     R0,R0,#+1
   \   00000180   0xEB07 0x0740      ADD      R7,R7,R0, LSL #+1
   \   00000184   0x1C64             ADDS     R4,R4,#+1
   \   00000186   0x9801             LDR      R0,[SP, #+4]
   \   00000188   0x9000             STR      R0,[SP, #+0]
   \                     ??_DrawBitmap_565_13: (+1)
   \   0000018A   0x42B4             CMP      R4,R6
   \   0000018C   0xDA16             BGE.N    ??_DrawBitmap_565_12
   \   0000018E   0x9800             LDR      R0,[SP, #+0]
   \   00000190   0x9915             LDR      R1,[SP, #+84]
   \   00000192   0x1808             ADDS     R0,R1,R0
   \   00000194   0x9001             STR      R0,[SP, #+4]
   \   00000196   0x1E40             SUBS     R0,R0,#+1
   \   00000198   0x9002             STR      R0,[SP, #+8]
   \   0000019A   0x....             LDR.N    R1,??DataTable1
   \   0000019C   0xF9B1 0x1006      LDRSH    R1,[R1, #+6]
   \   000001A0   0x4288             CMP      R0,R1
   \   000001A2   0xDBE8             BLT.N    ??_DrawBitmap_565_17
   \   000001A4   0x....             LDR.N    R0,??DataTable1
   \   000001A6   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \   000001AA   0x9900             LDR      R1,[SP, #+0]
   \   000001AC   0x4288             CMP      R0,R1
   \   000001AE   0xDBE2             BLT.N    ??_DrawBitmap_565_17
   \   000001B0   0x9704             STR      R7,[SP, #+16]
   \   000001B2   0xF8DD 0x8020      LDR      R8,[SP, #+32]
   \   000001B6   0xF04F 0x0900      MOV      R9,#+0
   \   000001BA   0xE7DA             B.N      ??_DrawBitmap_565_16
    136                }
    137              }
    138              GUI_SetColorIndex(OldIndex);
   \                     ??_DrawBitmap_565_12: (+1)
   \   000001BC   0x9803             LDR      R0,[SP, #+12]
   \   000001BE   0xB009             ADD      SP,SP,#+36
   \   000001C0   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   000001C4   0x.... 0x....      B.W      GUI_SetColorIndex
    139            }
    140          }
   \                     ??_DrawBitmap_565_2: (+1)
   \   000001C8   0xB009             ADD      SP,SP,#+36
   \   000001CA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    141          
    142          /*********************************************************************
    143          *
    144          *       Public data
    145          *
    146          **********************************************************************
    147          */
    148          /*********************************************************************
    149          *
    150          *       GUI_BitmapMethods565
    151          */

   \                                 In section .rodata, align 4, keep-with-next
    152          const GUI_BITMAP_METHODS GUI_BitmapMethods565 = {
   \                     GUI_BitmapMethods565:
   \   00000000   0x........         DC32 _DrawBitmap_565, LCD_Index2Color_565
   \              0x........   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     GUI_Context
    153            _DrawBitmap_565,
    154            LCD_Index2Color_565
    155          };
    156          
    157          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   _DrawBitmap_565
         0   -> GUI_SetColorIndex
        72   -> LCD_DrawBitmap
        72   -> LCD_FillRect
        72   -> LCD_GetColorIndex
        72   -> LCD_GetFixedPaletteEx
        72   -> LCD_GetSwapRBEx
        72   -> LCD_Index2Color_565
        72   -> LCD_L0_SetPixelIndex
        72   -> LCD_SetColor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       8  GUI_BitmapMethods565
     462  _DrawBitmap_565

 
   8 bytes in section .rodata
 466 bytes in section .text
 
 466 bytes of CODE  memory
   8 bytes of CONST memory

Errors: none
Warnings: none
