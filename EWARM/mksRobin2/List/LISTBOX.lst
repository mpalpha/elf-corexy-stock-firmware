###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\LISTBOX.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LISTBOX.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LISTBOX.c
     16          Purpose     : Implementation of listbox widget
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stdlib.h>
     21          #include <string.h>
     22          #include "GUI_ARRAY.h"
     23          #include "LISTBOX_Private.h"
     24          #include "SCROLLBAR.h"
     25          #include "GUIDebug.h"
     26          #include "GUI_Protected.h"
     27          #include "WM_Intern.h"
     28          
     29          #if GUI_WINSUPPORT
     30          
     31          /*********************************************************************
     32          *
     33          *       Private config defaults
     34          *
     35          **********************************************************************
     36          */
     37          
     38          /* Support for 3D effects */
     39          #ifndef LISTBOX_USE_3D
     40            #define LISTBOX_USE_3D 1
     41          #endif
     42          
     43          /* Define default fonts */
     44          #ifndef LISTBOX_FONT_DEFAULT
     45            #define LISTBOX_FONT_DEFAULT &GUI_Font13_1
     46          #endif
     47          
     48          
     49          /* Define colors */
     50          #ifndef LISTBOX_BKCOLOR0_DEFAULT
     51            #define LISTBOX_BKCOLOR0_DEFAULT GUI_WHITE     /* Not selected */
     52          #endif
     53          
     54          #ifndef LISTBOX_BKCOLOR1_DEFAULT
     55            #define LISTBOX_BKCOLOR1_DEFAULT GUI_GRAY      /* Selected, no focus */
     56          #endif
     57          
     58          #ifndef LISTBOX_BKCOLOR2_DEFAULT
     59            #define LISTBOX_BKCOLOR2_DEFAULT GUI_BLUE      /* Selected, focus */
     60          #endif
     61          
     62          #ifndef LISTBOX_BKCOLOR3_DEFAULT
     63            #define LISTBOX_BKCOLOR3_DEFAULT 0xC0C0C0      /* Disabled */
     64          #endif
     65          
     66          
     67          #ifndef LISTBOX_TEXTCOLOR0_DEFAULT
     68            #define LISTBOX_TEXTCOLOR0_DEFAULT GUI_BLACK   /* Not selected */
     69          #endif
     70          
     71          #ifndef LISTBOX_TEXTCOLOR1_DEFAULT
     72            #define LISTBOX_TEXTCOLOR1_DEFAULT GUI_WHITE   /* Selected, no focus */
     73          #endif
     74          
     75          #ifndef LISTBOX_TEXTCOLOR2_DEFAULT
     76            #define LISTBOX_TEXTCOLOR2_DEFAULT GUI_WHITE   /* Selected, focus */
     77          #endif
     78          
     79          #ifndef LISTBOX_TEXTCOLOR3_DEFAULT
     80            #define LISTBOX_TEXTCOLOR3_DEFAULT GUI_GRAY    /* Disabled */
     81          #endif
     82          
     83          
     84          #ifndef LISTBOX_SCROLLSTEP_H_DEFAULT
     85            #define LISTBOX_SCROLLSTEP_H_DEFAULT 10
     86          #endif
     87          
     88          /*********************************************************************
     89          *
     90          *       Static data
     91          *
     92          **********************************************************************
     93          */
     94          
     95          

   \                                 In section .data, align 4
     96          LISTBOX_PROPS LISTBOX_DefaultProps = {
   \                     LISTBOX_DefaultProps:
   \   00000000   0x........         DC32 GUI_Font13_1
   \   00000004   0x000A             DC16 10
   \   00000006   0x00 0x00          DC8 0, 0
   \   00000008   0x00FFFFFF         DC32 16777215, 8421504, 16711680, 12632256, 0, 16777215, 16777215
   \              0x00808080   
   \              0x00FF0000   
   \              0x00C0C0C0   
   \              0x00000000   
   \              0x00FFFFFF   
   \              0x00FFFFFF   
   \   00000024   0x00808080         DC32 8421504
     97            LISTBOX_FONT_DEFAULT,
     98            LISTBOX_SCROLLSTEP_H_DEFAULT,
     99            LISTBOX_BKCOLOR0_DEFAULT,
    100            LISTBOX_BKCOLOR1_DEFAULT,
    101            LISTBOX_BKCOLOR2_DEFAULT,
    102            LISTBOX_BKCOLOR3_DEFAULT,
    103            LISTBOX_TEXTCOLOR0_DEFAULT,
    104            LISTBOX_TEXTCOLOR1_DEFAULT,
    105            LISTBOX_TEXTCOLOR2_DEFAULT,
    106            LISTBOX_TEXTCOLOR3_DEFAULT,
    107          };
    108          
    109          
    110          /*********************************************************************
    111          *
    112          *       Static routines
    113          *
    114          **********************************************************************
    115          */
    116          /*********************************************************************
    117          *
    118          *       _CallOwnerDraw
    119          */

   \                                 In section .text, align 2, keep-with-next
    120          static int _CallOwnerDraw(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, int Cmd, int ItemIndex) {
   \                     _CallOwnerDraw: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    121            WIDGET_ITEM_DRAW_INFO ItemInfo;
    122            int r;
    123            ItemInfo.Cmd       = Cmd;
   \   00000004   0x9201             STR      R2,[SP, #+4]
    124            ItemInfo.hWin      = hObj;
   \   00000006   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    125            ItemInfo.ItemIndex = ItemIndex;
   \   0000000A   0x9302             STR      R3,[SP, #+8]
    126            if (pObj->pfDrawItem) {
   \   0000000C   0x6AC9             LDR      R1,[R1, #+44]
   \   0000000E   0x0008             MOVS     R0,R1
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0xD001             BEQ.N    ??_CallOwnerDraw_0
    127              r = pObj->pfDrawItem(&ItemInfo);
   \   00000014   0x4788             BLX      R1
   \   00000016   0xE001             B.N      ??_CallOwnerDraw_1
    128            } else {
    129              r = LISTBOX_OwnerDraw(&ItemInfo);
   \                     ??_CallOwnerDraw_0: (+1)
   \   00000018   0x.... 0x....      BL       LISTBOX_OwnerDraw
    130            }
    131            return r;
   \                     ??_CallOwnerDraw_1: (+1)
   \   0000001C   0xB005             ADD      SP,SP,#+20
   \   0000001E   0xBD00             POP      {PC}             ;; return
    132          }
    133          
    134          /*********************************************************************
    135          *
    136          *       LISTBOX__GetNumItems
    137          *
    138          *  Returns:
    139          *    Number of items
    140          */

   \                                 In section .text, align 2, keep-with-next
    141          unsigned LISTBOX__GetNumItems(const LISTBOX_Obj* pObj) {
    142            return GUI_ARRAY_GetNumItems(&pObj->ItemArray);
   \                     LISTBOX__GetNumItems: (+1)
   \   00000000   0x3028             ADDS     R0,R0,#+40
   \   00000002   0x.... 0x....      B.W      GUI_ARRAY_GetNumItems
    143          }
    144          
    145          /*********************************************************************
    146          *
    147          *       LISTBOX__GetpString
    148          *
    149          *  Returns:
    150          *    Pointer to the specified item
    151          */

   \                                 In section .text, align 2, keep-with-next
    152          const char* LISTBOX__GetpString(const LISTBOX_Obj* pObj, int Index) {
   \                     LISTBOX__GetpString: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    153            const char* s = NULL;
   \   00000002   0x2400             MOVS     R4,#+0
    154            LISTBOX_ITEM* pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
   \   00000004   0x3028             ADDS     R0,R0,#+40
   \   00000006   0x.... 0x....      BL       GUI_ARRAY_GetpItem
    155            if (pItem) {
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??LISTBOX__GetpString_0
    156              s = pItem->acText;
   \   0000000E   0xF200 0x0405      ADDW     R4,R0,#+5
    157            }
    158            return s;
   \                     ??LISTBOX__GetpString_0: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    159          }
    160          
    161          /*********************************************************************
    162          *
    163          *       _GetYSize
    164          */

   \                                 In section .text, align 2, keep-with-next
    165          static int _GetYSize(LISTBOX_Handle hObj) {
   \                     _GetYSize: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    166            GUI_RECT Rect;
    167            WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    168            return (Rect.y1 - Rect.y0 + 1);
   \   0000000A   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \   0000000E   0xF9BD 0x1002      LDRSH    R1,[SP, #+2]
   \   00000012   0x1A40             SUBS     R0,R0,R1
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0xBD0E             POP      {R1-R3,PC}       ;; return
    169          }
    170          
    171          /*********************************************************************
    172          *
    173          *       _GetItemSizeX
    174          */

   \                                 In section .text, align 2, keep-with-next
    175          static int _GetItemSizeX(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, unsigned Index) {
   \                     _GetItemSizeX: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    176            LISTBOX_ITEM* pItem;
    177            int xSize = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    178            pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
   \   0000000C   0x4631             MOV      R1,R6
   \   0000000E   0xF105 0x0028      ADD      R0,R5,#+40
   \   00000012   0x.... 0x....      BL       GUI_ARRAY_GetpItem
   \   00000016   0x4680             MOV      R8,R0
    179            if (pItem) {
   \   00000018   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000001C   0xD001             BEQ.N    ??_GetItemSizeX_0
    180              xSize = pItem->xSize;
   \   0000001E   0xF8B8 0x7000      LDRH     R7,[R8, #+0]
    181            }
    182            if (xSize == 0) {
   \                     ??_GetItemSizeX_0: (+1)
   \   00000022   0x2F00             CMP      R7,#+0
   \   00000024   0xD10D             BNE.N    ??_GetItemSizeX_1
    183              const GUI_FONT GUI_UNI_PTR* pOldFont;
    184              pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   00000026   0x6CA8             LDR      R0,[R5, #+72]
   \   00000028   0x.... 0x....      BL       GUI_SetFont
   \   0000002C   0x4681             MOV      R9,R0
    185              xSize    = _CallOwnerDraw(hObj, pObj, WIDGET_ITEM_GET_XSIZE, Index);
   \   0000002E   0x4633             MOV      R3,R6
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       _CallOwnerDraw
   \   0000003A   0x4607             MOV      R7,R0
    186              GUI_SetFont(pOldFont);
   \   0000003C   0x4648             MOV      R0,R9
   \   0000003E   0x.... 0x....      BL       GUI_SetFont
    187            }
    188            if (pItem) {
   \                     ??_GetItemSizeX_1: (+1)
   \   00000042   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000046   0xD001             BEQ.N    ??_GetItemSizeX_2
    189              pItem->xSize = xSize;
   \   00000048   0xF8A8 0x7000      STRH     R7,[R8, #+0]
    190            }
    191            return xSize;
   \                     ??_GetItemSizeX_2: (+1)
   \   0000004C   0x4638             MOV      R0,R7
   \   0000004E   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    192          }
    193          
    194          /*********************************************************************
    195          *
    196          *       _GetItemSizeY
    197          */

   \                                 In section .text, align 2, keep-with-next
    198          static int _GetItemSizeY(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, unsigned Index) {
   \                     _GetItemSizeY: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    199            LISTBOX_ITEM* pItem;
    200            int ySize = 0;
   \   0000000A   0x2700             MOVS     R7,#+0
    201            pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
   \   0000000C   0x4631             MOV      R1,R6
   \   0000000E   0xF105 0x0028      ADD      R0,R5,#+40
   \   00000012   0x.... 0x....      BL       GUI_ARRAY_GetpItem
   \   00000016   0x4680             MOV      R8,R0
    202            if (pItem) {
   \   00000018   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000001C   0xD001             BEQ.N    ??_GetItemSizeY_0
    203              ySize = pItem->ySize;
   \   0000001E   0xF8B8 0x7002      LDRH     R7,[R8, #+2]
    204            }
    205            if (ySize == 0) {
   \                     ??_GetItemSizeY_0: (+1)
   \   00000022   0x2F00             CMP      R7,#+0
   \   00000024   0xD10D             BNE.N    ??_GetItemSizeY_1
    206              const GUI_FONT GUI_UNI_PTR* pOldFont;
    207              pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   00000026   0x6CA8             LDR      R0,[R5, #+72]
   \   00000028   0x.... 0x....      BL       GUI_SetFont
   \   0000002C   0x4681             MOV      R9,R0
    208              ySize    = _CallOwnerDraw(hObj, pObj, WIDGET_ITEM_GET_YSIZE, Index);
   \   0000002E   0x4633             MOV      R3,R6
   \   00000030   0x2202             MOVS     R2,#+2
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       _CallOwnerDraw
   \   0000003A   0x4607             MOV      R7,R0
    209              GUI_SetFont(pOldFont);
   \   0000003C   0x4648             MOV      R0,R9
   \   0000003E   0x.... 0x....      BL       GUI_SetFont
    210            }
    211            if (pItem) {
   \                     ??_GetItemSizeY_1: (+1)
   \   00000042   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000046   0xD001             BEQ.N    ??_GetItemSizeY_2
    212              pItem->ySize = ySize;
   \   00000048   0xF8A8 0x7002      STRH     R7,[R8, #+2]
    213            }
    214            return ySize;
   \                     ??_GetItemSizeY_2: (+1)
   \   0000004C   0x4638             MOV      R0,R7
   \   0000004E   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    215          }
    216          
    217          /*********************************************************************
    218          *
    219          *       _GetContentsSizeX
    220          */

   \                                 In section .text, align 2, keep-with-next
    221          static int _GetContentsSizeX(LISTBOX_Handle hObj) {
   \                     _GetContentsSizeX: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
    222            LISTBOX_Obj* pObj;
    223            int i, NumItems, SizeX;
    224            int Result = 0;
   \   00000006   0x2500             MOVS     R5,#+0
    225            pObj = LISTBOX_H2P(hObj);
   \   00000008   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000C   0x4606             MOV      R6,R0
    226            NumItems = LISTBOX__GetNumItems(pObj);
   \   0000000E   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000012   0x4607             MOV      R7,R0
    227            for (i = 0; i < NumItems; i++) {
   \   00000014   0x46A8             MOV      R8,R5
   \   00000016   0xE009             B.N      ??_GetContentsSizeX_0
    228              SizeX = _GetItemSizeX(hObj, pObj, i);
   \                     ??_GetContentsSizeX_1: (+1)
   \   00000018   0x4642             MOV      R2,R8
   \   0000001A   0x4631             MOV      R1,R6
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       _GetItemSizeX
    229              if (Result < SizeX) {
   \   00000022   0x4285             CMP      R5,R0
   \   00000024   0xDA00             BGE.N    ??_GetContentsSizeX_2
   \   00000026   0x4605             MOV      R5,R0
    230                Result = SizeX;
    231              }
    232            }
   \                     ??_GetContentsSizeX_2: (+1)
   \   00000028   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??_GetContentsSizeX_0: (+1)
   \   0000002C   0x45B8             CMP      R8,R7
   \   0000002E   0xDBF3             BLT.N    ??_GetContentsSizeX_1
    233            return Result;
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    234          }
    235          
    236          /*********************************************************************
    237          *
    238          *       _GetItemPosY
    239          */

   \                                 In section .text, align 2, keep-with-next
    240          static int _GetItemPosY(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, unsigned Index) {
   \                     _GetItemPosY: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
    241            if (Index < LISTBOX__GetNumItems(pObj)) {
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000010   0x4286             CMP      R6,R0
   \   00000012   0xD210             BCS.N    ??_GetItemPosY_0
    242              if ((int)Index >= pObj->ScrollStateV.v) {
   \   00000014   0x6B6F             LDR      R7,[R5, #+52]
   \   00000016   0x42BE             CMP      R6,R7
   \   00000018   0xDB0D             BLT.N    ??_GetItemPosY_0
    243                unsigned i;
    244                int PosY = 0;
   \   0000001A   0xF04F 0x0800      MOV      R8,#+0
    245                for (i = pObj->ScrollStateV.v; i < Index; i++) {
   \   0000001E   0xE006             B.N      ??_GetItemPosY_1
    246                  PosY += _GetItemSizeY(hObj, pObj, i);
   \                     ??_GetItemPosY_2: (+1)
   \   00000020   0x463A             MOV      R2,R7
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       _GetItemSizeY
   \   0000002A   0x4480             ADD      R8,R0,R8
    247                }
   \   0000002C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??_GetItemPosY_1: (+1)
   \   0000002E   0x42B7             CMP      R7,R6
   \   00000030   0xD3F6             BCC.N    ??_GetItemPosY_2
    248                return PosY;
   \   00000032   0x4640             MOV      R0,R8
   \   00000034   0xE001             B.N      ??_GetItemPosY_3
    249              }
    250            }
    251            return -1;
   \                     ??_GetItemPosY_0: (+1)
   \   00000036   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??_GetItemPosY_3: (+1)
   \   0000003A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    252          }
    253          
    254          /*********************************************************************
    255          *
    256          *       _IsPartiallyVis
    257          */

   \                                 In section .text, align 2, keep-with-next
    258          static int _IsPartiallyVis(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj) {
   \                     _IsPartiallyVis: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    259            int Index;
    260            Index = pObj->Sel;
   \   00000006   0xF9B5 0x6072      LDRSH    R6,[R5, #+114]
    261            if (Index < (int)LISTBOX__GetNumItems(pObj)) {
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000010   0x4286             CMP      R6,R0
   \   00000012   0xDA15             BGE.N    ??_IsPartiallyVis_0
    262              if (Index >= pObj->ScrollStateV.v) {
   \   00000014   0x6B68             LDR      R0,[R5, #+52]
   \   00000016   0x4286             CMP      R6,R0
   \   00000018   0xDB12             BLT.N    ??_IsPartiallyVis_0
    263                int y;
    264                y  = _GetItemPosY (hObj, pObj, Index);
   \   0000001A   0x4632             MOV      R2,R6
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       _GetItemPosY
   \   00000024   0x4607             MOV      R7,R0
    265                y += _GetItemSizeY(hObj, pObj, Index);
   \   00000026   0x4632             MOV      R2,R6
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       _GetItemSizeY
   \   00000030   0x19C5             ADDS     R5,R0,R7
    266                if (y > _GetYSize(hObj)) {
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       _GetYSize
   \   00000038   0x42A8             CMP      R0,R5
   \   0000003A   0xDA01             BGE.N    ??_IsPartiallyVis_0
    267                  return 1;
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xBDF2             POP      {R1,R4-R7,PC}
    268                }
    269              }
    270            }
    271            return 0;
   \                     ??_IsPartiallyVis_0: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    272          }
    273          
    274          /*********************************************************************
    275          *
    276          *       _GetNumVisItems
    277          *
    278          *  Returns:
    279          *   Number of fully or partially visible items
    280          */

   \                                 In section .text, align 2, keep-with-next
    281          static unsigned _GetNumVisItems(const LISTBOX_Obj* pObj, LISTBOX_Handle hObj) {
   \                     _GetNumVisItems: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    282            int NumItems, r = 1;
   \   00000008   0x2601             MOVS     R6,#+1
    283            NumItems = LISTBOX__GetNumItems(pObj);
   \   0000000A   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   0000000E   0x4607             MOV      R7,R0
    284            if (NumItems > 1) {
   \   00000010   0x2F02             CMP      R7,#+2
   \   00000012   0xDB1B             BLT.N    ??_GetNumVisItems_0
    285              int i, ySize, DistY = 0;
   \   00000014   0x2600             MOVS     R6,#+0
    286              ySize = _GetYSize(hObj);
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0x.... 0x....      BL       _GetYSize
   \   0000001C   0x4680             MOV      R8,R0
    287              for (i = NumItems - 1; i >= 0; i--) {
   \   0000001E   0xF1A7 0x0901      SUB      R9,R7,#+1
   \   00000022   0xE001             B.N      ??_GetNumVisItems_1
   \                     ??_GetNumVisItems_2: (+1)
   \   00000024   0xF1A9 0x0901      SUB      R9,R9,#+1
   \                     ??_GetNumVisItems_1: (+1)
   \   00000028   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000002C   0xD407             BMI.N    ??_GetNumVisItems_3
    288                DistY += _GetItemSizeY(hObj, pObj, i);
   \   0000002E   0x464A             MOV      R2,R9
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       _GetItemSizeY
   \   00000038   0x1986             ADDS     R6,R0,R6
    289                if (DistY > ySize) {
   \   0000003A   0x45B0             CMP      R8,R6
   \   0000003C   0xDAF2             BGE.N    ??_GetNumVisItems_2
    290                  break;
    291                }
    292              }
    293              r = NumItems - i - 1;
   \                     ??_GetNumVisItems_3: (+1)
   \   0000003E   0xEBA7 0x0009      SUB      R0,R7,R9
   \   00000042   0x1E46             SUBS     R6,R0,#+1
    294              if (r < 1) {
   \   00000044   0x2E01             CMP      R6,#+1
   \   00000046   0xDA01             BGE.N    ??_GetNumVisItems_0
    295                return 1;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xE000             B.N      ??_GetNumVisItems_4
    296              }
    297            }
    298            return r;
   \                     ??_GetNumVisItems_0: (+1)
   \   0000004C   0x4630             MOV      R0,R6
   \                     ??_GetNumVisItems_4: (+1)
   \   0000004E   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    299          }
    300          
    301          /*********************************************************************
    302          *
    303          *       _NotifyOwner
    304          *
    305          * Purpose:
    306          *   Notify owner of the window.
    307          *   If no owner is registered, the parent is considered owner.
    308          */

   \                                 In section .text, align 2, keep-with-next
    309          static void _NotifyOwner(WM_HWIN hObj, int Notification) {
   \                     _NotifyOwner: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    310            WM_MESSAGE Msg = {0};
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x460A             MOV      R2,R1
   \   0000000C   0x460B             MOV      R3,R1
   \   0000000E   0xC00E             STM      R0!,{R1-R3}
    311            WM_HWIN hOwner;
    312            LISTBOX_Obj* pObj    = LISTBOX_H2P(hObj);
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       GUI_ALLOC_h2p
    313            hOwner = pObj->hOwner ? pObj->hOwner : WM_GetParent(hObj);
   \   00000016   0xF9B0 0x0070      LDRSH    R0,[R0, #+112]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD102             BNE.N    ??_NotifyOwner_0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       WM_GetParent
    314            Msg.MsgId  = WM_NOTIFY_PARENT;
   \                     ??_NotifyOwner_0: (+1)
   \   00000024   0x2126             MOVS     R1,#+38
   \   00000026   0x9100             STR      R1,[SP, #+0]
    315            Msg.Data.v = Notification;
   \   00000028   0x9502             STR      R5,[SP, #+8]
    316            Msg.hWinSrc= hObj;
   \   0000002A   0xF8AD 0x4006      STRH     R4,[SP, #+6]
    317            WM_SendMessage(hOwner, &Msg);
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x.... 0x....      BL       WM_SendMessage
    318          }
   \   00000034   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    319          
    320          /*********************************************************************
    321          *
    322          *       LISTBOX_OwnerDraw
    323          */

   \                                 In section .text, align 2, keep-with-next
    324          int LISTBOX_OwnerDraw(const WIDGET_ITEM_DRAW_INFO* pDrawItemInfo) {
   \                     LISTBOX_OwnerDraw: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4604             MOV      R4,R0
    325            switch (pDrawItemInfo->Cmd) {
   \   00000008   0x6860             LDR      R0,[R4, #+4]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD024             BEQ.N    ??LISTBOX_OwnerDraw_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD016             BEQ.N    ??LISTBOX_OwnerDraw_1
   \   00000012   0xF080 0x8095      BCS.W    ??LISTBOX_OwnerDraw_2
    326              case WIDGET_ITEM_GET_XSIZE: {
    327                LISTBOX_Obj* pObj;
    328                const GUI_FONT GUI_UNI_PTR* pOldFont;
    329                const char* s;
    330                int DistX;
    331                pObj = LISTBOX_H2P(pDrawItemInfo->hWin);
   \   00000016   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   0000001A   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000001E   0x4605             MOV      R5,R0
    332                pOldFont = GUI_SetFont(pObj->Props.pFont);
   \   00000020   0x6CA8             LDR      R0,[R5, #+72]
   \   00000022   0x.... 0x....      BL       GUI_SetFont
   \   00000026   0x4606             MOV      R6,R0
    333                s = LISTBOX__GetpString(pObj, pDrawItemInfo->ItemIndex);
   \   00000028   0x68A1             LDR      R1,[R4, #+8]
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       LISTBOX__GetpString
    334                DistX = GUI_GetStringDistX(s);
   \   00000030   0x.... 0x....      BL       GUI_GetStringDistX
   \   00000034   0x4604             MOV      R4,R0
    335                GUI_SetFont(pOldFont);
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       GUI_SetFont
    336                return DistX;
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0xE080             B.N      ??LISTBOX_OwnerDraw_3
    337              }
    338              case WIDGET_ITEM_GET_YSIZE: {
    339                LISTBOX_Obj* pObj;
    340                pObj = LISTBOX_H2P(pDrawItemInfo->hWin);
   \                     ??LISTBOX_OwnerDraw_1: (+1)
   \   00000040   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   00000044   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000048   0x4604             MOV      R4,R0
    341                return GUI_GetYDistOfFont(pObj->Props.pFont) + pObj->ItemSpacing;
   \   0000004A   0x6CA0             LDR      R0,[R4, #+72]
   \   0000004C   0x.... 0x....      BL       GUI_GetYDistOfFont
   \   00000050   0xF8B4 0x1076      LDRH     R1,[R4, #+118]
   \   00000054   0x1808             ADDS     R0,R1,R0
   \   00000056   0xE074             B.N      ??LISTBOX_OwnerDraw_3
    342              }
    343              case WIDGET_ITEM_DRAW: {
    344                LISTBOX_Obj* pObj;
    345                LISTBOX_ITEM* pItem;
    346                WM_HMEM hItem;
    347                GUI_RECT r;
    348                int FontDistY;
    349                int ItemIndex = pDrawItemInfo->ItemIndex;
   \                     ??LISTBOX_OwnerDraw_0: (+1)
   \   00000058   0x68A7             LDR      R7,[R4, #+8]
    350                const char* s;
    351                int ColorIndex;
    352                char IsDisabled;
    353                char IsSelected;
    354                pObj = LISTBOX_H2P(pDrawItemInfo->hWin);
   \   0000005A   0xF9B4 0x0000      LDRSH    R0,[R4, #+0]
   \   0000005E   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000062   0x4680             MOV      R8,R0
    355                hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, ItemIndex);
   \   00000064   0x4639             MOV      R1,R7
   \   00000066   0xF108 0x0028      ADD      R0,R8,#+40
   \   0000006A   0x.... 0x....      BL       GUI_ARRAY_GethItem
    356                pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
   \   0000006E   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000072   0x4605             MOV      R5,R0
    357                WM_GetInsideRect(&r);
   \   00000074   0xA802             ADD      R0,SP,#+8
   \   00000076   0x.... 0x....      BL       WM_GetInsideRect
    358                FontDistY = GUI_GetFontDistY();
   \   0000007A   0x.... 0x....      BL       GUI_GetFontDistY
   \   0000007E   0x4606             MOV      R6,R0
    359                /* Calculate color index */
    360                IsDisabled = (pItem->Status & LISTBOX_ITEM_DISABLED) ? 1 : 0;
   \   00000080   0x7928             LDRB     R0,[R5, #+4]
   \   00000082   0x0841             LSRS     R1,R0,#+1
   \   00000084   0xF001 0x0101      AND      R1,R1,#0x1
    361                IsSelected = (pItem->Status & LISTBOX_ITEM_SELECTED) ? 1 : 0;
   \   00000088   0xF000 0x0001      AND      R0,R0,#0x1
    362                if (pObj->Flags & LISTBOX_SF_MULTISEL) {
   \   0000008C   0xF898 0x2074      LDRB     R2,[R8, #+116]
   \   00000090   0x0752             LSLS     R2,R2,#+29
   \   00000092   0xD507             BPL.N    ??LISTBOX_OwnerDraw_4
    363                  if (IsDisabled) {
   \   00000094   0x2900             CMP      R1,#+0
   \   00000096   0xD107             BNE.N    ??LISTBOX_OwnerDraw_5
    364                    ColorIndex = 3;
    365                  } else {
    366                    ColorIndex = (IsSelected) ? 2 : 0;
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD001             BEQ.N    ??LISTBOX_OwnerDraw_6
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0xE014             B.N      ??LISTBOX_OwnerDraw_7
   \                     ??LISTBOX_OwnerDraw_6: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xE012             B.N      ??LISTBOX_OwnerDraw_7
    367                  }
    368                } else {
    369                  if (IsDisabled) {
   \                     ??LISTBOX_OwnerDraw_4: (+1)
   \   000000A4   0x2900             CMP      R1,#+0
   \   000000A6   0xD001             BEQ.N    ??LISTBOX_OwnerDraw_8
    370                    ColorIndex = 3;
   \                     ??LISTBOX_OwnerDraw_5: (+1)
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0xE00E             B.N      ??LISTBOX_OwnerDraw_7
    371                  } else {
    372                    if (ItemIndex == pObj->Sel) {
   \                     ??LISTBOX_OwnerDraw_8: (+1)
   \   000000AC   0xF108 0x0026      ADD      R0,R8,#+38
   \   000000B0   0xF9B0 0x004C      LDRSH    R0,[R0, #+76]
   \   000000B4   0x4287             CMP      R7,R0
   \   000000B6   0xD107             BNE.N    ??LISTBOX_OwnerDraw_9
    373                      ColorIndex = (pObj->Widget.State & WIDGET_STATE_FOCUS) ? 2 : 1;
   \   000000B8   0xF898 0x0026      LDRB     R0,[R8, #+38]
   \   000000BC   0x07C0             LSLS     R0,R0,#+31
   \   000000BE   0xD501             BPL.N    ??LISTBOX_OwnerDraw_10
   \   000000C0   0x2002             MOVS     R0,#+2
   \   000000C2   0xE002             B.N      ??LISTBOX_OwnerDraw_7
   \                     ??LISTBOX_OwnerDraw_10: (+1)
   \   000000C4   0x2001             MOVS     R0,#+1
   \   000000C6   0xE000             B.N      ??LISTBOX_OwnerDraw_7
    374                    } else {
    375                      ColorIndex = 0;
   \                     ??LISTBOX_OwnerDraw_9: (+1)
   \   000000C8   0x2000             MOVS     R0,#+0
    376                    }
    377                  }
    378                }
    379                /* Display item */
    380                LCD_SetBkColor(pObj->Props.aBackColor[ColorIndex]);
   \                     ??LISTBOX_OwnerDraw_7: (+1)
   \   000000CA   0xEB08 0x0580      ADD      R5,R8,R0, LSL #+2
   \   000000CE   0x6D28             LDR      R0,[R5, #+80]
   \   000000D0   0x.... 0x....      BL       LCD_SetBkColor
    381                LCD_SetColor  (pObj->Props.aTextColor[ColorIndex]);
   \   000000D4   0x6E28             LDR      R0,[R5, #+96]
   \   000000D6   0x.... 0x....      BL       LCD_SetColor
    382                s = LISTBOX__GetpString(pObj, ItemIndex);
   \   000000DA   0x4639             MOV      R1,R7
   \   000000DC   0x4640             MOV      R0,R8
   \   000000DE   0x.... 0x....      BL       LISTBOX__GetpString
   \   000000E2   0x4681             MOV      R9,R0
    383                GUI_SetTextMode(GUI_TM_TRANS);
   \   000000E4   0x2002             MOVS     R0,#+2
   \   000000E6   0x.... 0x....      BL       GUI_SetTextMode
    384                GUI_Clear();
   \   000000EA   0x.... 0x....      BL       GUI_Clear
    385                GUI_DispStringAt(s, pDrawItemInfo->x0 + 1, pDrawItemInfo->y0);
   \   000000EE   0x6922             LDR      R2,[R4, #+16]
   \   000000F0   0x68E0             LDR      R0,[R4, #+12]
   \   000000F2   0x1C41             ADDS     R1,R0,#+1
   \   000000F4   0x4648             MOV      R0,R9
   \   000000F6   0x.... 0x....      BL       GUI_DispStringAt
    386                /* Display focus rectangle */
    387                if ((pObj->Flags & LISTBOX_SF_MULTISEL) && (ItemIndex == pObj->Sel)) {
   \   000000FA   0xF898 0x0074      LDRB     R0,[R8, #+116]
   \   000000FE   0x0740             LSLS     R0,R0,#+29
   \   00000100   0xD51E             BPL.N    ??LISTBOX_OwnerDraw_2
   \   00000102   0xF108 0x0026      ADD      R0,R8,#+38
   \   00000106   0xF9B0 0x004C      LDRSH    R0,[R0, #+76]
   \   0000010A   0x4287             CMP      R7,R0
   \   0000010C   0xD118             BNE.N    ??LISTBOX_OwnerDraw_2
    388                  GUI_RECT rFocus;
    389                  rFocus.x0 = pDrawItemInfo->x0;
   \   0000010E   0x68E0             LDR      R0,[R4, #+12]
   \   00000110   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    390                  rFocus.y0 = pDrawItemInfo->y0;
   \   00000114   0x6920             LDR      R0,[R4, #+16]
   \   00000116   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    391                  rFocus.x1 = r.x1;
   \   0000011A   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   0000011E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    392                  rFocus.y1 = pDrawItemInfo->y0 + FontDistY - 1;
   \   00000122   0x6920             LDR      R0,[R4, #+16]
   \   00000124   0x1830             ADDS     R0,R6,R0
   \   00000126   0x1E40             SUBS     R0,R0,#+1
   \   00000128   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    393                  LCD_SetColor(GUI_WHITE - pObj->Props.aBackColor[ColorIndex]);
   \   0000012C   0xF06F 0x407F      MVN      R0,#-16777216
   \   00000130   0x6D29             LDR      R1,[R5, #+80]
   \   00000132   0x1A40             SUBS     R0,R0,R1
   \   00000134   0x.... 0x....      BL       LCD_SetColor
    394                  GUI_DrawFocusRect(&rFocus, 0);
   \   00000138   0x2100             MOVS     R1,#+0
   \   0000013A   0xA800             ADD      R0,SP,#+0
   \   0000013C   0x.... 0x....      BL       GUI_DrawFocusRect
    395                }
    396                return 0;
    397              }
    398            }
    399            return 0;
   \                     ??LISTBOX_OwnerDraw_2: (+1)
   \   00000140   0x2000             MOVS     R0,#+0
   \                     ??LISTBOX_OwnerDraw_3: (+1)
   \   00000142   0xB005             ADD      SP,SP,#+20
   \   00000144   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    400          }
    401          
    402          /*********************************************************************
    403          *
    404          *       _UpdateScrollPos
    405          *
    406          * Purpose:
    407          *   Checks whether if we must scroll up or scroll down to ensure
    408          *   that selection is in the visible area. This function also
    409          *   makes sure that scroll positions are in valid ranges.
    410          *
    411          * Return value:
    412          *   Difference between old and new vertical scroll pos.
    413          */

   \                                 In section .text, align 2, keep-with-next
    414          static int _UpdateScrollPos(LISTBOX_Handle hObj, LISTBOX_Obj* pObj) {
   \                     _UpdateScrollPos: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    415            int PrevScrollStateV;
    416            PrevScrollStateV = pObj->ScrollStateV.v;
   \   00000006   0x6B6E             LDR      R6,[R5, #+52]
    417            if (pObj->Sel >= 0) {
   \   00000008   0xF9B5 0x0072      LDRSH    R0,[R5, #+114]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD410             BMI.N    ??_UpdateScrollPos_0
    418              /* Check upper limit */
    419              if (_IsPartiallyVis(hObj, pObj)) {
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       _IsPartiallyVis
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD005             BEQ.N    ??_UpdateScrollPos_1
    420                pObj->ScrollStateV.v = pObj->Sel - (pObj->ScrollStateV.PageSize - 1);
   \   0000001A   0xF9B5 0x0072      LDRSH    R0,[R5, #+114]
   \   0000001E   0x6BA9             LDR      R1,[R5, #+56]
   \   00000020   0x1A40             SUBS     R0,R0,R1
   \   00000022   0x1C40             ADDS     R0,R0,#+1
   \   00000024   0x6368             STR      R0,[R5, #+52]
    421              }
    422              /* Check lower limit */
    423              if (pObj->Sel < pObj->ScrollStateV.v) {
   \                     ??_UpdateScrollPos_1: (+1)
   \   00000026   0xF9B5 0x0072      LDRSH    R0,[R5, #+114]
   \   0000002A   0x6B69             LDR      R1,[R5, #+52]
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xDA00             BGE.N    ??_UpdateScrollPos_0
    424                pObj->ScrollStateV.v = pObj->Sel;
   \   00000030   0x6368             STR      R0,[R5, #+52]
    425              }
    426            }
    427            WM_CheckScrollBounds(&pObj->ScrollStateV);
   \                     ??_UpdateScrollPos_0: (+1)
   \   00000032   0xF105 0x0030      ADD      R0,R5,#+48
   \   00000036   0x.... 0x....      BL       WM_CheckScrollBounds
    428            WM_CheckScrollBounds(&pObj->ScrollStateH);
   \   0000003A   0xF105 0x003C      ADD      R0,R5,#+60
   \   0000003E   0x.... 0x....      BL       WM_CheckScrollBounds
    429            WIDGET__SetScrollState(hObj, &pObj->ScrollStateV, &pObj->ScrollStateH);
   \   00000042   0xF105 0x023C      ADD      R2,R5,#+60
   \   00000046   0xF105 0x0130      ADD      R1,R5,#+48
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       WIDGET__SetScrollState
    430            return pObj->ScrollStateV.v - PrevScrollStateV;
   \   00000050   0x6B68             LDR      R0,[R5, #+52]
   \   00000052   0x1B80             SUBS     R0,R0,R6
   \   00000054   0xBD70             POP      {R4-R6,PC}       ;; return
    431          }
    432          
    433          /*********************************************************************
    434          *
    435          *       LISTBOX__InvalidateItemSize
    436          */

   \                                 In section .text, align 2, keep-with-next
    437          void LISTBOX__InvalidateItemSize(const LISTBOX_Obj* pObj, unsigned Index) {
   \                     LISTBOX__InvalidateItemSize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    438            LISTBOX_ITEM* pItem;
    439            pItem = (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, Index);
   \   00000002   0x3028             ADDS     R0,R0,#+40
   \   00000004   0x.... 0x....      BL       GUI_ARRAY_GetpItem
    440            if (pItem) {
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??LISTBOX__InvalidateItemSize_0
    441              pItem->xSize = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x8001             STRH     R1,[R0, #+0]
    442              pItem->ySize = 0;
   \   00000010   0x8041             STRH     R1,[R0, #+2]
    443            }
    444          }
   \                     ??LISTBOX__InvalidateItemSize_0: (+1)
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    445          
    446          /*********************************************************************
    447          *
    448          *       LISTBOX__InvalidateInsideArea
    449          */

   \                                 In section .text, align 2, keep-with-next
    450          void LISTBOX__InvalidateInsideArea(LISTBOX_Handle hObj) {
   \                     LISTBOX__InvalidateInsideArea: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    451            GUI_RECT Rect;
    452            WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    453            WM_InvalidateRect(hObj, &Rect);
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       WM_InvalidateRect
    454          }
   \   00000012   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    455          
    456          /*********************************************************************
    457          *
    458          *       LISTBOX__InvalidateItem
    459          */

   \                                 In section .text, align 2, keep-with-next
    460          void LISTBOX__InvalidateItem(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, int Sel) {
   \                     LISTBOX__InvalidateItem: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    461            if (Sel >= 0) {
   \   0000000A   0xD41A             BMI.N    ??LISTBOX__InvalidateItem_0
    462              int ItemPosY;
    463              ItemPosY = _GetItemPosY(hObj, pObj, Sel);
   \   0000000C   0x.... 0x....      BL       _GetItemPosY
   \   00000010   0x0007             MOVS     R7,R0
    464              if (ItemPosY >= 0) {
   \   00000012   0xD416             BMI.N    ??LISTBOX__InvalidateItem_0
    465                GUI_RECT Rect;
    466                int ItemDistY;
    467                ItemDistY = _GetItemSizeY(hObj, pObj, Sel);
   \   00000014   0x4632             MOV      R2,R6
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       _GetItemSizeY
   \   0000001E   0x4605             MOV      R5,R0
    468                WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000020   0xA900             ADD      R1,SP,#+0
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    469                Rect.y0 += ItemPosY;
   \   00000028   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000002C   0x1838             ADDS     R0,R7,R0
   \   0000002E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    470                Rect.y1  = Rect.y0 + ItemDistY - 1;
   \   00000032   0x1828             ADDS     R0,R5,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    471                WM_InvalidateRect(hObj, &Rect);
   \   0000003A   0xA900             ADD      R1,SP,#+0
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       WM_InvalidateRect
    472              }
    473            }
    474          }
   \                     ??LISTBOX__InvalidateItem_0: (+1)
   \   00000042   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    475          
    476          /*********************************************************************
    477          *
    478          *       LISTBOX__InvalidateItemAndBelow
    479          */

   \                                 In section .text, align 2, keep-with-next
    480          void LISTBOX__InvalidateItemAndBelow(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj, int Sel) {
   \                     LISTBOX__InvalidateItemAndBelow: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
    481            if (Sel >= 0) {
   \   00000006   0x2A00             CMP      R2,#+0
   \   00000008   0xD410             BMI.N    ??LISTBOX__InvalidateItemAndBelow_0
    482              int ItemPosY;
    483              ItemPosY = _GetItemPosY(hObj, pObj, Sel);
   \   0000000A   0x.... 0x....      BL       _GetItemPosY
   \   0000000E   0x0005             MOVS     R5,R0
    484              if (ItemPosY >= 0) {
   \   00000010   0xD40C             BMI.N    ??LISTBOX__InvalidateItemAndBelow_0
    485                GUI_RECT Rect;
    486                WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    487                Rect.y0 += ItemPosY;
   \   0000001A   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000001E   0x1828             ADDS     R0,R5,R0
   \   00000020   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    488                WM_InvalidateRect(hObj, &Rect);
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       WM_InvalidateRect
    489              }
    490            }
    491          }
   \                     ??LISTBOX__InvalidateItemAndBelow_0: (+1)
   \   0000002C   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    492          
    493          /*********************************************************************
    494          *
    495          *       LISTBOX__SetScrollbarWidth
    496          */

   \                                 In section .text, align 2, keep-with-next
    497          void LISTBOX__SetScrollbarWidth(LISTBOX_Handle hObj, const LISTBOX_Obj* pObj) {
   \                     LISTBOX__SetScrollbarWidth: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    498            WM_HWIN hBarH, hBarV;
    499            int Width;
    500            Width = pObj->ScrollbarWidth;
   \   00000004   0xF891 0x5075      LDRB     R5,[R1, #+117]
    501            if (Width == 0) {
   \   00000008   0x2D00             CMP      R5,#+0
   \   0000000A   0xD102             BNE.N    ??LISTBOX__SetScrollbarWidth_0
    502              Width = SCROLLBAR_GetDefaultWidth();
   \   0000000C   0x.... 0x....      BL       SCROLLBAR_GetDefaultWidth
   \   00000010   0x4605             MOV      R5,R0
    503            }
    504            hBarH = WM_GetDialogItem(hObj, GUI_ID_HSCROLL);
   \                     ??LISTBOX__SetScrollbarWidth_0: (+1)
   \   00000012   0x21FF             MOVS     R1,#+255
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       WM_GetDialogItem
   \   0000001A   0x4606             MOV      R6,R0
    505            hBarV = WM_GetDialogItem(hObj, GUI_ID_VSCROLL);
   \   0000001C   0x21FE             MOVS     R1,#+254
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       WM_GetDialogItem
   \   00000024   0x4604             MOV      R4,R0
    506            SCROLLBAR_SetWidth(hBarH, Width);
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0x.... 0x....      BL       SCROLLBAR_SetWidth
    507            SCROLLBAR_SetWidth(hBarV, Width);
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000036   0x.... 0x....      B.W      SCROLLBAR_SetWidth
    508          }
    509          
    510          /*********************************************************************
    511          *
    512          *       _CalcScrollParas
    513          */

   \                                 In section .text, align 2, keep-with-next
    514          static int _CalcScrollParas(LISTBOX_Handle hObj) {
   \                     _CalcScrollParas: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
    515            GUI_RECT Rect;
    516            LISTBOX_Obj* pObj = LISTBOX_H2P(hObj);
   \   00000006   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000A   0x4605             MOV      R5,R0
    517            /* Calc vertical scroll parameters */
    518            pObj->ScrollStateV.NumItems = LISTBOX__GetNumItems(pObj);
   \   0000000C   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000010   0x6328             STR      R0,[R5, #+48]
    519            pObj->ScrollStateV.PageSize = _GetNumVisItems(pObj, hObj);
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       _GetNumVisItems
   \   0000001A   0x63A8             STR      R0,[R5, #+56]
    520            /* Calc horizontal scroll parameters */
    521            WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    522            pObj->ScrollStateH.NumItems = _GetContentsSizeX(hObj);
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       _GetContentsSizeX
   \   0000002A   0x63E8             STR      R0,[R5, #+60]
    523            pObj->ScrollStateH.PageSize = Rect.x1 - Rect.x0 + 1;
   \   0000002C   0xF9BD 0x0004      LDRSH    R0,[SP, #+4]
   \   00000030   0xF9BD 0x1000      LDRSH    R1,[SP, #+0]
   \   00000034   0x1A40             SUBS     R0,R0,R1
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x6468             STR      R0,[R5, #+68]
    524            return _UpdateScrollPos(hObj, pObj);
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       _UpdateScrollPos
   \   00000042   0xBD3E             POP      {R1-R5,PC}       ;; return
    525          }
    526          
    527          /*********************************************************************
    528          *
    529          *       _ManageAutoScroll
    530          */

   \                                 In section .text, align 2, keep-with-next
    531          static void _ManageAutoScroll(LISTBOX_Handle hObj) {
   \                     _ManageAutoScroll: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    532            char IsRequired;
    533            LISTBOX_Obj* pObj = LISTBOX_H2P(hObj);
   \   00000004   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000008   0x4605             MOV      R5,R0
    534            if (pObj->Flags & LISTBOX_SF_AUTOSCROLLBAR_V) {
   \   0000000A   0xF895 0x0074      LDRB     R0,[R5, #+116]
   \   0000000E   0x0780             LSLS     R0,R0,#+30
   \   00000010   0xD50E             BPL.N    ??_ManageAutoScroll_0
    535              IsRequired = (_GetNumVisItems(pObj, hObj) < LISTBOX__GetNumItems(pObj));
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       _GetNumVisItems
   \   0000001A   0x4606             MOV      R6,R0
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000022   0x4286             CMP      R6,R0
   \   00000024   0x4189             SBCS     R1,R1,R1
   \   00000026   0x0FC9             LSRS     R1,R1,#+31
    536              WM_SetScrollbarV(hObj, IsRequired);
   \   00000028   0xB249             SXTB     R1,R1
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       WM_SetScrollbarV
    537            }
    538            if (pObj->Flags & LISTBOX_SF_AUTOSCROLLBAR_H) {
   \                     ??_ManageAutoScroll_0: (+1)
   \   00000030   0xF895 0x0074      LDRB     R0,[R5, #+116]
   \   00000034   0x07C0             LSLS     R0,R0,#+31
   \   00000036   0xD515             BPL.N    ??_ManageAutoScroll_1
    539              GUI_RECT Rect;
    540              int xSize, xSizeContents;
    541              xSizeContents = _GetContentsSizeX(hObj);
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       _GetContentsSizeX
   \   0000003E   0x4606             MOV      R6,R0
    542              WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    543              xSize = Rect.x1 - Rect.x0 + 1;
    544              IsRequired = (xSizeContents > xSize);
   \   00000048   0xF9BD 0x0004      LDRSH    R0,[SP, #+4]
   \   0000004C   0xF9BD 0x1000      LDRSH    R1,[SP, #+0]
   \   00000050   0x1A40             SUBS     R0,R0,R1
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \   00000054   0x42B0             CMP      R0,R6
   \   00000056   0xDA01             BGE.N    ??_ManageAutoScroll_2
   \   00000058   0x2101             MOVS     R1,#+1
   \   0000005A   0xE000             B.N      ??_ManageAutoScroll_3
   \                     ??_ManageAutoScroll_2: (+1)
   \   0000005C   0x2100             MOVS     R1,#+0
    545              WM_SetScrollbarH(hObj, IsRequired);
   \                     ??_ManageAutoScroll_3: (+1)
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       WM_SetScrollbarH
    546            }
    547            if (pObj->ScrollbarWidth) {
   \                     ??_ManageAutoScroll_1: (+1)
   \   00000064   0xF895 0x0075      LDRB     R0,[R5, #+117]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD003             BEQ.N    ??_ManageAutoScroll_4
    548              LISTBOX__SetScrollbarWidth(hObj, pObj);
   \   0000006C   0x4629             MOV      R1,R5
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0x.... 0x....      BL       LISTBOX__SetScrollbarWidth
    549            }
    550          }
   \                     ??_ManageAutoScroll_4: (+1)
   \   00000074   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    551          
    552          /*********************************************************************
    553          *
    554          *       LISTBOX_UpdateScrollers
    555          */

   \                                 In section .text, align 2, keep-with-next
    556          int LISTBOX_UpdateScrollers(LISTBOX_Handle hObj) {
   \                     LISTBOX_UpdateScrollers: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    557            _ManageAutoScroll(hObj);
   \   00000004   0x.... 0x....      BL       _ManageAutoScroll
    558            return _CalcScrollParas(hObj);
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000E   0x....             B.N      _CalcScrollParas
    559          }
    560          
    561          /*********************************************************************
    562          *
    563          *       _Tolower
    564          */

   \                                 In section .text, align 2, keep-with-next
    565          static int _Tolower(int Key) {
    566            if ((Key >= 0x41) && (Key <= 0x5a)) {
   \                     _Tolower: (+1)
   \   00000000   0xF1A0 0x0141      SUB      R1,R0,#+65
   \   00000004   0x291A             CMP      R1,#+26
   \   00000006   0xD200             BCS.N    ??_Tolower_0
    567              Key += 0x20;
   \   00000008   0x3020             ADDS     R0,R0,#+32
    568            }
    569            return Key;
   \                     ??_Tolower_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return
    570          }
    571          
    572          /*********************************************************************
    573          *
    574          *       _IsAlphaNum
    575          */

   \                                 In section .text, align 2, keep-with-next
    576          static int _IsAlphaNum(int Key) {
   \                     _IsAlphaNum: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    577            Key = _Tolower(Key);
   \   00000002   0x.... 0x....      BL       _Tolower
    578            if (Key >= 'a' && Key <= 'z') {
   \   00000006   0xF1A0 0x0161      SUB      R1,R0,#+97
   \   0000000A   0x291A             CMP      R1,#+26
   \   0000000C   0xD201             BCS.N    ??_IsAlphaNum_0
    579              return 1;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBD02             POP      {R1,PC}
    580            }
    581            if (Key >= '0' && Key <= '9') {
   \                     ??_IsAlphaNum_0: (+1)
   \   00000012   0x3830             SUBS     R0,R0,#+48
   \   00000014   0x280A             CMP      R0,#+10
   \   00000016   0xD201             BCS.N    ??_IsAlphaNum_1
    582              return 1;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xBD02             POP      {R1,PC}
    583            }
    584            return 0;
   \                     ??_IsAlphaNum_1: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
    585          }
    586          
    587          /*********************************************************************
    588          *
    589          *       _SelectByKey
    590          */

   \                                 In section .text, align 2, keep-with-next
    591          static void _SelectByKey(LISTBOX_Handle hObj, int Key) {
   \                     _SelectByKey: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    592            unsigned i;
    593            LISTBOX_Obj* pObj;
    594            pObj = LISTBOX_H2P(hObj);
   \   00000006   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000A   0x4606             MOV      R6,R0
    595            Key = _Tolower(Key);
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       _Tolower
   \   00000012   0x4605             MOV      R5,R0
    596            for (i = 0; i < LISTBOX__GetNumItems(pObj); i++) {
   \   00000014   0x2700             MOVS     R7,#+0
   \   00000016   0xE000             B.N      ??_SelectByKey_0
   \                     ??_SelectByKey_1: (+1)
   \   00000018   0x1C7F             ADDS     R7,R7,#+1
   \                     ??_SelectByKey_0: (+1)
   \   0000001A   0x4630             MOV      R0,R6
   \   0000001C   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000020   0x4287             CMP      R7,R0
   \   00000022   0xD20E             BCS.N    ??_SelectByKey_2
    597              const char* s = LISTBOX__GetpString(pObj, i);
   \   00000024   0x4639             MOV      R1,R7
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       LISTBOX__GetpString
    598              if (_Tolower(*s) == Key) {
   \   0000002C   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000030   0x.... 0x....      BL       _Tolower
   \   00000034   0x42A8             CMP      R0,R5
   \   00000036   0xD1EF             BNE.N    ??_SelectByKey_1
    599                LISTBOX_SetSel(hObj, i);
   \   00000038   0x4639             MOV      R1,R7
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   00000040   0x....             B.N      LISTBOX_SetSel
    600                break;
    601              }
    602            }
    603          }
   \                     ??_SelectByKey_2: (+1)
   \   00000042   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    604          
    605          /*********************************************************************
    606          *
    607          *       _FreeAttached
    608          */

   \                                 In section .text, align 2, keep-with-next
    609          static void _FreeAttached(LISTBOX_Obj* pObj) {
    610            GUI_ARRAY_Delete(&pObj->ItemArray);
   \                     _FreeAttached: (+1)
   \   00000000   0x3028             ADDS     R0,R0,#+40
   \   00000002   0x.... 0x....      B.W      GUI_ARRAY_Delete
    611          }
    612          
    613          /*********************************************************************
    614          *
    615          *       _OnPaint
    616          */

   \                                 In section .text, align 2, keep-with-next
    617          static void _OnPaint(LISTBOX_Handle hObj, LISTBOX_Obj* pObj, WM_MESSAGE* pMsg) {
   \                     _OnPaint: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4617             MOV      R7,R2
    618            WIDGET_ITEM_DRAW_INFO ItemInfo;
    619            GUI_RECT RectInside, RectItem, ClipRect;
    620            int ItemDistY, NumItems, i;
    621            NumItems = LISTBOX__GetNumItems(pObj);
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000012   0x4606             MOV      R6,R0
    622            GUI_SetFont(pObj->Props.pFont);
   \   00000014   0x6CA8             LDR      R0,[R5, #+72]
   \   00000016   0x.... 0x....      BL       GUI_SetFont
    623            /* Calculate clipping rectangle */
    624            ClipRect = *(const GUI_RECT*)pMsg->Data.p;
   \   0000001A   0xA802             ADD      R0,SP,#+8
   \   0000001C   0x68B9             LDR      R1,[R7, #+8]
   \   0000001E   0x2208             MOVS     R2,#+8
   \   00000020   0x.... 0x....      BL       __aeabi_memcpy
    625            GUI_MoveRect(&ClipRect, -pObj->Widget.Win.Rect.x0, -pObj->Widget.Win.Rect.y0);
   \   00000024   0xF9B5 0x0002      LDRSH    R0,[R5, #+2]
   \   00000028   0x4242             RSBS     R2,R0,#+0
   \   0000002A   0xF9B5 0x0000      LDRSH    R0,[R5, #+0]
   \   0000002E   0x4241             RSBS     R1,R0,#+0
   \   00000030   0xA802             ADD      R0,SP,#+8
   \   00000032   0x.... 0x....      BL       GUI_MoveRect
    626            WM_GetInsideRectExScrollbar(hObj, &RectInside);
   \   00000036   0xA904             ADD      R1,SP,#+16
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    627            GUI__IntersectRect(&ClipRect, &RectInside);
   \   0000003E   0xA904             ADD      R1,SP,#+16
   \   00000040   0xA802             ADD      R0,SP,#+8
   \   00000042   0x.... 0x....      BL       GUI__IntersectRect
    628            RectItem.x0 = ClipRect.x0;
   \   00000046   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000004A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    629            RectItem.x1 = ClipRect.x1;
   \   0000004E   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000052   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    630            /* Fill item info structure */
    631            ItemInfo.Cmd  = WIDGET_ITEM_DRAW;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x9007             STR      R0,[SP, #+28]
    632            ItemInfo.hWin = hObj;
   \   0000005A   0xF8AD 0x4018      STRH     R4,[SP, #+24]
    633            ItemInfo.x0   = RectInside.x0 - pObj->ScrollStateH.v;
   \   0000005E   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \   00000062   0x6C29             LDR      R1,[R5, #+64]
   \   00000064   0x1A40             SUBS     R0,R0,R1
   \   00000066   0x9009             STR      R0,[SP, #+36]
    634            ItemInfo.y0   = RectInside.y0;
   \   00000068   0xF9BD 0x0012      LDRSH    R0,[SP, #+18]
   \   0000006C   0x900A             STR      R0,[SP, #+40]
    635            /* Do the drawing */
    636            for (i = pObj->ScrollStateV.v; i < NumItems; i++) {
   \   0000006E   0x6B6F             LDR      R7,[R5, #+52]
   \   00000070   0xE005             B.N      ??_OnPaint_0
    637              RectItem.y0 = ItemInfo.y0;
    638              /* Break when all other rows are outside the drawing area */
    639              if (RectItem.y0 > ClipRect.y1) {
    640                break;
    641              }
    642              ItemDistY = _GetItemSizeY(hObj, pObj, i);
    643              RectItem.y1 = RectItem.y0 + ItemDistY - 1;
    644              /* Make sure that we draw only when row is in drawing area */
    645              if (RectItem.y1 >= ClipRect.y0) {
    646                /* Set user clip rect */
    647                WM_SetUserClipArea(&RectItem);
    648                /* Fill item info structure */
    649                ItemInfo.ItemIndex = i;
    650                /* Draw item */
    651                if (pObj->pfDrawItem) {
    652                  pObj->pfDrawItem(&ItemInfo);
    653                } else {
    654                  LISTBOX_OwnerDraw(&ItemInfo);
   \                     ??_OnPaint_1: (+1)
   \   00000072   0x.... 0x....      BL       LISTBOX_OwnerDraw
    655                }
    656              }
    657              ItemInfo.y0 += ItemDistY;
   \                     ??_OnPaint_2: (+1)
   \   00000076   0x980A             LDR      R0,[SP, #+40]
   \   00000078   0x4440             ADD      R0,R8,R0
   \   0000007A   0x900A             STR      R0,[SP, #+40]
   \   0000007C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??_OnPaint_0: (+1)
   \   0000007E   0x42B7             CMP      R7,R6
   \   00000080   0xDA23             BGE.N    ??_OnPaint_3
   \   00000082   0x980A             LDR      R0,[SP, #+40]
   \   00000084   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   00000088   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   0000008C   0xF9BD 0x1002      LDRSH    R1,[SP, #+2]
   \   00000090   0x4288             CMP      R0,R1
   \   00000092   0xDB1A             BLT.N    ??_OnPaint_3
   \   00000094   0x463A             MOV      R2,R7
   \   00000096   0x4629             MOV      R1,R5
   \   00000098   0x4620             MOV      R0,R4
   \   0000009A   0x.... 0x....      BL       _GetItemSizeY
   \   0000009E   0x4680             MOV      R8,R0
   \   000000A0   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   000000A4   0x4440             ADD      R0,R8,R0
   \   000000A6   0x1E40             SUBS     R0,R0,#+1
   \   000000A8   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   000000AC   0xF9BD 0x100A      LDRSH    R1,[SP, #+10]
   \   000000B0   0xB200             SXTH     R0,R0
   \   000000B2   0x4288             CMP      R0,R1
   \   000000B4   0xDBDF             BLT.N    ??_OnPaint_2
   \   000000B6   0xA800             ADD      R0,SP,#+0
   \   000000B8   0x.... 0x....      BL       WM_SetUserClipRect
   \   000000BC   0x9708             STR      R7,[SP, #+32]
   \   000000BE   0x6AE9             LDR      R1,[R5, #+44]
   \   000000C0   0x0008             MOVS     R0,R1
   \   000000C2   0xA806             ADD      R0,SP,#+24
   \   000000C4   0xD0D5             BEQ.N    ??_OnPaint_1
   \   000000C6   0x4788             BLX      R1
   \   000000C8   0xE7D5             B.N      ??_OnPaint_2
    658            }
    659            WM_SetUserClipArea(NULL);
   \                     ??_OnPaint_3: (+1)
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x.... 0x....      BL       WM_SetUserClipRect
    660            /* Calculate & clear 'data free' area */
    661            RectItem.y0 = ItemInfo.y0;
   \   000000D0   0x980A             LDR      R0,[SP, #+40]
   \   000000D2   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    662            RectItem.y1 = RectInside.y1;
   \   000000D6   0xF8BD 0x0016      LDRH     R0,[SP, #+22]
   \   000000DA   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    663            LCD_SetBkColor(pObj->Props.aBackColor[0]);
   \   000000DE   0x6D28             LDR      R0,[R5, #+80]
   \   000000E0   0x.... 0x....      BL       LCD_SetBkColor
    664            GUI_ClearRectEx(&RectItem);
   \   000000E4   0xA800             ADD      R0,SP,#+0
   \   000000E6   0x.... 0x....      BL       GUI_ClearRectEx
    665            /* Draw the 3D effect (if configured) */
    666            WIDGET__EFFECT_DrawDown(&pObj->Widget);
   \   000000EA   0x4628             MOV      R0,R5
   \   000000EC   0x.... 0x....      BL       WIDGET__EFFECT_DrawDown
    667          }
   \   000000F0   0xB00C             ADD      SP,SP,#+48
   \   000000F2   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    668          
    669          /*********************************************************************
    670          *
    671          *       _ToggleMultiSel
    672          */

   \                                 In section .text, align 2, keep-with-next
    673          static void _ToggleMultiSel(LISTBOX_Handle hObj, LISTBOX_Obj* pObj, int Sel) {
   \                     _ToggleMultiSel: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    674            if (pObj->Flags & LISTBOX_SF_MULTISEL) {
   \   00000008   0xF895 0x0074      LDRB     R0,[R5, #+116]
   \   0000000C   0x0740             LSLS     R0,R0,#+29
   \   0000000E   0xD518             BPL.N    ??_ToggleMultiSel_0
    675              WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Sel);
   \   00000010   0x4631             MOV      R1,R6
   \   00000012   0xF105 0x0028      ADD      R0,R5,#+40
   \   00000016   0x.... 0x....      BL       GUI_ARRAY_GethItem
    676              if (hItem) {
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD011             BEQ.N    ??_ToggleMultiSel_0
    677                LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
   \   0000001E   0x.... 0x....      BL       GUI_ALLOC_h2p
    678                if (!(pItem->Status & LISTBOX_ITEM_DISABLED)) {
   \   00000022   0x7901             LDRB     R1,[R0, #+4]
   \   00000024   0x078A             LSLS     R2,R1,#+30
   \   00000026   0xD40C             BMI.N    ??_ToggleMultiSel_0
    679                  pItem->Status ^= LISTBOX_ITEM_SELECTED;
   \   00000028   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000002C   0x7101             STRB     R1,[R0, #+4]
    680                  _NotifyOwner(hObj, WM_NOTIFICATION_SEL_CHANGED);
   \   0000002E   0x2104             MOVS     R1,#+4
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       _NotifyOwner
    681                  LISTBOX__InvalidateItem(hObj, pObj, Sel);
   \   00000036   0x4632             MOV      R2,R6
   \   00000038   0x4629             MOV      R1,R5
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000040   0x....             B.N      LISTBOX__InvalidateItem
    682                }
    683              }
    684            }
    685          }
   \                     ??_ToggleMultiSel_0: (+1)
   \   00000042   0xBD70             POP      {R4-R6,PC}       ;; return
    686          
    687          /*********************************************************************
    688          *
    689          *       _GetItemFromPos
    690          */

   \                                 In section .text, align 2, keep-with-next
    691          static int _GetItemFromPos(LISTBOX_Handle hObj, LISTBOX_Obj* pObj, int x, int y) {
   \                     _GetItemFromPos: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4690             MOV      R8,R2
   \   0000000A   0x461E             MOV      R6,R3
    692            int Sel = -1;
   \   0000000C   0xF04F 0x37FF      MOV      R7,#-1
    693            GUI_RECT Rect;
    694            WM_GetInsideRectExScrollbar(hObj, &Rect);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x.... 0x....      BL       WM_GetInsideRectExScrollbar
    695            if ((x >= Rect.x0) && (y >= Rect.y0)) {
   \   00000016   0xF9BD 0x0000      LDRSH    R0,[SP, #+0]
   \   0000001A   0x4580             CMP      R8,R0
   \   0000001C   0xDB21             BLT.N    ??_GetItemFromPos_0
   \   0000001E   0xF9BD 0x0002      LDRSH    R0,[SP, #+2]
   \   00000022   0x4286             CMP      R6,R0
   \   00000024   0xDB1D             BLT.N    ??_GetItemFromPos_0
    696              if ((x <= Rect.x1) && (y <= Rect.y1)) {
   \   00000026   0xF9BD 0x0004      LDRSH    R0,[SP, #+4]
   \   0000002A   0x4540             CMP      R0,R8
   \   0000002C   0xDB19             BLT.N    ??_GetItemFromPos_0
   \   0000002E   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \   00000032   0x42B0             CMP      R0,R6
   \   00000034   0xDB15             BLT.N    ??_GetItemFromPos_0
    697                int NumItems = LISTBOX__GetNumItems(pObj);
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   0000003C   0x4680             MOV      R8,R0
    698                int i, y0 = Rect.y0;
   \   0000003E   0xF9BD 0x9002      LDRSH    R9,[SP, #+2]
    699                for (i = pObj->ScrollStateV.v; i < NumItems; i++) {
   \   00000042   0xF8D5 0xA034      LDR      R10,[R5, #+52]
   \   00000046   0xE00A             B.N      ??_GetItemFromPos_1
    700                  if (y >= y0) {
   \                     ??_GetItemFromPos_2: (+1)
   \   00000048   0x454E             CMP      R6,R9
   \   0000004A   0xDB00             BLT.N    ??_GetItemFromPos_3
    701                    Sel = i;
   \   0000004C   0x4657             MOV      R7,R10
    702                  }
    703                  y0 += _GetItemSizeY(hObj, pObj, i);
   \                     ??_GetItemFromPos_3: (+1)
   \   0000004E   0x4652             MOV      R2,R10
   \   00000050   0x4629             MOV      R1,R5
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       _GetItemSizeY
   \   00000058   0x4481             ADD      R9,R0,R9
    704                }
   \   0000005A   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??_GetItemFromPos_1: (+1)
   \   0000005E   0x45C2             CMP      R10,R8
   \   00000060   0xDBF2             BLT.N    ??_GetItemFromPos_2
    705              }
    706            }
    707            return Sel;
   \                     ??_GetItemFromPos_0: (+1)
   \   00000062   0x4638             MOV      R0,R7
   \   00000064   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
    708          }
    709          
    710          /*********************************************************************
    711          *
    712          *       _OnTouch
    713          */

   \                                 In section .text, align 2, keep-with-next
    714          static void _OnTouch(LISTBOX_Handle hObj, WM_MESSAGE* pMsg) {
    715            const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
    716            if (pMsg->Data.p) {  /* Something happened in our area (pressed or released) */
   \                     _OnTouch: (+1)
   \   00000000   0x6889             LDR      R1,[R1, #+8]
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD004             BEQ.N    ??_OnTouch_0
    717              if (pState->Pressed == 0) {
   \   00000006   0x7A09             LDRB     R1,[R1, #+8]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD103             BNE.N    ??_OnTouch_1
    718                _NotifyOwner(hObj, WM_NOTIFICATION_RELEASED);
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x....             B.N      _NotifyOwner
    719              }
    720            } else {     /* Mouse moved out */
    721              _NotifyOwner(hObj, WM_NOTIFICATION_MOVED_OUT);
   \                     ??_OnTouch_0: (+1)
   \   00000010   0x2103             MOVS     R1,#+3
   \   00000012   0x....             B.N      _NotifyOwner
    722            }
    723          }
   \                     ??_OnTouch_1: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    724          
    725          /*********************************************************************
    726          *
    727          *       _OnMouseOver
    728          */
    729          #if GUI_SUPPORT_MOUSE
    730          static int _OnMouseOver(LISTBOX_Handle hObj, LISTBOX_Obj* pObj, WM_MESSAGE* pMsg) {
    731            const GUI_PID_STATE* pState = (const GUI_PID_STATE*)pMsg->Data.p;
    732            if (pObj->hOwner) {
    733              if (pState) {  /* Something happened in our area (pressed or released) */
    734                int Sel;
    735                Sel = _GetItemFromPos(hObj, pObj, pState->x, pState->y);
    736                if (Sel >= 0) {
    737                  if (Sel < (int)(pObj->ScrollStateV.v + _GetNumVisItems(pObj, hObj))) {
    738                    LISTBOX_SetSel(hObj, Sel);
    739                  }
    740                }
    741              }
    742            }
    743            return 0;                        /* Message handled */
    744          }
    745          #endif
    746          
    747          /*********************************************************************
    748          *
    749          *       _LISTBOX_Callback
    750          */

   \                                 In section .text, align 2, keep-with-next
    751          static void _LISTBOX_Callback(WM_MESSAGE*pMsg) {
   \                     _LISTBOX_Callback: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4605             MOV      R5,R0
    752            LISTBOX_Handle hObj = pMsg->hWin;
   \   00000006   0xF9B5 0x4004      LDRSH    R4,[R5, #+4]
    753            LISTBOX_Obj* pObj = LISTBOX_H2P(hObj);
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000010   0x4606             MOV      R6,R0
    754            WM_SCROLL_STATE ScrollState;
    755            /* Let widget handle the standard messages */
    756            if (WIDGET_HandleActive(hObj, pMsg) == 0) {
   \   00000012   0x4629             MOV      R1,R5
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       WIDGET_HandleActive
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0x6828             LDR      R0,[R5, #+0]
   \   0000001E   0xD10B             BNE.N    ??_LISTBOX_Callback_0
    757              /* Owner needs to be informed about focus change */
    758              if (pMsg->MsgId == WM_SET_FOCUS) {
   \   00000020   0x281F             CMP      R0,#+31
   \   00000022   0xF040 0x8088      BNE.W    ??_LISTBOX_Callback_1
    759                if (pMsg->Data.v == 0) {            /* Lost focus ? */
   \   00000026   0x68A8             LDR      R0,[R5, #+8]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xF040 0x8084      BNE.W    ??_LISTBOX_Callback_1
    760                  _NotifyOwner(hObj, LISTBOX_NOTIFICATION_LOST_FOCUS);
   \   0000002E   0x210B             MOVS     R1,#+11
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       _NotifyOwner
    761                }
    762              }
    763              return;
   \   00000036   0xBD7F             POP      {R0-R6,PC}
    764            }
    765            switch (pMsg->MsgId) {
   \                     ??_LISTBOX_Callback_0: (+1)
   \   00000038   0x2805             CMP      R0,#+5
   \   0000003A   0xD073             BEQ.N    ??_LISTBOX_Callback_2
   \   0000003C   0x280B             CMP      R0,#+11
   \   0000003E   0xD062             BEQ.N    ??_LISTBOX_Callback_3
   \   00000040   0x280C             CMP      R0,#+12
   \   00000042   0xD05B             BEQ.N    ??_LISTBOX_Callback_4
   \   00000044   0x280E             CMP      R0,#+14
   \   00000046   0xD062             BEQ.N    ??_LISTBOX_Callback_5
   \   00000048   0x280F             CMP      R0,#+15
   \   0000004A   0xD037             BEQ.N    ??_LISTBOX_Callback_6
   \   0000004C   0x2811             CMP      R0,#+17
   \   0000004E   0xD03B             BEQ.N    ??_LISTBOX_Callback_7
   \   00000050   0x2826             CMP      R0,#+38
   \   00000052   0xD16D             BNE.N    ??_LISTBOX_Callback_8
    766            case WM_NOTIFY_PARENT:
    767              switch (pMsg->Data.v) {
   \   00000054   0x68A8             LDR      R0,[R5, #+8]
   \   00000056   0x2805             CMP      R0,#+5
   \   00000058   0xD002             BEQ.N    ??_LISTBOX_Callback_9
   \   0000005A   0x2806             CMP      R0,#+6
   \   0000005C   0xD02A             BEQ.N    ??_LISTBOX_Callback_10
   \   0000005E   0xE067             B.N      ??_LISTBOX_Callback_8
    768              case WM_NOTIFICATION_VALUE_CHANGED:
    769                if (pMsg->hWinSrc  == WM_GetScrollbarV(hObj)) {
   \                     ??_LISTBOX_Callback_9: (+1)
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       WM_GetScrollbarV
   \   00000066   0xF9B5 0x2006      LDRSH    R2,[R5, #+6]
   \   0000006A   0x4282             CMP      R2,R0
   \   0000006C   0xD10D             BNE.N    ??_LISTBOX_Callback_11
    770                  WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
   \   0000006E   0xA900             ADD      R1,SP,#+0
   \   00000070   0x4610             MOV      R0,R2
   \   00000072   0x.... 0x....      BL       WM_GetScrollState
    771                  pObj->ScrollStateV.v = ScrollState.v;
   \   00000076   0x9801             LDR      R0,[SP, #+4]
   \   00000078   0x6370             STR      R0,[R6, #+52]
    772                  LISTBOX__InvalidateInsideArea(hObj);
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0x.... 0x....      BL       LISTBOX__InvalidateInsideArea
    773                  _NotifyOwner(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
   \   00000080   0x210A             MOVS     R1,#+10
   \   00000082   0x4620             MOV      R0,R4
   \   00000084   0x.... 0x....      BL       _NotifyOwner
   \   00000088   0xE052             B.N      ??_LISTBOX_Callback_8
    774                } else if (pMsg->hWinSrc == WM_GetScrollbarH(hObj)) {
   \                     ??_LISTBOX_Callback_11: (+1)
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       WM_GetScrollbarH
   \   00000090   0x4601             MOV      R1,R0
   \   00000092   0xF9B5 0x0006      LDRSH    R0,[R5, #+6]
   \   00000096   0x4288             CMP      R0,R1
   \   00000098   0xD14A             BNE.N    ??_LISTBOX_Callback_8
    775                  WM_GetScrollState(pMsg->hWinSrc, &ScrollState);
   \   0000009A   0xA900             ADD      R1,SP,#+0
   \   0000009C   0x.... 0x....      BL       WM_GetScrollState
    776                  pObj->ScrollStateH.v = ScrollState.v;
   \   000000A0   0x9801             LDR      R0,[SP, #+4]
   \   000000A2   0x6430             STR      R0,[R6, #+64]
    777                  LISTBOX__InvalidateInsideArea(hObj);
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x.... 0x....      BL       LISTBOX__InvalidateInsideArea
    778                  _NotifyOwner(hObj, WM_NOTIFICATION_SCROLL_CHANGED);
   \   000000AA   0x210A             MOVS     R1,#+10
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       _NotifyOwner
   \   000000B2   0xE03D             B.N      ??_LISTBOX_Callback_8
    779                }
    780                break;
    781              case WM_NOTIFICATION_SCROLLBAR_ADDED:
    782                LISTBOX_UpdateScrollers(hObj);
   \                     ??_LISTBOX_Callback_10: (+1)
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       LISTBOX_UpdateScrollers
    783                break;
   \   000000BA   0xE039             B.N      ??_LISTBOX_Callback_8
    784              }
    785              break;
    786            case WM_PAINT:
    787              _OnPaint(hObj, pObj, pMsg);
   \                     ??_LISTBOX_Callback_6: (+1)
   \   000000BC   0x462A             MOV      R2,R5
   \   000000BE   0x4631             MOV      R1,R6
   \   000000C0   0x4620             MOV      R0,R4
   \   000000C2   0x.... 0x....      BL       _OnPaint
    788              break;
   \   000000C6   0xE033             B.N      ??_LISTBOX_Callback_8
    789            case WM_PID_STATE_CHANGED:
    790              {
    791                const WM_PID_STATE_CHANGED_INFO* pInfo = (const WM_PID_STATE_CHANGED_INFO*)pMsg->Data.p;
   \                     ??_LISTBOX_Callback_7: (+1)
   \   000000C8   0x68A8             LDR      R0,[R5, #+8]
    792                if (pInfo->State) {
   \   000000CA   0x7A01             LDRB     R1,[R0, #+8]
   \   000000CC   0x2900             CMP      R1,#+0
   \   000000CE   0xD02F             BEQ.N    ??_LISTBOX_Callback_8
    793                  int Sel;
    794                  Sel = _GetItemFromPos(hObj, pObj, pInfo->x, pInfo->y);
   \   000000D0   0x6843             LDR      R3,[R0, #+4]
   \   000000D2   0x6802             LDR      R2,[R0, #+0]
   \   000000D4   0x4631             MOV      R1,R6
   \   000000D6   0x4620             MOV      R0,R4
   \   000000D8   0x.... 0x....      BL       _GetItemFromPos
   \   000000DC   0x0005             MOVS     R5,R0
    795                  if (Sel >= 0) {
   \   000000DE   0xD408             BMI.N    ??_LISTBOX_Callback_12
    796                    _ToggleMultiSel(hObj, pObj, Sel);
   \   000000E0   0x462A             MOV      R2,R5
   \   000000E2   0x4631             MOV      R1,R6
   \   000000E4   0x4620             MOV      R0,R4
   \   000000E6   0x.... 0x....      BL       _ToggleMultiSel
    797                    LISTBOX_SetSel(hObj, Sel);
   \   000000EA   0x4629             MOV      R1,R5
   \   000000EC   0x4620             MOV      R0,R4
   \   000000EE   0x.... 0x....      BL       LISTBOX_SetSel
    798                  }
    799                  _NotifyOwner(hObj, WM_NOTIFICATION_CLICKED);
   \                     ??_LISTBOX_Callback_12: (+1)
   \   000000F2   0x2101             MOVS     R1,#+1
   \   000000F4   0x4620             MOV      R0,R4
   \   000000F6   0x.... 0x....      BL       _NotifyOwner
    800                  return;
   \   000000FA   0xBD7F             POP      {R0-R6,PC}
    801                }
    802              }
    803              break;
    804            case WM_TOUCH:
    805              _OnTouch(hObj, pMsg);
   \                     ??_LISTBOX_Callback_4: (+1)
   \   000000FC   0x4629             MOV      R1,R5
   \   000000FE   0x4620             MOV      R0,R4
   \   00000100   0x.... 0x....      BL       _OnTouch
    806              return;
   \   00000104   0xBD7F             POP      {R0-R6,PC}
    807          #if GUI_SUPPORT_MOUSE
    808            case WM_MOUSEOVER:
    809              if (_OnMouseOver(hObj, pObj, pMsg) == 0)
    810                return;
    811              break;
    812          #endif
    813            case WM_DELETE:
    814              _FreeAttached(pObj);
   \                     ??_LISTBOX_Callback_3: (+1)
   \   00000106   0x4630             MOV      R0,R6
   \   00000108   0x.... 0x....      BL       _FreeAttached
    815              break;       /* No return here ... WM_DefaultProc needs to be called */
   \   0000010C   0xE010             B.N      ??_LISTBOX_Callback_8
    816            case WM_KEY:
    817              if (((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt > 0) {
   \                     ??_LISTBOX_Callback_5: (+1)
   \   0000010E   0x68A8             LDR      R0,[R5, #+8]
   \   00000110   0x6841             LDR      R1,[R0, #+4]
   \   00000112   0x2901             CMP      R1,#+1
   \   00000114   0xDB0C             BLT.N    ??_LISTBOX_Callback_8
    818                int Key;
    819                Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
    820                if (LISTBOX_AddKey(hObj, Key)) {
   \   00000116   0x6801             LDR      R1,[R0, #+0]
   \   00000118   0x4620             MOV      R0,R4
   \   0000011A   0x.... 0x....      BL       LISTBOX_AddKey
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xD006             BEQ.N    ??_LISTBOX_Callback_8
    821                  return;
   \   00000122   0xBD7F             POP      {R0-R6,PC}
    822                }
    823              }
    824              break;
    825            case WM_SIZE:
    826              LISTBOX_UpdateScrollers(hObj);
   \                     ??_LISTBOX_Callback_2: (+1)
   \   00000124   0x4620             MOV      R0,R4
   \   00000126   0x.... 0x....      BL       LISTBOX_UpdateScrollers
    827              WM_InvalidateWindow(hObj);
   \   0000012A   0x4620             MOV      R0,R4
   \   0000012C   0x.... 0x....      BL       WM_InvalidateWindow
    828              break;
    829            }
    830            WM_DefaultProc(pMsg);
   \                     ??_LISTBOX_Callback_8: (+1)
   \   00000130   0x4628             MOV      R0,R5
   \   00000132   0x.... 0x....      BL       WM_DefaultProc
    831          }
   \                     ??_LISTBOX_Callback_1: (+1)
   \   00000136   0xBD7F             POP      {R0-R6,PC}       ;; return
    832          
    833          /*********************************************************************
    834          *
    835          *       _MoveSel
    836          *
    837          *  Moves the selection/focus to the next valid item
    838          */

   \                                 In section .text, align 2, keep-with-next
    839          static void _MoveSel(LISTBOX_Handle hObj, int Dir) {
   \                     _MoveSel: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    840            int Index, NewSel = -1, NumItems;
   \   00000008   0xF04F 0x36FF      MOV      R6,#-1
    841            LISTBOX_Obj * pObj;
    842            pObj = LISTBOX_H2P(hObj);
   \   0000000C   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000010   0x4607             MOV      R7,R0
    843            Index = LISTBOX_GetSel(hObj);
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       LISTBOX_GetSel
   \   00000018   0x4681             MOV      R9,R0
    844            NumItems = LISTBOX__GetNumItems(pObj);
   \   0000001A   0x4638             MOV      R0,R7
   \   0000001C   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000020   0x4680             MOV      R8,R0
    845            do {
    846              WM_HMEM hItem;
    847              Index += Dir;
   \                     ??_MoveSel_0: (+1)
   \   00000022   0xEB15 0x0909      ADDS     R9,R5,R9
    848              if ((Index < 0) || (Index >= NumItems)) {
   \   00000026   0xD410             BMI.N    ??_MoveSel_1
   \   00000028   0x45C1             CMP      R9,R8
   \   0000002A   0xDA0E             BGE.N    ??_MoveSel_1
    849                break;
    850              }
    851              hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Index);
   \   0000002C   0x4649             MOV      R1,R9
   \   0000002E   0xF107 0x0028      ADD      R0,R7,#+40
   \   00000032   0x.... 0x....      BL       GUI_ARRAY_GethItem
    852              if (hItem) {
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD005             BEQ.N    ??_MoveSel_2
    853                LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
   \   0000003A   0x.... 0x....      BL       GUI_ALLOC_h2p
    854                if (!(pItem->Status & LISTBOX_ITEM_DISABLED)) {
   \   0000003E   0x7900             LDRB     R0,[R0, #+4]
   \   00000040   0x0780             LSLS     R0,R0,#+30
   \   00000042   0xD400             BMI.N    ??_MoveSel_2
    855                  NewSel = Index;
   \   00000044   0x464E             MOV      R6,R9
    856                }
    857              }
    858            } while(NewSel < 0);
   \                     ??_MoveSel_2: (+1)
   \   00000046   0x2E00             CMP      R6,#+0
   \   00000048   0xD4EB             BMI.N    ??_MoveSel_0
    859            if (NewSel >= 0) {
   \                     ??_MoveSel_1: (+1)
   \   0000004A   0x2E00             CMP      R6,#+0
   \   0000004C   0xD404             BMI.N    ??_MoveSel_3
    860              LISTBOX_SetSel(hObj, NewSel);
   \   0000004E   0x4631             MOV      R1,R6
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0xE8BD 0x43F4      POP      {R2,R4-R9,LR}
   \   00000056   0x....             B.N      LISTBOX_SetSel
    861            }
    862          }
   \                     ??_MoveSel_3: (+1)
   \   00000058   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    863          
    864          /*********************************************************************
    865          *
    866          *       _AddKey
    867          *
    868          * Returns: 1 if Key has been consumed
    869          *          0 else 
    870          */

   \                                 In section .text, align 2, keep-with-next
    871          static int _AddKey(LISTBOX_Handle hObj, int Key) {
   \                     _AddKey: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    872            LISTBOX_Obj* pObj;
    873            pObj = LISTBOX_H2P(hObj);
   \   00000006   0x.... 0x....      BL       GUI_ALLOC_h2p
    874            switch (Key) {
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x2910             CMP      R1,#+16
   \   0000000E   0xD023             BEQ.N    ??_AddKey_0
   \   00000010   0x2911             CMP      R1,#+17
   \   00000012   0xD038             BEQ.N    ??_AddKey_1
   \   00000014   0x2912             CMP      R1,#+18
   \   00000016   0xD00D             BEQ.N    ??_AddKey_2
   \   00000018   0x2913             CMP      R1,#+19
   \   0000001A   0xD02F             BEQ.N    ??_AddKey_3
   \   0000001C   0x2920             CMP      R1,#+32
   \   0000001E   0xD137             BNE.N    ??_AddKey_4
    875            case ' ':
    876              _ToggleMultiSel(hObj, pObj, pObj->Sel);
   \   00000020   0xF100 0x0140      ADD      R1,R0,#+64
   \   00000024   0xF9B1 0x2032      LDRSH    R2,[R1, #+50]
   \   00000028   0x4601             MOV      R1,R0
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       _ToggleMultiSel
    877              return 1;               /* Key has been consumed */
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}
    878            case GUI_KEY_RIGHT:
    879              if (WM_SetScrollValue(&pObj->ScrollStateH, pObj->ScrollStateH.v + pObj->Props.ScrollStepH)) {
   \                     ??_AddKey_2: (+1)
   \   00000034   0x6C01             LDR      R1,[R0, #+64]
   \   00000036   0xF100 0x0240      ADD      R2,R0,#+64
   \   0000003A   0x8992             LDRH     R2,[R2, #+12]
   \   0000003C   0x1851             ADDS     R1,R2,R1
   \   0000003E   0x303C             ADDS     R0,R0,#+60
   \   00000040   0x.... 0x....      BL       WM_SetScrollValue
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD005             BEQ.N    ??_AddKey_5
    880                LISTBOX_UpdateScrollers(hObj);
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       LISTBOX_UpdateScrollers
    881                LISTBOX__InvalidateInsideArea(hObj);
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       LISTBOX__InvalidateInsideArea
    882              }
    883              return 1;               /* Key has been consumed */
   \                     ??_AddKey_5: (+1)
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xBD32             POP      {R1,R4,R5,PC}
    884            case GUI_KEY_LEFT:
    885              if (WM_SetScrollValue(&pObj->ScrollStateH, pObj->ScrollStateH.v - pObj->Props.ScrollStepH)) {
   \                     ??_AddKey_0: (+1)
   \   00000058   0x6C01             LDR      R1,[R0, #+64]
   \   0000005A   0xF100 0x0240      ADD      R2,R0,#+64
   \   0000005E   0x8992             LDRH     R2,[R2, #+12]
   \   00000060   0x1A89             SUBS     R1,R1,R2
   \   00000062   0x303C             ADDS     R0,R0,#+60
   \   00000064   0x.... 0x....      BL       WM_SetScrollValue
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD005             BEQ.N    ??_AddKey_6
    886                LISTBOX_UpdateScrollers(hObj);
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       LISTBOX_UpdateScrollers
    887                LISTBOX__InvalidateInsideArea(hObj);
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       LISTBOX__InvalidateInsideArea
    888              }
    889              return 1;               /* Key has been consumed */
   \                     ??_AddKey_6: (+1)
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xBD32             POP      {R1,R4,R5,PC}
    890            case GUI_KEY_DOWN:
    891              LISTBOX_IncSel(hObj);
   \                     ??_AddKey_3: (+1)
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0x.... 0x....      BL       LISTBOX_IncSel
    892              return 1;               /* Key has been consumed */
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0xBD32             POP      {R1,R4,R5,PC}
    893            case GUI_KEY_UP:
    894              LISTBOX_DecSel(hObj);
   \                     ??_AddKey_1: (+1)
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       LISTBOX_DecSel
    895              return 1;               /* Key has been consumed */
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0xBD32             POP      {R1,R4,R5,PC}
    896            default:
    897              if(_IsAlphaNum(Key)) {
   \                     ??_AddKey_4: (+1)
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       _IsAlphaNum
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD005             BEQ.N    ??_AddKey_7
    898                _SelectByKey(hObj, Key);
   \   0000009A   0x4629             MOV      R1,R5
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       _SelectByKey
    899                return 1;               /* Key has been consumed */
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0xBD32             POP      {R1,R4,R5,PC}
    900              }
    901            }
    902            return 0;
   \                     ??_AddKey_7: (+1)
   \   000000A6   0x2000             MOVS     R0,#+0
   \   000000A8   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    903          }
    904          
    905          /*********************************************************************
    906          *
    907          *       Exported routines:  Create
    908          *
    909          **********************************************************************
    910          */
    911          /*********************************************************************
    912          *
    913          *       LISTBOX_CreateEx
    914          */

   \                                 In section .text, align 2, keep-with-next
    915          LISTBOX_Handle LISTBOX_CreateEx(int x0, int y0, int xsize, int ysize, WM_HWIN hParent,
    916                                          int WinFlags, int ExFlags, int Id, const GUI_ConstString* ppText)
    917          {
   \                     LISTBOX_CreateEx: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    918            LISTBOX_Handle hObj;
    919            GUI_USE_PARA(ExFlags);
    920            hObj = WM_CreateWindowAsChild(x0, y0, xsize, ysize, hParent, WinFlags, _LISTBOX_Callback,
    921                                          sizeof(LISTBOX_Obj) - sizeof(WM_Obj));
   \   00000004   0x2458             MOVS     R4,#+88
   \   00000006   0x9403             STR      R4,[SP, #+12]
   \   00000008   0x....             LDR.N    R4,??DataTable2
   \   0000000A   0x9402             STR      R4,[SP, #+8]
   \   0000000C   0x9C09             LDR      R4,[SP, #+36]
   \   0000000E   0xB2A4             UXTH     R4,R4
   \   00000010   0x9401             STR      R4,[SP, #+4]
   \   00000012   0xF9BD 0x4020      LDRSH    R4,[SP, #+32]
   \   00000016   0x9400             STR      R4,[SP, #+0]
   \   00000018   0x.... 0x....      BL       WM_CreateWindowAsChild
   \   0000001C   0x0004             MOVS     R4,R0
    922            if (hObj) {
   \   0000001E   0xD015             BEQ.N    ??LISTBOX_CreateEx_0
    923              LISTBOX_Obj* pObj;
    924              WM_LOCK();
    925              pObj = LISTBOX_H2P(hObj);
   \   00000020   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000024   0x4605             MOV      R5,R0
    926               /* Init sub-classes */
    927              GUI_ARRAY_CREATE(&pObj->ItemArray);
    928             /* init widget specific variables */
    929              WIDGET__Init(&pObj->Widget, Id, WIDGET_STATE_FOCUSSABLE);
   \   00000026   0x2210             MOVS     R2,#+16
   \   00000028   0x990B             LDR      R1,[SP, #+44]
   \   0000002A   0x.... 0x....      BL       WIDGET__Init
    930              pObj->Props = LISTBOX_DefaultProps;
   \   0000002E   0xF105 0x0048      ADD      R0,R5,#+72
   \   00000032   0x....             LDR.N    R1,??DataTable2_1
   \   00000034   0x2228             MOVS     R2,#+40
   \   00000036   0x.... 0x....      BL       __aeabi_memcpy4
   \   0000003A   0x990C             LDR      R1,[SP, #+48]
    931              if (ppText) {
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0xD002             BEQ.N    ??LISTBOX_CreateEx_1
    932                /* init member variables */
    933                /* Set non-zero attributes */
    934                LISTBOX_SetText(hObj, ppText);
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       LISTBOX_SetText
    935              }
    936              INIT_ID(pObj);
    937              LISTBOX_UpdateScrollers(hObj);
   \                     ??LISTBOX_CreateEx_1: (+1)
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       LISTBOX_UpdateScrollers
    938              WM_UNLOCK();
    939            }
    940            return hObj;
   \                     ??LISTBOX_CreateEx_0: (+1)
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0xB005             ADD      SP,SP,#+20
   \   00000050   0xBD30             POP      {R4,R5,PC}       ;; return
    941          }
    942          
    943          /*********************************************************************
    944          *
    945          *       Exported routines:  Various methods
    946          *
    947          **********************************************************************
    948          */
    949          /*********************************************************************
    950          *
    951          *       LISTBOX_InvalidateItem
    952          */

   \                                 In section .text, align 2, keep-with-next
    953          void LISTBOX_InvalidateItem(LISTBOX_Handle hObj, int Index) {
   \                     LISTBOX_InvalidateItem: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    954            if (hObj) {
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD026             BEQ.N    ??LISTBOX_InvalidateItem_0
    955              LISTBOX_Obj* pObj;
    956              int NumItems;
    957              WM_LOCK();
    958              pObj = LISTBOX_H2P(hObj);
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000E   0x4606             MOV      R6,R0
    959              NumItems = LISTBOX__GetNumItems(pObj);
   \   00000010   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000014   0x4607             MOV      R7,R0
    960              if (Index < NumItems) {
   \   00000016   0x42BD             CMP      R5,R7
   \   00000018   0xDA1E             BGE.N    ??LISTBOX_InvalidateItem_0
    961                if (Index < 0) {
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD50F             BPL.N    ??LISTBOX_InvalidateItem_1
    962                  int i;
    963                  for (i = 0; i < NumItems; i++) {
   \   0000001E   0x2500             MOVS     R5,#+0
   \   00000020   0xE004             B.N      ??LISTBOX_InvalidateItem_2
    964                    LISTBOX__InvalidateItemSize(pObj, i);
   \                     ??LISTBOX_InvalidateItem_3: (+1)
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4630             MOV      R0,R6
   \   00000026   0x.... 0x....      BL       LISTBOX__InvalidateItemSize
    965                  }
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \                     ??LISTBOX_InvalidateItem_2: (+1)
   \   0000002C   0x42BD             CMP      R5,R7
   \   0000002E   0xDBF8             BLT.N    ??LISTBOX_InvalidateItem_3
    966                  LISTBOX_UpdateScrollers(hObj);
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       LISTBOX_UpdateScrollers
    967                  LISTBOX__InvalidateInsideArea(hObj);
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   0000003C   0x....             B.N      LISTBOX__InvalidateInsideArea
    968                } else {
    969                  LISTBOX__InvalidateItemSize(pObj, Index);
   \                     ??LISTBOX_InvalidateItem_1: (+1)
   \   0000003E   0x4629             MOV      R1,R5
   \   00000040   0x4630             MOV      R0,R6
   \   00000042   0x.... 0x....      BL       LISTBOX__InvalidateItemSize
    970                  LISTBOX_UpdateScrollers(hObj);
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       LISTBOX_UpdateScrollers
    971                  LISTBOX__InvalidateItemAndBelow(hObj, pObj, Index);
   \   0000004C   0x462A             MOV      R2,R5
   \   0000004E   0x4631             MOV      R1,R6
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000056   0x....             B.N      LISTBOX__InvalidateItemAndBelow
    972                }
    973              }
    974              WM_UNLOCK();
    975            }
    976          }
   \                     ??LISTBOX_InvalidateItem_0: (+1)
   \   00000058   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    977          
    978          /*********************************************************************
    979          *
    980          *       LISTBOX_AddKey
    981          *
    982          * Returns: 1 if Key has been consumed
    983          *          0 else 
    984          */

   \                                 In section .text, align 2, keep-with-next
    985          int LISTBOX_AddKey(LISTBOX_Handle hObj, int Key) {
   \                     LISTBOX_AddKey: (+1)
   \   00000000   0x4602             MOV      R2,R0
    986            int r = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    987            if (hObj) {
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD001             BEQ.N    ??LISTBOX_AddKey_0
    988              WM_LOCK();
    989              r = _AddKey(hObj, Key);
   \   00000008   0x4610             MOV      R0,R2
   \   0000000A   0x....             B.N      _AddKey
    990              WM_UNLOCK();
    991            }
    992            return r;
   \                     ??LISTBOX_AddKey_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
    993          }
    994          
    995          /*********************************************************************
    996          *
    997          *       LISTBOX_AddString
    998          */

   \                                 In section .text, align 2, keep-with-next
    999          void LISTBOX_AddString(LISTBOX_Handle hObj, const char* s) {
   \                     LISTBOX_AddString: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   1000            if (hObj && s) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD030             BEQ.N    ??LISTBOX_AddString_0
   \   0000000C   0x2D00             CMP      R5,#+0
   \   0000000E   0xD02E             BEQ.N    ??LISTBOX_AddString_0
   1001              LISTBOX_Obj* pObj;
   1002              LISTBOX_ITEM Item = {0, 0};
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant {0, 0}>`
   \   00000014   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   00000018   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   1003              WM_LOCK();
   1004              pObj = LISTBOX_H2P(hObj);
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000022   0x4606             MOV      R6,R0
   1005              if (GUI_ARRAY_AddItem(&pObj->ItemArray, &Item, sizeof(LISTBOX_ITEM) + strlen(s)) == 0) {
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       strlen
   \   0000002A   0x1D82             ADDS     R2,R0,#+6
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0xF106 0x0028      ADD      R0,R6,#+40
   \   00000032   0x.... 0x....      BL       GUI_ARRAY_AddItem
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD119             BNE.N    ??LISTBOX_AddString_0
   1006                unsigned ItemIndex = GUI_ARRAY_GetNumItems(&pObj->ItemArray) - 1;
   \   0000003A   0xF106 0x0028      ADD      R0,R6,#+40
   \   0000003E   0x.... 0x....      BL       GUI_ARRAY_GetNumItems
   \   00000042   0x1E47             SUBS     R7,R0,#+1
   1007                LISTBOX_ITEM* pItem= (LISTBOX_ITEM*)GUI_ARRAY_GetpItem(&pObj->ItemArray, ItemIndex);
   \   00000044   0x4639             MOV      R1,R7
   \   00000046   0xF106 0x0028      ADD      R0,R6,#+40
   \   0000004A   0x.... 0x....      BL       GUI_ARRAY_GetpItem
   1008                strcpy(pItem->acText, s);
   \   0000004E   0x4629             MOV      R1,R5
   \   00000050   0x1D40             ADDS     R0,R0,#+5
   \   00000052   0x.... 0x....      BL       strcpy
   1009                LISTBOX__InvalidateItemSize(pObj, ItemIndex);
   \   00000056   0x4639             MOV      R1,R7
   \   00000058   0x4630             MOV      R0,R6
   \   0000005A   0x.... 0x....      BL       LISTBOX__InvalidateItemSize
   1010                LISTBOX_UpdateScrollers(hObj);
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       LISTBOX_UpdateScrollers
   1011                LISTBOX__InvalidateItem(hObj, pObj, ItemIndex);
   \   00000064   0x463A             MOV      R2,R7
   \   00000066   0x4631             MOV      R1,R6
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       LISTBOX__InvalidateItem
   1012              }
   1013              WM_UNLOCK();
   1014            }
   1015          }
   \                     ??LISTBOX_AddString_0: (+1)
   \   0000006E   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
   1016          
   1017          /*********************************************************************
   1018          *
   1019          *       LISTBOX_SetText
   1020          */

   \                                 In section .text, align 2, keep-with-next
   1021          void LISTBOX_SetText(LISTBOX_Handle hObj, const GUI_ConstString* ppText) {
   \                     LISTBOX_SetText: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1022            if (hObj) {
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD011             BEQ.N    ??LISTBOX_SetText_0
   1023              int i;
   1024              const char* s;
   1025              WM_LOCK();
   1026              if (ppText) {
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD009             BEQ.N    ??LISTBOX_SetText_1
   1027                for (i = 0; (s = *(ppText+i)) != 0; i++) {
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0xE003             B.N      ??LISTBOX_SetText_2
   1028                  LISTBOX_AddString(hObj, s);
   \                     ??LISTBOX_SetText_3: (+1)
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       LISTBOX_AddString
   1029                }
   \   00000018   0x1C76             ADDS     R6,R6,#+1
   \                     ??LISTBOX_SetText_2: (+1)
   \   0000001A   0xF855 0x1026      LDR      R1,[R5, R6, LSL #+2]
   \   0000001E   0x2900             CMP      R1,#+0
   \   00000020   0xD1F7             BNE.N    ??LISTBOX_SetText_3
   1030              }
   1031              LISTBOX_InvalidateItem(hObj, LISTBOX_ALL_ITEMS);
   \                     ??LISTBOX_SetText_1: (+1)
   \   00000022   0xF04F 0x31FF      MOV      R1,#-1
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000002C   0x....             B.N      LISTBOX_InvalidateItem
   1032              WM_UNLOCK();
   1033            }
   1034          }
   \                     ??LISTBOX_SetText_0: (+1)
   \   0000002E   0xBD70             POP      {R4-R6,PC}       ;; return
   1035          
   1036          /*********************************************************************
   1037          *
   1038          *       LISTBOX_SetSel
   1039          */

   \                                 In section .text, align 2, keep-with-next
   1040          void LISTBOX_SetSel (LISTBOX_Handle hObj, int NewSel) {
   \                     LISTBOX_SetSel: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1041            if (hObj) {
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD03D             BEQ.N    ??LISTBOX_SetSel_0
   1042              LISTBOX_Obj* pObj;
   1043              int MaxSel;
   1044              WM_LOCK();
   1045              pObj = LISTBOX_H2P(hObj);
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000E   0x4606             MOV      R6,R0
   1046              MaxSel = LISTBOX__GetNumItems(pObj);
   \   00000010   0x.... 0x....      BL       LISTBOX__GetNumItems
   1047              MaxSel = MaxSel ? MaxSel - 1 : 0;
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD000             BEQ.N    ??LISTBOX_SetSel_1
   \   00000018   0x1E40             SUBS     R0,R0,#+1
   1048              if (NewSel > MaxSel) {
   \                     ??LISTBOX_SetSel_1: (+1)
   \   0000001A   0x42A8             CMP      R0,R5
   \   0000001C   0xDC00             BGT.N    ??LISTBOX_SetSel_2
   \   0000001E   0x4605             MOV      R5,R0
   1049                NewSel = MaxSel;
   1050              }
   1051              if (NewSel < 0) {
   \                     ??LISTBOX_SetSel_2: (+1)
   \   00000020   0x2D00             CMP      R5,#+0
   \   00000022   0xD502             BPL.N    ??LISTBOX_SetSel_3
   1052                NewSel = -1;
   \   00000024   0xF04F 0x35FF      MOV      R5,#-1
   \   00000028   0xE00D             B.N      ??LISTBOX_SetSel_4
   1053              } else {
   1054                WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, NewSel);
   \                     ??LISTBOX_SetSel_3: (+1)
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0xF106 0x0028      ADD      R0,R6,#+40
   \   00000030   0x.... 0x....      BL       GUI_ARRAY_GethItem
   1055                if (hItem) {
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD006             BEQ.N    ??LISTBOX_SetSel_4
   1056                  LISTBOX_ITEM* pItem = (LISTBOX_ITEM*)GUI_ALLOC_h2p(hItem);
   \   00000038   0x.... 0x....      BL       GUI_ALLOC_h2p
   1057                  if (pItem->Status & LISTBOX_ITEM_DISABLED) {
   \   0000003C   0x7900             LDRB     R0,[R0, #+4]
   \   0000003E   0x0780             LSLS     R0,R0,#+30
   \   00000040   0xD501             BPL.N    ??LISTBOX_SetSel_4
   1058                    NewSel = -1;
   \   00000042   0xF04F 0x35FF      MOV      R5,#-1
   1059                  }
   1060                }
   1061              }
   1062              if (NewSel != pObj->Sel) {
   \                     ??LISTBOX_SetSel_4: (+1)
   \   00000046   0xF9B6 0x7072      LDRSH    R7,[R6, #+114]
   \   0000004A   0x42BD             CMP      R5,R7
   \   0000004C   0xD01B             BEQ.N    ??LISTBOX_SetSel_0
   1063                int OldSel;
   1064                OldSel    = pObj->Sel;
   1065                pObj->Sel = NewSel;
   \   0000004E   0xF8A6 0x5072      STRH     R5,[R6, #+114]
   1066                if (_UpdateScrollPos(hObj, pObj)) {
   \   00000052   0x4631             MOV      R1,R6
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       _UpdateScrollPos
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD003             BEQ.N    ??LISTBOX_SetSel_5
   1067                  LISTBOX__InvalidateInsideArea(hObj);
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       LISTBOX__InvalidateInsideArea
   \   00000064   0xE009             B.N      ??LISTBOX_SetSel_6
   1068                } else {
   1069                  LISTBOX__InvalidateItem(hObj, pObj, OldSel);
   \                     ??LISTBOX_SetSel_5: (+1)
   \   00000066   0x463A             MOV      R2,R7
   \   00000068   0x4631             MOV      R1,R6
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       LISTBOX__InvalidateItem
   1070                  LISTBOX__InvalidateItem(hObj, pObj, NewSel);
   \   00000070   0x462A             MOV      R2,R5
   \   00000072   0x4631             MOV      R1,R6
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       LISTBOX__InvalidateItem
   1071                }
   1072                _NotifyOwner(hObj, WM_NOTIFICATION_SEL_CHANGED);
   \                     ??LISTBOX_SetSel_6: (+1)
   \   0000007A   0x2104             MOVS     R1,#+4
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   00000082   0x.... 0x....      B.W      _NotifyOwner
   1073              }
   1074              WM_UNLOCK();
   1075            }
   1076          }
   \                     ??LISTBOX_SetSel_0: (+1)
   \   00000086   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   1077          
   1078          /*********************************************************************
   1079          *
   1080          *       LISTBOX_GetSel
   1081          */

   \                                 In section .text, align 2, keep-with-next
   1082          int  LISTBOX_GetSel (LISTBOX_Handle hObj) {
   \                     LISTBOX_GetSel: (+1)
   \   00000000   0x4601             MOV      R1,R0
   1083            int r = -1;
   \   00000002   0xF04F 0x30FF      MOV      R0,#-1
   1084            LISTBOX_Obj* pObj;
   1085            if (hObj) {
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD100             BNE.N    ??LISTBOX_GetSel_0
   \   0000000A   0x4770             BX       LR
   1086              WM_LOCK();
   1087              pObj = LISTBOX_H2P(hObj);
   \                     ??LISTBOX_GetSel_0: (+1)
   \   0000000C   0xB580             PUSH     {R7,LR}
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x.... 0x....      BL       GUI_ALLOC_h2p
   1088              ASSERT_IS_VALID_PTR(pObj);
   1089              r = pObj->Sel;
   \   00000014   0xF9B0 0x0072      LDRSH    R0,[R0, #+114]
   1090              WM_UNLOCK();
   1091            }
   1092            return r;
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
   1093          }
   1094          
   1095          /*********************************************************************
   1096          *
   1097          *       LISTBOX_IncSel
   1098          */

   \                                 In section .text, align 2, keep-with-next
   1099          void LISTBOX_IncSel      (LISTBOX_Handle hObj) {
   1100            if (hObj) {
   \                     LISTBOX_IncSel: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ.N    ??LISTBOX_IncSel_0
   1101              WM_LOCK();
   1102              _MoveSel(hObj, 1);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x....             B.N      _MoveSel
   1103              WM_UNLOCK();
   1104            }
   1105          }
   \                     ??LISTBOX_IncSel_0: (+1)
   \   00000008   0x4770             BX       LR               ;; return
   1106          
   1107          /*********************************************************************
   1108          *
   1109          *       LISTBOX_DecSel
   1110          */

   \                                 In section .text, align 2, keep-with-next
   1111          void LISTBOX_DecSel      (LISTBOX_Handle hObj) {
   1112            if (hObj) {
   \                     LISTBOX_DecSel: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD002             BEQ.N    ??LISTBOX_DecSel_0
   1113              WM_LOCK();
   1114              _MoveSel(hObj, -1);
   \   00000004   0xF04F 0x31FF      MOV      R1,#-1
   \   00000008   0x....             B.N      _MoveSel
   1115              WM_UNLOCK();
   1116            }
   1117          }
   \                     ??LISTBOX_DecSel_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     _LISTBOX_Callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     LISTBOX_DefaultProps

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0, 0}>`:
   \   00000000   0x0000 0x0000      DC16 0, 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   1118          
   1119          #else                            /* Avoid problems with empty object modules */
   1120            void LISTBOX_C(void) {}
   1121          #endif
   1122          
   1123          /*************************** End of file ****************************/
   1124          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LISTBOX_AddKey
         0   -> _AddKey
      32   LISTBOX_AddString
        32   -> GUI_ALLOC_h2p
        32   -> GUI_ARRAY_AddItem
        32   -> GUI_ARRAY_GetNumItems
        32   -> GUI_ARRAY_GetpItem
        32   -> LISTBOX_UpdateScrollers
        32   -> LISTBOX__InvalidateItem
        32   -> LISTBOX__InvalidateItemSize
        32   -> strcpy
        32   -> strlen
      32   LISTBOX_CreateEx
        32   -> GUI_ALLOC_h2p
        32   -> LISTBOX_SetText
        32   -> LISTBOX_UpdateScrollers
        32   -> WIDGET__Init
        32   -> WM_CreateWindowAsChild
        32   -> __aeabi_memcpy4
       0   LISTBOX_DecSel
         0   -> _MoveSel
       8   LISTBOX_GetSel
         8   -> GUI_ALLOC_h2p
       0   LISTBOX_IncSel
         0   -> _MoveSel
      24   LISTBOX_InvalidateItem
        24   -> GUI_ALLOC_h2p
        24   -> LISTBOX_UpdateScrollers
        24   -> LISTBOX__GetNumItems
         0   -> LISTBOX__InvalidateInsideArea
         0   -> LISTBOX__InvalidateItemAndBelow
        24   -> LISTBOX__InvalidateItemSize
      48   LISTBOX_OwnerDraw
        48   -> GUI_ALLOC_h2p
        48   -> GUI_ARRAY_GethItem
        48   -> GUI_Clear
        48   -> GUI_DispStringAt
        48   -> GUI_DrawFocusRect
        48   -> GUI_GetFontDistY
        48   -> GUI_GetStringDistX
        48   -> GUI_GetYDistOfFont
        48   -> GUI_SetFont
        48   -> GUI_SetTextMode
        48   -> LCD_SetBkColor
        48   -> LCD_SetColor
        48   -> LISTBOX__GetpString
        48   -> WM_GetInsideRect
      24   LISTBOX_SetSel
        24   -> GUI_ALLOC_h2p
        24   -> GUI_ARRAY_GethItem
        24   -> LISTBOX__GetNumItems
        24   -> LISTBOX__InvalidateInsideArea
        24   -> LISTBOX__InvalidateItem
         0   -> _NotifyOwner
        24   -> _UpdateScrollPos
      16   LISTBOX_SetText
        16   -> LISTBOX_AddString
         0   -> LISTBOX_InvalidateItem
       8   LISTBOX_UpdateScrollers
         0   -> _CalcScrollParas
         8   -> _ManageAutoScroll
       0   LISTBOX__GetNumItems
         0   -> GUI_ARRAY_GetNumItems
       8   LISTBOX__GetpString
         8   -> GUI_ARRAY_GetpItem
      16   LISTBOX__InvalidateInsideArea
        16   -> WM_GetInsideRectExScrollbar
        16   -> WM_InvalidateRect
      32   LISTBOX__InvalidateItem
        32   -> WM_GetInsideRectExScrollbar
        32   -> WM_InvalidateRect
        32   -> _GetItemPosY
        32   -> _GetItemSizeY
      24   LISTBOX__InvalidateItemAndBelow
        24   -> WM_GetInsideRectExScrollbar
        24   -> WM_InvalidateRect
        24   -> _GetItemPosY
       8   LISTBOX__InvalidateItemSize
         8   -> GUI_ARRAY_GetpItem
      16   LISTBOX__SetScrollbarWidth
        16   -> SCROLLBAR_GetDefaultWidth
         0   -> SCROLLBAR_SetWidth
        16   -> SCROLLBAR_SetWidth
        16   -> WM_GetDialogItem
      16   _AddKey
        16   -> GUI_ALLOC_h2p
        16   -> LISTBOX_DecSel
        16   -> LISTBOX_IncSel
        16   -> LISTBOX_UpdateScrollers
        16   -> LISTBOX__InvalidateInsideArea
        16   -> WM_SetScrollValue
        16   -> _IsAlphaNum
        16   -> _SelectByKey
        16   -> _ToggleMultiSel
      24   _CalcScrollParas
        24   -> GUI_ALLOC_h2p
        24   -> LISTBOX__GetNumItems
        24   -> WM_GetInsideRectExScrollbar
        24   -> _GetContentsSizeX
        24   -> _GetNumVisItems
        24   -> _UpdateScrollPos
      24   _CallOwnerDraw
        24   -- Indirect call
        24   -> LISTBOX_OwnerDraw
       0   _FreeAttached
         0   -> GUI_ARRAY_Delete
      24   _GetContentsSizeX
        24   -> GUI_ALLOC_h2p
        24   -> LISTBOX__GetNumItems
        24   -> _GetItemSizeX
      40   _GetItemFromPos
        40   -> LISTBOX__GetNumItems
        40   -> WM_GetInsideRectExScrollbar
        40   -> _GetItemSizeY
      24   _GetItemPosY
        24   -> LISTBOX__GetNumItems
        24   -> _GetItemSizeY
      32   _GetItemSizeX
        32   -> GUI_ARRAY_GetpItem
        32   -> GUI_SetFont
        32   -> _CallOwnerDraw
      32   _GetItemSizeY
        32   -> GUI_ARRAY_GetpItem
        32   -> GUI_SetFont
        32   -> _CallOwnerDraw
      32   _GetNumVisItems
        32   -> LISTBOX__GetNumItems
        32   -> _GetItemSizeY
        32   -> _GetYSize
      16   _GetYSize
        16   -> WM_GetInsideRectExScrollbar
       8   _IsAlphaNum
         8   -> _Tolower
      24   _IsPartiallyVis
        24   -> LISTBOX__GetNumItems
        24   -> _GetItemPosY
        24   -> _GetItemSizeY
        24   -> _GetYSize
      32   _LISTBOX_Callback
        32   -> GUI_ALLOC_h2p
        32   -> LISTBOX_AddKey
        32   -> LISTBOX_SetSel
        32   -> LISTBOX_UpdateScrollers
        32   -> LISTBOX__InvalidateInsideArea
        32   -> WIDGET_HandleActive
        32   -> WM_DefaultProc
        32   -> WM_GetScrollState
        32   -> WM_GetScrollbarH
        32   -> WM_GetScrollbarV
        32   -> WM_InvalidateWindow
        32   -> _FreeAttached
        32   -> _GetItemFromPos
        32   -> _NotifyOwner
        32   -> _OnPaint
        32   -> _OnTouch
        32   -> _ToggleMultiSel
      24   _ManageAutoScroll
        24   -> GUI_ALLOC_h2p
        24   -> LISTBOX__GetNumItems
        24   -> LISTBOX__SetScrollbarWidth
        24   -> WM_GetInsideRectExScrollbar
        24   -> WM_SetScrollbarH
        24   -> WM_SetScrollbarV
        24   -> _GetContentsSizeX
        24   -> _GetNumVisItems
      32   _MoveSel
        32   -> GUI_ALLOC_h2p
        32   -> GUI_ARRAY_GethItem
        32   -> LISTBOX_GetSel
         0   -> LISTBOX_SetSel
        32   -> LISTBOX__GetNumItems
      24   _NotifyOwner
        24   -> GUI_ALLOC_h2p
        24   -> WM_GetParent
        24   -> WM_SendMessage
      72   _OnPaint
        72   -- Indirect call
        72   -> GUI_ClearRectEx
        72   -> GUI_MoveRect
        72   -> GUI_SetFont
        72   -> GUI__IntersectRect
        72   -> LCD_SetBkColor
        72   -> LISTBOX_OwnerDraw
        72   -> LISTBOX__GetNumItems
        72   -> WIDGET__EFFECT_DrawDown
        72   -> WM_GetInsideRectExScrollbar
        72   -> WM_SetUserClipRect
        72   -> _GetItemSizeY
        72   -> __aeabi_memcpy
       0   _OnTouch
         0   -> _NotifyOwner
      24   _SelectByKey
        24   -> GUI_ALLOC_h2p
         0   -> LISTBOX_SetSel
        24   -> LISTBOX__GetNumItems
        24   -> LISTBOX__GetpString
        24   -> _Tolower
      16   _ToggleMultiSel
        16   -> GUI_ALLOC_h2p
        16   -> GUI_ARRAY_GethItem
         0   -> LISTBOX__InvalidateItem
        16   -> _NotifyOwner
       0   _Tolower
      16   _UpdateScrollPos
        16   -> WIDGET__SetScrollState
        16   -> WM_CheckScrollBounds
        16   -> _IsPartiallyVis


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0, 0}>
      12  ?<Constant {0}>
       4  ??DataTable2
       4  ??DataTable2_1
      14  LISTBOX_AddKey
     112  LISTBOX_AddString
      82  LISTBOX_CreateEx
      12  LISTBOX_DecSel
      40  LISTBOX_DefaultProps
      26  LISTBOX_GetSel
      10  LISTBOX_IncSel
      90  LISTBOX_InvalidateItem
     328  LISTBOX_OwnerDraw
     136  LISTBOX_SetSel
      48  LISTBOX_SetText
      16  LISTBOX_UpdateScrollers
       6  LISTBOX__GetNumItems
      22  LISTBOX__GetpString
      20  LISTBOX__InvalidateInsideArea
      68  LISTBOX__InvalidateItem
      46  LISTBOX__InvalidateItemAndBelow
      20  LISTBOX__InvalidateItemSize
      58  LISTBOX__SetScrollbarWidth
     170  _AddKey
      68  _CalcScrollParas
      32  _CallOwnerDraw
       6  _FreeAttached
      54  _GetContentsSizeX
     104  _GetItemFromPos
      62  _GetItemPosY
      82  _GetItemSizeX
      82  _GetItemSizeY
      82  _GetNumVisItems
      24  _GetYSize
      32  _IsAlphaNum
      68  _IsPartiallyVis
     312  _LISTBOX_Callback
     118  _ManageAutoScroll
      92  _MoveSel
      54  _NotifyOwner
     246  _OnPaint
      22  _OnTouch
      68  _SelectByKey
      68  _ToggleMultiSel
      12  _Tolower
      86  _UpdateScrollPos

 
    40 bytes in section .data
    12 bytes in section .rodata
 3 074 bytes in section .text
 
 3 074 bytes of CODE  memory
    12 bytes of CONST memory
    40 bytes of DATA  memory

Errors: none
Warnings: none
