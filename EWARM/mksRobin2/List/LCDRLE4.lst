###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:47
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCDRLE4.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCDRLE4.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\LCDRLE4.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LCDRLE4.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\LCDRLE4.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LCDRLE4.c
     16          Purpose     : Drawing routines for run length encoded bitmaps
     17                        with 4bpp
     18          ---------------------------END-OF-HEADER------------------------------
     19          */
     20          
     21          #include <stddef.h>           /* needed for definition of NULL */
     22          #include "LCD.h"
     23          #include "GUI_Private.h"
     24          
     25          /*********************************************************************
     26          *
     27          *       Static code
     28          *
     29          **********************************************************************
     30          */
     31          /*********************************************************************
     32          *
     33          *       _DrawBitmap_RLE4
     34          */

   \                                 In section .text, align 2, keep-with-next
     35          static void _DrawBitmap_RLE4(int x0,int y0,int xsize, int ysize, const U8 GUI_UNI_PTR * pPixel, const LCD_LOGPALETTE GUI_UNI_PTR* pLogPal, int xMag, int yMag) {
   \                     _DrawBitmap_RLE4: (+1)
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
     36            const LCD_PIXELINDEX* pTrans =NULL;
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x....             LDR.N    R0,??DataTable1
   \   0000000C   0x7B00             LDRB     R0,[R0, #+12]
   \   0000000E   0x0840             LSRS     R0,R0,#+1
   \   00000010   0xF000 0x0001      AND      R0,R0,#0x1
   \   00000014   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000018   0x9002             STR      R0,[SP, #+8]
     37            char NoTrans = !(GUI_Context.DrawMode & LCD_DRAWMODE_TRANS);
     38            LCD_PIXELINDEX aColorIndex[2];
     39            LCD_PIXELINDEX PixelIndex;
     40            int xi,y;
     41            int xL, yL;
     42            char IsMagnified = ((yMag | xMag) != 1);
   \   0000001A   0x9813             LDR      R0,[SP, #+76]
   \   0000001C   0x9912             LDR      R1,[SP, #+72]
   \   0000001E   0x4308             ORRS     R0,R1,R0
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD002             BEQ.N    ??_DrawBitmap_RLE4_0
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0xE001             B.N      ??_DrawBitmap_RLE4_1
   \                     ??_DrawBitmap_RLE4_0: (+1)
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x9000             STR      R0,[SP, #+0]
     43            aColorIndex[0] = LCD_ACOLORINDEX[0];
   \                     ??_DrawBitmap_RLE4_1: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable1
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     44            aColorIndex[1] = LCD_ACOLORINDEX[1];
   \   00000036   0x....             LDR.N    R0,??DataTable1
   \   00000038   0x8840             LDRH     R0,[R0, #+2]
   \   0000003A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000003E   0x9811             LDR      R0,[SP, #+68]
     45            /* Handle color translation */
     46            if ((pLogPal) && (pLogPal->pPalEntries)) {
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD007             BEQ.N    ??_DrawBitmap_RLE4_2
   \   00000044   0x6881             LDR      R1,[R0, #+8]
   \   00000046   0x2900             CMP      R1,#+0
   \   00000048   0xD004             BEQ.N    ??_DrawBitmap_RLE4_2
     47              if ((pTrans = LCD_GetpPalConvTable(pLogPal)) == NULL) {
   \   0000004A   0x.... 0x....      BL       LCD_GetpPalConvTable
   \   0000004E   0x0005             MOVS     R5,R0
   \   00000050   0xF000 0x80D5      BEQ.W    ??_DrawBitmap_RLE4_3
     48                return;
     49              }
     50            }
     51           /* Check if we can limit the number of lines due to clipping) */
     52            if (yMag == 1) {
   \                     ??_DrawBitmap_RLE4_2: (+1)
   \   00000054   0x9813             LDR      R0,[SP, #+76]
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD109             BNE.N    ??_DrawBitmap_RLE4_4
     53              if (ysize > GUI_Context.ClipRect.y1 - y0 + 1)
   \   0000005A   0x....             LDR.N    R0,??DataTable1
   \   0000005C   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \   00000060   0x9904             LDR      R1,[SP, #+16]
   \   00000062   0x1A40             SUBS     R0,R0,R1
   \   00000064   0x1C40             ADDS     R0,R0,#+1
   \   00000066   0x9906             LDR      R1,[SP, #+24]
   \   00000068   0x4288             CMP      R0,R1
   \   0000006A   0xDA00             BGE.N    ??_DrawBitmap_RLE4_4
     54                ysize = GUI_Context.ClipRect.y1 - y0 + 1;
   \   0000006C   0x9006             STR      R0,[SP, #+24]
     55            }
     56            /* Repeat until we have reached bottom */
     57            for (xi=0, y = 0; y < ysize; ) {
   \                     ??_DrawBitmap_RLE4_4: (+1)
   \   0000006E   0xF04F 0x0900      MOV      R9,#+0
   \   00000072   0x46C8             MOV      R8,R9
   \   00000074   0x9E10             LDR      R6,[SP, #+64]
   \                     ??_DrawBitmap_RLE4_5: (+1)
   \   00000076   0x9806             LDR      R0,[SP, #+24]
   \   00000078   0x4580             CMP      R8,R0
   \   0000007A   0xF280 0x80B9      BGE.W    ??_DrawBitmap_RLE4_6
     58              U8 Cmd,Data;
     59              Cmd= *pPixel++;
   \   0000007E   0xF816 0xBB01      LDRB     R11,[R6], #+1
     60              Data = *pPixel++;
   \   00000082   0xF816 0x7B01      LDRB     R7,[R6], #+1
     61              if (Cmd) {
   \   00000086   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000008A   0xD053             BEQ.N    ??_DrawBitmap_RLE4_7
   \   0000008C   0x2D00             CMP      R5,#+0
   \   0000008E   0xD002             BEQ.N    ??_DrawBitmap_RLE4_8
   \   00000090   0xF835 0x0017      LDRH     R0,[R5, R7, LSL #+1]
   \   00000094   0xE000             B.N      ??_DrawBitmap_RLE4_9
   \                     ??_DrawBitmap_RLE4_8: (+1)
   \   00000096   0x4638             MOV      R0,R7
     62                LCD_SetColorIndex(pTrans ? *(pTrans+Data) : Data);
   \                     ??_DrawBitmap_RLE4_9: (+1)
   \   00000098   0x.... 0x....      BL       LCD_SetColorIndex
   \   0000009C   0xE011             B.N      ??_DrawBitmap_RLE4_10
     63                while (Cmd) {
     64                  int xi1 = xi+Cmd;
     65                  if (xi1>=xsize)
     66                    xi1 = xsize;
     67                  Cmd -= (xi1-xi);
     68                  if (Data || NoTrans) {  /* Skip transparent pixels */
     69                    if (IsMagnified) {
     70                      xL = xMag * xi + x0;
     71                      yL = yMag * y + y0;
     72                      LCD_FillRect(xL, yL, xL + xMag * (xi1 - xi) -1 , yL + yMag - 1);
     73                    } else {
     74                      LCD_DrawHLine(x0+xi, y + y0, xi1+x0-1);
   \                     ??_DrawBitmap_RLE4_11: (+1)
   \   0000009E   0xEB04 0x000A      ADD      R0,R4,R10
   \   000000A2   0x1E42             SUBS     R2,R0,#+1
   \   000000A4   0x9804             LDR      R0,[SP, #+16]
   \   000000A6   0xEB00 0x0108      ADD      R1,R0,R8
   \   000000AA   0xEB09 0x0004      ADD      R0,R9,R4
   \   000000AE   0x.... 0x....      BL       LCD_DrawHLine
     75                    }
     76                  }
     77                  xi =xi1;
   \                     ??_DrawBitmap_RLE4_12: (+1)
   \   000000B2   0x46D1             MOV      R9,R10
     78                  if (xi1==xsize) {
   \   000000B4   0x9805             LDR      R0,[SP, #+20]
   \   000000B6   0x4582             CMP      R10,R0
   \   000000B8   0xD103             BNE.N    ??_DrawBitmap_RLE4_10
     79                    y++;
   \   000000BA   0xF108 0x0801      ADD      R8,R8,#+1
     80                    xi=0;
   \   000000BE   0xF04F 0x0900      MOV      R9,#+0
     81                  }
   \                     ??_DrawBitmap_RLE4_10: (+1)
   \   000000C2   0xF1BB 0x0F00      CMP      R11,#+0
   \   000000C6   0xD0D6             BEQ.N    ??_DrawBitmap_RLE4_5
   \   000000C8   0xEB0B 0x0A09      ADD      R10,R11,R9
   \   000000CC   0x9805             LDR      R0,[SP, #+20]
   \   000000CE   0x4582             CMP      R10,R0
   \   000000D0   0xDD00             BLE.N    ??_DrawBitmap_RLE4_13
   \   000000D2   0x4682             MOV      R10,R0
   \                     ??_DrawBitmap_RLE4_13: (+1)
   \   000000D4   0xEBAB 0x000A      SUB      R0,R11,R10
   \   000000D8   0xEB09 0x0B00      ADD      R11,R9,R0
   \   000000DC   0xFA5F 0xFB8B      UXTB     R11,R11
   \   000000E0   0x9802             LDR      R0,[SP, #+8]
   \   000000E2   0x4338             ORRS     R0,R0,R7
   \   000000E4   0xD0E5             BEQ.N    ??_DrawBitmap_RLE4_12
   \   000000E6   0x9800             LDR      R0,[SP, #+0]
   \   000000E8   0x2800             CMP      R0,#+0
   \   000000EA   0xD0D8             BEQ.N    ??_DrawBitmap_RLE4_11
   \   000000EC   0x9812             LDR      R0,[SP, #+72]
   \   000000EE   0xFB09 0x4000      MLA      R0,R9,R0,R4
   \   000000F2   0x9913             LDR      R1,[SP, #+76]
   \   000000F4   0x9A04             LDR      R2,[SP, #+16]
   \   000000F6   0xFB08 0x2101      MLA      R1,R8,R1,R2
   \   000000FA   0x9A13             LDR      R2,[SP, #+76]
   \   000000FC   0x1852             ADDS     R2,R2,R1
   \   000000FE   0x1E53             SUBS     R3,R2,#+1
   \   00000100   0x9A12             LDR      R2,[SP, #+72]
   \   00000102   0xEBAA 0x0C09      SUB      R12,R10,R9
   \   00000106   0xFB0C 0x0202      MLA      R2,R12,R2,R0
   \   0000010A   0x1E52             SUBS     R2,R2,#+1
   \   0000010C   0x.... 0x....      BL       LCD_FillRect
   \   00000110   0xE7CF             B.N      ??_DrawBitmap_RLE4_12
     82                }
     83              } else {
     84                while (Data--) {
     85                  U8 Index = *pPixel++;
     86                  if ((Index>>4) || NoTrans) {  /* Skip transparent pixels */
     87                    PixelIndex = pTrans ? *(pTrans+(Index>>4)) : (Index>>4);
     88                    if (IsMagnified) {
     89                      LCD_SetColorIndex(PixelIndex);
     90                      xL = xMag * xi + x0;
     91                      yL = yMag * y + y0;
     92                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
     93                    } else {
     94                      LCD_SetPixelIndex(x0+xi, y + y0, PixelIndex);
     95                    }
     96                  }
     97                  if (++xi >= xsize) {
     98                    xi=0; y++;
     99                  }
    100                  if (Data-- == 0)
    101                    break;
    102                  if ((Index&15) || NoTrans) {  /* Skip transparent pixels */
    103                    PixelIndex = pTrans ? *(pTrans+(Index&15)) : (Index&15);
    104                    if (IsMagnified) {
    105                      LCD_SetColorIndex(PixelIndex);
    106                      xL = xMag * xi + x0;
    107                      yL = yMag * y + y0;
    108                      LCD_FillRect(xL, yL, xL + xMag -1 , yL + yMag - 1);
    109                    } else {
    110                      LCD_SetPixelIndex(x0+xi, y + y0, PixelIndex);
   \                     ??_DrawBitmap_RLE4_14: (+1)
   \   00000112   0x4602             MOV      R2,R0
   \   00000114   0x9804             LDR      R0,[SP, #+16]
   \   00000116   0xEB00 0x0108      ADD      R1,R0,R8
   \   0000011A   0xEB09 0x0004      ADD      R0,R9,R4
   \   0000011E   0x.... 0x....      BL       LCD_SetPixelIndex
    111                    }
    112                  }
    113                  if (++xi >= xsize) {
   \                     ??_DrawBitmap_RLE4_15: (+1)
   \   00000122   0xF109 0x0901      ADD      R9,R9,#+1
   \   00000126   0x9805             LDR      R0,[SP, #+20]
   \   00000128   0x4581             CMP      R9,R0
   \   0000012A   0xDB03             BLT.N    ??_DrawBitmap_RLE4_7
    114                    xi=0; y++;
   \   0000012C   0xF04F 0x0900      MOV      R9,#+0
   \   00000130   0xF108 0x0801      ADD      R8,R8,#+1
    115                  }
   \                     ??_DrawBitmap_RLE4_7: (+1)
   \   00000134   0x4638             MOV      R0,R7
   \   00000136   0x1E47             SUBS     R7,R0,#+1
   \   00000138   0xB2C0             UXTB     R0,R0
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD09B             BEQ.N    ??_DrawBitmap_RLE4_5
   \   0000013E   0xF816 0xAB01      LDRB     R10,[R6], #+1
   \   00000142   0xEA4F 0x102A      ASR      R0,R10,#+4
   \   00000146   0x9902             LDR      R1,[SP, #+8]
   \   00000148   0x4301             ORRS     R1,R1,R0
   \   0000014A   0xD021             BEQ.N    ??_DrawBitmap_RLE4_16
   \   0000014C   0x2D00             CMP      R5,#+0
   \   0000014E   0xD001             BEQ.N    ??_DrawBitmap_RLE4_17
   \   00000150   0xF835 0x0010      LDRH     R0,[R5, R0, LSL #+1]
   \                     ??_DrawBitmap_RLE4_17: (+1)
   \   00000154   0xB280             UXTH     R0,R0
   \   00000156   0x9900             LDR      R1,[SP, #+0]
   \   00000158   0x2900             CMP      R1,#+0
   \   0000015A   0xD011             BEQ.N    ??_DrawBitmap_RLE4_18
   \   0000015C   0x.... 0x....      BL       LCD_SetColorIndex
   \   00000160   0x9812             LDR      R0,[SP, #+72]
   \   00000162   0xFB09 0x4000      MLA      R0,R9,R0,R4
   \   00000166   0x9913             LDR      R1,[SP, #+76]
   \   00000168   0x9A04             LDR      R2,[SP, #+16]
   \   0000016A   0xFB08 0x2101      MLA      R1,R8,R1,R2
   \   0000016E   0x9A13             LDR      R2,[SP, #+76]
   \   00000170   0x1852             ADDS     R2,R2,R1
   \   00000172   0x1E53             SUBS     R3,R2,#+1
   \   00000174   0x9A12             LDR      R2,[SP, #+72]
   \   00000176   0x1812             ADDS     R2,R2,R0
   \   00000178   0x1E52             SUBS     R2,R2,#+1
   \   0000017A   0x.... 0x....      BL       LCD_FillRect
   \   0000017E   0xE007             B.N      ??_DrawBitmap_RLE4_16
   \                     ??_DrawBitmap_RLE4_18: (+1)
   \   00000180   0x4602             MOV      R2,R0
   \   00000182   0x9804             LDR      R0,[SP, #+16]
   \   00000184   0xEB00 0x0108      ADD      R1,R0,R8
   \   00000188   0xEB09 0x0004      ADD      R0,R9,R4
   \   0000018C   0x.... 0x....      BL       LCD_SetPixelIndex
   \                     ??_DrawBitmap_RLE4_16: (+1)
   \   00000190   0xF109 0x0901      ADD      R9,R9,#+1
   \   00000194   0x9805             LDR      R0,[SP, #+20]
   \   00000196   0x4581             CMP      R9,R0
   \   00000198   0xDB03             BLT.N    ??_DrawBitmap_RLE4_19
   \   0000019A   0xF04F 0x0900      MOV      R9,#+0
   \   0000019E   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??_DrawBitmap_RLE4_19: (+1)
   \   000001A2   0x4638             MOV      R0,R7
   \   000001A4   0x1E47             SUBS     R7,R0,#+1
   \   000001A6   0xB2C0             UXTB     R0,R0
   \   000001A8   0x2800             CMP      R0,#+0
   \   000001AA   0xF43F 0xAF64      BEQ.W    ??_DrawBitmap_RLE4_5
   \   000001AE   0xF01A 0x000F      ANDS     R0,R10,#0xF
   \   000001B2   0xD102             BNE.N    ??_DrawBitmap_RLE4_20
   \   000001B4   0x9802             LDR      R0,[SP, #+8]
   \   000001B6   0x2800             CMP      R0,#+0
   \   000001B8   0xD0B3             BEQ.N    ??_DrawBitmap_RLE4_15
   \                     ??_DrawBitmap_RLE4_20: (+1)
   \   000001BA   0x2D00             CMP      R5,#+0
   \   000001BC   0xF00A 0x000F      AND      R0,R10,#0xF
   \   000001C0   0xD001             BEQ.N    ??_DrawBitmap_RLE4_21
   \   000001C2   0xF835 0x0010      LDRH     R0,[R5, R0, LSL #+1]
   \                     ??_DrawBitmap_RLE4_21: (+1)
   \   000001C6   0x9900             LDR      R1,[SP, #+0]
   \   000001C8   0x2900             CMP      R1,#+0
   \   000001CA   0xD0A2             BEQ.N    ??_DrawBitmap_RLE4_14
   \   000001CC   0x.... 0x....      BL       LCD_SetColorIndex
   \   000001D0   0x9812             LDR      R0,[SP, #+72]
   \   000001D2   0xFB09 0x4000      MLA      R0,R9,R0,R4
   \   000001D6   0x9913             LDR      R1,[SP, #+76]
   \   000001D8   0x9A04             LDR      R2,[SP, #+16]
   \   000001DA   0xFB08 0x2101      MLA      R1,R8,R1,R2
   \   000001DE   0x9A13             LDR      R2,[SP, #+76]
   \   000001E0   0x1852             ADDS     R2,R2,R1
   \   000001E2   0x1E53             SUBS     R3,R2,#+1
   \   000001E4   0x9A12             LDR      R2,[SP, #+72]
   \   000001E6   0x1812             ADDS     R2,R2,R0
   \   000001E8   0x1E52             SUBS     R2,R2,#+1
   \   000001EA   0x.... 0x....      BL       LCD_FillRect
   \   000001EE   0xE798             B.N      ??_DrawBitmap_RLE4_15
    116                }
    117              }
    118            }
    119            LCD_ACOLORINDEX[0] = aColorIndex[0];
   \                     ??_DrawBitmap_RLE4_6: (+1)
   \   000001F0   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   000001F4   0x....             LDR.N    R1,??DataTable1
   \   000001F6   0x8008             STRH     R0,[R1, #+0]
    120            LCD_ACOLORINDEX[1] = aColorIndex[1];
   \   000001F8   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000001FC   0x8048             STRH     R0,[R1, #+2]
    121          }
   \                     ??_DrawBitmap_RLE4_3: (+1)
   \   000001FE   0xB007             ADD      SP,SP,#+28
   \   00000200   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    122          
    123          /*********************************************************************
    124          *
    125          *       Public data
    126          *
    127          **********************************************************************
    128          */
    129          /*********************************************************************
    130          *
    131          *       GUI_BitmapMethodsRLE4
    132          */

   \                                 In section .rodata, align 4, keep-with-next
    133          const GUI_BITMAP_METHODS GUI_BitmapMethodsRLE4 = {
   \                     GUI_BitmapMethodsRLE4:
   \   00000000   0x........         DC32 _DrawBitmap_RLE4, 0H
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     GUI_Context
    134            _DrawBitmap_RLE4,
    135            NULL
    136          };
    137          
    138          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   _DrawBitmap_RLE4
        64   -> LCD_DrawHLine
        64   -> LCD_FillRect
        64   -> LCD_GetpPalConvTable
        64   -> LCD_SetColorIndex
        64   -> LCD_SetPixelIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       8  GUI_BitmapMethodsRLE4
     516  _DrawBitmap_RLE4

 
   8 bytes in section .rodata
 520 bytes in section .text
 
 520 bytes of CODE  memory
   8 bytes of CONST memory

Errors: none
Warnings: none
