###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:01:01
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\MESSAGEBOX.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\MESSAGEBOX.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\MESSAGEBOX.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\MESSAGEBOX.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\MESSAGEBOX.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : MESSAGEBOX.c
     16          Purpose     : Implementation of Mesagebox
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          
     21          #include <string.h>             /* for memset */
     22          #include "GUI.h"
     23          #include "BUTTON.h"
     24          #include "FRAMEWIN.h"
     25          #include "TEXT.h"
     26          #include "DIALOG.h"
     27          #include "MESSAGEBOX.h"
     28          
     29          #if GUI_WINSUPPORT
     30          
     31          /*********************************************************************
     32          *
     33          *       Defaults
     34          *
     35          **********************************************************************
     36          */
     37          
     38          #ifndef MESSAGEBOX_BORDER
     39            #define MESSAGEBOX_BORDER 4
     40          #endif
     41          
     42          #ifndef MESSAGEBOX_XSIZEOK
     43            #define MESSAGEBOX_XSIZEOK 50
     44          #endif
     45          
     46          #ifndef MESSAGEBOX_YSIZEOK
     47            #define MESSAGEBOX_YSIZEOK 20
     48          #endif
     49          
     50          #ifndef MESSAGEBOX_BKCOLOR
     51            #define MESSAGEBOX_BKCOLOR GUI_WHITE
     52          #endif
     53          
     54          #define ID_FRAME 100
     55          
     56          /*********************************************************************
     57          *
     58          *       Static functions
     59          *
     60          **********************************************************************
     61          */
     62          /*********************************************************************
     63          *
     64          *       _MESSAGEBOX_cbCallback
     65          */

   \                                 In section .text, align 2, keep-with-next
     66          static void _MESSAGEBOX_cbCallback(WM_MESSAGE * pMsg) {
   \                     _MESSAGEBOX_cbCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     67            WM_HWIN hWin = pMsg->hWin;
   \   00000002   0xF9B0 0x4004      LDRSH    R4,[R0, #+4]
     68            switch (pMsg->MsgId) {
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x290E             CMP      R1,#+14
   \   0000000A   0xD00B             BEQ.N    ??_MESSAGEBOX_cbCallback_0
   \   0000000C   0x291E             CMP      R1,#+30
   \   0000000E   0xD002             BEQ.N    ??_MESSAGEBOX_cbCallback_1
   \   00000010   0x2926             CMP      R1,#+38
   \   00000012   0xD01C             BEQ.N    ??_MESSAGEBOX_cbCallback_2
   \   00000014   0xE02A             B.N      ??_MESSAGEBOX_cbCallback_3
     69              case WM_INIT_DIALOG:
     70                FRAMEWIN_SetClientColor(hWin, MESSAGEBOX_BKCOLOR);
   \                     ??_MESSAGEBOX_cbCallback_1: (+1)
   \   00000016   0xF06F 0x417F      MVN      R1,#-16777216
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000020   0x.... 0x....      B.W      FRAMEWIN_SetClientColor
     71                break;
     72              case WM_KEY:
     73                {
     74                  int Key = ((const WM_KEY_INFO*)(pMsg->Data.p))->Key;
     75                  if (((const WM_KEY_INFO*)(pMsg->Data.p))->PressedCnt) {
   \                     ??_MESSAGEBOX_cbCallback_0: (+1)
   \   00000024   0x6880             LDR      R0,[R0, #+8]
   \   00000026   0x6841             LDR      R1,[R0, #+4]
   \   00000028   0x2900             CMP      R1,#+0
   \   0000002A   0xD023             BEQ.N    ??_MESSAGEBOX_cbCallback_4
     76                    switch (Key) {
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x280D             CMP      R0,#+13
   \   00000030   0xD007             BEQ.N    ??_MESSAGEBOX_cbCallback_5
   \   00000032   0x281B             CMP      R0,#+27
   \   00000034   0xD11E             BNE.N    ??_MESSAGEBOX_cbCallback_4
     77                    case GUI_KEY_ESCAPE:
     78                      GUI_EndDialog(hWin, 1);             /* End dialog with return value 1 if <ESC> is pressed */
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000003E   0x.... 0x....      B.W      GUI_EndDialog
     79                      break;
     80                    case GUI_KEY_ENTER:
     81                      GUI_EndDialog(hWin, 0);             /* End dialog with return value 0 if <ENTER> is pressed */
   \                     ??_MESSAGEBOX_cbCallback_5: (+1)
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000004A   0x.... 0x....      B.W      GUI_EndDialog
     82                      break;
     83                    }
     84                  }
     85                }
     86                break;
     87              case WM_NOTIFY_PARENT:
     88                {
     89                  int NCode = pMsg->Data.v;             /* Get notification code */
   \                     ??_MESSAGEBOX_cbCallback_2: (+1)
   \   0000004E   0x6885             LDR      R5,[R0, #+8]
     90                  int Id    = WM_GetId(pMsg->hWinSrc);  /* Get control ID */
   \   00000050   0xF9B0 0x0006      LDRSH    R0,[R0, #+6]
   \   00000054   0x.... 0x....      BL       WM_GetId
     91                  switch (NCode) {
   \   00000058   0x2D02             CMP      R5,#+2
   \   0000005A   0xD10B             BNE.N    ??_MESSAGEBOX_cbCallback_4
     92                    case WM_NOTIFICATION_RELEASED:      /* React only if released */
     93                      if (Id == GUI_ID_OK) {
   \   0000005C   0x2801             CMP      R0,#+1
   \   0000005E   0xD109             BNE.N    ??_MESSAGEBOX_cbCallback_4
     94                        GUI_EndDialog(hWin, 0);         /* End dialog with return value 0 if OK */
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000068   0x.... 0x....      B.W      GUI_EndDialog
     95                      }
     96                      break;
     97                  }
     98                }
     99                break;
    100              default:
    101                WM_DefaultProc(pMsg);
   \                     ??_MESSAGEBOX_cbCallback_3: (+1)
   \   0000006C   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000070   0x.... 0x....      B.W      WM_DefaultProc
    102            }
    103          }
   \                     ??_MESSAGEBOX_cbCallback_4: (+1)
   \   00000074   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    104          
    105          /*********************************************************************
    106          *
    107          *       Exported routines
    108          *
    109          **********************************************************************
    110          */
    111          /*********************************************************************
    112          *
    113          *       MESSAGEBOX_Create
    114          */

   \                                 In section .text, align 2, keep-with-next
    115          WM_HWIN MESSAGEBOX_Create(const char * sMessage, const char * sCaption, int Flags) {
   \                     MESSAGEBOX_Create: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB097             SUB      SP,SP,#+92
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
    116            GUI_WIDGET_CREATE_INFO _aDialogCreate[3];                                     /* 0: FrameWin, 1: Text, 2: Button */
    117            int BorderSize = FRAMEWIN_GetDefaultBorderSize();                             /* Default border size of frame window */
   \   0000000C   0x.... 0x....      BL       FRAMEWIN_GetDefaultBorderSize
   \   00000010   0x4607             MOV      R7,R0
   \   00000012   0x0078             LSLS     R0,R7,#+1
   \   00000014   0xF100 0x0A3A      ADD      R10,R0,#+58
    118            int xSizeFrame = MESSAGEBOX_XSIZEOK + 2 * BorderSize + MESSAGEBOX_BORDER * 2; /* XSize of frame window */
    119            int ySizeFrame;                                                               /* YSize of frame window */
    120            int x0, y0;                                                                   /* Position of frame window */
    121            int xSizeMessage;                                                             /* Length in pixels of message */
    122            int xSizeCaption;                                                             /* Length in pixels of caption */
    123            int ySizeCaption;                                                             /* YSize of caption */
    124            int ySizeMessage;                                                             /* YSize of message */
    125            GUI_RECT Rect;
    126            const GUI_FONT GUI_UNI_PTR * pOldFont;
    127            /* Zeroinit variables */
    128            memset(_aDialogCreate, 0, sizeof(_aDialogCreate));
   \   00000018   0x2248             MOVS     R2,#+72
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xA805             ADD      R0,SP,#+20
   \   0000001E   0x.... 0x....      BL       memset
    129            /* Get dimension of message */
    130            pOldFont = GUI_SetFont(TEXT_GetDefaultFont());
   \   00000022   0x.... 0x....      BL       TEXT_GetDefaultFont
   \   00000026   0x.... 0x....      BL       GUI_SetFont
   \   0000002A   0x9004             STR      R0,[SP, #+16]
    131            GUI_GetTextExtend(&Rect, sMessage, 255);
   \   0000002C   0x22FF             MOVS     R2,#+255
   \   0000002E   0x4621             MOV      R1,R4
   \   00000030   0xA802             ADD      R0,SP,#+8
   \   00000032   0x.... 0x....      BL       GUI_GetTextExtend
    132            xSizeMessage = Rect.x1 - Rect.x0 + MESSAGEBOX_BORDER * 2;
   \   00000036   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \   0000003A   0xF9BD 0x1008      LDRSH    R1,[SP, #+8]
   \   0000003E   0x1A40             SUBS     R0,R0,R1
   \   00000040   0xF100 0x0808      ADD      R8,R0,#+8
    133            ySizeMessage = Rect.y1 - Rect.y0 + 1;
   \   00000044   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \   00000048   0xF9BD 0x100A      LDRSH    R1,[SP, #+10]
   \   0000004C   0x1A40             SUBS     R0,R0,R1
   \   0000004E   0xF100 0x0901      ADD      R9,R0,#+1
    134            if (xSizeFrame < (xSizeMessage + 4 + MESSAGEBOX_BORDER * 2)) {
   \   00000052   0xF108 0x000C      ADD      R0,R8,#+12
   \   00000056   0x4582             CMP      R10,R0
   \   00000058   0xDA00             BGE.N    ??MESSAGEBOX_Create_0
    135              xSizeFrame = xSizeMessage + 4 + MESSAGEBOX_BORDER * 2;
   \   0000005A   0x4682             MOV      R10,R0
    136            }
    137            ySizeCaption = GUI_GetYSizeOfFont(FRAMEWIN_GetDefaultFont());
    138            ySizeFrame = ySizeMessage +            /* size of message */
    139                         MESSAGEBOX_YSIZEOK +      /* size of button */
    140                         ySizeCaption +            /* caption size */
    141                         MESSAGEBOX_BORDER * 3 +   /* inner border - text, text - button, button - bottom */
    142                         BorderSize * 2 +          /* top & bottom border */
    143                         1;                        /* inner border */
   \                     ??MESSAGEBOX_Create_0: (+1)
   \   0000005C   0x.... 0x....      BL       FRAMEWIN_GetDefaultFont
   \   00000060   0x.... 0x....      BL       GUI_GetYSizeOfFont
   \   00000064   0x4448             ADD      R0,R0,R9
   \   00000066   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   0000006A   0xF100 0x0B21      ADD      R11,R0,#+33
    144            /* Get xsize of caption */
    145            xSizeCaption = GUI_GetStringDistX(sCaption);
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       GUI_GetStringDistX
    146            if (xSizeFrame < xSizeCaption + BorderSize * 2) {
   \   00000074   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   00000078   0x4582             CMP      R10,R0
   \   0000007A   0xDA00             BGE.N    ??MESSAGEBOX_Create_1
    147              xSizeFrame = xSizeCaption + BorderSize * 2;
   \   0000007C   0x4682             MOV      R10,R0
    148            }
    149            /* Check maximum */
    150            if (xSizeFrame > LCD_GET_XSIZE()) {
   \                     ??MESSAGEBOX_Create_1: (+1)
   \   0000007E   0x.... 0x....      BL       LCD_GetXSize
   \   00000082   0x4550             CMP      R0,R10
   \   00000084   0xDA02             BGE.N    ??MESSAGEBOX_Create_2
    151              xSizeFrame = LCD_GET_XSIZE();
   \   00000086   0x.... 0x....      BL       LCD_GetXSize
   \   0000008A   0x4682             MOV      R10,R0
    152            }
    153            if (ySizeFrame > LCD_GET_YSIZE()) {
   \                     ??MESSAGEBOX_Create_2: (+1)
   \   0000008C   0x.... 0x....      BL       LCD_GetYSize
   \   00000090   0x4558             CMP      R0,R11
   \   00000092   0xDA02             BGE.N    ??MESSAGEBOX_Create_3
    154              ySizeFrame = LCD_GET_YSIZE();
   \   00000094   0x.... 0x....      BL       LCD_GetYSize
   \   00000098   0x4683             MOV      R11,R0
    155            }
    156            /* Calculate position of framewin */
    157            x0 = (LCD_GET_XSIZE() - xSizeFrame) / 2;
   \                     ??MESSAGEBOX_Create_3: (+1)
   \   0000009A   0x.... 0x....      BL       LCD_GetXSize
   \   0000009E   0xEBA0 0x000A      SUB      R0,R0,R10
   \   000000A2   0xEB00 0x70D0      ADD      R0,R0,R0, LSR #+31
   \   000000A6   0x1040             ASRS     R0,R0,#+1
   \   000000A8   0x9001             STR      R0,[SP, #+4]
    158            y0 = (LCD_GET_YSIZE() - ySizeFrame) / 2;
   \   000000AA   0x.... 0x....      BL       LCD_GetYSize
   \   000000AE   0xEBA0 0x000B      SUB      R0,R0,R11
   \   000000B2   0xEB00 0x70D0      ADD      R0,R0,R0, LSR #+31
   \   000000B6   0x1040             ASRS     R0,R0,#+1
   \   000000B8   0x9000             STR      R0,[SP, #+0]
    159            /* restore modified Context */
    160            GUI_SetFont(pOldFont);
   \   000000BA   0x9804             LDR      R0,[SP, #+16]
   \   000000BC   0x.... 0x....      BL       GUI_SetFont
    161            /* Fill frame win resource */
    162            _aDialogCreate[0].pfCreateIndirect = FRAMEWIN_CreateIndirect;
   \   000000C0   0x....             LDR.N    R0,??DataTable1_1
   \   000000C2   0x9005             STR      R0,[SP, #+20]
    163            _aDialogCreate[0].pName            = sCaption;
   \   000000C4   0xA805             ADD      R0,SP,#+20
   \   000000C6   0x6045             STR      R5,[R0, #+4]
    164            _aDialogCreate[0].x0               = x0;
   \   000000C8   0x9901             LDR      R1,[SP, #+4]
   \   000000CA   0xF8AD 0x101E      STRH     R1,[SP, #+30]
    165            _aDialogCreate[0].y0               = y0;
   \   000000CE   0x9900             LDR      R1,[SP, #+0]
   \   000000D0   0x8181             STRH     R1,[R0, #+12]
    166            _aDialogCreate[0].xSize            = xSizeFrame;
   \   000000D2   0x4651             MOV      R1,R10
   \   000000D4   0xF8AD 0x1022      STRH     R1,[SP, #+34]
    167            _aDialogCreate[0].ySize            = ySizeFrame;
   \   000000D8   0xF8A0 0xB010      STRH     R11,[R0, #+16]
    168            if (Flags & GUI_MESSAGEBOX_CF_MOVEABLE) {
   \   000000DC   0x06F1             LSLS     R1,R6,#+27
   \   000000DE   0xD502             BPL.N    ??MESSAGEBOX_Create_4
    169              _aDialogCreate[0].Flags          = FRAMEWIN_CF_MOVEABLE;
   \   000000E0   0x2110             MOVS     R1,#+16
   \   000000E2   0xF8AD 0x1026      STRH     R1,[SP, #+38]
    170            }
    171            /* Fill text resource */
    172            _aDialogCreate[1].pfCreateIndirect = TEXT_CreateIndirect;
   \                     ??MESSAGEBOX_Create_4: (+1)
   \   000000E6   0x....             LDR.N    R1,??DataTable1_2
   \   000000E8   0x910B             STR      R1,[SP, #+44]
    173            _aDialogCreate[1].pName            = sMessage;
   \   000000EA   0x940C             STR      R4,[SP, #+48]
    174            _aDialogCreate[1].x0               = (xSizeFrame - xSizeMessage - BorderSize * 2) / 2;
   \   000000EC   0xEBAA 0x0108      SUB      R1,R10,R8
   \   000000F0   0xEBA1 0x0147      SUB      R1,R1,R7, LSL #+1
   \   000000F4   0xEB01 0x71D1      ADD      R1,R1,R1, LSR #+31
   \   000000F8   0x1049             ASRS     R1,R1,#+1
   \   000000FA   0xF8AD 0x1036      STRH     R1,[SP, #+54]
    175            _aDialogCreate[1].y0               = MESSAGEBOX_BORDER;
   \   000000FE   0x2104             MOVS     R1,#+4
   \   00000100   0xF8AD 0x1038      STRH     R1,[SP, #+56]
    176            _aDialogCreate[1].xSize            = xSizeMessage;
   \   00000104   0xF8AD 0x803A      STRH     R8,[SP, #+58]
    177            _aDialogCreate[1].ySize            = ySizeMessage;
   \   00000108   0x4649             MOV      R1,R9
   \   0000010A   0xF8AD 0x103C      STRH     R1,[SP, #+60]
    178            _aDialogCreate[1].Para             = GUI_TA_TOP | GUI_TA_HCENTER;
   \   0000010E   0x2102             MOVS     R1,#+2
   \   00000110   0x9110             STR      R1,[SP, #+64]
    179            /* Fill button resource */
    180            _aDialogCreate[2].pfCreateIndirect = BUTTON_CreateIndirect;
   \   00000112   0x....             LDR.N    R1,??DataTable1_3
   \   00000114   0x9111             STR      R1,[SP, #+68]
    181            _aDialogCreate[2].pName            = "OK";
   \   00000116   0x....             ADR.N    R1,??DataTable1  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000118   0x9112             STR      R1,[SP, #+72]
    182            _aDialogCreate[2].Id               = GUI_ID_OK;
   \   0000011A   0x2101             MOVS     R1,#+1
   \   0000011C   0xF8AD 0x104C      STRH     R1,[SP, #+76]
    183            _aDialogCreate[2].x0               = (xSizeFrame - MESSAGEBOX_XSIZEOK - BorderSize * 2) / 2;
   \   00000120   0xF1AA 0x0132      SUB      R1,R10,#+50
   \   00000124   0xEBA1 0x0147      SUB      R1,R1,R7, LSL #+1
   \   00000128   0xEB01 0x71D1      ADD      R1,R1,R1, LSR #+31
   \   0000012C   0x1049             ASRS     R1,R1,#+1
   \   0000012E   0x8741             STRH     R1,[R0, #+58]
    184            _aDialogCreate[2].y0               = MESSAGEBOX_BORDER * 2 + ySizeMessage;
   \   00000130   0xF109 0x0008      ADD      R0,R9,#+8
   \   00000134   0xF8AD 0x0050      STRH     R0,[SP, #+80]
    185            _aDialogCreate[2].xSize            = MESSAGEBOX_XSIZEOK;
   \   00000138   0x2032             MOVS     R0,#+50
   \   0000013A   0xF8AD 0x0052      STRH     R0,[SP, #+82]
    186            _aDialogCreate[2].ySize            = MESSAGEBOX_YSIZEOK;
   \   0000013E   0x2014             MOVS     R0,#+20
   \   00000140   0xF8AD 0x0054      STRH     R0,[SP, #+84]
    187            /* Create dialog */
    188            return GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _MESSAGEBOX_cbCallback, 0, 0, 0);
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0x9001             STR      R0,[SP, #+4]
   \   00000148   0x9000             STR      R0,[SP, #+0]
   \   0000014A   0x4603             MOV      R3,R0
   \   0000014C   0x....             LDR.N    R2,??DataTable1_4
   \   0000014E   0x2103             MOVS     R1,#+3
   \   00000150   0xA805             ADD      R0,SP,#+20
   \   00000152   0x.... 0x....      BL       GUI_CreateDialogBox
   \   00000156   0xB017             ADD      SP,SP,#+92
   \   00000158   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    189          }
    190          
    191          /*********************************************************************
    192          *
    193          *       GUI_MessageBox
    194          */

   \                                 In section .text, align 2, keep-with-next
    195          int GUI_MessageBox(const char * sMessage, const char * sCaption, int Flags) {
   \                     GUI_MessageBox: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    196            WM_HWIN hWin;
    197            hWin = MESSAGEBOX_Create(sMessage, sCaption, Flags);
   \   00000002   0x.... 0x....      BL       MESSAGEBOX_Create
    198            /* Exec dialog */
    199            return GUI_ExecCreatedDialog(hWin);
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0x.... 0x....      B.W      GUI_ExecCreatedDialog
    200          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x4F 0x4B          DC8      0x4F, 0x4B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x........         DC32     FRAMEWIN_CreateIndirect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x........         DC32     TEXT_CreateIndirect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x........         DC32     BUTTON_CreateIndirect

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x........         DC32     _MESSAGEBOX_cbCallback

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OK">`:
   \   00000000   0x4F 0x4B          DC8 "OK"
   \              0x00         
   \   00000003   0x00               DC8 0
    201          
    202          #else
    203          
    204          void GUI_MessageBox_C(void) {} /* avoid empty object files */
    205          
    206          #endif /* GUI_WINSUPPORT */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GUI_MessageBox
         0   -> GUI_ExecCreatedDialog
         8   -> MESSAGEBOX_Create
     128   MESSAGEBOX_Create
       128   -> FRAMEWIN_GetDefaultBorderSize
       128   -> FRAMEWIN_GetDefaultFont
       128   -> GUI_CreateDialogBox
       128   -> GUI_GetStringDistX
       128   -> GUI_GetTextExtend
       128   -> GUI_GetYSizeOfFont
       128   -> GUI_SetFont
       128   -> LCD_GetXSize
       128   -> LCD_GetYSize
       128   -> TEXT_GetDefaultFont
       128   -> memset
      16   _MESSAGEBOX_cbCallback
         0   -> FRAMEWIN_SetClientColor
         0   -> GUI_EndDialog
         0   -> WM_DefaultProc
        16   -> WM_GetId


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "OK">
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      14  GUI_MessageBox
     348  MESSAGEBOX_Create
     118  _MESSAGEBOX_cbCallback

 
   4 bytes in section .rodata
 500 bytes in section .text
 
 500 bytes of CODE  memory
   4 bytes of CONST memory

Errors: none
Warnings: none
