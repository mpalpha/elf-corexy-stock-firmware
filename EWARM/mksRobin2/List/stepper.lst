###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  18:23:18
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\..\Middlewares\GUI\
#        -Om --eec++ -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\stepper.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\stepper.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp
      1          /**
      2           * Marlin 3D Printer Firmware
      3           * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
      4           *
      5           * Based on Sprinter and grbl.
      6           * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
      7           *
      8           * This program is free software: you can redistribute it and/or modify
      9           * it under the terms of the GNU General Public License as published by
     10           * the Free Software Foundation, either version 3 of the License, or
     11           * (at your option) any later version.
     12           *
     13           * This program is distributed in the hope that it will be useful,
     14           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     15           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     16           * GNU General Public License for more details.
     17           *
     18           * You should have received a copy of the GNU General Public License
     19           * along with this program.  If not, see <http://www.gnu.org/licenses/>.
     20           *
     21           */
     22          
     23          /**
     24           * stepper.cpp - A singleton object to execute motion plans using stepper motors
     25           * Marlin Firmware
     26           *
     27           * Derived from Grbl
     28           * Copyright (c) 2009-2011 Simen Svale Skogsrud
     29           *
     30           * Grbl is free software: you can redistribute it and/or modify
     31           * it under the terms of the GNU General Public License as published by
     32           * the Free Software Foundation, either version 3 of the License, or
     33           * (at your option) any later version.
     34           *
     35           * Grbl is distributed in the hope that it will be useful,
     36           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     37           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     38           * GNU General Public License for more details.
     39           *
     40           * You should have received a copy of the GNU General Public License
     41           * along with Grbl.  If not, see <http://www.gnu.org/licenses/>.
     42           */
     43          
     44          /* The timer calculations of this module informed by the 'RepRap cartesian firmware' by Zack Smith
     45             and Philipp Tiefenbacher. */
     46          
     47          #include "Marlin.h"

  #define UNUSED(x) ((void)(x))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h",87  Warning[Pe047]: 
          incompatible redefinition of macro "UNUSED" (declared at line 101 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\macros.h")

  		volatile volatile float desireBedTempBak;
  		         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Inc\mks_cfg.h",609  Warning[Pe083]: 
          type qualifier specified more than once

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp long CORESIGN(long)
   \                     _Z8CORESIGNl: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable20
   \   00000004   0xF891 0x1058      LDRB     R1,[R1, #+88]
   \   00000008   0x22A8             MOVS     R2,#+168
   \   0000000A   0x4211             TST      R1,R2
   \   0000000C   0xD000             BEQ.N    ??CORESIGN_0
   \   0000000E   0x4240             RSBS     R0,R0,#+0
   \                     ??CORESIGN_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return

  #define strcpy_P(dest, src) strcpy((dest), (src))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",23  Warning[Pe047]: 
          incompatible redefinition of macro "strcpy_P" (declared at line 93
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define strstr_P(a, b) strstr((a), (b))
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",26  Warning[Pe047]: 
          incompatible redefinition of macro "strstr_P" (declared at line 94
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define sprintf_P(s, f, ...) sprintf((s), (f), __VA_ARGS__)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",28  Warning[Pe047]: 
          incompatible redefinition of macro "sprintf_P" (declared at line 95
          of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define pgm_read_word_near(addr) pgm_read_word(addr)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\arduino\stm32\cores\arduino\avr\pgmspace.h",38  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_word_near" (declared at
          line 65 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

   \                                 In section .text, align 4
   \   __interwork __softfp void serialprintPGM(char const *)
   \                     _Z14serialprintPGMPKc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xE003             B.N      ??serialprintPGM_0
   \                     ??serialprintPGM_1: (+1)
   \   00000006   0xB2C9             UXTB     R1,R1
   \   00000008   0x4803             LDR.N    R0,??serialprintPGM_2
   \   0000000A   0x.... 0x....      BL       _ZN10USARTClass5writeEh
   \                     ??serialprintPGM_0: (+1)
   \   0000000E   0xF914 0x1B01      LDRSB    R1,[R4], #+1
   \   00000012   0x0008             MOVS     R0,R1
   \   00000014   0xD1F7             BNE.N    ??serialprintPGM_1
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
   \                     ??serialprintPGM_2:
   \   00000018   0x........         DC32     Serial3

    }
    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\Marlin.h",538  Warning[Pe940]: 
          missing return statement at end of non-void function
          "position_is_reachable_IS_KINEMATIC"
     48          #include "stepper.h"

   \                                 In section .text, align 4
   \   __interwork __softfp bool Planner::blocks_queued()
   \                     _ZN7Planner13blocks_queuedEv: (+1)
   \   00000000   0x4804             LDR.N    R0,??blocks_queued_0
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x4904             LDR.N    R1,??blocks_queued_0+0x4
   \   00000006   0x7809             LDRB     R1,[R1, #+0]
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD001             BEQ.N    ??blocks_queued_1
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x4770             BX       LR
   \                     ??blocks_queued_1: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
   \                     ??blocks_queued_0:
   \   00000014   0x........         DC32     _ZN7Planner17block_buffer_headE
   \   00000018   0x........         DC32     _ZN7Planner17block_buffer_tailE

   \                                 In section .text, align 4
   \   __interwork __softfp void Planner::discard_current_block()
   \                     _ZN7Planner21discard_current_blockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN7Planner13blocks_queuedEv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD005             BEQ.N    ??discard_current_block_0
   \   0000000A   0x4803             LDR.N    R0,??discard_current_block_1
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0xF001 0x010F      AND      R1,R1,#0xF
   \   00000014   0x7001             STRB     R1,[R0, #+0]
   \                     ??discard_current_block_0: (+1)
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
   \                     ??discard_current_block_1:
   \   00000018   0x........         DC32     _ZN7Planner17block_buffer_tailE

   \                                 In section .text, align 4
   \   __interwork __softfp bool Planner::discard_continued_block()
   \                     _ZN7Planner23discard_continued_blockEv: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       _ZN7Planner13blocks_queuedEv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD00A             BEQ.N    ??discard_continued_block_0
   \   0000000A   0x4809             LDR.N    R0,??discard_continued_block_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2154             MOVS     R1,#+84
   \   00000010   0x4A08             LDR.N    R2,??discard_continued_block_1+0x4
   \   00000012   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x0900             LSRS     R0,R0,#+4
   \   0000001A   0xF000 0x0401      AND      R4,R0,#0x1
   \   0000001E   0xE000             B.N      ??discard_continued_block_2
   \                     ??discard_continued_block_0: (+1)
   \   00000020   0x2400             MOVS     R4,#+0
   \                     ??discard_continued_block_2: (+1)
   \   00000022   0x2C00             CMP      R4,#+0
   \   00000024   0xD001             BEQ.N    ??discard_continued_block_3
   \   00000026   0x.... 0x....      BL       _ZN7Planner21discard_current_blockEv
   \                     ??discard_continued_block_3: (+1)
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
   \   0000002E   0xBF00             Nop      
   \                     ??discard_continued_block_1:
   \   00000030   0x........         DC32     _ZN7Planner17block_buffer_tailE
   \   00000034   0x........         DC32     _ZN7Planner12block_bufferE

   \                                 In section .text, align 4
   \   __interwork __softfp block_t *Planner::get_current_block()
   \                     _ZN7Planner17get_current_blockEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _ZN7Planner13blocks_queuedEv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD00A             BEQ.N    ??get_current_block_0
   \   0000000A   0x4806             LDR.N    R0,??get_current_block_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2154             MOVS     R1,#+84
   \   00000010   0x4A05             LDR.N    R2,??get_current_block_1+0x4
   \   00000012   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000016   0x7801             LDRB     R1,[R0, #+0]
   \   00000018   0xF041 0x0108      ORR      R1,R1,#0x8
   \   0000001C   0x7001             STRB     R1,[R0, #+0]
   \   0000001E   0xBD02             POP      {R1,PC}
   \                     ??get_current_block_0: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
   \                     ??get_current_block_1:
   \   00000024   0x........         DC32     _ZN7Planner17block_buffer_tailE
   \   00000028   0x........         DC32     _ZN7Planner12block_bufferE

      static constexpr int8_t next_block_index(const int8_t block_index) { return BLOCK_MOD(block_index + 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\planner.h",627  Warning[Pe815]: 
          type qualifier on return type is meaningless

      static constexpr int8_t prev_block_index(const int8_t block_index) { return BLOCK_MOD(block_index - 1); }
             ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\planner.h",628  Warning[Pe815]: 
          type qualifier on return type is meaningless

   \                                 In section .text, align 4
   \   __interwork __softfp bool Stepper::motor_direction(AxisEnum)
   \                     _ZN7Stepper15motor_directionE8AxisEnum: (+1)
   \   00000000   0x4905             LDR.N    R1,??motor_direction_0
   \   00000002   0x7949             LDRB     R1,[R1, #+5]
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0xFA02 0xF000      LSL      R0,R2,R0
   \   0000000A   0x4001             ANDS     R1,R0,R1
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x4180             SBCS     R0,R0,R0
   \   00000012   0x43C0             MVNS     R0,R0
   \   00000014   0x0FC0             LSRS     R0,R0,#+31
   \   00000016   0x4770             BX       LR               ;; return
   \                     ??motor_direction_0:
   \   00000018   0x........         DC32     _ZN7Stepper15count_directionE

   \                                 In section .text, align 4
   \   __interwork __softfp void Stepper::kill_current_block()
   \                     _ZN7Stepper18kill_current_blockEv: (+1)
   \   00000000   0x4802             LDR.N    R0,??kill_current_block_0
   \   00000002   0x6A01             LDR      R1,[R0, #+32]
   \   00000004   0x6949             LDR      R1,[R1, #+20]
   \   00000006   0x6341             STR      R1,[R0, #+52]
   \   00000008   0x4770             BX       LR               ;; return
   \   0000000A   0xBF00             Nop      
   \                     ??kill_current_block_0:
   \   0000000C   0x........         DC32     _ZN7Stepper15count_directionE

   \                                 In section .text, align 4
   \   __interwork __softfp unsigned short Stepper::calc_timer_interval(unsigned short)
   \                     _ZN7Stepper19calc_timer_intervalEt: (+1)
   \   00000000   0xF649 0x4141      MOVW     R1,#+40001
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xDB01             BLT.N    ??calc_timer_interval_0
   \   00000008   0xF649 0x4040      MOVW     R0,#+40000
   \                     ??calc_timer_interval_0: (+1)
   \   0000000C   0x4601             MOV      R1,R0
   \   0000000E   0x4A0F             LDR.N    R2,??calc_timer_interval_1
   \   00000010   0xF644 0x6321      MOVW     R3,#+20001
   \   00000014   0x4299             CMP      R1,R3
   \   00000016   0xDB03             BLT.N    ??calc_timer_interval_2
   \   00000018   0x0880             LSRS     R0,R0,#+2
   \   0000001A   0x2104             MOVS     R1,#+4
   \   0000001C   0x7211             STRB     R1,[R2, #+8]
   \   0000001E   0xE009             B.N      ??calc_timer_interval_3
   \                     ??calc_timer_interval_2: (+1)
   \   00000020   0xF242 0x7311      MOVW     R3,#+10001
   \   00000024   0x4299             CMP      R1,R3
   \   00000026   0xDB03             BLT.N    ??calc_timer_interval_4
   \   00000028   0x0840             LSRS     R0,R0,#+1
   \   0000002A   0x2102             MOVS     R1,#+2
   \   0000002C   0x7211             STRB     R1,[R2, #+8]
   \   0000002E   0xE001             B.N      ??calc_timer_interval_3
   \                     ??calc_timer_interval_4: (+1)
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x7211             STRB     R1,[R2, #+8]
   \                     ??calc_timer_interval_3: (+1)
   \   00000034   0x4906             LDR.N    R1,??calc_timer_interval_1+0x4  ;; 0x44aa200
   \   00000036   0xEB00 0x02C0      ADD      R2,R0,R0, LSL #+3
   \   0000003A   0x0090             LSLS     R0,R2,#+2
   \   0000003C   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x2864             CMP      R0,#+100
   \   00000044   0xDA00             BGE.N    ??calc_timer_interval_5
   \   00000046   0x2064             MOVS     R0,#+100
   \                     ??calc_timer_interval_5: (+1)
   \   00000048   0x4770             BX       LR               ;; return
   \   0000004A   0xBF00             Nop      
   \                     ??calc_timer_interval_1:
   \   0000004C   0x........         DC32     _ZN7Stepper15count_directionE
   \   00000050   0x044AA200         DC32     0x44aa200

   \                                 In section .text, align 4
   \   __interwork __softfp void Stepper::trapezoid_generator_reset()
   \                     _ZN7Stepper25trapezoid_generator_resetEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4C18             LDR.N    R4,??trapezoid_generator_reset_0
   \   00000004   0x6A20             LDR      R0,[R4, #+32]
   \   00000006   0xF890 0x1024      LDRB     R1,[R0, #+36]
   \   0000000A   0x4A17             LDR.N    R2,??trapezoid_generator_reset_0+0x4
   \   0000000C   0x7963             LDRB     R3,[R4, #+5]
   \   0000000E   0x4299             CMP      R1,R3
   \   00000010   0xD104             BNE.N    ??trapezoid_generator_reset_1
   \   00000012   0x7843             LDRB     R3,[R0, #+1]
   \   00000014   0xF992 0x5000      LDRSB    R5,[R2, #+0]
   \   00000018   0x42AB             CMP      R3,R5
   \   0000001A   0xD005             BEQ.N    ??trapezoid_generator_reset_2
   \                     ??trapezoid_generator_reset_1: (+1)
   \   0000001C   0x7161             STRB     R1,[R4, #+5]
   \   0000001E   0xF990 0x0001      LDRSB    R0,[R0, #+1]
   \   00000022   0x7010             STRB     R0,[R2, #+0]
   \   00000024   0x.... 0x....      BL       _ZN7Stepper14set_directionsEv
   \                     ??trapezoid_generator_reset_2: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x63E0             STR      R0,[R4, #+60]
   \   0000002C   0x6A25             LDR      R5,[R4, #+32]
   \   0000002E   0x6BE8             LDR      R0,[R5, #+60]
   \   00000030   0xB280             UXTH     R0,R0
   \   00000032   0x.... 0x....      BL       _ZN7Stepper19calc_timer_intervalEt
   \   00000036   0x81A0             STRH     R0,[R4, #+12]
   \   00000038   0x7A20             LDRB     R0,[R4, #+8]
   \   0000003A   0x7260             STRB     R0,[R4, #+9]
   \   0000003C   0x6C28             LDR      R0,[R5, #+64]
   \   0000003E   0x81E0             STRH     R0,[R4, #+14]
   \   00000040   0x89E0             LDRH     R0,[R4, #+14]
   \   00000042   0x.... 0x....      BL       _ZN7Stepper19calc_timer_intervalEt
   \   00000046   0x63A0             STR      R0,[R4, #+56]
   \   00000048   0x4808             LDR.N    R0,??trapezoid_generator_reset_0+0x8
   \   0000004A   0x6BA1             LDR      R1,[R4, #+56]
   \   0000004C   0x6802             LDR      R2,[R0, #+0]
   \   0000004E   0x62D1             STR      R1,[R2, #+44]
   \   00000050   0x6800             LDR      R0,[R0, #+0]
   \   00000052   0x6AC1             LDR      R1,[R0, #+44]
   \   00000054   0x6A42             LDR      R2,[R0, #+36]
   \   00000056   0x4291             CMP      R1,R2
   \   00000058   0xD202             BCS.N    ??trapezoid_generator_reset_3
   \   0000005A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000005C   0x1E49             SUBS     R1,R1,#+1
   \   0000005E   0x6241             STR      R1,[R0, #+36]
   \                     ??trapezoid_generator_reset_3: (+1)
   \   00000060   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \   00000062   0xBF00             Nop      
   \                     ??trapezoid_generator_reset_0:
   \   00000064   0x........         DC32     _ZN7Stepper15count_directionE
   \   00000068   0x........         DC32     _ZZN7Stepper25trapezoid_generator_resetEvE13last_extruder
   \   0000006C   0x........         DC32     htim2

   \                                 In section .data, align 1
   \   __absolute int8_t Stepper::trapezoid_generator_reset()::last_extruder
   \                     _ZZN7Stepper25trapezoid_generator_resetEvE13last_extruder:
   \   00000000   0xFF               DC8 -1
     49          #include "endstops.h"

   \                                 In section .text, align 4
   \   __interwork __softfp void Endstops::enable(bool)
   \                     _ZN8Endstops6enableEb: (+1)
   \   00000000   0x4901             LDR.N    R1,??enable_0
   \   00000002   0x7008             STRB     R0,[R1, #+0]
   \   00000004   0x4770             BX       LR               ;; return
   \   00000006   0xBF00             Nop      
   \                     ??enable_0:
   \   00000008   0x........         DC32     _ZN8Endstops7enabledE
     50          #include "planner.h"
     51          #include "temperature.h"

        target_temperature[HOTEND_INDEX] = celsius;
                                         ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\temperature.h",406  Warning[Pa093]: 
          implicit conversion from floating point to integer

          target_temperature_bed =
                                 ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\temperature.h",414  Warning[Pa093]: 
          implicit conversion from floating point to integer
     52          #include "ultralcd.h"
     53          #include "language.h"
     54          #include "cardreader.h"

  #define SD_DETECT_INVERTED false
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",27  Warning[Pe047]: 
          incompatible redefinition of macro "SD_DETECT_INVERTED" (declared at
          line 524 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Configuration_adv.h")

  #define PSTR(s) s
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",31  Warning[Pe047]: 
          incompatible redefinition of macro "PSTR" (declared at line 63 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin.h")

  #define pgm_read_byte(x) (*(char*)x)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",32  Warning[Pe047]: 
          incompatible redefinition of macro "pgm_read_byte" (declared at line
          64 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\Marlin_export.h")

  #define LONG_FILENAME_LENGTH (13*MAX_VFAT_ENTRIES+1)
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\cardreader.h",61  Warning[Pe047]: 
          incompatible redefinition of macro "LONG_FILENAME_LENGTH" (declared
          at line 119 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")

  #define ALLOW_DEPRECATED_FUNCTIONS 0
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\SdFat.h",635  Warning[Pe047]: 
          incompatible redefinition of macro "ALLOW_DEPRECATED_FUNCTIONS"
          (declared at line 67 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")

  #define SPI_SD_INIT_RATE 11
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\SdFat.h",647  Warning[Pe047]: 
          incompatible redefinition of macro "SPI_SD_INIT_RATE" (declared at
          line 79 of
          "E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_N
          ano_code\Middlewares\Third_Party\Marlin\SdFatConfig.h")
     55          #include "mks_cfg.h"
     56          //#include "speed_lookuptable.h"
     57          #include "tim.h"
     58          
     59          #if ENABLED(AUTO_BED_LEVELING_UBL) && ENABLED(ULTIPANEL)
     60            #include "ubl.h"
     61          #endif
     62          
     63          #if HAS_DIGIPOTSS
     64            #include <SPI.h>
     65          #endif
     66          

   \                                 In section .bss, align 4
     67          Stepper stepper; // Singleton
   \                     stepper:
   \   00000000                      DS8 4
     68          
     69          // public:
     70          
     71          block_t* Stepper::current_block = NULL;  // A pointer to the block currently being traced
     72          
     73          #if ENABLED(ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED)
     74            bool Stepper::abort_on_endstop_hit = false;
     75          #endif
     76          
     77          #if 1//ENABLED(X_DUAL_ENDSTOPS) || ENABLED(Y_DUAL_ENDSTOPS) || ENABLED(Z_DUAL_ENDSTOPS)
     78            bool Stepper::performing_homing = false;
     79          #endif
     80          
     81          #if HAS_MOTOR_CURRENT_PWM
     82            uint32_t Stepper::motor_current_setting[3]; // Initialized by settings.load()
     83          #endif
     84          
     85          // private:
     86          
     87          uint8_t Stepper::last_direction_bits = 0;        // The next stepping-bits to be output
     88          int16_t Stepper::cleaning_buffer_counter = 0;
     89          
     90          #if ENABLED(X_DUAL_ENDSTOPS)
     91            bool Stepper::locked_x_motor = false, Stepper::locked_x2_motor = false;
     92          #endif
     93          #if ENABLED(Y_DUAL_ENDSTOPS)
     94            bool Stepper::locked_y_motor = false, Stepper::locked_y2_motor = false;
     95          #endif
     96          #if 1//ENABLED(Z_DUAL_ENDSTOPS)
     97            bool Stepper::locked_z_motor = false, Stepper::locked_z2_motor = false;
     98          #endif
     99          
    100          long Stepper::counter_X = 0,
    101               Stepper::counter_Y = 0,
    102               Stepper::counter_Z = 0,
    103               Stepper::counter_E = 0;
    104          
    105          volatile uint32_t Stepper::step_events_completed = 0; // The number of step events executed in the current block
    106          
    107          #if ENABLED(LIN_ADVANCE)
    108          
    109            constexpr uint16_t ADV_NEVER = 65535;
    110          
    111            uint16_t Stepper::nextMainISR = 0,
    112                     Stepper::nextAdvanceISR = ADV_NEVER,
    113                     Stepper::eISR_Rate = ADV_NEVER;
    114          
    115            volatile int Stepper::e_steps[E_STEPPERS];
    116            int Stepper::final_estep_rate,
    117                Stepper::current_estep_rate[E_STEPPERS],
    118                Stepper::current_adv_steps[E_STEPPERS];
    119          
    120            /**
    121             * See https://github.com/MarlinFirmware/Marlin/issues/5699#issuecomment-309264382
    122             *
    123             * This fix isn't perfect and may lose steps - but better than locking up completely
    124             * in future the planner should slow down if advance stepping rate would be too high
    125             */
    126            FORCE_INLINE uint16_t adv_rate(const int steps, const uint16_t timer, const uint8_t loops) {
    127              if (steps) {
    128                const uint16_t rate = (timer * loops) / abs(steps);
    129                //return constrain(rate, 1, ADV_NEVER - 1)
    130                return rate ? rate : 1;
    131              }
    132              return ADV_NEVER;
    133            }
    134          
    135          #endif // LIN_ADVANCE
    136          
    137          long Stepper::acceleration_time, Stepper::deceleration_time;
    138          
    139          volatile long Stepper::count_position[NUM_AXIS] = { 0 };
    140          volatile signed char Stepper::count_direction[NUM_AXIS] = { 1, 1, 1, 1 };
    141          
    142          #if ENABLED(MIXING_EXTRUDER)
    143            long Stepper::counter_m[MIXING_STEPPERS];
    144          #endif
    145          
    146          uint8_t Stepper::step_loops, Stepper::step_loops_nominal;
    147          
    148          uint16_t Stepper::OCR1A_nominal,
    149                   Stepper::acc_step_rate; // needed for deceleration start point
    150          
    151          volatile long Stepper::endstops_trigsteps[XYZ];
    152          
    153          #if 1//ENABLED(X_DUAL_ENDSTOPS) || ENABLED(Y_DUAL_ENDSTOPS) || ENABLED(Z_DUAL_ENDSTOPS)
    154            #define LOCKED_X_MOTOR  locked_x_motor
    155            #define LOCKED_Y_MOTOR  locked_y_motor
    156            #define LOCKED_Z_MOTOR  locked_z_motor
    157            #define LOCKED_X2_MOTOR locked_x2_motor
    158            #define LOCKED_Y2_MOTOR locked_y2_motor
    159            #define LOCKED_Z2_MOTOR locked_z2_motor
    160            #define DUAL_ENDSTOP_APPLY_STEP(AXIS,v)                                                                                                             \
    161              if (performing_homing) {                                                                                                                          \
    162                if (AXIS##_HOME_DIR < 0) {                                                                                                                      \
    163                  if (!(TEST(endstops.old_endstop_bits, AXIS##_MIN) && (count_direction[AXIS##_AXIS] < 0)) && !LOCKED_##AXIS##_MOTOR) AXIS##_STEP_WRITE(v);     \
    164                  if (!(TEST(endstops.old_endstop_bits, AXIS##2_MIN) && (count_direction[AXIS##_AXIS] < 0)) && !LOCKED_##AXIS##2_MOTOR) AXIS##2_STEP_WRITE(v);  \
    165                }                                                                                                                                               \
    166                else {                                                                                                                                          \
    167                  if (!(TEST(endstops.old_endstop_bits, AXIS##_MAX) && (count_direction[AXIS##_AXIS] > 0)) && !LOCKED_##AXIS##_MOTOR) AXIS##_STEP_WRITE(v);     \
    168                  if (!(TEST(endstops.old_endstop_bits, AXIS##2_MAX) && (count_direction[AXIS##_AXIS] > 0)) && !LOCKED_##AXIS##2_MOTOR) AXIS##2_STEP_WRITE(v);  \
    169                }                                                                                                                                               \
    170              }                                                                                                                                                 \
    171              else {                                                                                                                                            \
    172                AXIS##_STEP_WRITE(v);                                                                                                                           \
    173                AXIS##2_STEP_WRITE(v);                                                                                                                          \
    174              }
    175          #endif
    176          
    177          #if ENABLED(X_DUAL_STEPPER_DRIVERS)
    178            #define X_APPLY_DIR(v,Q) do{ X_DIR_WRITE(v); X2_DIR_WRITE((v) != INVERT_X2_VS_X_DIR); }while(0)
    179            #if ENABLED(DUAL_X_CARRIAGE)
    180              #define X_APPLY_DIR(v,ALWAYS) \
    181                if (extruder_duplication_enabled || ALWAYS) { \
    182                  X_DIR_WRITE(v); \
    183                  X2_DIR_WRITE(v); \
    184                } \
    185                else { \
    186                  if (current_block->active_extruder) X2_DIR_WRITE(v); else X_DIR_WRITE(v); \
    187                }
    188              #define X_APPLY_STEP(v,ALWAYS) \
    189                if (extruder_duplication_enabled || ALWAYS) { \
    190                  X_STEP_WRITE(v); \
    191                  X2_STEP_WRITE(v); \
    192                } \
    193                else { \
    194                  if (current_block->active_extruder) X2_STEP_WRITE(v); else X_STEP_WRITE(v); \
    195                }
    196            #elif ENABLED(X_DUAL_ENDSTOPS)
    197              #define X_APPLY_STEP(v,Q) DUAL_ENDSTOP_APPLY_STEP(X,v)
    198            #else
    199              #define X_APPLY_STEP(v,Q) do{ X_STEP_WRITE(v); X2_STEP_WRITE(v); }while(0)
    200            #endif
    201          #else
    202            #define X_APPLY_DIR(v,Q) X_DIR_WRITE(v)
    203            #define X_APPLY_STEP(v,Q) X_STEP_WRITE(v)
    204          #endif
    205          
    206          #if ENABLED(Y_DUAL_STEPPER_DRIVERS)
    207            #define Y_APPLY_DIR(v,Q) do{ Y_DIR_WRITE(v); Y2_DIR_WRITE((v) != INVERT_Y2_VS_Y_DIR); }while(0)
    208            #if ENABLED(Y_DUAL_ENDSTOPS)
    209              #define Y_APPLY_STEP(v,Q) DUAL_ENDSTOP_APPLY_STEP(Y,v)
    210            #else
    211              #define Y_APPLY_STEP(v,Q) do{ Y_STEP_WRITE(v); Y2_STEP_WRITE(v); }while(0)
    212            #endif
    213          #else
    214            #define Y_APPLY_DIR(v,Q) Y_DIR_WRITE(v)
    215            #define Y_APPLY_STEP(v,Q) Y_STEP_WRITE(v)
    216          #endif
    217          /*
    218          #if ENABLED(Z_DUAL_STEPPER_DRIVERS)
    219            #define Z_APPLY_DIR(v,Q) do{ Z_DIR_WRITE(v); Z2_DIR_WRITE(v); }while(0)
    220            #if ENABLED(Z_DUAL_ENDSTOPS)
    221              #define Z_APPLY_STEP(v,Q) DUAL_ENDSTOP_APPLY_STEP(Z,v)
    222            #else
    223              #define Z_APPLY_STEP(v,Q) do{ Z_STEP_WRITE(v); Z2_STEP_WRITE(v); }while(0)
    224            #endif
    225          #else
    226            #define Z_APPLY_DIR(v,Q) Z_DIR_WRITE(v)
    227            #define Z_APPLY_STEP(v,Q) Z_STEP_WRITE(v)
    228          #endif
    229          */
    230          
    231          #define Z_APPLY_DIR(v,Q) do{ Z_DIR_WRITE(v); if(Z_DUAL_STEPPER_DRIVERS==1)Z2_DIR_WRITE(v); }while(0)
    232          #if 0//ENABLED(Z_DUAL_ENDSTOPS)
    233            #define Z_APPLY_STEP(v,Q) DUAL_ENDSTOP_APPLY_STEP(Z,v)
    234          #else
    235            #define Z_APPLY_STEP(v,Q) if(Z_DUAL_ENDSTOPS==1){DUAL_ENDSTOP_APPLY_STEP(Z,v)}else{do{ Z_STEP_WRITE(v); if(Z_DUAL_STEPPER_DRIVERS==1)Z2_STEP_WRITE(v); }while(0);}
    236          #endif
    237          
    238          
    239          #if DISABLED(MIXING_EXTRUDER)
    240            #define E_APPLY_STEP(v,Q) E_STEP_WRITE(v)
    241          #endif
    242          
    243          // intRes = longIn1 * longIn2 >> 24
    244          // uses:
    245          // r26 to store 0
    246          // r27 to store bits 16-23 of the 48bit result. The top bit is used to round the two byte result.
    247          // note that the lower two bytes and the upper byte of the 48bit result are not calculated.
    248          // this can cause the result to be out by one as the lower bytes may cause carries into the upper ones.
    249          // B0 A0 are bits 24-39 and are the returned value
    250          // C1 B1 A1 is longIn1
    251          // D2 C2 B2 A2 is longIn2
    252          //
    253          #define MultiU24X32toH16(intRes, longIn1, longIn2)  intRes = (uint16_t)((((uint64_t)longIn1 * (uint64_t)longIn2)>> 24)& 0XFFFF);
    254          /*
    255          #define MultiU24X32toH16(intRes, longIn1, longIn2) \
    256            asm volatile ( \
    257                           "clr r26 \n\t" \
    258                           "mul %A1, %B2 \n\t" \
    259                           "mov r27, r1 \n\t" \
    260                           "mul %B1, %C2 \n\t" \
    261                           "movw %A0, r0 \n\t" \
    262                           "mul %C1, %C2 \n\t" \
    263                           "add %B0, r0 \n\t" \
    264                           "mul %C1, %B2 \n\t" \
    265                           "add %A0, r0 \n\t" \
    266                           "adc %B0, r1 \n\t" \
    267                           "mul %A1, %C2 \n\t" \
    268                           "add r27, r0 \n\t" \
    269                           "adc %A0, r1 \n\t" \
    270                           "adc %B0, r26 \n\t" \
    271                           "mul %B1, %B2 \n\t" \
    272                           "add r27, r0 \n\t" \
    273                           "adc %A0, r1 \n\t" \
    274                           "adc %B0, r26 \n\t" \
    275                           "mul %C1, %A2 \n\t" \
    276                           "add r27, r0 \n\t" \
    277                           "adc %A0, r1 \n\t" \
    278                           "adc %B0, r26 \n\t" \
    279                           "mul %B1, %A2 \n\t" \
    280                           "add r27, r1 \n\t" \
    281                           "adc %A0, r26 \n\t" \
    282                           "adc %B0, r26 \n\t" \
    283                           "lsr r27 \n\t" \
    284                           "adc %A0, r26 \n\t" \
    285                           "adc %B0, r26 \n\t" \
    286                           "mul %D2, %A1 \n\t" \
    287                           "add %A0, r0 \n\t" \
    288                           "adc %B0, r1 \n\t" \
    289                           "mul %D2, %B1 \n\t" \
    290                           "add %B0, r0 \n\t" \
    291                           "clr r1 \n\t" \
    292                           : \
    293                           "=&r" (intRes) \
    294                           : \
    295                           "d" (longIn1), \
    296                           "d" (longIn2) \
    297                           : \
    298                           "r26" , "r27" \
    299                         )
    300          */
    301          // Some useful constants
    302          
    303          /**
    304           *         __________________________
    305           *        /|                        |\     _________________         ^
    306           *       / |                        | \   /|               |\        |
    307           *      /  |                        |  \ / |               | \       s
    308           *     /   |                        |   |  |               |  \      p
    309           *    /    |                        |   |  |               |   \     e
    310           *   +-----+------------------------+---+--+---------------+----+    e
    311           *   |               BLOCK 1            |      BLOCK 2          |    d
    312           *
    313           *                           time ----->
    314           *
    315           *  The trapezoid is the shape the speed curve over time. It starts at block->initial_rate, accelerates
    316           *  first block->accelerate_until step_events_completed, then keeps going at constant speed until
    317           *  step_events_completed reaches block->decelerate_after after which it decelerates until the trapezoid generator is reset.
    318           *  The slope of acceleration is calculated using v = u + at where t is the accumulated timer values of the steps so far.
    319           */

   \                                 In section .text, align 2, keep-with-next
    320          void Stepper::wake_up() {
    321            // TCNT1 = 0;
    322            ENABLE_STEPPER_DRIVER_INTERRUPT();
   \                     _ZN7Stepper7wake_upEv: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable20_1
   \   00000004   0x.... 0x....      B.W      HAL_TIM_Base_Start_IT
    323          }
    324          
    325          /**
    326           * Set the stepper direction of each axis
    327           *
    328           *   COREXY: X_AXIS=A_AXIS and Y_AXIS=B_AXIS
    329           *   COREXZ: X_AXIS=A_AXIS and Z_AXIS=C_AXIS
    330           *   COREYZ: Y_AXIS=B_AXIS and Z_AXIS=C_AXIS
    331           */

   \                                 In section .text, align 2, keep-with-next
    332          void Stepper::set_directions() {
   \                     _ZN7Stepper14set_directionsEv: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    333          
    334            #define SET_STEP_DIR(AXIS) \
    335              if (motor_direction(AXIS ##_AXIS)) { \
    336                AXIS ##_APPLY_DIR(INVERT_## AXIS ##_DIR, false); \
    337                count_direction[AXIS ##_AXIS] = -1; \
    338              } \
    339              else { \
    340                AXIS ##_APPLY_DIR(!INVERT_## AXIS ##_DIR, false); \
    341                count_direction[AXIS ##_AXIS] = 1; \
    342              }
    343          
    344            #if HAS_X_DIR
    345              SET_STEP_DIR(X); // A
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable20_2
   \   00000008   0xF8D4 0x8000      LDR      R8,[R4, #+0]
   \   0000000C   0x.... 0x....      LDR.W    R5,??DataTable20_3
   \   00000010   0xF8B5 0x9000      LDRH     R9,[R5, #+0]
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable20
   \   00000018   0xF897 0xA000      LDRB     R10,[R7, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R6,??DataTable20_4
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       _ZN7Stepper15motor_directionE8AxisEnum
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD009             BEQ.N    ??set_directions_0
   \   0000002A   0x4652             MOV      R2,R10
   \   0000002C   0xB252             SXTB     R2,R2
   \   0000002E   0x4649             MOV      R1,R9
   \   00000030   0x4640             MOV      R0,R8
   \   00000032   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000036   0xF04F 0x30FF      MOV      R0,#-1
   \   0000003A   0x7030             STRB     R0,[R6, #+0]
   \   0000003C   0xE00A             B.N      ??set_directions_1
   \                     ??set_directions_0: (+1)
   \   0000003E   0xF1BA 0x0201      SUBS     R2,R10,#+1
   \   00000042   0x4192             SBCS     R2,R2,R2
   \   00000044   0x0FD2             LSRS     R2,R2,#+31
   \   00000046   0xB252             SXTB     R2,R2
   \   00000048   0x4649             MOV      R1,R9
   \   0000004A   0x4640             MOV      R0,R8
   \   0000004C   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0x7030             STRB     R0,[R6, #+0]
    346            #endif
    347            #if HAS_Y_DIR
    348              SET_STEP_DIR(Y); // B
   \                     ??set_directions_1: (+1)
   \   00000054   0xF8D4 0x8014      LDR      R8,[R4, #+20]
   \   00000058   0xF8B5 0x900A      LDRH     R9,[R5, #+10]
   \   0000005C   0xF897 0xA001      LDRB     R10,[R7, #+1]
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x.... 0x....      BL       _ZN7Stepper15motor_directionE8AxisEnum
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD009             BEQ.N    ??set_directions_2
   \   0000006A   0x4652             MOV      R2,R10
   \   0000006C   0xB252             SXTB     R2,R2
   \   0000006E   0x4649             MOV      R1,R9
   \   00000070   0x4640             MOV      R0,R8
   \   00000072   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000076   0xF04F 0x30FF      MOV      R0,#-1
   \   0000007A   0x7070             STRB     R0,[R6, #+1]
   \   0000007C   0xE00A             B.N      ??set_directions_3
   \                     ??set_directions_2: (+1)
   \   0000007E   0xF1BA 0x0201      SUBS     R2,R10,#+1
   \   00000082   0x4192             SBCS     R2,R2,R2
   \   00000084   0x0FD2             LSRS     R2,R2,#+31
   \   00000086   0xB252             SXTB     R2,R2
   \   00000088   0x4649             MOV      R1,R9
   \   0000008A   0x4640             MOV      R0,R8
   \   0000008C   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x7070             STRB     R0,[R6, #+1]
    349            #endif
    350            #if HAS_Z_DIR
    351              SET_STEP_DIR(Z); // C
   \                     ??set_directions_3: (+1)
   \   00000094   0xF8D4 0x8028      LDR      R8,[R4, #+40]
   \   00000098   0xF8B5 0x9014      LDRH     R9,[R5, #+20]
   \   0000009C   0xF897 0xA002      LDRB     R10,[R7, #+2]
   \   000000A0   0x2002             MOVS     R0,#+2
   \   000000A2   0x.... 0x....      BL       _ZN7Stepper15motor_directionE8AxisEnum
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD013             BEQ.N    ??set_directions_4
   \   000000AA   0x4652             MOV      R2,R10
   \   000000AC   0xB252             SXTB     R2,R2
   \   000000AE   0x4649             MOV      R1,R9
   \   000000B0   0x4640             MOV      R0,R8
   \   000000B2   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000000B6   0xF897 0x0101      LDRB     R0,[R7, #+257]
   \   000000BA   0x2801             CMP      R0,#+1
   \   000000BC   0xD105             BNE.N    ??set_directions_5
   \   000000BE   0xF997 0x2002      LDRSB    R2,[R7, #+2]
   \   000000C2   0x8CA9             LDRH     R1,[R5, #+36]
   \   000000C4   0x6CA0             LDR      R0,[R4, #+72]
   \   000000C6   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??set_directions_5: (+1)
   \   000000CA   0xF04F 0x30FF      MOV      R0,#-1
   \   000000CE   0x70B0             STRB     R0,[R6, #+2]
   \   000000D0   0xE017             B.N      ??set_directions_6
   \                     ??set_directions_4: (+1)
   \   000000D2   0xF1BA 0x0201      SUBS     R2,R10,#+1
   \   000000D6   0x4192             SBCS     R2,R2,R2
   \   000000D8   0x0FD2             LSRS     R2,R2,#+31
   \   000000DA   0xB252             SXTB     R2,R2
   \   000000DC   0x4649             MOV      R1,R9
   \   000000DE   0x4640             MOV      R0,R8
   \   000000E0   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000000E4   0xF897 0x0101      LDRB     R0,[R7, #+257]
   \   000000E8   0x2801             CMP      R0,#+1
   \   000000EA   0xD108             BNE.N    ??set_directions_7
   \   000000EC   0x78B8             LDRB     R0,[R7, #+2]
   \   000000EE   0x1E42             SUBS     R2,R0,#+1
   \   000000F0   0x4192             SBCS     R2,R2,R2
   \   000000F2   0x0FD2             LSRS     R2,R2,#+31
   \   000000F4   0xB252             SXTB     R2,R2
   \   000000F6   0x8CA9             LDRH     R1,[R5, #+36]
   \   000000F8   0x6CA0             LDR      R0,[R4, #+72]
   \   000000FA   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??set_directions_7: (+1)
   \   000000FE   0x2001             MOVS     R0,#+1
   \   00000100   0x70B0             STRB     R0,[R6, #+2]
   \                     ??set_directions_6: (+1)
   \   00000102   0x6A30             LDR      R0,[R6, #+32]
   \   00000104   0xF890 0x8001      LDRB     R8,[R0, #+1]
   \   00000108   0x2003             MOVS     R0,#+3
    352            #endif
    353          
    354            #if DISABLED(LIN_ADVANCE)
    355              if (motor_direction(E_AXIS)) {
   \   0000010A   0x.... 0x....      BL       _ZN7Stepper15motor_directionE8AxisEnum
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD013             BEQ.N    ??set_directions_8
    356                REV_E_DIR();
   \   00000112   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000116   0xD106             BNE.N    ??set_directions_9
   \   00000118   0xF997 0x2003      LDRSB    R2,[R7, #+3]
   \   0000011C   0x8BE9             LDRH     R1,[R5, #+30]
   \   0000011E   0x6BE0             LDR      R0,[R4, #+60]
   \   00000120   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000124   0xE005             B.N      ??set_directions_10
   \                     ??set_directions_9: (+1)
   \   00000126   0xF997 0x2004      LDRSB    R2,[R7, #+4]
   \   0000012A   0x8CA9             LDRH     R1,[R5, #+36]
   \   0000012C   0x6CA0             LDR      R0,[R4, #+72]
   \   0000012E   0x.... 0x....      BL       HAL_GPIO_WritePin
    357                count_direction[E_AXIS] = -1;
   \                     ??set_directions_10: (+1)
   \   00000132   0xF04F 0x30FF      MOV      R0,#-1
   \   00000136   0x70F0             STRB     R0,[R6, #+3]
   \   00000138   0xE017             B.N      ??set_directions_11
    358              }
    359              else {
    360                NORM_E_DIR();
   \                     ??set_directions_8: (+1)
   \   0000013A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000013E   0xD109             BNE.N    ??set_directions_12
   \   00000140   0x78F8             LDRB     R0,[R7, #+3]
   \   00000142   0x1E42             SUBS     R2,R0,#+1
   \   00000144   0x4192             SBCS     R2,R2,R2
   \   00000146   0x0FD2             LSRS     R2,R2,#+31
   \   00000148   0xB252             SXTB     R2,R2
   \   0000014A   0x8BE9             LDRH     R1,[R5, #+30]
   \   0000014C   0x6BE0             LDR      R0,[R4, #+60]
   \   0000014E   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000152   0xE008             B.N      ??set_directions_13
   \                     ??set_directions_12: (+1)
   \   00000154   0x7938             LDRB     R0,[R7, #+4]
   \   00000156   0x1E42             SUBS     R2,R0,#+1
   \   00000158   0x4192             SBCS     R2,R2,R2
   \   0000015A   0x0FD2             LSRS     R2,R2,#+31
   \   0000015C   0xB252             SXTB     R2,R2
   \   0000015E   0x8CA9             LDRH     R1,[R5, #+36]
   \   00000160   0x6CA0             LDR      R0,[R4, #+72]
   \   00000162   0x.... 0x....      BL       HAL_GPIO_WritePin
    361                count_direction[E_AXIS] = 1;
   \                     ??set_directions_13: (+1)
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0x70F0             STRB     R0,[R6, #+3]
    362              }
    363            #endif // !LIN_ADVANCE
    364          }
   \                     ??set_directions_11: (+1)
   \   0000016A   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    365          
    366          #if ENABLED(ENDSTOP_INTERRUPTS_FEATURE)
    367            extern volatile uint8_t e_hit;
    368          #endif
    369          
    370          /**
    371           * Stepper Driver Interrupt
    372           *
    373           * Directly pulses the stepper motors at high frequency.
    374           * Timer 1 runs at a base frequency of 2MHz, with this ISR using OCR1A compare mode.
    375           *
    376           * OCR1A   Frequency
    377           *     1     2 MHz
    378           *    50    40 KHz
    379           *   100    20 KHz - capped max rate
    380           *   200    10 KHz - nominal max rate
    381           *  2000     1 KHz - sleep rate
    382           *  4000   500  Hz - init rate
    383           */
    384           /*
    385          ISR(TIMER1_COMPA_vect) {
    386            #if ENABLED(LIN_ADVANCE)
    387              Stepper::advance_isr_scheduler();
    388            #else
    389              Stepper::isr();
    390            #endif
    391          }
    392          */
    393          
    394          //#define _ENABLE_ISRs() do { cli(); if (thermalManager.in_temp_isr) CBI(TIMSK0, OCIE0B); else SBI(TIMSK0, OCIE0B); ENABLE_STEPPER_DRIVER_INTERRUPT(); } while(0)
    395          #define _ENABLE_ISRs() do { sei(); if (thermalManager.in_temp_isr) HAL_TIM_Base_Stop_IT(&htim4); else HAL_TIM_Base_Start_IT(&htim4); ENABLE_STEPPER_DRIVER_INTERRUPT(); } while(0)
    396          

   \                                 In section .text, align 4, keep-with-next
    397          void IsrStepperHandler() { 
   \                     IsrStepperHandler: (+1)
   \   00000000   0xBF00             Nop      
   \   00000002   0xBF00             Nop      
    398          #if ENABLED(ADVANCE) || ENABLED(LIN_ADVANCE)
    399          		Stepper::advance_isr_scheduler();
    400          #else
    401          		Stepper::StepperHandler(); 
   \   00000004                      REQUIRE _ZN7Stepper14StepperHandlerEv
   \   00000004                      ;; // Fall through to label Stepper::StepperHandler()
    402          #endif
    403            }
    404          

   \                                 In section .text, align 4, keep-with-next
    405          void Stepper::StepperHandler() {
   \                     _ZN7Stepper14StepperHandlerEv: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
    406          
    407          
    408            uint16_t ocr_val;
    409          
    410            #define ENDSTOP_NOMINAL_OCR_VAL 3000 // Check endstops every 1.5ms to guarantee two stepper ISRs within 5ms for BLTouch
    411            #define OCR_VAL_TOLERANCE       1000 // First max delay is 2.0ms, last min delay is 0.5ms, all others 1.5ms
    412          
    413            #if DISABLED(LIN_ADVANCE)
    414              // Disable Timer0 ISRs and enable global ISR again to capture UART events (incoming chars)
    415              //CBI(TIMSK0, OCIE0B); // Temperature ISR
    416              HAL_TIM_Base_Stop_IT(&htim4);		//1?°¿?2a???D???
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable20_5
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
    417              DISABLE_STEPPER_DRIVER_INTERRUPT();
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable20_1
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
    418              sei();
   \   00000018   0xB662             cpsie i
    419            #endif
    420          
    421            #define _SPLIT(L) (ocr_val = (uint16_t)L)
    422            #if ENABLED(ENDSTOP_INTERRUPTS_FEATURE)
    423          
    424              #define SPLIT(L) _SPLIT(L)
    425          
    426            #else // !ENDSTOP_INTERRUPTS_FEATURE : Sample endstops between stepping ISRs
    427          
    428              static uint32_t step_remaining = 0;
    429          
    430              #define SPLIT(L) do { \
    431                _SPLIT(L); \
    432                if (ENDSTOPS_ENABLED && L > ENDSTOP_NOMINAL_OCR_VAL) { \
    433                  const uint16_t remainder = (uint16_t)L % (ENDSTOP_NOMINAL_OCR_VAL); \
    434                  ocr_val = (remainder < OCR_VAL_TOLERANCE) ? ENDSTOP_NOMINAL_OCR_VAL + remainder : ENDSTOP_NOMINAL_OCR_VAL; \
    435                  step_remaining = (uint16_t)L - ocr_val; \
    436                } \
    437              }while(0)
    438          
    439              if (step_remaining && ENDSTOPS_ENABLED) {   // Just check endstops - not yet time for a step
   \   0000001A   0x.... 0x....      LDR.W    R6,??DataTable20_4
   \   0000001E   0x6CF0             LDR      R0,[R6, #+76]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD037             BEQ.N    ??StepperHandler_0
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable20_6
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD104             BNE.N    ??StepperHandler_1
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD02D             BEQ.N    ??StepperHandler_0
    440                endstops.update();
   \                     ??StepperHandler_1: (+1)
   \   00000038   0x.... 0x....      BL       _ZN8Endstops6updateEv
    441          
    442                // Next ISR either for endstops or stepping
    443                ocr_val = step_remaining <= ENDSTOP_NOMINAL_OCR_VAL ? step_remaining : ENDSTOP_NOMINAL_OCR_VAL;
   \   0000003C   0x6CF0             LDR      R0,[R6, #+76]
   \   0000003E   0xF640 0x31B9      MOVW     R1,#+3001
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD201             BCS.N    ??StepperHandler_2
   \   00000046   0x4601             MOV      R1,R0
   \   00000048   0xE001             B.N      ??StepperHandler_3
   \                     ??StepperHandler_2: (+1)
   \   0000004A   0xF640 0x31B8      MOVW     R1,#+3000
    444                step_remaining -= ocr_val;
   \                     ??StepperHandler_3: (+1)
   \   0000004E   0xB289             UXTH     R1,R1
   \   00000050   0x1A40             SUBS     R0,R0,R1
   \   00000052   0x64F0             STR      R0,[R6, #+76]
    445                _NEXT_ISR(ocr_val);
   \   00000054   0x6820             LDR      R0,[R4, #+0]
   \   00000056   0x62C1             STR      R1,[R0, #+44]
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000005C   0x6A42             LDR      R2,[R0, #+36]
   \   0000005E   0x4291             CMP      R1,R2
   \   00000060   0xD202             BCS.N    ??StepperHandler_4
   \   00000062   0x6AC1             LDR      R1,[R0, #+44]
   \   00000064   0x1E49             SUBS     R1,R1,#+1
   \   00000066   0x6241             STR      R1,[R0, #+36]
    446                NOLESS(OCR1A, TCNT1 + 16);
   \                     ??StepperHandler_4: (+1)
   \   00000068   0x6820             LDR      R0,[R4, #+0]
   \   0000006A   0x6AC1             LDR      R1,[R0, #+44]
   \   0000006C   0x6A42             LDR      R2,[R0, #+36]
   \   0000006E   0x3210             ADDS     R2,R2,#+16
   \   00000070   0x4291             CMP      R1,R2
   \   00000072   0xD202             BCS.N    ??StepperHandler_5
   \   00000074   0x6A41             LDR      R1,[R0, #+36]
   \   00000076   0x3110             ADDS     R1,R1,#+16
   \   00000078   0x62C1             STR      R1,[R0, #+44]
    447                _ENABLE_ISRs(); // re-enable ISRs
   \                     ??StepperHandler_5: (+1)
   \   0000007A   0xB662             cpsie i
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0x4628             MOV      R0,R5
   \   00000086   0xD002             BEQ.N    ??StepperHandler_6
   \   00000088   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
   \   0000008C   0xE324             B.N      ??StepperHandler_7
   \                     ??StepperHandler_6: (+1)
   \   0000008E   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
   \   00000092   0xE321             B.N      ??StepperHandler_7
    448                return;
    449              }
    450          
    451            #endif // !ENDSTOP_INTERRUPTS_FEATURE
    452          
    453            //
    454            // When cleaning, discard the current block and run fast
    455            //
    456            if (cleaning_buffer_counter) {
   \                     ??StepperHandler_0: (+1)
   \   00000094   0xF9B6 0x700A      LDRSH    R7,[R6, #+10]
   \   00000098   0x2F00             CMP      R7,#+0
   \   0000009A   0xD031             BEQ.N    ??StepperHandler_8
    457              if (cleaning_buffer_counter < 0) {          // Count up for endstop hit
   \   0000009C   0xD50B             BPL.N    ??StepperHandler_9
    458                if (current_block) planner.discard_current_block(); // Discard the active block that led to the trigger
   \   0000009E   0x6A30             LDR      R0,[R6, #+32]
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD001             BEQ.N    ??StepperHandler_10
   \   000000A4   0x.... 0x....      BL       _ZN7Planner21discard_current_blockEv
    459                if (!planner.discard_continued_block())   // Discard next CONTINUED block
   \                     ??StepperHandler_10: (+1)
   \   000000A8   0x.... 0x....      BL       _ZN7Planner23discard_continued_blockEv
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD10D             BNE.N    ??StepperHandler_11
    460                  cleaning_buffer_counter = 0;            // Keep discarding until non-CONTINUED
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x8170             STRH     R0,[R6, #+10]
   \   000000B4   0xE00A             B.N      ??StepperHandler_11
    461              }
    462              else {
    463                planner.discard_current_block();
   \                     ??StepperHandler_9: (+1)
   \   000000B6   0x.... 0x....      BL       _ZN7Planner21discard_current_blockEv
    464                --cleaning_buffer_counter;                // Count down for abort print
   \   000000BA   0x1E78             SUBS     R0,R7,#+1
   \   000000BC   0x8170             STRH     R0,[R6, #+10]
    465                #if ENABLED(SD_FINISHED_STEPPERRELEASE) && defined(SD_FINISHED_RELEASECOMMAND)
    466                  if (!cleaning_buffer_counter) enqueue_and_echo_commands_P(PSTR(SD_FINISHED_RELEASECOMMAND));
   \   000000BE   0xB200             SXTH     R0,R0
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD103             BNE.N    ??StepperHandler_11
   \   000000C4   0x.... 0x....      ADR.W    R0,`?<Constant "M84 X Y Z E">`
   \   000000C8   0x.... 0x....      BL       _Z27enqueue_and_echo_commands_PPKc
    467                #endif
    468              }
    469              current_block = NULL;                       // Prep to get a new block after cleaning
   \                     ??StepperHandler_11: (+1)
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x6230             STR      R0,[R6, #+32]
    470              _NEXT_ISR(200);                             // Run at max speed - 10 KHz
   \   000000D0   0x20C8             MOVS     R0,#+200
   \   000000D2   0x6821             LDR      R1,[R4, #+0]
   \   000000D4   0x62C8             STR      R0,[R1, #+44]
   \   000000D6   0x6820             LDR      R0,[R4, #+0]
   \   000000D8   0x6AC1             LDR      R1,[R0, #+44]
   \   000000DA   0x6A42             LDR      R2,[R0, #+36]
   \   000000DC   0x4291             CMP      R1,R2
   \   000000DE   0xD202             BCS.N    ??StepperHandler_12
   \   000000E0   0x6AC1             LDR      R1,[R0, #+44]
   \   000000E2   0x1E49             SUBS     R1,R1,#+1
   \   000000E4   0x6241             STR      R1,[R0, #+36]
    471              _ENABLE_ISRs();
   \                     ??StepperHandler_12: (+1)
   \   000000E6   0xB662             cpsie i
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0x4628             MOV      R0,R5
   \   000000F2   0xD002             BEQ.N    ??StepperHandler_13
   \   000000F4   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
   \   000000F8   0xE2EE             B.N      ??StepperHandler_7
   \                     ??StepperHandler_13: (+1)
   \   000000FA   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
   \   000000FE   0xE2EB             B.N      ??StepperHandler_7
    472              return;
    473            }
    474          
    475            // If there is no current block, attempt to pop one from the buffer
    476            if (!current_block) {
   \                     ??StepperHandler_8: (+1)
   \   00000100   0x6A30             LDR      R0,[R6, #+32]
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xD110             BNE.N    ??StepperHandler_14
    477              // Anything in the buffer?
    478              if ((current_block = planner.get_current_block())) {
   \   00000106   0x.... 0x....      BL       _ZN7Planner17get_current_blockEv
   \   0000010A   0x6230             STR      R0,[R6, #+32]
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xD035             BEQ.N    ??StepperHandler_15
    479                trapezoid_generator_reset();
   \   00000110   0x.... 0x....      BL       _ZN7Stepper25trapezoid_generator_resetEv
    480          
    481                // Initialize Bresenham counters to 1/2 the ceiling
    482                counter_X = counter_Y = counter_Z = counter_E = -(current_block->step_event_count >> 1);
   \   00000114   0x6A30             LDR      R0,[R6, #+32]
   \   00000116   0x6940             LDR      R0,[R0, #+20]
   \   00000118   0x0840             LSRS     R0,R0,#+1
   \   0000011A   0x4240             RSBS     R0,R0,#+0
   \   0000011C   0x6330             STR      R0,[R6, #+48]
   \   0000011E   0x62F0             STR      R0,[R6, #+44]
   \   00000120   0x62B0             STR      R0,[R6, #+40]
   \   00000122   0x6270             STR      R0,[R6, #+36]
    483          
    484                #if ENABLED(MIXING_EXTRUDER)
    485                  MIXING_STEPPERS_LOOP(i)
    486                    counter_m[i] = -(current_block->mix_event_count[i] >> 1);
    487                #endif
    488          
    489                step_events_completed = 0;
   \   00000124   0x2000             MOVS     R0,#+0
   \   00000126   0x6370             STR      R0,[R6, #+52]
    490          
    491                #if ENABLED(ENDSTOP_INTERRUPTS_FEATURE)
    492                  e_hit = 2; // Needed for the case an endstop is already triggered before the new move begins.
    493                             // No 'change' can be detected.
    494                #endif
    495          
    496                #if ENABLED(Z_LATE_ENABLE)
    497                  if (current_block->steps[Z_AXIS] > 0) {
    498                    enable_Z();
    499                    _NEXT_ISR(2000); // Run at slow speed - 1 KHz
    500                    _ENABLE_ISRs(); // re-enable ISRs
    501                    return;
    502                  }
    503                #endif
    504              }
    505              else {
    506                _NEXT_ISR(2000); // Run at slow speed - 1 KHz
    507                _ENABLE_ISRs(); // re-enable ISRs
    508                return;
    509              }
    510            }
    511          
    512            // Update endstops state, if enabled
    513            #if ENABLED(ENDSTOP_INTERRUPTS_FEATURE)
    514              if (e_hit && ENDSTOPS_ENABLED) {
    515                endstops.update();
    516                e_hit--;
    517              }
    518            #else
    519              if (ENDSTOPS_ENABLED) endstops.update();
   \                     ??StepperHandler_14: (+1)
   \   00000128   0x.... 0x....      LDR.W    R7,??DataTable20_6
   \   0000012C   0x7838             LDRB     R0,[R7, #+0]
   \   0000012E   0x2800             CMP      R0,#+0
   \   00000130   0xD104             BNE.N    ??StepperHandler_16
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable20_7
   \   00000136   0x7800             LDRB     R0,[R0, #+0]
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xD001             BEQ.N    ??StepperHandler_17
   \                     ??StepperHandler_16: (+1)
   \   0000013C   0x.... 0x....      BL       _ZN8Endstops6updateEv
    520            #endif
    521          
    522            // Take multiple steps per interrupt (For high speed moves)
    523            bool all_steps_done = false;
   \                     ??StepperHandler_17: (+1)
   \   00000140   0xF04F 0x0800      MOV      R8,#+0
    524            for (uint8_t i = step_loops; i--;) {
   \   00000144   0xF896 0x9008      LDRB     R9,[R6, #+8]
   \                     ??StepperHandler_18: (+1)
   \   00000148   0x4648             MOV      R0,R9
   \   0000014A   0xF1A0 0x0901      SUB      R9,R0,#+1
   \   0000014E   0xB2C0             UXTB     R0,R0
   \   00000150   0x2800             CMP      R0,#+0
   \   00000152   0xF000 0x81EF      BEQ.W    ??StepperHandler_19
    525              #if ENABLED(LIN_ADVANCE)
    526          
    527                counter_E += current_block->steps[E_AXIS];
    528                if (counter_E > 0) {
    529                  counter_E -= current_block->step_event_count;
    530                  #if DISABLED(MIXING_EXTRUDER)
    531                    // Don't step E here for mixing extruder
    532                    count_position[E_AXIS] += count_direction[E_AXIS];
    533                    motor_direction(E_AXIS) ? --e_steps[TOOL_E_INDEX] : ++e_steps[TOOL_E_INDEX];
    534                  #endif
    535                }
    536          
    537                #if ENABLED(MIXING_EXTRUDER)
    538                  // Step mixing steppers proportionally
    539                  const bool dir = motor_direction(E_AXIS);
    540                  MIXING_STEPPERS_LOOP(j) {
    541                    counter_m[j] += current_block->steps[E_AXIS];
    542                    if (counter_m[j] > 0) {
    543                      counter_m[j] -= current_block->mix_event_count[j];
    544                      dir ? --e_steps[j] : ++e_steps[j];
    545                    }
    546                  }
    547                #endif
    548          
    549              #endif // LIN_ADVANCE
    550          
    551              #define _COUNTER(AXIS) counter_## AXIS          
    552              #define _APPLY_STEP(AXIS) AXIS ##_APPLY_STEP    
    553              #define _INVERT_STEP_PIN(AXIS) INVERT_## AXIS ##_STEP_PIN 
    554          
    555              // Advance the Bresenham counter; start a pulse if the axis needs a step
    556              #define PULSE_START(AXIS) \
    557                _COUNTER(AXIS) += current_block->steps[_AXIS(AXIS)]; \
    558                if (_COUNTER(AXIS) > 0) { _APPLY_STEP(AXIS)(!_INVERT_STEP_PIN(AXIS),0); for(volatile int i_axis=0;i_axis<5;i_axis++);}
    559          
    560              // Stop an active pulse, reset the Bresenham counter, update the position
    561              #define PULSE_STOP(AXIS) \
    562                if (_COUNTER(AXIS) > 0) { \
    563                  _COUNTER(AXIS) -= current_block->step_event_count; \
    564                  count_position[_AXIS(AXIS)] += count_direction[_AXIS(AXIS)]; \
    565                  _APPLY_STEP(AXIS)(_INVERT_STEP_PIN(AXIS),0); for(volatile int i_axis=0;i_axis<20;i_axis++);\
    566                }
    567          
    568              // Advance the Bresenham counter; start a pulse if the axis needs a step
    569              #define Z_PULSE_START(AXIS) \
    570                _COUNTER(AXIS) += current_block->steps[_AXIS(AXIS)]; \
    571                if (_COUNTER(AXIS) > 0) { Z_APPLY_STEP(!_INVERT_STEP_PIN(AXIS),0);for(volatile int iz_axis=0;iz_axis<5;iz_axis++);}
    572          
    573              // Stop an active pulse, reset the Bresenham counter, update the position
    574              #define Z_PULSE_STOP(AXIS) \
    575                if (_COUNTER(AXIS) > 0) { \
    576                  _COUNTER(AXIS) -= current_block->step_event_count; \
    577                  count_position[_AXIS(AXIS)] += count_direction[_AXIS(AXIS)]; \
    578                  Z_APPLY_STEP(_INVERT_STEP_PIN(AXIS),0); for(volatile int i_axis=0;i_axis<5;i_axis++);\
    579                }
    580          
    581              /**
    582               * Estimate the number of cycles that the stepper logic already takes
    583               * up between the start and stop of the X stepper pulse.
    584               *
    585               * Currently this uses very modest estimates of around 5 cycles.
    586               * True values may be derived by careful testing.
    587               *
    588               * Once any delay is added, the cost of the delay code itself
    589               * may be subtracted from this value to get a more accurate delay.
    590               * Delays under 20 cycles (1.25¬µs) will be very accurate, using NOPs.
    591               * Longer delays use a loop. The resolution is 8 cycles.
    592               */
    593          #if 0     
    594              #if HAS_X_STEP
    595                #define _CYCLE_APPROX_1 5
    596              #else
    597                #define _CYCLE_APPROX_1 0
    598              #endif
    599              #if ENABLED(X_DUAL_STEPPER_DRIVERS)
    600                #define _CYCLE_APPROX_2 _CYCLE_APPROX_1 + 4
    601              #else
    602                #define _CYCLE_APPROX_2 _CYCLE_APPROX_1
    603              #endif
    604              #if HAS_Y_STEP
    605                #define _CYCLE_APPROX_3 _CYCLE_APPROX_2 + 5
    606              #else
    607                #define _CYCLE_APPROX_3 _CYCLE_APPROX_2
    608              #endif
    609              #if ENABLED(Y_DUAL_STEPPER_DRIVERS)
    610                #define _CYCLE_APPROX_4 _CYCLE_APPROX_3 + 4
    611              #else
    612                #define _CYCLE_APPROX_4 _CYCLE_APPROX_3
    613              #endif
    614              #if HAS_Z_STEP
    615                #define _CYCLE_APPROX_5 _CYCLE_APPROX_4 + 5
    616              #else
    617                #define _CYCLE_APPROX_5 _CYCLE_APPROX_4
    618              #endif
    619              #if ENABLED(Z_DUAL_STEPPER_DRIVERS)
    620                #define _CYCLE_APPROX_6 _CYCLE_APPROX_5 + 4
    621              #else
    622                #define _CYCLE_APPROX_6 _CYCLE_APPROX_5
    623              #endif
    624              #if DISABLED(LIN_ADVANCE)
    625                #if ENABLED(MIXING_EXTRUDER)
    626                  #define _CYCLE_APPROX_7 _CYCLE_APPROX_6 + (MIXING_STEPPERS) * 6
    627                #else
    628                  #define _CYCLE_APPROX_7 _CYCLE_APPROX_6 + 5
    629                #endif
    630              #else
    631                #define _CYCLE_APPROX_7 _CYCLE_APPROX_6
    632              #endif
    633          
    634              #define CYCLES_EATEN_XYZE _CYCLE_APPROX_7
    635              #define EXTRA_CYCLES_XYZE (STEP_PULSE_CYCLES - (CYCLES_EATEN_XYZE))
    636          #endif
    637          
    638              #define EXTRA_CYCLES_XYZE (0)
    639          
    640              /**
    641               * If a minimum pulse time was specified get the timer 0 value.
    642               *
    643               * TCNT0 has an 8x prescaler, so it increments every 8 cycles.
    644               * That's every 0.5¬µs on 16MHz and every 0.4¬µs on 20MHz.
    645               * 20 counts of TCNT0 -by itself- is a good pulse delay.
    646               * 10¬µs = 160 or 200 cycles.
    647               */
    648              #if EXTRA_CYCLES_XYZE > 20
    649                uint32_t pulse_start = TCNT0;
    650              #endif
    651          
    652              #if HAS_X_STEP
    653                PULSE_START(X);
   \   00000156   0x6A70             LDR      R0,[R6, #+36]
   \   00000158   0x6A31             LDR      R1,[R6, #+32]
   \   0000015A   0x6849             LDR      R1,[R1, #+4]
   \   0000015C   0x1808             ADDS     R0,R1,R0
   \   0000015E   0x6270             STR      R0,[R6, #+36]
   \   00000160   0x2801             CMP      R0,#+1
   \   00000162   0xDB2A             BLT.N    ??StepperHandler_20
   \   00000164   0x2201             MOVS     R2,#+1
   \   00000166   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   0000016A   0x8841             LDRH     R1,[R0, #+2]
   \   0000016C   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000170   0x6840             LDR      R0,[R0, #+4]
   \   00000172   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000176   0x4640             MOV      R0,R8
   \   00000178   0x9000             STR      R0,[SP, #+0]
   \   0000017A   0xE01B             B.N      ??StepperHandler_21
   \                     ??StepperHandler_15: (+1)
   \   0000017C   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000180   0x6821             LDR      R1,[R4, #+0]
   \   00000182   0x62C8             STR      R0,[R1, #+44]
   \   00000184   0x6820             LDR      R0,[R4, #+0]
   \   00000186   0x6AC1             LDR      R1,[R0, #+44]
   \   00000188   0x6A42             LDR      R2,[R0, #+36]
   \   0000018A   0x4291             CMP      R1,R2
   \   0000018C   0xD202             BCS.N    ??StepperHandler_22
   \   0000018E   0x6AC1             LDR      R1,[R0, #+44]
   \   00000190   0x1E49             SUBS     R1,R1,#+1
   \   00000192   0x6241             STR      R1,[R0, #+36]
   \                     ??StepperHandler_22: (+1)
   \   00000194   0xB662             cpsie i
   \   00000196   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   0000019A   0x7800             LDRB     R0,[R0, #+0]
   \   0000019C   0x2800             CMP      R0,#+0
   \   0000019E   0x4628             MOV      R0,R5
   \   000001A0   0xD002             BEQ.N    ??StepperHandler_23
   \   000001A2   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
   \   000001A6   0xE297             B.N      ??StepperHandler_7
   \                     ??StepperHandler_23: (+1)
   \   000001A8   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
   \   000001AC   0xE294             B.N      ??StepperHandler_7
   \                     ??StepperHandler_24: (+1)
   \   000001AE   0x9800             LDR      R0,[SP, #+0]
   \   000001B0   0x1C40             ADDS     R0,R0,#+1
   \   000001B2   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_21: (+1)
   \   000001B4   0x9800             LDR      R0,[SP, #+0]
   \   000001B6   0x2805             CMP      R0,#+5
   \   000001B8   0xDBF9             BLT.N    ??StepperHandler_24
    654              #endif
    655              #if HAS_Y_STEP
    656                PULSE_START(Y);
   \                     ??StepperHandler_20: (+1)
   \   000001BA   0x6AB0             LDR      R0,[R6, #+40]
   \   000001BC   0x6A31             LDR      R1,[R6, #+32]
   \   000001BE   0x6889             LDR      R1,[R1, #+8]
   \   000001C0   0x1808             ADDS     R0,R1,R0
   \   000001C2   0x62B0             STR      R0,[R6, #+40]
   \   000001C4   0x2801             CMP      R0,#+1
   \   000001C6   0xDB11             BLT.N    ??StepperHandler_25
   \   000001C8   0x2201             MOVS     R2,#+1
   \   000001CA   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   000001CE   0x8981             LDRH     R1,[R0, #+12]
   \   000001D0   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   000001D4   0x6980             LDR      R0,[R0, #+24]
   \   000001D6   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000001DA   0x4640             MOV      R0,R8
   \   000001DC   0x9000             STR      R0,[SP, #+0]
   \   000001DE   0xE002             B.N      ??StepperHandler_26
   \                     ??StepperHandler_27: (+1)
   \   000001E0   0x9800             LDR      R0,[SP, #+0]
   \   000001E2   0x1C40             ADDS     R0,R0,#+1
   \   000001E4   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_26: (+1)
   \   000001E6   0x9800             LDR      R0,[SP, #+0]
   \   000001E8   0x2805             CMP      R0,#+5
   \   000001EA   0xDBF9             BLT.N    ??StepperHandler_27
    657              #endif
    658              #if HAS_Z_STEP
    659                Z_PULSE_START(Z);
   \                     ??StepperHandler_25: (+1)
   \   000001EC   0x6AF0             LDR      R0,[R6, #+44]
   \   000001EE   0x6A31             LDR      R1,[R6, #+32]
   \   000001F0   0x68C9             LDR      R1,[R1, #+12]
   \   000001F2   0x1808             ADDS     R0,R1,R0
   \   000001F4   0x62F0             STR      R0,[R6, #+44]
   \   000001F6   0x2801             CMP      R0,#+1
   \   000001F8   0xDB7C             BLT.N    ??StepperHandler_28
   \   000001FA   0x.... 0x....      LDR.W    R10,??DataTable20
   \   000001FE   0xF20A 0x1001      ADDW     R0,R10,#+257
   \   00000202   0x7840             LDRB     R0,[R0, #+1]
   \   00000204   0x2801             CMP      R0,#+1
   \   00000206   0xD156             BNE.N    ??StepperHandler_29
   \   00000208   0x7930             LDRB     R0,[R6, #+4]
   \   0000020A   0x2800             CMP      R0,#+0
   \   0000020C   0xD040             BEQ.N    ??StepperHandler_30
   \   0000020E   0x.... 0x....      LDR.W    R11,??DataTable20_13
   \   00000212   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   00000216   0xF99A 0x1007      LDRSB    R1,[R10, #+7]
   \   0000021A   0x2900             CMP      R1,#+0
   \   0000021C   0xD51A             BPL.N    ??StepperHandler_31
   \   0000021E   0x0740             LSLS     R0,R0,#+29
   \   00000220   0xD503             BPL.N    ??StepperHandler_32
   \   00000222   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   00000226   0x2800             CMP      R0,#+0
   \   00000228   0xD40B             BMI.N    ??StepperHandler_33
   \                     ??StepperHandler_32: (+1)
   \   0000022A   0x79B0             LDRB     R0,[R6, #+6]
   \   0000022C   0x2800             CMP      R0,#+0
   \   0000022E   0xD108             BNE.N    ??StepperHandler_33
   \   00000230   0x2201             MOVS     R2,#+1
   \   00000232   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   00000236   0x8AC1             LDRH     R1,[R0, #+22]
   \   00000238   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   0000023C   0x6AC0             LDR      R0,[R0, #+44]
   \   0000023E   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_33: (+1)
   \   00000242   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   00000246   0x0500             LSLS     R0,R0,#+20
   \   00000248   0xD51E             BPL.N    ??StepperHandler_34
   \   0000024A   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   0000024E   0x2800             CMP      R0,#+0
   \   00000250   0xD447             BMI.N    ??StepperHandler_35
   \   00000252   0xE019             B.N      ??StepperHandler_34
   \                     ??StepperHandler_31: (+1)
   \   00000254   0x0640             LSLS     R0,R0,#+25
   \   00000256   0xD503             BPL.N    ??StepperHandler_36
   \   00000258   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   0000025C   0x2801             CMP      R0,#+1
   \   0000025E   0xDA0B             BGE.N    ??StepperHandler_37
   \                     ??StepperHandler_36: (+1)
   \   00000260   0x79B0             LDRB     R0,[R6, #+6]
   \   00000262   0x2800             CMP      R0,#+0
   \   00000264   0xD108             BNE.N    ??StepperHandler_37
   \   00000266   0x2201             MOVS     R2,#+1
   \   00000268   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   0000026C   0x8AC1             LDRH     R1,[R0, #+22]
   \   0000026E   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000272   0x6AC0             LDR      R0,[R0, #+44]
   \   00000274   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_37: (+1)
   \   00000278   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   0000027C   0x04C0             LSLS     R0,R0,#+19
   \   0000027E   0xD503             BPL.N    ??StepperHandler_34
   \   00000280   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   00000284   0x2801             CMP      R0,#+1
   \   00000286   0xDA2C             BGE.N    ??StepperHandler_35
   \                     ??StepperHandler_34: (+1)
   \   00000288   0x79F0             LDRB     R0,[R6, #+7]
   \   0000028A   0x2800             CMP      R0,#+0
   \   0000028C   0xD129             BNE.N    ??StepperHandler_35
   \   0000028E   0xE01F             B.N      ??StepperHandler_38
   \                     ??StepperHandler_30: (+1)
   \   00000290   0x.... 0x....      LDR.W    R10,??DataTable20_2
   \   00000294   0x.... 0x....      LDR.W    R11,??DataTable20_3
   \   00000298   0x2201             MOVS     R2,#+1
   \   0000029A   0xF8BB 0x1016      LDRH     R1,[R11, #+22]
   \   0000029E   0xF8DA 0x002C      LDR      R0,[R10, #+44]
   \   000002A2   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000002A6   0x2201             MOVS     R2,#+1
   \   000002A8   0xF8BB 0x1026      LDRH     R1,[R11, #+38]
   \   000002AC   0xF8DA 0x004C      LDR      R0,[R10, #+76]
   \   000002B0   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000002B4   0xE015             B.N      ??StepperHandler_35
   \                     ??StepperHandler_29: (+1)
   \   000002B6   0x2201             MOVS     R2,#+1
   \   000002B8   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   000002BC   0x8AC1             LDRH     R1,[R0, #+22]
   \   000002BE   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   000002C2   0x6AC0             LDR      R0,[R0, #+44]
   \   000002C4   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000002C8   0xF89A 0x0101      LDRB     R0,[R10, #+257]
   \   000002CC   0x2801             CMP      R0,#+1
   \   000002CE   0xD108             BNE.N    ??StepperHandler_35
   \                     ??StepperHandler_38: (+1)
   \   000002D0   0x2201             MOVS     R2,#+1
   \   000002D2   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   000002D6   0x8CC1             LDRH     R1,[R0, #+38]
   \   000002D8   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   000002DC   0x6CC0             LDR      R0,[R0, #+76]
   \   000002DE   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_35: (+1)
   \   000002E2   0x4640             MOV      R0,R8
   \   000002E4   0x9000             STR      R0,[SP, #+0]
   \   000002E6   0xE002             B.N      ??StepperHandler_39
   \                     ??StepperHandler_40: (+1)
   \   000002E8   0x9800             LDR      R0,[SP, #+0]
   \   000002EA   0x1C40             ADDS     R0,R0,#+1
   \   000002EC   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_39: (+1)
   \   000002EE   0x9800             LDR      R0,[SP, #+0]
   \   000002F0   0x2805             CMP      R0,#+5
   \   000002F2   0xDBF9             BLT.N    ??StepperHandler_40
    660              #endif
    661          
    662              // For non-advance use linear interpolation for E also
    663              #if DISABLED(LIN_ADVANCE)
    664                #if ENABLED(MIXING_EXTRUDER)
    665                  // Keep updating the single E axis
    666                  counter_E += current_block->steps[E_AXIS];
    667                  // Tick the counters used for this mix
    668                  MIXING_STEPPERS_LOOP(j) {
    669                    // Step mixing steppers (proportionally)
    670                    counter_m[j] += current_block->steps[E_AXIS];
    671                    // Step when the counter goes over zero
    672                    if (counter_m[j] > 0) En_STEP_WRITE(j, !INVERT_E_STEP_PIN);
    673                  }
    674                #else // !MIXING_EXTRUDER
    675                  PULSE_START(E);
   \                     ??StepperHandler_28: (+1)
   \   000002F4   0x6A30             LDR      R0,[R6, #+32]
   \   000002F6   0x6B31             LDR      R1,[R6, #+48]
   \   000002F8   0x6902             LDR      R2,[R0, #+16]
   \   000002FA   0x1851             ADDS     R1,R2,R1
   \   000002FC   0x6331             STR      R1,[R6, #+48]
   \   000002FE   0x2901             CMP      R1,#+1
   \   00000300   0xDB1E             BLT.N    ??StepperHandler_41
   \   00000302   0x.... 0x....      LDR.W    R10,??DataTable20_2
   \   00000306   0x.... 0x....      LDR.W    R11,??DataTable20_3
   \   0000030A   0x7840             LDRB     R0,[R0, #+1]
   \   0000030C   0x2800             CMP      R0,#+0
   \   0000030E   0xD107             BNE.N    ??StepperHandler_42
   \   00000310   0x2201             MOVS     R2,#+1
   \   00000312   0xF8BB 0x1020      LDRH     R1,[R11, #+32]
   \   00000316   0xF8DA 0x0040      LDR      R0,[R10, #+64]
   \   0000031A   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   0000031E   0xE006             B.N      ??StepperHandler_43
   \                     ??StepperHandler_42: (+1)
   \   00000320   0x2201             MOVS     R2,#+1
   \   00000322   0xF8BB 0x1026      LDRH     R1,[R11, #+38]
   \   00000326   0xF8DA 0x004C      LDR      R0,[R10, #+76]
   \   0000032A   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_43: (+1)
   \   0000032E   0x4640             MOV      R0,R8
   \   00000330   0x9000             STR      R0,[SP, #+0]
   \   00000332   0xE002             B.N      ??StepperHandler_44
   \                     ??StepperHandler_45: (+1)
   \   00000334   0x9800             LDR      R0,[SP, #+0]
   \   00000336   0x1C40             ADDS     R0,R0,#+1
   \   00000338   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_44: (+1)
   \   0000033A   0x9800             LDR      R0,[SP, #+0]
   \   0000033C   0x2805             CMP      R0,#+5
   \   0000033E   0xDBF9             BLT.N    ??StepperHandler_45
    676                #endif
    677              #endif // !LIN_ADVANCE
    678          
    679              // For minimum pulse time wait before stopping pulses
    680              #if EXTRA_CYCLES_XYZE > 20
    681                while (EXTRA_CYCLES_XYZE > (uint32_t)(TCNT0 - pulse_start) * (INT0_PRESCALER)) { /* nada */ }
    682                pulse_start = TCNT0;
    683              #elif EXTRA_CYCLES_XYZE > 0
    684                DELAY_NOPS(EXTRA_CYCLES_XYZE);
    685              #endif
    686          
    687              #if HAS_X_STEP
    688                PULSE_STOP(X);
   \                     ??StepperHandler_41: (+1)
   \   00000340   0x6A70             LDR      R0,[R6, #+36]
   \   00000342   0x2801             CMP      R0,#+1
   \   00000344   0xDB1A             BLT.N    ??StepperHandler_46
   \   00000346   0x6A31             LDR      R1,[R6, #+32]
   \   00000348   0x6949             LDR      R1,[R1, #+20]
   \   0000034A   0x1A40             SUBS     R0,R0,R1
   \   0000034C   0x6270             STR      R0,[R6, #+36]
   \   0000034E   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   00000352   0x6931             LDR      R1,[R6, #+16]
   \   00000354   0x1840             ADDS     R0,R0,R1
   \   00000356   0x6130             STR      R0,[R6, #+16]
   \   00000358   0x4642             MOV      R2,R8
   \   0000035A   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   0000035E   0x8841             LDRH     R1,[R0, #+2]
   \   00000360   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000364   0x6840             LDR      R0,[R0, #+4]
   \   00000366   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   0000036A   0x4640             MOV      R0,R8
   \   0000036C   0x9000             STR      R0,[SP, #+0]
   \   0000036E   0xE002             B.N      ??StepperHandler_47
   \                     ??StepperHandler_48: (+1)
   \   00000370   0x9800             LDR      R0,[SP, #+0]
   \   00000372   0x1C40             ADDS     R0,R0,#+1
   \   00000374   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_47: (+1)
   \   00000376   0x9800             LDR      R0,[SP, #+0]
   \   00000378   0x2814             CMP      R0,#+20
   \   0000037A   0xDBF9             BLT.N    ??StepperHandler_48
    689              #endif
    690              #if HAS_Y_STEP
    691                PULSE_STOP(Y);
   \                     ??StepperHandler_46: (+1)
   \   0000037C   0x6AB0             LDR      R0,[R6, #+40]
   \   0000037E   0x2801             CMP      R0,#+1
   \   00000380   0xDB1A             BLT.N    ??StepperHandler_49
   \   00000382   0x6A31             LDR      R1,[R6, #+32]
   \   00000384   0x6949             LDR      R1,[R1, #+20]
   \   00000386   0x1A40             SUBS     R0,R0,R1
   \   00000388   0x62B0             STR      R0,[R6, #+40]
   \   0000038A   0xF996 0x0001      LDRSB    R0,[R6, #+1]
   \   0000038E   0x6971             LDR      R1,[R6, #+20]
   \   00000390   0x1840             ADDS     R0,R0,R1
   \   00000392   0x6170             STR      R0,[R6, #+20]
   \   00000394   0x4642             MOV      R2,R8
   \   00000396   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   0000039A   0x8981             LDRH     R1,[R0, #+12]
   \   0000039C   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   000003A0   0x6980             LDR      R0,[R0, #+24]
   \   000003A2   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000003A6   0x4640             MOV      R0,R8
   \   000003A8   0x9000             STR      R0,[SP, #+0]
   \   000003AA   0xE002             B.N      ??StepperHandler_50
   \                     ??StepperHandler_51: (+1)
   \   000003AC   0x9800             LDR      R0,[SP, #+0]
   \   000003AE   0x1C40             ADDS     R0,R0,#+1
   \   000003B0   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_50: (+1)
   \   000003B2   0x9800             LDR      R0,[SP, #+0]
   \   000003B4   0x2814             CMP      R0,#+20
   \   000003B6   0xDBF9             BLT.N    ??StepperHandler_51
    692              #endif
    693              #if HAS_Z_STEP
    694                Z_PULSE_STOP(Z);
   \                     ??StepperHandler_49: (+1)
   \   000003B8   0x6AF0             LDR      R0,[R6, #+44]
   \   000003BA   0x2801             CMP      R0,#+1
   \   000003BC   0xF2C0 0x8086      BLT.W    ??StepperHandler_52
   \   000003C0   0x6A31             LDR      R1,[R6, #+32]
   \   000003C2   0x6949             LDR      R1,[R1, #+20]
   \   000003C4   0x1A40             SUBS     R0,R0,R1
   \   000003C6   0x62F0             STR      R0,[R6, #+44]
   \   000003C8   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   000003CC   0x69B1             LDR      R1,[R6, #+24]
   \   000003CE   0x1840             ADDS     R0,R0,R1
   \   000003D0   0x61B0             STR      R0,[R6, #+24]
   \   000003D2   0x.... 0x....      LDR.W    R10,??DataTable20
   \   000003D6   0xF20A 0x1001      ADDW     R0,R10,#+257
   \   000003DA   0x7840             LDRB     R0,[R0, #+1]
   \   000003DC   0x2801             CMP      R0,#+1
   \   000003DE   0xD156             BNE.N    ??StepperHandler_53
   \   000003E0   0x7930             LDRB     R0,[R6, #+4]
   \   000003E2   0x2800             CMP      R0,#+0
   \   000003E4   0xD040             BEQ.N    ??StepperHandler_54
   \   000003E6   0x.... 0x....      LDR.W    R11,??DataTable20_13
   \   000003EA   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   000003EE   0xF99A 0x1007      LDRSB    R1,[R10, #+7]
   \   000003F2   0x2900             CMP      R1,#+0
   \   000003F4   0xD51A             BPL.N    ??StepperHandler_55
   \   000003F6   0x0740             LSLS     R0,R0,#+29
   \   000003F8   0xD503             BPL.N    ??StepperHandler_56
   \   000003FA   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   000003FE   0x2800             CMP      R0,#+0
   \   00000400   0xD40B             BMI.N    ??StepperHandler_57
   \                     ??StepperHandler_56: (+1)
   \   00000402   0x79B0             LDRB     R0,[R6, #+6]
   \   00000404   0x2800             CMP      R0,#+0
   \   00000406   0xD108             BNE.N    ??StepperHandler_57
   \   00000408   0x4642             MOV      R2,R8
   \   0000040A   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   0000040E   0x8AC1             LDRH     R1,[R0, #+22]
   \   00000410   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   00000414   0x6AC0             LDR      R0,[R0, #+44]
   \   00000416   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_57: (+1)
   \   0000041A   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   0000041E   0x0500             LSLS     R0,R0,#+20
   \   00000420   0xD51E             BPL.N    ??StepperHandler_58
   \   00000422   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   00000426   0x2800             CMP      R0,#+0
   \   00000428   0xD447             BMI.N    ??StepperHandler_59
   \   0000042A   0xE019             B.N      ??StepperHandler_58
   \                     ??StepperHandler_55: (+1)
   \   0000042C   0x0640             LSLS     R0,R0,#+25
   \   0000042E   0xD503             BPL.N    ??StepperHandler_60
   \   00000430   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   00000434   0x2801             CMP      R0,#+1
   \   00000436   0xDA0B             BGE.N    ??StepperHandler_61
   \                     ??StepperHandler_60: (+1)
   \   00000438   0x79B0             LDRB     R0,[R6, #+6]
   \   0000043A   0x2800             CMP      R0,#+0
   \   0000043C   0xD108             BNE.N    ??StepperHandler_61
   \   0000043E   0x4642             MOV      R2,R8
   \   00000440   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   00000444   0x8AC1             LDRH     R1,[R0, #+22]
   \   00000446   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   0000044A   0x6AC0             LDR      R0,[R0, #+44]
   \   0000044C   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_61: (+1)
   \   00000450   0xF8BB 0x0000      LDRH     R0,[R11, #+0]
   \   00000454   0x04C0             LSLS     R0,R0,#+19
   \   00000456   0xD503             BPL.N    ??StepperHandler_58
   \   00000458   0xF996 0x0002      LDRSB    R0,[R6, #+2]
   \   0000045C   0x2801             CMP      R0,#+1
   \   0000045E   0xDA2C             BGE.N    ??StepperHandler_59
   \                     ??StepperHandler_58: (+1)
   \   00000460   0x79F0             LDRB     R0,[R6, #+7]
   \   00000462   0x2800             CMP      R0,#+0
   \   00000464   0xD129             BNE.N    ??StepperHandler_59
   \   00000466   0xE01F             B.N      ??StepperHandler_62
   \                     ??StepperHandler_54: (+1)
   \   00000468   0x.... 0x....      LDR.W    R10,??DataTable20_2
   \   0000046C   0x.... 0x....      LDR.W    R11,??DataTable20_3
   \   00000470   0x4642             MOV      R2,R8
   \   00000472   0xF8BB 0x1016      LDRH     R1,[R11, #+22]
   \   00000476   0xF8DA 0x002C      LDR      R0,[R10, #+44]
   \   0000047A   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   0000047E   0x4642             MOV      R2,R8
   \   00000480   0xF8BB 0x1026      LDRH     R1,[R11, #+38]
   \   00000484   0xF8DA 0x004C      LDR      R0,[R10, #+76]
   \   00000488   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   0000048C   0xE015             B.N      ??StepperHandler_59
   \                     ??StepperHandler_53: (+1)
   \   0000048E   0x4642             MOV      R2,R8
   \   00000490   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   00000494   0x8AC1             LDRH     R1,[R0, #+22]
   \   00000496   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   0000049A   0x6AC0             LDR      R0,[R0, #+44]
   \   0000049C   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000004A0   0xF89A 0x0101      LDRB     R0,[R10, #+257]
   \   000004A4   0x2801             CMP      R0,#+1
   \   000004A6   0xD108             BNE.N    ??StepperHandler_59
   \                     ??StepperHandler_62: (+1)
   \   000004A8   0x4642             MOV      R2,R8
   \   000004AA   0x.... 0x....      LDR.W    R0,??DataTable20_3
   \   000004AE   0x8CC1             LDRH     R1,[R0, #+38]
   \   000004B0   0x.... 0x....      LDR.W    R0,??DataTable20_2
   \   000004B4   0x6CC0             LDR      R0,[R0, #+76]
   \   000004B6   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_59: (+1)
   \   000004BA   0x4640             MOV      R0,R8
   \   000004BC   0x9000             STR      R0,[SP, #+0]
   \   000004BE   0xE002             B.N      ??StepperHandler_63
   \                     ??StepperHandler_64: (+1)
   \   000004C0   0x9800             LDR      R0,[SP, #+0]
   \   000004C2   0x1C40             ADDS     R0,R0,#+1
   \   000004C4   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_63: (+1)
   \   000004C6   0x9800             LDR      R0,[SP, #+0]
   \   000004C8   0x2805             CMP      R0,#+5
   \   000004CA   0xDBF9             BLT.N    ??StepperHandler_64
    695              #endif
    696          
    697              #if DISABLED(LIN_ADVANCE)
    698                #if ENABLED(MIXING_EXTRUDER)
    699                  // Always step the single E axis
    700                  if (counter_E > 0) {
    701                    counter_E -= current_block->step_event_count;
    702                    count_position[E_AXIS] += count_direction[E_AXIS];
    703                  }
    704                  MIXING_STEPPERS_LOOP(j) {
    705                    if (counter_m[j] > 0) {
    706                      counter_m[j] -= current_block->mix_event_count[j];
    707                      En_STEP_WRITE(j, INVERT_E_STEP_PIN);
    708                    }
    709                  }
    710                #else // !MIXING_EXTRUDER
    711                  PULSE_STOP(E);
   \                     ??StepperHandler_52: (+1)
   \   000004CC   0x6B31             LDR      R1,[R6, #+48]
   \   000004CE   0x2901             CMP      R1,#+1
   \   000004D0   0xDB26             BLT.N    ??StepperHandler_65
   \   000004D2   0x6A30             LDR      R0,[R6, #+32]
   \   000004D4   0x6942             LDR      R2,[R0, #+20]
   \   000004D6   0x1A89             SUBS     R1,R1,R2
   \   000004D8   0x6331             STR      R1,[R6, #+48]
   \   000004DA   0xF996 0x1003      LDRSB    R1,[R6, #+3]
   \   000004DE   0x69F2             LDR      R2,[R6, #+28]
   \   000004E0   0x1889             ADDS     R1,R1,R2
   \   000004E2   0x61F1             STR      R1,[R6, #+28]
   \   000004E4   0x.... 0x....      LDR.W    R10,??DataTable20_2
   \   000004E8   0x.... 0x....      LDR.W    R11,??DataTable20_3
   \   000004EC   0x7840             LDRB     R0,[R0, #+1]
   \   000004EE   0x2800             CMP      R0,#+0
   \   000004F0   0x4642             MOV      R2,R8
   \   000004F2   0xD106             BNE.N    ??StepperHandler_66
   \   000004F4   0xF8BB 0x1020      LDRH     R1,[R11, #+32]
   \   000004F8   0xF8DA 0x0040      LDR      R0,[R10, #+64]
   \   000004FC   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000500   0xE005             B.N      ??StepperHandler_67
   \                     ??StepperHandler_66: (+1)
   \   00000502   0xF8BB 0x1026      LDRH     R1,[R11, #+38]
   \   00000506   0xF8DA 0x004C      LDR      R0,[R10, #+76]
   \   0000050A   0x.... 0x....      BL       HAL_GPIO_WritePin
   \                     ??StepperHandler_67: (+1)
   \   0000050E   0x4640             MOV      R0,R8
   \   00000510   0x9000             STR      R0,[SP, #+0]
   \   00000512   0xE002             B.N      ??StepperHandler_68
   \                     ??StepperHandler_69: (+1)
   \   00000514   0x9800             LDR      R0,[SP, #+0]
   \   00000516   0x1C40             ADDS     R0,R0,#+1
   \   00000518   0x9000             STR      R0,[SP, #+0]
   \                     ??StepperHandler_68: (+1)
   \   0000051A   0x9800             LDR      R0,[SP, #+0]
   \   0000051C   0x2814             CMP      R0,#+20
   \   0000051E   0xDBF9             BLT.N    ??StepperHandler_69
    712                #endif
    713              #endif // !LIN_ADVANCE
    714          
    715              if (++step_events_completed >= current_block->step_event_count) {
   \                     ??StepperHandler_65: (+1)
   \   00000520   0x6B70             LDR      R0,[R6, #+52]
   \   00000522   0x1C40             ADDS     R0,R0,#+1
   \   00000524   0x6370             STR      R0,[R6, #+52]
   \   00000526   0x6A31             LDR      R1,[R6, #+32]
   \   00000528   0x6949             LDR      R1,[R1, #+20]
   \   0000052A   0x4288             CMP      R0,R1
   \   0000052C   0xF4FF 0xAE0C      BCC.W    ??StepperHandler_18
    716                all_steps_done = true;
   \   00000530   0xF04F 0x0801      MOV      R8,#+1
    717                break;
    718              }
    719          
    720              // For minimum pulse time wait after stopping pulses also
    721              #if EXTRA_CYCLES_XYZE > 20
    722                if (i) while (EXTRA_CYCLES_XYZE > (uint32_t)(TCNT0 - pulse_start) * (INT0_PRESCALER)) { /* nada */ }
    723              #elif EXTRA_CYCLES_XYZE > 0
    724                if (i) DELAY_NOPS(EXTRA_CYCLES_XYZE);
    725              #endif
    726          
    727            } // steps_loop
    728          
    729            #if ENABLED(LIN_ADVANCE)
    730          
    731              if (current_block->use_advance_lead) {
    732                const int delta_adv_steps = current_estep_rate[TOOL_E_INDEX] - current_adv_steps[TOOL_E_INDEX];
    733                current_adv_steps[TOOL_E_INDEX] += delta_adv_steps;
    734                #if ENABLED(MIXING_EXTRUDER)
    735                  // Mixing extruders apply advance lead proportionally
    736                  MIXING_STEPPERS_LOOP(j)
    737                    e_steps[j] += delta_adv_steps * current_block->step_event_count / current_block->mix_event_count[j];
    738                #else
    739                  // For most extruders, advance the single E stepper
    740                  e_steps[TOOL_E_INDEX] += delta_adv_steps;
    741                #endif
    742              }
    743              // If we have esteps to execute, fire the next advance_isr "now"
    744              if (e_steps[TOOL_E_INDEX]) nextAdvanceISR = 0;
    745          
    746            #endif // LIN_ADVANCE
    747          
    748            // Calculate new timer value
    749            if (step_events_completed <= (uint32_t)current_block->accelerate_until) {
   \                     ??StepperHandler_19: (+1)
   \   00000534   0x6A32             LDR      R2,[R6, #+32]
   \   00000536   0x6990             LDR      R0,[R2, #+24]
   \   00000538   0x6B71             LDR      R1,[R6, #+52]
   \   0000053A   0x4288             CMP      R0,R1
   \   0000053C   0xD33F             BCC.N    ??StepperHandler_70
    750          
    751              MultiU24X32toH16(acc_step_rate, acceleration_time, current_block->acceleration_rate);
   \   0000053E   0x6BB0             LDR      R0,[R6, #+56]
   \   00000540   0x6A11             LDR      R1,[R2, #+32]
   \   00000542   0xFB81 0x0100      SMULL    R0,R1,R1,R0
   \   00000546   0x0E00             LSRS     R0,R0,#+24
   \   00000548   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   0000054C   0x81F0             STRH     R0,[R6, #+14]
   \   0000054E   0x89F0             LDRH     R0,[R6, #+14]
   \   00000550   0x6C11             LDR      R1,[R2, #+64]
   \   00000552   0x1808             ADDS     R0,R1,R0
   \   00000554   0x81F0             STRH     R0,[R6, #+14]
    752              acc_step_rate += current_block->initial_rate;
    753          
    754              // upper limit
    755              NOMORE(acc_step_rate, current_block->nominal_rate);
   \   00000556   0x6BD1             LDR      R1,[R2, #+60]
   \   00000558   0xB280             UXTH     R0,R0
   \   0000055A   0x4281             CMP      R1,R0
   \   0000055C   0xD200             BCS.N    ??StepperHandler_71
   \   0000055E   0x81F1             STRH     R1,[R6, #+14]
    756          
    757              // step_rate to timer interval
    758              const uint16_t interval = calc_timer_interval(acc_step_rate);
   \                     ??StepperHandler_71: (+1)
   \   00000560   0x89F0             LDRH     R0,[R6, #+14]
   \   00000562   0x.... 0x....      BL       _ZN7Stepper19calc_timer_intervalEt
    759          
    760              SPLIT(interval);  // split step into multiple ISRs if larger than ENDSTOP_NOMINAL_OCR_VAL
   \   00000566   0x4601             MOV      R1,R0
   \   00000568   0x783A             LDRB     R2,[R7, #+0]
   \   0000056A   0x2A00             CMP      R2,#+0
   \   0000056C   0xD104             BNE.N    ??StepperHandler_72
   \   0000056E   0x.... 0x....      LDR.W    R2,??DataTable20_7
   \   00000572   0x7812             LDRB     R2,[R2, #+0]
   \   00000574   0x2A00             CMP      R2,#+0
   \   00000576   0xD014             BEQ.N    ??StepperHandler_73
   \                     ??StepperHandler_72: (+1)
   \   00000578   0xF640 0x32B9      MOVW     R2,#+3001
   \   0000057C   0x4290             CMP      R0,R2
   \   0000057E   0xDB10             BLT.N    ??StepperHandler_73
   \   00000580   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000584   0x460A             MOV      R2,R1
   \   00000586   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   0000058A   0xFB01 0x0212      MLS      R2,R1,R2,R0
   \   0000058E   0xB292             UXTH     R2,R2
   \   00000590   0x4613             MOV      R3,R2
   \   00000592   0xF5B3 0x7F7A      CMP      R3,#+1000
   \   00000596   0xDA01             BGE.N    ??StepperHandler_74
   \   00000598   0xF602 0x31B8      ADDW     R1,R2,#+3000
   \                     ??StepperHandler_74: (+1)
   \   0000059C   0xB289             UXTH     R1,R1
   \   0000059E   0x1A42             SUBS     R2,R0,R1
   \   000005A0   0x64F2             STR      R2,[R6, #+76]
    761              _NEXT_ISR(ocr_val);
   \                     ??StepperHandler_73: (+1)
   \   000005A2   0x6822             LDR      R2,[R4, #+0]
   \   000005A4   0x62D1             STR      R1,[R2, #+44]
   \   000005A6   0x6821             LDR      R1,[R4, #+0]
   \   000005A8   0x6ACA             LDR      R2,[R1, #+44]
   \   000005AA   0x6A4B             LDR      R3,[R1, #+36]
   \   000005AC   0x429A             CMP      R2,R3
   \   000005AE   0xD202             BCS.N    ??StepperHandler_75
   \   000005B0   0x6ACA             LDR      R2,[R1, #+44]
   \   000005B2   0x1E52             SUBS     R2,R2,#+1
   \   000005B4   0x624A             STR      R2,[R1, #+36]
    762          
    763              acceleration_time += interval;
   \                     ??StepperHandler_75: (+1)
   \   000005B6   0x6BB1             LDR      R1,[R6, #+56]
   \   000005B8   0x1840             ADDS     R0,R0,R1
   \   000005BA   0x63B0             STR      R0,[R6, #+56]
   \   000005BC   0xE070             B.N      ??StepperHandler_76
    764          
    765              #if ENABLED(LIN_ADVANCE)
    766          
    767                if (current_block->use_advance_lead) {
    768                  #if ENABLED(MIXING_EXTRUDER)
    769                    MIXING_STEPPERS_LOOP(j)
    770                      current_estep_rate[j] = ((uint32_t)acc_step_rate * current_block->abs_adv_steps_multiplier8 * current_block->step_event_count / current_block->mix_event_count[j]) >> 17;
    771                  #else
    772                    current_estep_rate[TOOL_E_INDEX] = ((uint32_t)acc_step_rate * current_block->abs_adv_steps_multiplier8) >> 17;
    773                  #endif
    774                }
    775                eISR_Rate = adv_rate(e_steps[TOOL_E_INDEX], interval, step_loops);
    776          
    777              #endif // LIN_ADVANCE
    778            }
    779            else if (step_events_completed > (uint32_t)current_block->decelerate_after) {
   \                     ??StepperHandler_70: (+1)
   \   000005BE   0x69D0             LDR      R0,[R2, #+28]
   \   000005C0   0x6B71             LDR      R1,[R6, #+52]
   \   000005C2   0x4288             CMP      R0,R1
   \   000005C4   0xD241             BCS.N    ??StepperHandler_77
    780              uint16_t step_rate;
    781              MultiU24X32toH16(step_rate, deceleration_time, current_block->acceleration_rate);
   \   000005C6   0x6BF0             LDR      R0,[R6, #+60]
   \   000005C8   0x6A11             LDR      R1,[R2, #+32]
   \   000005CA   0xFB81 0x0100      SMULL    R0,R1,R1,R0
   \   000005CE   0x0E00             LSRS     R0,R0,#+24
   \   000005D0   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
    782          
    783              if (step_rate < acc_step_rate) { // Still decelerating?
   \   000005D4   0x6C51             LDR      R1,[R2, #+68]
   \   000005D6   0x89F2             LDRH     R2,[R6, #+14]
   \   000005D8   0xB280             UXTH     R0,R0
   \   000005DA   0x4290             CMP      R0,R2
   \   000005DC   0xD205             BCS.N    ??StepperHandler_78
    784                step_rate = acc_step_rate - step_rate;
   \   000005DE   0x1A10             SUBS     R0,R2,R0
    785                NOLESS(step_rate, current_block->final_rate);
   \   000005E0   0xB280             UXTH     R0,R0
   \   000005E2   0x4288             CMP      R0,R1
   \   000005E4   0xD202             BCS.N    ??StepperHandler_79
   \   000005E6   0x4608             MOV      R0,R1
   \   000005E8   0xE000             B.N      ??StepperHandler_79
    786              }
    787              else
    788                step_rate = current_block->final_rate;
   \                     ??StepperHandler_78: (+1)
   \   000005EA   0x4608             MOV      R0,R1
    789          
    790              // step_rate to timer interval
    791              const uint16_t interval = calc_timer_interval(step_rate);
   \                     ??StepperHandler_79: (+1)
   \   000005EC   0xB280             UXTH     R0,R0
   \   000005EE   0x.... 0x....      BL       _ZN7Stepper19calc_timer_intervalEt
    792          
    793              SPLIT(interval);  // split step into multiple ISRs if larger than ENDSTOP_NOMINAL_OCR_VAL
   \   000005F2   0x4601             MOV      R1,R0
   \   000005F4   0x783A             LDRB     R2,[R7, #+0]
   \   000005F6   0x2A00             CMP      R2,#+0
   \   000005F8   0xD104             BNE.N    ??StepperHandler_80
   \   000005FA   0x.... 0x....      LDR.W    R2,??DataTable20_7
   \   000005FE   0x7812             LDRB     R2,[R2, #+0]
   \   00000600   0x2A00             CMP      R2,#+0
   \   00000602   0xD014             BEQ.N    ??StepperHandler_81
   \                     ??StepperHandler_80: (+1)
   \   00000604   0xF640 0x32B9      MOVW     R2,#+3001
   \   00000608   0x4290             CMP      R0,R2
   \   0000060A   0xDB10             BLT.N    ??StepperHandler_81
   \   0000060C   0xF640 0x31B8      MOVW     R1,#+3000
   \   00000610   0x460A             MOV      R2,R1
   \   00000612   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   00000616   0xFB01 0x0212      MLS      R2,R1,R2,R0
   \   0000061A   0xB292             UXTH     R2,R2
   \   0000061C   0x4613             MOV      R3,R2
   \   0000061E   0xF5B3 0x7F7A      CMP      R3,#+1000
   \   00000622   0xDA01             BGE.N    ??StepperHandler_82
   \   00000624   0xF602 0x31B8      ADDW     R1,R2,#+3000
   \                     ??StepperHandler_82: (+1)
   \   00000628   0xB289             UXTH     R1,R1
   \   0000062A   0x1A42             SUBS     R2,R0,R1
   \   0000062C   0x64F2             STR      R2,[R6, #+76]
    794              _NEXT_ISR(ocr_val);
   \                     ??StepperHandler_81: (+1)
   \   0000062E   0x6822             LDR      R2,[R4, #+0]
   \   00000630   0x62D1             STR      R1,[R2, #+44]
   \   00000632   0x6821             LDR      R1,[R4, #+0]
   \   00000634   0x6ACA             LDR      R2,[R1, #+44]
   \   00000636   0x6A4B             LDR      R3,[R1, #+36]
   \   00000638   0x429A             CMP      R2,R3
   \   0000063A   0xD202             BCS.N    ??StepperHandler_83
   \   0000063C   0x6ACA             LDR      R2,[R1, #+44]
   \   0000063E   0x1E52             SUBS     R2,R2,#+1
   \   00000640   0x624A             STR      R2,[R1, #+36]
    795          
    796              deceleration_time += interval;
   \                     ??StepperHandler_83: (+1)
   \   00000642   0x6BF1             LDR      R1,[R6, #+60]
   \   00000644   0x1840             ADDS     R0,R0,R1
   \   00000646   0x63F0             STR      R0,[R6, #+60]
   \   00000648   0xE02A             B.N      ??StepperHandler_76
    797          
    798              #if ENABLED(LIN_ADVANCE)
    799          
    800                if (current_block->use_advance_lead) {
    801                  #if ENABLED(MIXING_EXTRUDER)
    802                    MIXING_STEPPERS_LOOP(j)
    803                      current_estep_rate[j] = ((uint32_t)step_rate * current_block->abs_adv_steps_multiplier8 * current_block->step_event_count / current_block->mix_event_count[j]) >> 17;
    804                  #else
    805                    current_estep_rate[TOOL_E_INDEX] = ((uint32_t)step_rate * current_block->abs_adv_steps_multiplier8) >> 17;
    806                  #endif
    807                }
    808                eISR_Rate = adv_rate(e_steps[TOOL_E_INDEX], interval, step_loops);
    809          
    810              #endif // LIN_ADVANCE
    811            }
    812            else {
    813          
    814              #if ENABLED(LIN_ADVANCE)
    815          
    816                if (current_block->use_advance_lead)
    817                  current_estep_rate[TOOL_E_INDEX] = final_estep_rate;
    818          
    819                eISR_Rate = adv_rate(e_steps[TOOL_E_INDEX], OCR1A_nominal, step_loops_nominal);
    820          
    821              #endif
    822          
    823              SPLIT(OCR1A_nominal);  // split step into multiple ISRs if larger than ENDSTOP_NOMINAL_OCR_VAL
   \                     ??StepperHandler_77: (+1)
   \   0000064A   0x89B0             LDRH     R0,[R6, #+12]
   \   0000064C   0x4601             MOV      R1,R0
   \   0000064E   0x783A             LDRB     R2,[R7, #+0]
   \   00000650   0x2A00             CMP      R2,#+0
   \   00000652   0xD104             BNE.N    ??StepperHandler_84
   \   00000654   0x.... 0x....      LDR.W    R2,??DataTable20_7
   \   00000658   0x7812             LDRB     R2,[R2, #+0]
   \   0000065A   0x2A00             CMP      R2,#+0
   \   0000065C   0xD014             BEQ.N    ??StepperHandler_85
   \                     ??StepperHandler_84: (+1)
   \   0000065E   0xF640 0x32B9      MOVW     R2,#+3001
   \   00000662   0x4290             CMP      R0,R2
   \   00000664   0xDB10             BLT.N    ??StepperHandler_85
   \   00000666   0xF640 0x31B8      MOVW     R1,#+3000
   \   0000066A   0x460A             MOV      R2,R1
   \   0000066C   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \   00000670   0xFB01 0x0212      MLS      R2,R1,R2,R0
   \   00000674   0xB292             UXTH     R2,R2
   \   00000676   0x4613             MOV      R3,R2
   \   00000678   0xF5B3 0x7F7A      CMP      R3,#+1000
   \   0000067C   0xDA01             BGE.N    ??StepperHandler_86
   \   0000067E   0xF602 0x31B8      ADDW     R1,R2,#+3000
   \                     ??StepperHandler_86: (+1)
   \   00000682   0xB289             UXTH     R1,R1
   \   00000684   0x1A40             SUBS     R0,R0,R1
   \   00000686   0x64F0             STR      R0,[R6, #+76]
    824              _NEXT_ISR(ocr_val);
   \                     ??StepperHandler_85: (+1)
   \   00000688   0x6820             LDR      R0,[R4, #+0]
   \   0000068A   0x62C1             STR      R1,[R0, #+44]
   \   0000068C   0x6820             LDR      R0,[R4, #+0]
   \   0000068E   0x6AC1             LDR      R1,[R0, #+44]
   \   00000690   0x6A42             LDR      R2,[R0, #+36]
   \   00000692   0x4291             CMP      R1,R2
   \   00000694   0xD202             BCS.N    ??StepperHandler_87
   \   00000696   0x6AC1             LDR      R1,[R0, #+44]
   \   00000698   0x1E49             SUBS     R1,R1,#+1
   \   0000069A   0x6241             STR      R1,[R0, #+36]
    825          
    826              // ensure we're running at the correct step rate, even if we just came off an acceleration
    827              step_loops = step_loops_nominal;
   \                     ??StepperHandler_87: (+1)
   \   0000069C   0x7A70             LDRB     R0,[R6, #+9]
   \   0000069E   0x7230             STRB     R0,[R6, #+8]
    828            }
    829          
    830            #if DISABLED(LIN_ADVANCE)
    831              NOLESS(OCR1A, TCNT1 + 16);
   \                     ??StepperHandler_76: (+1)
   \   000006A0   0x6820             LDR      R0,[R4, #+0]
   \   000006A2   0x6AC1             LDR      R1,[R0, #+44]
   \   000006A4   0x6A42             LDR      R2,[R0, #+36]
   \   000006A6   0x3210             ADDS     R2,R2,#+16
   \   000006A8   0x4291             CMP      R1,R2
   \   000006AA   0xD202             BCS.N    ??StepperHandler_88
   \   000006AC   0x6A41             LDR      R1,[R0, #+36]
   \   000006AE   0x3110             ADDS     R1,R1,#+16
   \   000006B0   0x62C1             STR      R1,[R0, #+44]
    832            #endif
    833          
    834            // If current block is finished, reset pointer
    835            if (all_steps_done) {
   \                     ??StepperHandler_88: (+1)
   \   000006B2   0xF1B8 0x0F00      CMP      R8,#+0
   \   000006B6   0xD003             BEQ.N    ??StepperHandler_89
    836              current_block = NULL;
   \   000006B8   0x2000             MOVS     R0,#+0
   \   000006BA   0x6230             STR      R0,[R6, #+32]
    837              planner.discard_current_block();
   \   000006BC   0x.... 0x....      BL       _ZN7Planner21discard_current_blockEv
    838            }
    839            #if DISABLED(LIN_ADVANCE)
    840              _ENABLE_ISRs(); // re-enable ISRs
   \                     ??StepperHandler_89: (+1)
   \   000006C0   0xB662             cpsie i
   \   000006C2   0x.... 0x....      LDR.W    R0,??DataTable20_10
   \   000006C6   0x7800             LDRB     R0,[R0, #+0]
   \   000006C8   0x2800             CMP      R0,#+0
   \   000006CA   0x4628             MOV      R0,R5
   \   000006CC   0xD002             BEQ.N    ??StepperHandler_90
   \   000006CE   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
   \   000006D2   0xE001             B.N      ??StepperHandler_7
   \                     ??StepperHandler_90: (+1)
   \   000006D4   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
   \                     ??StepperHandler_7: (+1)
   \   000006D8   0x4620             MOV      R0,R4
   \   000006DA   0xE8BD 0x4FF2      POP      {R1,R4-R11,LR}
   \   000006DE   0x.... 0x....      B.W      HAL_TIM_Base_Start_IT
    841            #endif
    842          }

   \                                 In section .data, align 4
   \                     _ZN7Stepper15count_directionE:
   \   00000000   0x01 0x01          DC8 1, 1, 1, 1
   \              0x01 0x01    
   \                     _ZN7Stepper17performing_homingE:
   \   00000004   0x00               DC8 0
   \                     _ZN7Stepper19last_direction_bitsE:
   \   00000005   0x00               DC8 0
   \                     _ZN7Stepper14locked_z_motorE:
   \   00000006   0x00               DC8 0
   \                     _ZN7Stepper15locked_z2_motorE:
   \   00000007   0x00               DC8 0
   \                     _ZN7Stepper10step_loopsE:
   \   00000008   0x00               DC8 0
   \                     _ZN7Stepper18step_loops_nominalE:
   \   00000009   0x00               DC8 0
   \                     _ZN7Stepper23cleaning_buffer_counterE:
   \   0000000A   0x0000             DC16 0
   \                     _ZN7Stepper13OCR1A_nominalE:
   \   0000000C   0x00 0x00          DC8 0, 0
   \                     _ZN7Stepper13acc_step_rateE:
   \   0000000E   0x00 0x00          DC8 0, 0
   \                     _ZN7Stepper14count_positionE:
   \   00000010   0x00000000         DC32 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \                     _ZN7Stepper13current_blockE:
   \   00000020   0x00000000         DC32 0H
   \                     _ZN7Stepper9counter_XE:
   \   00000024   0x00000000         DC32 0
   \                     _ZN7Stepper9counter_YE:
   \   00000028   0x00000000         DC32 0
   \                     _ZN7Stepper9counter_ZE:
   \   0000002C   0x00000000         DC32 0
   \                     _ZN7Stepper9counter_EE:
   \   00000030   0x00000000         DC32 0
   \                     _ZN7Stepper21step_events_completedE:
   \   00000034   0x00000000         DC32 0
   \                     _ZN7Stepper17acceleration_timeE:
   \   00000038   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     _ZN7Stepper17deceleration_timeE:
   \   0000003C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     _ZN7Stepper18endstops_trigstepsE:
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000004C   0x00000000         DC32 0
    843          
    844          #if ENABLED(LIN_ADVANCE)
    845          
    846            #define CYCLES_EATEN_E (E_STEPPERS * 5)
    847            #define EXTRA_CYCLES_E (STEP_PULSE_CYCLES - (CYCLES_EATEN_E))
    848          
    849            // Timer interrupt for E. e_steps is set in the main routine;
    850          
    851            void Stepper::advance_isr() {
    852          
    853              nextAdvanceISR = eISR_Rate;
    854          
    855              #if ENABLED(MK2_MULTIPLEXER)
    856                // Even-numbered steppers are reversed
    857                #define SET_E_STEP_DIR(INDEX) \
    858                  if (e_steps[INDEX]) E## INDEX ##_DIR_WRITE(e_steps[INDEX] < 0 ? !INVERT_E## INDEX ##_DIR ^ TEST(INDEX, 0) : INVERT_E## INDEX ##_DIR ^ TEST(INDEX, 0))
    859              #else
    860                #define SET_E_STEP_DIR(INDEX) \
    861                  if (e_steps[INDEX]) E## INDEX ##_DIR_WRITE(e_steps[INDEX] < 0 ? INVERT_E## INDEX ##_DIR : !INVERT_E## INDEX ##_DIR)
    862              #endif
    863          
    864              #define START_E_PULSE(INDEX) \
    865                if (e_steps[INDEX]) E## INDEX ##_STEP_WRITE(!INVERT_E_STEP_PIN)
    866          
    867              #define STOP_E_PULSE(INDEX) \
    868                if (e_steps[INDEX]) { \
    869                  e_steps[INDEX] < 0 ? ++e_steps[INDEX] : --e_steps[INDEX]; \
    870                  E## INDEX ##_STEP_WRITE(INVERT_E_STEP_PIN); \
    871                }
    872          
    873              SET_E_STEP_DIR(0);
    874              #if E_STEPPERS > 1
    875                SET_E_STEP_DIR(1);
    876                #if E_STEPPERS > 2
    877                  SET_E_STEP_DIR(2);
    878                  #if E_STEPPERS > 3
    879                    SET_E_STEP_DIR(3);
    880                    #if E_STEPPERS > 4
    881                      SET_E_STEP_DIR(4);
    882                    #endif
    883                  #endif
    884                #endif
    885              #endif
    886          
    887              // Step all E steppers that have steps
    888              for (uint8_t i = step_loops; i--;) {
    889          
    890                #if EXTRA_CYCLES_E > 20
    891                  uint32_t pulse_start = TCNT0;
    892                #endif
    893          
    894                START_E_PULSE(0);
    895                #if E_STEPPERS > 1
    896                  START_E_PULSE(1);
    897                  #if E_STEPPERS > 2
    898                    START_E_PULSE(2);
    899                    #if E_STEPPERS > 3
    900                      START_E_PULSE(3);
    901                      #if E_STEPPERS > 4
    902                        START_E_PULSE(4);
    903                      #endif
    904                    #endif
    905                  #endif
    906                #endif
    907          
    908                // For minimum pulse time wait before stopping pulses
    909                #if EXTRA_CYCLES_E > 20
    910                  while (EXTRA_CYCLES_E > (uint32_t)(TCNT0 - pulse_start) * (INT0_PRESCALER)) { /* nada */ }
    911                  pulse_start = TCNT0;
    912                #elif EXTRA_CYCLES_E > 0
    913                  DELAY_NOPS(EXTRA_CYCLES_E);
    914                #endif
    915          
    916                STOP_E_PULSE(0);
    917                #if E_STEPPERS > 1
    918                  STOP_E_PULSE(1);
    919                  #if E_STEPPERS > 2
    920                    STOP_E_PULSE(2);
    921                    #if E_STEPPERS > 3
    922                      STOP_E_PULSE(3);
    923                      #if E_STEPPERS > 4
    924                        STOP_E_PULSE(4);
    925                      #endif
    926                    #endif
    927                  #endif
    928                #endif
    929          
    930                // For minimum pulse time wait before looping
    931                #if EXTRA_CYCLES_E > 20
    932                  if (i) while (EXTRA_CYCLES_E > (uint32_t)(TCNT0 - pulse_start) * (INT0_PRESCALER)) { /* nada */ }
    933                #elif EXTRA_CYCLES_E > 0
    934                  if (i) DELAY_NOPS(EXTRA_CYCLES_E);
    935                #endif
    936          
    937              } // steps_loop
    938            }
    939          
    940            void Stepper::advance_isr_scheduler() {
    941              // Disable Timer0 ISRs and enable global ISR again to capture UART events (incoming chars)
    942              CBI(TIMSK0, OCIE0B); // Temperature ISR
    943              DISABLE_STEPPER_DRIVER_INTERRUPT();
    944              sei();
    945          
    946              // Run main stepping ISR if flagged
    947              if (!nextMainISR) isr();
    948          
    949              // Run Advance stepping ISR if flagged
    950              if (!nextAdvanceISR) advance_isr();
    951          
    952              // Is the next advance ISR scheduled before the next main ISR?
    953              if (nextAdvanceISR <= nextMainISR) {
    954                // Set up the next interrupt
    955                OCR1A = nextAdvanceISR;
    956                // New interval for the next main ISR
    957                if (nextMainISR) nextMainISR -= nextAdvanceISR;
    958                // Will call Stepper::advance_isr on the next interrupt
    959                nextAdvanceISR = 0;
    960              }
    961              else {
    962                // The next main ISR comes first
    963                OCR1A = nextMainISR;
    964                // New interval for the next advance ISR, if any
    965                if (nextAdvanceISR && nextAdvanceISR != ADV_NEVER)
    966                  nextAdvanceISR -= nextMainISR;
    967                // Will call Stepper::isr on the next interrupt
    968                nextMainISR = 0;
    969              }
    970          
    971              // Don't run the ISR faster than possible
    972              NOLESS(OCR1A, TCNT1 + 16);
    973          
    974              // Restore original ISR settings
    975              _ENABLE_ISRs();
    976            }
    977          
    978          #endif // LIN_ADVANCE
    979          

   \                                 In section .text, align 4, keep-with-next
    980          void Stepper::init() {
   \                     _ZN7Stepper4initEv: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    981          
    982            // Init Digipot Motor Current
    983            #if HAS_DIGIPOTSS || HAS_MOTOR_CURRENT_PWM
    984              digipot_init();
    985            #endif
    986          
    987            // Init Microstepping Pins
    988            #if HAS_MICROSTEPS
    989              microstep_init();
    990            #endif
    991          
    992            // Init TMC Steppers
    993            #if ENABLED(HAVE_TMCDRIVER)
    994              tmc_init();
    995            #endif
    996          
    997            // Init TMC2130 Steppers
    998            #if ENABLED(HAVE_TMC2130)
    999              tmc2130_init();
   1000            #endif
   1001          
   1002            // Init TMC2208 Steppers
   1003            #if ENABLED(HAVE_TMC2208)
   1004              tmc2208_init();
   1005            #endif
   1006          
   1007            // TRAMS, TMC2130 and TMC2208 advanced settings
   1008            #if HAS_TRINAMIC
   1009              TMC_ADV()
   1010            #endif
   1011          
   1012            // Init L6470 Steppers
   1013            #if ENABLED(HAVE_L6470DRIVER)
   1014              L6470_init();
   1015            #endif
   1016          
   1017            // Init Dir Pins
   1018            #if HAS_X_DIR
   1019              X_DIR_INIT;
   1020            #endif
   1021            #if HAS_X2_DIR
   1022              X2_DIR_INIT;
   1023            #endif
   1024            #if HAS_Y_DIR
   1025              Y_DIR_INIT;
   1026              #if ENABLED(Y_DUAL_STEPPER_DRIVERS) && HAS_Y2_DIR
   1027                Y2_DIR_INIT;
   1028              #endif
   1029            #endif
   1030            #if HAS_Z_DIR
   1031              Z_DIR_INIT;
   1032              //#if ENABLED(Z_DUAL_STEPPER_DRIVERS) && HAS_Z2_DIR
   1033              if(Z_DUAL_STEPPER_DRIVERS==1)
   1034              {
   1035                Z2_DIR_INIT;
   1036              }
   1037              //#endif
   1038            #endif
   1039            #if HAS_E0_DIR
   1040              E0_DIR_INIT;
   1041            #endif
   1042            #if HAS_E1_DIR
   1043              E1_DIR_INIT;
   1044            #endif
   1045            #if HAS_E2_DIR
   1046              E2_DIR_INIT;
   1047            #endif
   1048            #if HAS_E3_DIR
   1049              E3_DIR_INIT;
   1050            #endif
   1051            #if HAS_E4_DIR
   1052              E4_DIR_INIT;
   1053            #endif
   1054          
   1055            // Init Enable Pins - steppers default to disabled.
   1056            #if HAS_X_ENABLE
   1057              X_ENABLE_INIT;
   1058              if (!X_ENABLE_ON) X_ENABLE_WRITE(HIGH);
   \   00000004   0x.... 0x....      LDR.W    R7,??DataTable20
   \   00000008   0xF207 0x1601      ADDW     R6,R7,#+257
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable20_2
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable20_3
   \   00000014   0x78F0             LDRB     R0,[R6, #+3]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD104             BNE.N    ??init_0
   \   0000001A   0x2201             MOVS     R2,#+1
   \   0000001C   0x88A9             LDRH     R1,[R5, #+4]
   \   0000001E   0x68A0             LDR      R0,[R4, #+8]
   \   00000020   0x.... 0x....      BL       HAL_GPIO_WritePin
   1059              #if ENABLED(DUAL_X_CARRIAGE) && HAS_X2_ENABLE
   1060                X2_ENABLE_INIT;
   1061                if (!X_ENABLE_ON) X2_ENABLE_WRITE(HIGH);
   1062              #endif
   1063            #endif
   1064            #if HAS_Y_ENABLE
   1065              Y_ENABLE_INIT;
   1066              if (!Y_ENABLE_ON) Y_ENABLE_WRITE(HIGH);
   \                     ??init_0: (+1)
   \   00000024   0x7930             LDRB     R0,[R6, #+4]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD104             BNE.N    ??init_1
   \   0000002A   0x2201             MOVS     R2,#+1
   \   0000002C   0x89E9             LDRH     R1,[R5, #+14]
   \   0000002E   0x69E0             LDR      R0,[R4, #+28]
   \   00000030   0x.... 0x....      BL       HAL_GPIO_WritePin
   1067              #if ENABLED(Y_DUAL_STEPPER_DRIVERS) && HAS_Y2_ENABLE
   1068                Y2_ENABLE_INIT;
   1069                if (!Y_ENABLE_ON) Y2_ENABLE_WRITE(HIGH);
   1070              #endif
   1071            #endif
   1072            #if HAS_Z_ENABLE
   1073              Z_ENABLE_INIT;
   1074              if (!Z_ENABLE_ON) Z_ENABLE_WRITE(HIGH);
   \                     ??init_1: (+1)
   \   00000034   0x7970             LDRB     R0,[R6, #+5]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD104             BNE.N    ??init_2
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0x8B29             LDRH     R1,[R5, #+24]
   \   0000003E   0x6B20             LDR      R0,[R4, #+48]
   \   00000040   0x.... 0x....      BL       HAL_GPIO_WritePin
   1075              //#if ENABLED(Z_DUAL_STEPPER_DRIVERS) && HAS_Z2_ENABLE
   1076              if(Z_DUAL_STEPPER_DRIVERS==1)
   1077              {
   1078                Z2_ENABLE_INIT;
   1079              }
   1080                if (!Z_ENABLE_ON) Z2_ENABLE_WRITE(HIGH);
   \                     ??init_2: (+1)
   \   00000044   0x7970             LDRB     R0,[R6, #+5]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD104             BNE.N    ??init_3
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0x8D29             LDRH     R1,[R5, #+40]
   \   0000004E   0x6D20             LDR      R0,[R4, #+80]
   \   00000050   0x.... 0x....      BL       HAL_GPIO_WritePin
   1081              //#endif
   1082            #endif
   1083            #if HAS_E0_ENABLE
   1084              E0_ENABLE_INIT;
   1085              if (!E_ENABLE_ON) E0_ENABLE_WRITE(HIGH);
   \                     ??init_3: (+1)
   \   00000054   0x79B0             LDRB     R0,[R6, #+6]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD104             BNE.N    ??init_4
   \   0000005A   0x2201             MOVS     R2,#+1
   \   0000005C   0x8C69             LDRH     R1,[R5, #+34]
   \   0000005E   0x6C60             LDR      R0,[R4, #+68]
   \   00000060   0x.... 0x....      BL       HAL_GPIO_WritePin
   1086            #endif
   1087            #if HAS_E1_ENABLE
   1088              E1_ENABLE_INIT;
   1089              if (!E_ENABLE_ON) E1_ENABLE_WRITE(HIGH);
   \                     ??init_4: (+1)
   \   00000064   0x79B0             LDRB     R0,[R6, #+6]
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD104             BNE.N    ??init_5
   \   0000006A   0x2201             MOVS     R2,#+1
   \   0000006C   0x8D29             LDRH     R1,[R5, #+40]
   \   0000006E   0x6D20             LDR      R0,[R4, #+80]
   \   00000070   0x.... 0x....      BL       HAL_GPIO_WritePin
   1090            #endif
   1091            #if HAS_E2_ENABLE
   1092              E2_ENABLE_INIT;
   1093              if (!E_ENABLE_ON) E2_ENABLE_WRITE(HIGH);
   1094            #endif
   1095            #if HAS_E3_ENABLE
   1096              E3_ENABLE_INIT;
   1097              if (!E_ENABLE_ON) E3_ENABLE_WRITE(HIGH);
   1098            #endif
   1099            #if HAS_E4_ENABLE
   1100              E4_ENABLE_INIT;
   1101              if (!E_ENABLE_ON) E4_ENABLE_WRITE(HIGH);
   1102            #endif
   1103          
   1104            // Init endstops and pullups
   1105            endstops.init();
   \                     ??init_5: (+1)
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable20_14
   \   00000078   0x.... 0x....      BL       _ZN8Endstops4initEv
   1106          
   1107            #define _STEP_INIT(AXIS) AXIS ##_STEP_INIT
   1108            #define _WRITE_STEP(AXIS, HIGHLOW) AXIS ##_STEP_WRITE(HIGHLOW)
   1109            #define _DISABLE(AXIS) disable_## AXIS()
   1110          
   1111            #define AXIS_INIT(AXIS, PIN) \
   1112              _STEP_INIT(AXIS); \
   1113              _WRITE_STEP(AXIS, _INVERT_STEP_PIN(PIN)); \
   1114              _DISABLE(AXIS)
   1115          
   1116            #define E_AXIS_INIT(NUM) AXIS_INIT(E## NUM, E)
   1117          
   1118            // Init Step Pins
   1119            #if HAS_X_STEP
   1120              #if ENABLED(X_DUAL_STEPPER_DRIVERS) || ENABLED(DUAL_X_CARRIAGE)
   1121                X2_STEP_INIT;
   1122                X2_STEP_WRITE(INVERT_X_STEP_PIN);
   1123              #endif
   1124              AXIS_INIT(X, X);
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0x8869             LDRH     R1,[R5, #+2]
   \   00000080   0x6860             LDR      R0,[R4, #+4]
   \   00000082   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000086   0x78F0             LDRB     R0,[R6, #+3]
   \   00000088   0x1E42             SUBS     R2,R0,#+1
   \   0000008A   0x4192             SBCS     R2,R2,R2
   \   0000008C   0x0FD2             LSRS     R2,R2,#+31
   \   0000008E   0xB252             SXTB     R2,R2
   \   00000090   0x88A9             LDRH     R1,[R5, #+4]
   \   00000092   0x68A0             LDR      R0,[R4, #+8]
   \   00000094   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000098   0x.... 0x....      LDR.W    R8,??DataTable20_15
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0xF888 0x0000      STRB     R0,[R8, #+0]
   1125            #endif
   1126          
   1127            #if HAS_Y_STEP
   1128              #if ENABLED(Y_DUAL_STEPPER_DRIVERS)
   1129                Y2_STEP_INIT;
   1130                Y2_STEP_WRITE(INVERT_Y_STEP_PIN);
   1131              #endif
   1132              AXIS_INIT(Y, Y);
   \   000000A2   0x4602             MOV      R2,R0
   \   000000A4   0x89A9             LDRH     R1,[R5, #+12]
   \   000000A6   0x69A0             LDR      R0,[R4, #+24]
   \   000000A8   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000000AC   0x7930             LDRB     R0,[R6, #+4]
   \   000000AE   0x1E42             SUBS     R2,R0,#+1
   \   000000B0   0x4192             SBCS     R2,R2,R2
   \   000000B2   0x0FD2             LSRS     R2,R2,#+31
   \   000000B4   0xB252             SXTB     R2,R2
   \   000000B6   0x89E9             LDRH     R1,[R5, #+14]
   \   000000B8   0x69E0             LDR      R0,[R4, #+28]
   \   000000BA   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xF888 0x0001      STRB     R0,[R8, #+1]
   1133            #endif
   1134          
   1135            #if HAS_Z_STEP
   1136              //#if ENABLED(Z_DUAL_STEPPER_DRIVERS)
   1137              if(Z_DUAL_STEPPER_DRIVERS==1)
   \   000000C4   0xF897 0x0101      LDRB     R0,[R7, #+257]
   \   000000C8   0x2801             CMP      R0,#+1
   \   000000CA   0xD104             BNE.N    ??init_6
   1138              {
   1139                Z2_STEP_INIT;
   1140                Z2_STEP_WRITE(INVERT_Z_STEP_PIN);
   \   000000CC   0x2200             MOVS     R2,#+0
   \   000000CE   0x8CE9             LDRH     R1,[R5, #+38]
   \   000000D0   0x6CE0             LDR      R0,[R4, #+76]
   \   000000D2   0x.... 0x....      BL       HAL_GPIO_WritePin
   1141              }
   1142              //#endif
   1143              AXIS_INIT(Z, Z);
   \                     ??init_6: (+1)
   \   000000D6   0x2200             MOVS     R2,#+0
   \   000000D8   0x8AE9             LDRH     R1,[R5, #+22]
   \   000000DA   0x6AE0             LDR      R0,[R4, #+44]
   \   000000DC   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000000E0   0x7970             LDRB     R0,[R6, #+5]
   \   000000E2   0x1E42             SUBS     R2,R0,#+1
   \   000000E4   0x4192             SBCS     R2,R2,R2
   \   000000E6   0x0FD2             LSRS     R2,R2,#+31
   \   000000E8   0xB252             SXTB     R2,R2
   \   000000EA   0x8B29             LDRH     R1,[R5, #+24]
   \   000000EC   0x6B20             LDR      R0,[R4, #+48]
   \   000000EE   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   000000F2   0x7970             LDRB     R0,[R6, #+5]
   \   000000F4   0x1E42             SUBS     R2,R0,#+1
   \   000000F6   0x4192             SBCS     R2,R2,R2
   \   000000F8   0x0FD2             LSRS     R2,R2,#+31
   \   000000FA   0xB252             SXTB     R2,R2
   \   000000FC   0x8D29             LDRH     R1,[R5, #+40]
   \   000000FE   0x6D20             LDR      R0,[R4, #+80]
   \   00000100   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0xF888 0x0002      STRB     R0,[R8, #+2]
   1144            #endif
   1145          
   1146            #if HAS_E0_STEP
   1147              E_AXIS_INIT(0);
   \   0000010A   0x4602             MOV      R2,R0
   \   0000010C   0x8C29             LDRH     R1,[R5, #+32]
   \   0000010E   0x6C20             LDR      R0,[R4, #+64]
   \   00000110   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000114   0x79B0             LDRB     R0,[R6, #+6]
   \   00000116   0x1E42             SUBS     R2,R0,#+1
   \   00000118   0x4192             SBCS     R2,R2,R2
   \   0000011A   0x0FD2             LSRS     R2,R2,#+31
   \   0000011C   0xB252             SXTB     R2,R2
   \   0000011E   0x8C69             LDRH     R1,[R5, #+34]
   \   00000120   0x6C60             LDR      R0,[R4, #+68]
   \   00000122   0x.... 0x....      BL       HAL_GPIO_WritePin
   1148            #endif
   1149            #if HAS_E1_STEP
   1150              E_AXIS_INIT(1);
   \   00000126   0x2200             MOVS     R2,#+0
   \   00000128   0x8CE9             LDRH     R1,[R5, #+38]
   \   0000012A   0x6CE0             LDR      R0,[R4, #+76]
   \   0000012C   0x.... 0x....      BL       HAL_GPIO_WritePin
   \   00000130   0x79B0             LDRB     R0,[R6, #+6]
   \   00000132   0x1E42             SUBS     R2,R0,#+1
   \   00000134   0x4192             SBCS     R2,R2,R2
   \   00000136   0x0FD2             LSRS     R2,R2,#+31
   \   00000138   0xB252             SXTB     R2,R2
   \   0000013A   0x8D29             LDRH     R1,[R5, #+40]
   \   0000013C   0x6D20             LDR      R0,[R4, #+80]
   \   0000013E   0x.... 0x....      BL       HAL_GPIO_WritePin
   1151            #endif
   1152            #if HAS_E2_STEP
   1153              E_AXIS_INIT(2);
   1154            #endif
   1155            #if HAS_E3_STEP
   1156              E_AXIS_INIT(3);
   1157            #endif
   1158            #if HAS_E4_STEP
   1159              E_AXIS_INIT(4);
   1160            #endif
   1161          #if 0
   1162            // waveform generation = 0100 = CTC
   1163            SET_WGM(1, CTC_OCRnA);
   1164          
   1165            // output mode = 00 (disconnected)
   1166            SET_COMA(1, NORMAL);
   1167          
   1168            // Set the timer pre-scaler
   1169            // Generally we use a divider of 8, resulting in a 2MHz timer
   1170            // frequency on a 16MHz MCU. If you are going to change this, be
   1171            // sure to regenerate speed_lookuptable.h with
   1172            // create_speed_lookuptable.py
   1173            SET_CS(1, PRESCALER_8);  //  CS 2 = 1/8 prescaler
   1174          
   1175            // Init Stepper ISR to 122 Hz for quick starting
   1176            OCR1A = 0x4000;
   1177            TCNT1 = 0;
   1178          #endif
   1179            ENABLE_STEPPER_DRIVER_INTERRUPT();
   \   00000142   0x....             LDR.N    R0,??DataTable20_1
   \   00000144   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
   1180          
   1181            #if ENABLED(LIN_ADVANCE)
   1182              for (uint8_t i = 0; i < COUNT(e_steps); i++) e_steps[i] = 0;
   1183              ZERO(current_adv_steps);
   1184            #endif
   1185          
   1186            endstops.enable(true); // Start with endstops active. After homing they can be disabled
   \   00000148   0x2001             MOVS     R0,#+1
   \   0000014A   0x.... 0x....      BL       _ZN8Endstops6enableEb
   1187            sei();
   \   0000014E   0xB662             cpsie i
   1188          
   1189            set_directions(); // Init directions to last_direction_bits = 0
   \   00000150   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000154   0x.... 0x....      B.W      _ZN7Stepper14set_directionsEv
   1190          }
   1191          
   1192          
   1193          /**
   1194           * Block until all buffered steps are executed / cleaned
   1195           */

   \                                 In section .text, align 2, keep-with-next
   1196          void Stepper::synchronize() { while (planner.blocks_queued() || cleaning_buffer_counter) idle(); }
   \                     _ZN7Stepper11synchronizeEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xE001             B.N      ??synchronize_0
   \                     ??synchronize_1: (+1)
   \   00000004   0x.... 0x....      BL       _Z4idlev
   \                     ??synchronize_0: (+1)
   \   00000008   0x.... 0x....      BL       _ZN7Planner13blocks_queuedEv
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD1F9             BNE.N    ??synchronize_1
   \   00000010   0x....             LDR.N    R0,??DataTable20_4
   \   00000012   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD1F4             BNE.N    ??synchronize_1
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   1197          void Stepper::waitUntilEndOfAllBuffers() { while (planner.blocks_queued()) ;}
   \                     _ZN7Stepper24waitUntilEndOfAllBuffersEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \                     ??waitUntilEndOfAllBuffers_0: (+1)
   \   00000002   0x.... 0x....      BL       _ZN7Planner13blocks_queuedEv
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD1FB             BNE.N    ??waitUntilEndOfAllBuffers_0
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   1198          void Stepper:: waitUntilEndOfAllMoves()	{ }
   \                     _ZN7Stepper22waitUntilEndOfAllMovesEv: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1199          
   1200          /**
   1201           * Set the stepper positions directly in steps
   1202           *
   1203           * The input is based on the typical per-axis XYZ steps.
   1204           * For CORE machines XYZ needs to be translated to ABC.
   1205           *
   1206           * This allows get_axis_position_mm to correctly
   1207           * derive the current XYZ position later on.
   1208           */

   \                                 In section .text, align 4, keep-with-next
   1209          void Stepper::set_position(const long &a, const long &b, const long &c, const long &e) {
   \                     _ZN7Stepper12set_positionERKlS1_S1_S1_: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
   1210          
   1211            synchronize(); // Bad to set stepper counts in the middle of a move
   \   0000000C   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
   1212          
   1213            CRITICAL_SECTION_START;
   \   00000010   0xB672             cpsid i
   \   00000012   0x....             LDR.N    R0,??DataTable20
   \   00000014   0xF9B0 0x2058      LDRSH    R2,[R0, #+88]
   \   00000018   0x6821             LDR      R1,[R4, #+0]
   \   0000001A   0x.... 0x....      LDR.W    R8,??DataTable20_4
   \   0000001E   0x230C             MOVS     R3,#+12
   \   00000020   0x421A             TST      R2,R3
   \   00000022   0xD00E             BEQ.N    ??set_position_0
   1214          #if 0
   1215            #if CORE_IS_XY
   1216              // corexy positioning
   1217              // these equations follow the form of the dA and dB equations on http://www.corexy.com/theory.html
   1218              count_position[A_AXIS] = a + b;
   1219              count_position[B_AXIS] = CORESIGN(a - b);
   1220              count_position[Z_AXIS] = c;
   1221            #elif CORE_IS_XZ
   1222              // corexz planning
   1223              count_position[A_AXIS] = a + c;
   1224              count_position[Y_AXIS] = b;
   1225              count_position[C_AXIS] = CORESIGN(a - c);
   1226            #elif CORE_IS_YZ
   1227              // coreyz planning
   1228              count_position[X_AXIS] = a;
   1229              count_position[B_AXIS] = b + c;
   1230              count_position[C_AXIS] = CORESIGN(b - c);
   1231            #else
   1232              // default non-h-bot planning
   1233              count_position[X_AXIS] = a;
   1234              count_position[Y_AXIS] = b;
   1235              count_position[Z_AXIS] = c;
   1236            #endif
   1237          #endif
   1238            if(MACHINETPYE & CORE_IS_XY)
   1239            	{
   1240          	  count_position[A_AXIS] = a + b;
   \   00000024   0x6828             LDR      R0,[R5, #+0]
   \   00000026   0x1840             ADDS     R0,R0,R1
   \   00000028   0xF8C8 0x0010      STR      R0,[R8, #+16]
   1241          	  count_position[B_AXIS] = CORESIGN(a - b);
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x6829             LDR      R1,[R5, #+0]
   \   00000030   0x1A40             SUBS     R0,R0,R1
   \   00000032   0x.... 0x....      BL       _Z8CORESIGNl
   \   00000036   0xF8C8 0x0014      STR      R0,[R8, #+20]
   1242          	  count_position[Z_AXIS] = c;
   \   0000003A   0x6830             LDR      R0,[R6, #+0]
   \   0000003C   0xF8C8 0x0018      STR      R0,[R8, #+24]
   \   00000040   0xE028             B.N      ??set_position_1
   1243            	}
   1244            else if(MACHINETPYE & CORE_IS_XZ)
   \                     ??set_position_0: (+1)
   \   00000042   0x2330             MOVS     R3,#+48
   \   00000044   0x421A             TST      R2,R3
   \   00000046   0xD00E             BEQ.N    ??set_position_2
   1245            	{
   1246          	  count_position[A_AXIS] = a + c;
   \   00000048   0x6830             LDR      R0,[R6, #+0]
   \   0000004A   0x1840             ADDS     R0,R0,R1
   \   0000004C   0xF8C8 0x0010      STR      R0,[R8, #+16]
   1247          	  count_position[Y_AXIS] = b;
   \   00000050   0x6828             LDR      R0,[R5, #+0]
   \   00000052   0xF8C8 0x0014      STR      R0,[R8, #+20]
   1248          	  count_position[C_AXIS] = CORESIGN(a - c);
   \   00000056   0x6820             LDR      R0,[R4, #+0]
   \   00000058   0x6831             LDR      R1,[R6, #+0]
   \   0000005A   0x1A40             SUBS     R0,R0,R1
   \   0000005C   0x.... 0x....      BL       _Z8CORESIGNl
   \   00000060   0xF8C8 0x0018      STR      R0,[R8, #+24]
   \   00000064   0xE016             B.N      ??set_position_1
   1249            	}
   1250            else if(MACHINETPYE & CORE_IS_YZ)
   \                     ??set_position_2: (+1)
   \   00000066   0x20C0             MOVS     R0,#+192
   \   00000068   0x4202             TST      R2,R0
   \   0000006A   0xF8C8 0x1010      STR      R1,[R8, #+16]
   \   0000006E   0x6828             LDR      R0,[R5, #+0]
   \   00000070   0xD00B             BEQ.N    ??set_position_3
   1251            	{
   1252          	  count_position[X_AXIS] = a;
   1253          	  count_position[B_AXIS] = b + c;
   \   00000072   0x6831             LDR      R1,[R6, #+0]
   \   00000074   0x1808             ADDS     R0,R1,R0
   \   00000076   0xF8C8 0x0014      STR      R0,[R8, #+20]
   1254          	  count_position[C_AXIS] = CORESIGN(b - c);
   \   0000007A   0x6828             LDR      R0,[R5, #+0]
   \   0000007C   0x6831             LDR      R1,[R6, #+0]
   \   0000007E   0x1A40             SUBS     R0,R0,R1
   \   00000080   0x.... 0x....      BL       _Z8CORESIGNl
   \   00000084   0xF8C8 0x0018      STR      R0,[R8, #+24]
   \   00000088   0xE004             B.N      ??set_position_1
   1255            	}
   1256            else
   1257            	{
   1258          	  count_position[X_AXIS] = a;
   1259          	  count_position[Y_AXIS] = b;
   \                     ??set_position_3: (+1)
   \   0000008A   0xF8C8 0x0014      STR      R0,[R8, #+20]
   1260          	  count_position[Z_AXIS] = c;
   \   0000008E   0x6830             LDR      R0,[R6, #+0]
   \   00000090   0xF8C8 0x0018      STR      R0,[R8, #+24]
   1261            	}
   1262          
   1263            count_position[E_AXIS] = e;
   \                     ??set_position_1: (+1)
   \   00000094   0x6838             LDR      R0,[R7, #+0]
   \   00000096   0xF8C8 0x001C      STR      R0,[R8, #+28]
   1264            CRITICAL_SECTION_END;
   \   0000009A   0xB662             cpsie i
   1265          }
   \   0000009C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1266          

   \                                 In section .text, align 4, keep-with-next
   1267          void Stepper::set_position(const AxisEnum &axis, const long &v) {
   1268            CRITICAL_SECTION_START;
   \                     _ZN7Stepper12set_positionERK8AxisEnumRKl: (+1)
   \   00000000   0xB672             cpsid i
   1269            count_position[axis] = v;
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF990 0x0000      LDRSB    R0,[R0, #+0]
   \   00000008   0x....             LDR.N    R2,??DataTable20_4
   \   0000000A   0xEB02 0x0080      ADD      R0,R2,R0, LSL #+2
   \   0000000E   0x6101             STR      R1,[R0, #+16]
   1270            CRITICAL_SECTION_END;
   \   00000010   0xB662             cpsie i
   1271          }
   \   00000012   0x4770             BX       LR               ;; return
   1272          

   \                                 In section .text, align 4, keep-with-next
   1273          void Stepper::set_e_position(const long &e) {
   1274            CRITICAL_SECTION_START;
   \                     _ZN7Stepper14set_e_positionERKl: (+1)
   \   00000000   0xB672             cpsid i
   1275            count_position[E_AXIS] = e;
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x....             LDR.N    R1,??DataTable20_4
   \   00000006   0x61C8             STR      R0,[R1, #+28]
   1276            CRITICAL_SECTION_END;
   \   00000008   0xB662             cpsie i
   1277          }
   \   0000000A   0x4770             BX       LR               ;; return
   1278          
   1279          /**
   1280           * Get a stepper's position in steps.
   1281           */

   \                                 In section .text, align 4, keep-with-next
   1282          long Stepper::position(const AxisEnum axis) {
   1283            CRITICAL_SECTION_START;
   \                     _ZN7Stepper8positionE8AxisEnum: (+1)
   \   00000000   0xB672             cpsid i
   1284            const long count_pos = count_position[axis];
   \   00000002   0x....             LDR.N    R1,??DataTable20_4
   \   00000004   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   00000008   0x6900             LDR      R0,[R0, #+16]
   1285            CRITICAL_SECTION_END;
   \   0000000A   0xB662             cpsie i
   1286            return count_pos;
   \   0000000C   0x4770             BX       LR               ;; return
   1287          }
   1288          
   1289          /**
   1290           * Get an axis position according to stepper position(s)
   1291           * For CORE machines apply translation from ABC to XYZ.
   1292           */

   \                                 In section .text, align 4, keep-with-next
   1293          float Stepper::get_axis_position_mm(const AxisEnum axis) {
   \                     _ZN7Stepper20get_axis_position_mmE8AxisEnum: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   1294            float axis_steps;
   1295            //#if IS_CORE
   1296            if(MACHINETPYE & IS_CORE) {
   \   00000004   0x....             LDR.N    R0,??DataTable20
   \   00000006   0xF890 0x0058      LDRB     R0,[R0, #+88]
   \   0000000A   0x21FC             MOVS     R1,#+252
   \   0000000C   0x4208             TST      R0,R1
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0xD026             BEQ.N    ??get_axis_position_mm_0
   1297              // Requesting one of the "core" axes?
   1298              if (axis == CORE_AXIS_1 || axis == CORE_AXIS_2) {
   \   00000012   0x....             LDR.N    R1,??DataTable20_16
   \   00000014   0x7C0A             LDRB     R2,[R1, #+16]
   \   00000016   0x4290             CMP      R0,R2
   \   00000018   0xD002             BEQ.N    ??get_axis_position_mm_1
   \   0000001A   0x7C4A             LDRB     R2,[R1, #+17]
   \   0000001C   0x4290             CMP      R0,R2
   \   0000001E   0xD119             BNE.N    ??get_axis_position_mm_2
   1299                CRITICAL_SECTION_START;
   \                     ??get_axis_position_mm_1: (+1)
   \   00000020   0xB672             cpsid i
   1300                // ((a1+a2)+(a1-a2))/2 -> (a1+a2+a1-a2)/2 -> (a1+a1)/2 -> a1
   1301                // ((a1+a2)-(a1-a2))/2 -> (a1+a2-a1+a2)/2 -> (a2+a2)/2 -> a2
   1302                axis_steps = 0.5f * (
   1303                  axis == CORE_AXIS_2 ? CORESIGN(count_position[CORE_AXIS_1] - count_position[CORE_AXIS_2])
   1304                                      : count_position[CORE_AXIS_1] + count_position[CORE_AXIS_2]
   1305                );
   \   00000022   0x7C4A             LDRB     R2,[R1, #+17]
   \   00000024   0x....             LDR.N    R3,??DataTable20_4
   \   00000026   0xEB03 0x0582      ADD      R5,R3,R2, LSL #+2
   \   0000002A   0x7C09             LDRB     R1,[R1, #+16]
   \   0000002C   0xEB03 0x0181      ADD      R1,R3,R1, LSL #+2
   \   00000030   0x4290             CMP      R0,R2
   \   00000032   0x6908             LDR      R0,[R1, #+16]
   \   00000034   0x6929             LDR      R1,[R5, #+16]
   \   00000036   0xD103             BNE.N    ??get_axis_position_mm_3
   \   00000038   0x1A40             SUBS     R0,R0,R1
   \   0000003A   0x.... 0x....      BL       _Z8CORESIGNl
   \   0000003E   0xE000             B.N      ??get_axis_position_mm_4
   \                     ??get_axis_position_mm_3: (+1)
   \   00000040   0x1808             ADDS     R0,R1,R0
   \                     ??get_axis_position_mm_4: (+1)
   \   00000042   0x.... 0x....      BL       __aeabi_i2f
   \   00000046   0xF04F 0x517C      MOV      R1,#+1056964608
   \   0000004A   0x.... 0x....      BL       __aeabi_fmul
   \   0000004E   0x4601             MOV      R1,R0
   1306                CRITICAL_SECTION_END;
   \   00000050   0xB662             cpsie i
   \   00000052   0xE00A             B.N      ??get_axis_position_mm_5
   1307              }
   1308              else
   1309                axis_steps = position(axis);
   \                     ??get_axis_position_mm_2: (+1)
   \   00000054   0x.... 0x....      BL       _ZN7Stepper8positionE8AxisEnum
   \   00000058   0x.... 0x....      BL       __aeabi_i2f
   \   0000005C   0x4601             MOV      R1,R0
   \   0000005E   0xE004             B.N      ??get_axis_position_mm_5
   1310            	}
   1311            //#else
   1312            else
   1313            {
   1314              axis_steps = position(axis);
   \                     ??get_axis_position_mm_0: (+1)
   \   00000060   0x.... 0x....      BL       _ZN7Stepper8positionE8AxisEnum
   \   00000064   0x.... 0x....      BL       __aeabi_i2f
   \   00000068   0x4601             MOV      R1,R0
   1315            }
   1316            //#endif
   1317            return axis_steps * planner.steps_to_mm[axis];
   \                     ??get_axis_position_mm_5: (+1)
   \   0000006A   0x....             LDR.N    R0,??DataTable20_17
   \   0000006C   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000070   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000074   0x.... 0x....      B.W      __aeabi_fmul
   1318          }
   1319          

   \                                 In section .text, align 2, keep-with-next
   1320          void Stepper::finish_and_disable() {
   \                     _ZN7Stepper18finish_and_disableEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1321            synchronize();
   \   00000002   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
   1322            disable_all_steppers();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x.... 0x....      B.W      _Z20disable_all_steppersv
   1323          }

   \                                 In section .text, align 2, keep-with-next
   1324          void Stepper::finish_and_disable_noZ() {
   \                     _ZN7Stepper22finish_and_disable_noZEv: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1325            synchronize();
   \   00000002   0x.... 0x....      BL       _ZN7Stepper11synchronizeEv
   1326            disable_noZ_steppers();
   \   00000006   0xE8BD 0x4001      POP      {R0,LR}
   \   0000000A   0x.... 0x....      B.W      _Z20disable_noZ_steppersv
   1327          }
   1328          

   \                                 In section .text, align 2, keep-with-next
   1329          void Stepper::quick_stop() {
   \                     _ZN7Stepper10quick_stopEv: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1330            cleaning_buffer_counter = 5000;
   \   00000002   0x....             LDR.N    R4,??DataTable20_4
   \   00000004   0xF241 0x3088      MOVW     R0,#+5000
   \   00000008   0x8160             STRH     R0,[R4, #+10]
   1331            DISABLE_STEPPER_DRIVER_INTERRUPT();
   \   0000000A   0x....             LDR.N    R5,??DataTable20_1
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
   \   00000012   0xE001             B.N      ??quick_stop_0
   1332            while (planner.blocks_queued()) planner.discard_current_block();
   \                     ??quick_stop_1: (+1)
   \   00000014   0x.... 0x....      BL       _ZN7Planner21discard_current_blockEv
   \                     ??quick_stop_0: (+1)
   \   00000018   0x.... 0x....      BL       _ZN7Planner13blocks_queuedEv
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD1F9             BNE.N    ??quick_stop_1
   1333            current_block = NULL;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x6220             STR      R0,[R4, #+32]
   1334            ENABLE_STEPPER_DRIVER_INTERRUPT();
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000002A   0x.... 0x....      B.W      HAL_TIM_Base_Start_IT
   1335            #if ENABLED(ULTRA_LCD)
   1336              planner.clear_block_buffer_runtime();
   1337            #endif
   1338          }
   1339          

   \                                 In section .text, align 2, keep-with-next
   1340          void Stepper::endstop_triggered(AxisEnum axis) {
   \                     _ZN7Stepper17endstop_triggeredE8AxisEnum: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   1341          
   1342            //#if IS_CORE
   1343            if(MACHINETPYE & IS_CORE) {
   \   00000004   0x....             LDR.N    R4,??DataTable20_4
   \   00000006   0x....             LDR.N    R0,??DataTable20
   \   00000008   0xF890 0x0058      LDRB     R0,[R0, #+88]
   \   0000000C   0x21FC             MOVS     R1,#+252
   \   0000000E   0x4208             TST      R0,R1
   \   00000010   0xD01C             BEQ.N    ??endstop_triggered_0
   1344          
   1345              endstops_trigsteps[axis] = 0.5f * (
                                              ^
Warning[Pa093]: implicit conversion from floating point to integer

      static bool blocks_queued() { return (block_buffer_head != block_buffer_tail); }
                                    ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\planner.h",549  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        _NEXT_ISR(acceleration_time);
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.h",384  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        _NEXT_ISR(ocr_val);
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",445  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        NOLESS(OCR1A, TCNT1 + 16);
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",446  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

      _NEXT_ISR(200);                             // Run at max speed - 10 KHz
      ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",470  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        _NEXT_ISR(2000); // Run at slow speed - 1 KHz
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",506  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        PULSE_STOP(X);
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",688  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        PULSE_STOP(Y);
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",691  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        Z_PULSE_STOP(Z);
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",694  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

          PULSE_STOP(E);
          ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",711  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

      _NEXT_ISR(ocr_val);
      ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",761  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

      _NEXT_ISR(ocr_val);
      ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",794  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

      _NEXT_ISR(ocr_val);
      ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",824  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

      NOLESS(OCR1A, TCNT1 + 16);
      ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",831  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

        axis_steps = 0.5f * (
        ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",1302  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement

      endstops_trigsteps[axis] = 0.5f * (
      ^
"E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Third_Party\Marlin\stepper.cpp",1345  Warning[Pa082]: 
          undefined behavior: the order of volatile accesses is undefined in
          this statement
   1346                axis == CORE_AXIS_2 ? CORESIGN(count_position[CORE_AXIS_1] - count_position[CORE_AXIS_2])
   1347                                    : count_position[CORE_AXIS_1] + count_position[CORE_AXIS_2]
   1348              );
   \   00000012   0x....             LDR.N    R0,??DataTable20_16
   \   00000014   0x7C41             LDRB     R1,[R0, #+17]
   \   00000016   0xEB04 0x0281      ADD      R2,R4,R1, LSL #+2
   \   0000001A   0x7C00             LDRB     R0,[R0, #+16]
   \   0000001C   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \   00000020   0x462B             MOV      R3,R5
   \   00000022   0x428B             CMP      R3,R1
   \   00000024   0x6900             LDR      R0,[R0, #+16]
   \   00000026   0x6911             LDR      R1,[R2, #+16]
   \   00000028   0xD103             BNE.N    ??endstop_triggered_1
   \   0000002A   0x1A40             SUBS     R0,R0,R1
   \   0000002C   0x.... 0x....      BL       _Z8CORESIGNl
   \   00000030   0xE000             B.N      ??endstop_triggered_2
   \                     ??endstop_triggered_1: (+1)
   \   00000032   0x1808             ADDS     R0,R1,R0
   \                     ??endstop_triggered_2: (+1)
   \   00000034   0x.... 0x....      BL       __aeabi_i2f
   \   00000038   0xF04F 0x517C      MOV      R1,#+1056964608
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x.... 0x....      BL       __aeabi_f2iz
   \   00000044   0xEB04 0x0185      ADD      R1,R4,R5, LSL #+2
   \   00000048   0x6408             STR      R0,[R1, #+64]
   \   0000004A   0xE003             B.N      ??endstop_triggered_3
   1349            }
   \                     ??endstop_triggered_0: (+1)
   \   0000004C   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   00000050   0x6901             LDR      R1,[R0, #+16]
   \   00000052   0x6401             STR      R1,[R0, #+64]
   1350            else
   1351            //#else // !COREXY && !COREXZ && !COREYZ
   1352            {
   1353              endstops_trigsteps[axis] = count_position[axis];
   1354            }
   1355            //#endif // !COREXY && !COREXZ && !COREYZ
   1356          
   1357            kill_current_block();
   \                     ??endstop_triggered_3: (+1)
   \   00000054   0x.... 0x....      BL       _ZN7Stepper18kill_current_blockEv
   1358            cleaning_buffer_counter = -1; // Discard the rest of the move
   \   00000058   0xF04F 0x30FF      MOV      R0,#-1
   \   0000005C   0x8160             STRH     R0,[R4, #+10]
   1359          }
   \   0000005E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1360          

   \                                 In section .text, align 4, keep-with-next
   1361          void Stepper::report_positions() {
   \                     _ZN7Stepper16report_positionsEv: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   1362            CRITICAL_SECTION_START;
   \   00000004   0xB672             cpsid i
   1363            const long xpos = count_position[X_AXIS],
   \   00000006   0x....             LDR.N    R0,??DataTable20_4
   \   00000008   0x6904             LDR      R4,[R0, #+16]
   1364                       ypos = count_position[Y_AXIS],
   \   0000000A   0x6945             LDR      R5,[R0, #+20]
   1365                       zpos = count_position[Z_AXIS];
   \   0000000C   0x6986             LDR      R6,[R0, #+24]
   1366            CRITICAL_SECTION_END;
   \   0000000E   0xB662             cpsie i
   1367          
   1368            //#if CORE_IS_XY || CORE_IS_XZ || IS_SCARA
   1369            if(MACHINETPYE&IS_SCARA || MACHINETPYE&CORE_IS_XZ || MACHINETPYE&IS_SCARA)
   \   00000010   0x....             LDR.N    R7,??DataTable20
   \   00000012   0xF9B7 0x0058      LDRSH    R0,[R7, #+88]
   \   00000016   0xF44F 0x714C      MOV      R1,#+816
   \   0000001A   0x4208             TST      R0,R1
   \   0000001C   0xD103             BNE.N    ??report_positions_0
   \   0000001E   0xF44F 0x7140      MOV      R1,#+768
   \   00000022   0x4208             TST      R0,R1
   \   00000024   0xD004             BEQ.N    ??report_positions_1
   1370              {SERIAL_PROTOCOLPGM(MSG_COUNT_A);}
   \                     ??report_positions_0: (+1)
   \   00000026   0x.... 0x....      ADR.W    R0,`?<Constant " Count A:">`
   \   0000002A   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   0000002E   0xE003             B.N      ??report_positions_2
   1371            //#else
   1372            else
   1373              {SERIAL_PROTOCOLPGM(MSG_COUNT_X);}
   \                     ??report_positions_1: (+1)
   \   00000030   0x.... 0x....      ADR.W    R0,`?<Constant " Count X:">`
   \   00000034   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1374            //#endif
   1375            SERIAL_PROTOCOL(xpos);
   \                     ??report_positions_2: (+1)
   \   00000038   0x.... 0x....      LDR.W    R8,??DataTable20_18
   \   0000003C   0x220A             MOVS     R2,#+10
   \   0000003E   0x4621             MOV      R1,R4
   \   00000040   0x4640             MOV      R0,R8
   \   00000042   0x.... 0x....      BL       _ZN5Print5printEli
   1376          
   1377            //#if CORE_IS_XY || CORE_IS_YZ || IS_SCARA
   1378            if(MACHINETPYE&CORE_IS_XY || MACHINETPYE&CORE_IS_YZ || MACHINETPYE&IS_SCARA)
   \   00000046   0xF8B7 0x0058      LDRH     R0,[R7, #+88]
   \   0000004A   0xF44F 0x7173      MOV      R1,#+972
   \   0000004E   0x4208             TST      R0,R1
   \   00000050   0xD003             BEQ.N    ??report_positions_3
   1379              {SERIAL_PROTOCOLPGM(" B:");}
   \   00000052   0x....             ADR.N    R0,??DataTable20_8  ;; " B:"
   \   00000054   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   00000058   0xE002             B.N      ??report_positions_4
   1380            //#else
   1381            else
   1382              {SERIAL_PROTOCOLPGM(" Y:");}
   \                     ??report_positions_3: (+1)
   \   0000005A   0x....             ADR.N    R0,??DataTable20_9  ;; " Y:"
   \   0000005C   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1383            //#endif
   1384            SERIAL_PROTOCOL(ypos);
   \                     ??report_positions_4: (+1)
   \   00000060   0x220A             MOVS     R2,#+10
   \   00000062   0x4629             MOV      R1,R5
   \   00000064   0x4640             MOV      R0,R8
   \   00000066   0x.... 0x....      BL       _ZN5Print5printEli
   1385          
   1386            //#if CORE_IS_XZ || CORE_IS_YZ
   1387            if(MACHINETPYE&CORE_IS_XZ || MACHINETPYE&CORE_IS_YZ)
   \   0000006A   0xF897 0x0058      LDRB     R0,[R7, #+88]
   \   0000006E   0x21F0             MOVS     R1,#+240
   \   00000070   0x4208             TST      R0,R1
   \   00000072   0xD003             BEQ.N    ??report_positions_5
   1388              {SERIAL_PROTOCOLPGM(" C:");}
   \   00000074   0x....             ADR.N    R0,??DataTable20_11  ;; " C:"
   \   00000076   0x.... 0x....      BL       _Z14serialprintPGMPKc
   \   0000007A   0xE002             B.N      ??report_positions_6
   1389            //#else
   1390            else
   1391              {SERIAL_PROTOCOLPGM(" Z:");}
   \                     ??report_positions_5: (+1)
   \   0000007C   0x....             ADR.N    R0,??DataTable20_12  ;; " Z:"
   \   0000007E   0x.... 0x....      BL       _Z14serialprintPGMPKc
   1392            //#endif
   1393            SERIAL_PROTOCOL(zpos);
   \                     ??report_positions_6: (+1)
   \   00000082   0x220A             MOVS     R2,#+10
   \   00000084   0x4631             MOV      R1,R6
   \   00000086   0x4640             MOV      R0,R8
   \   00000088   0x.... 0x....      BL       _ZN5Print5printEli
   1394          
   1395            SERIAL_EOL();
   \   0000008C   0x210A             MOVS     R1,#+10
   \   0000008E   0x4640             MOV      R0,R8
   \   00000090   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000094   0x.... 0x....      B.W      _ZN10USARTClass5writeEh
   1396          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   0x........         DC32     mksCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   0x........         DC32     htim2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   0x........         DC32     gArrayGpioPort

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   0x........         DC32     gArrayGpioPin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   0x........         DC32     _ZN7Stepper15count_directionE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   0x........         DC32     htim4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   0x........         DC32     _ZN8Endstops7enabledE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   0x........         DC32     _ZN8Endstops15z_probe_enabledE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   0x20 0x42          DC8      " B:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   0x20 0x59          DC8      " Y:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   0x........         DC32     _ZN11Temperature11in_temp_isrE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   0x20 0x43          DC8      " C:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   0x20 0x5A          DC8      " Z:"
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   0x........         DC32     _ZN8Endstops16old_endstop_bitsE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   0x........         DC32     endstops

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   0x........         DC32     axis_known_position

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   0x........         DC32     mksTmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   0x........         DC32     _ZN7Planner11steps_to_mmE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   0x........         DC32     Serial3

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "M84 X Y Z E">`:
   \   00000000   0x4D 0x38          DC8 "M84 X Y Z E"
   \              0x34 0x20    
   \              0x58 0x20    
   \              0x59 0x20    
   \              0x5A 0x20    
   \              0x45 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Count A:">`:
   \   00000000   0x20 0x43          DC8 " Count A:"
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x20 0x41    
   \              0x3A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Count X:">`:
   \   00000000   0x20 0x43          DC8 " Count X:"
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x20 0x58    
   \              0x3A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " B:">`:
   \   00000000   0x20 0x42          DC8 " B:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Y:">`:
   \   00000000   0x20 0x59          DC8 " Y:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " C:">`:
   \   00000000   0x20 0x43          DC8 " C:"
   \              0x3A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Z:">`:
   \   00000000   0x20 0x5A          DC8 " Z:"
   \              0x3A 0x00    
   1397          
   1398          #if ENABLED(BABYSTEPPING)
   1399          
   1400            #if ENABLED(DELTA)
   1401              #define CYCLES_EATEN_BABYSTEP (2 * 15)
   1402            #else
   1403              #define CYCLES_EATEN_BABYSTEP 0
   1404            #endif
   1405            #define EXTRA_CYCLES_BABYSTEP (STEP_PULSE_CYCLES - (CYCLES_EATEN_BABYSTEP))
   1406          
   1407            #define _ENABLE(AXIS) enable_## AXIS()
   1408            #define _READ_DIR(AXIS) AXIS ##_DIR_READ
   1409            #define _INVERT_DIR(AXIS) INVERT_## AXIS ##_DIR
   1410            #define _APPLY_DIR(AXIS, INVERT) AXIS ##_APPLY_DIR(INVERT, true)
   1411          
   1412            #if EXTRA_CYCLES_BABYSTEP > 20
   1413              #define _SAVE_START const uint32_t pulse_start = TCNT0
   1414              #define _PULSE_WAIT while (EXTRA_CYCLES_BABYSTEP > (uint32_t)(TCNT0 - pulse_start) * (INT0_PRESCALER)) { /* nada */ }
   1415            #else
   1416              #define _SAVE_START NOOP
   1417              #if EXTRA_CYCLES_BABYSTEP > 0
   1418                #define _PULSE_WAIT DELAY_NOPS(EXTRA_CYCLES_BABYSTEP)
   1419              #elif STEP_PULSE_CYCLES > 0
   1420                #define _PULSE_WAIT NOOP
   1421              #elif ENABLED(DELTA)
   1422                #define _PULSE_WAIT delayMicroseconds(2);
   1423              #else
   1424                #define _PULSE_WAIT delayMicroseconds(4);
   1425              #endif
   1426            #endif
   1427          
   1428            #define BABYSTEP_AXIS(AXIS, INVERT) {                     \
   1429                const uint8_t old_dir = _READ_DIR(AXIS);              \
   1430                _ENABLE(AXIS);                                        \
   1431                _SAVE_START;                                          \
   1432                _APPLY_DIR(AXIS, _INVERT_DIR(AXIS)^direction^INVERT); \
   1433                _APPLY_STEP(AXIS)(!_INVERT_STEP_PIN(AXIS), true);     \
   1434                _PULSE_WAIT;                                          \
   1435                _APPLY_STEP(AXIS)(_INVERT_STEP_PIN(AXIS), true);      \
   1436                _APPLY_DIR(AXIS, old_dir);                            \
   1437              }
   1438          
   1439            // MUST ONLY BE CALLED BY AN ISR,
   1440            // No other ISR should ever interrupt this!
   1441            void Stepper::babystep(const AxisEnum axis, const bool direction) {
   1442              cli();
   1443          
   1444              switch (axis) {
   1445          
   1446                #if ENABLED(BABYSTEP_XY)
   1447          
   1448                  case X_AXIS:
   1449                    BABYSTEP_AXIS(X, false);
   1450                    break;
   1451          
   1452                  case Y_AXIS:
   1453                    BABYSTEP_AXIS(Y, false);
   1454                    break;
   1455          
   1456                #endif
   1457          
   1458                case Z_AXIS: {
   1459          
   1460                  #if DISABLED(DELTA)
   1461          
   1462                    BABYSTEP_AXIS(Z, BABYSTEP_INVERT_Z);
   1463          
   1464                  #else // DELTA
   1465          
   1466                    const bool z_direction = direction ^ BABYSTEP_INVERT_Z;
   1467          
   1468                    enable_X();
   1469                    enable_Y();
   1470                    enable_Z();
   1471          
   1472                    const uint8_t old_x_dir_pin = X_DIR_READ,
   1473                                  old_y_dir_pin = Y_DIR_READ,
   1474                                  old_z_dir_pin = Z_DIR_READ;
   1475          
   1476                    X_DIR_WRITE(INVERT_X_DIR ^ z_direction);
   1477                    Y_DIR_WRITE(INVERT_Y_DIR ^ z_direction);
   1478                    Z_DIR_WRITE(INVERT_Z_DIR ^ z_direction);
   1479          
   1480                    _SAVE_START;
   1481          
   1482                    X_STEP_WRITE(!INVERT_X_STEP_PIN);
   1483                    Y_STEP_WRITE(!INVERT_Y_STEP_PIN);
   1484                    Z_STEP_WRITE(!INVERT_Z_STEP_PIN);
   1485          
   1486                    _PULSE_WAIT;
   1487          
   1488                    X_STEP_WRITE(INVERT_X_STEP_PIN);
   1489                    Y_STEP_WRITE(INVERT_Y_STEP_PIN);
   1490                    Z_STEP_WRITE(INVERT_Z_STEP_PIN);
   1491          
   1492                    // Restore direction bits
   1493                    X_DIR_WRITE(old_x_dir_pin);
   1494                    Y_DIR_WRITE(old_y_dir_pin);
   1495                    Z_DIR_WRITE(old_z_dir_pin);
   1496          
   1497                  #endif
   1498          
   1499                } break;
   1500          
   1501                default: break;
   1502              }
   1503              sei();
   1504            }
   1505          
   1506          #endif // BABYSTEPPING
   1507          
   1508          /**
   1509           * Software-controlled Stepper Motor Current
   1510           */
   1511          
   1512          #if HAS_DIGIPOTSS
   1513          
   1514            // From Arduino DigitalPotControl example
   1515            void Stepper::digitalPotWrite(const int16_t address, const int16_t value) {
   1516              WRITE(DIGIPOTSS_PIN, LOW);  // Take the SS pin low to select the chip
   1517              SPI.transfer(address);      // Send the address and value via SPI
   1518              SPI.transfer(value);
   1519              WRITE(DIGIPOTSS_PIN, HIGH); // Take the SS pin high to de-select the chip
   1520              //delay(10);
   1521            }
   1522          
   1523          #endif // HAS_DIGIPOTSS
   1524          
   1525          #if HAS_MOTOR_CURRENT_PWM
   1526          
   1527            void Stepper::refresh_motor_power() {
   1528              for (uint8_t i = 0; i < COUNT(motor_current_setting); ++i) {
   1529                switch (i) {
   1530                  #if PIN_EXISTS(MOTOR_CURRENT_PWM_XY)
   1531                    case 0:
   1532                  #endif
   1533                  #if PIN_EXISTS(MOTOR_CURRENT_PWM_Z)
   1534                    case 1:
   1535                  #endif
   1536                  #if PIN_EXISTS(MOTOR_CURRENT_PWM_E)
   1537                    case 2:
   1538                  #endif
   1539                      digipot_current(i, motor_current_setting[i]);
   1540                  default: break;
   1541                }
   1542              }
   1543            }
   1544          
   1545          #endif // HAS_MOTOR_CURRENT_PWM
   1546          
   1547          #if HAS_DIGIPOTSS || HAS_MOTOR_CURRENT_PWM
   1548          
   1549            void Stepper::digipot_current(const uint8_t driver, const int current) {
   1550          
   1551              #if HAS_DIGIPOTSS
   1552          
   1553                const uint8_t digipot_ch[] = DIGIPOT_CHANNELS;
   1554                digitalPotWrite(digipot_ch[driver], current);
   1555          
   1556              #elif HAS_MOTOR_CURRENT_PWM
   1557          
   1558                if (WITHIN(driver, 0, 2))
   1559                  motor_current_setting[driver] = current; // update motor_current_setting
   1560          
   1561                #define _WRITE_CURRENT_PWM(P) analogWrite(MOTOR_CURRENT_PWM_## P ##_PIN, 255L * current / (MOTOR_CURRENT_PWM_RANGE))
   1562                switch (driver) {
   1563                  #if PIN_EXISTS(MOTOR_CURRENT_PWM_XY)
   1564                    case 0: _WRITE_CURRENT_PWM(XY); break;
   1565                  #endif
   1566                  #if PIN_EXISTS(MOTOR_CURRENT_PWM_Z)
   1567                    case 1: _WRITE_CURRENT_PWM(Z); break;
   1568                  #endif
   1569                  #if PIN_EXISTS(MOTOR_CURRENT_PWM_E)
   1570                    case 2: _WRITE_CURRENT_PWM(E); break;
   1571                  #endif
   1572                }
   1573              #endif
   1574            }
   1575          
   1576            void Stepper::digipot_init() {
   1577          
   1578              #if HAS_DIGIPOTSS
   1579          
   1580                static const uint8_t digipot_motor_current[] = DIGIPOT_MOTOR_CURRENT;
   1581          
   1582                SPI.begin();
   1583                SET_OUTPUT(DIGIPOTSS_PIN);
   1584          
   1585                for (uint8_t i = 0; i < COUNT(digipot_motor_current); i++) {
   1586                  //digitalPotWrite(digipot_ch[i], digipot_motor_current[i]);
   1587                  digipot_current(i, digipot_motor_current[i]);
   1588                }
   1589          
   1590              #elif HAS_MOTOR_CURRENT_PWM
   1591          
   1592                #if PIN_EXISTS(MOTOR_CURRENT_PWM_XY)
   1593                  SET_OUTPUT(MOTOR_CURRENT_PWM_XY_PIN);
   1594                #endif
   1595                #if PIN_EXISTS(MOTOR_CURRENT_PWM_Z)
   1596                  SET_OUTPUT(MOTOR_CURRENT_PWM_Z_PIN);
   1597                #endif
   1598                #if PIN_EXISTS(MOTOR_CURRENT_PWM_E)
   1599                  SET_OUTPUT(MOTOR_CURRENT_PWM_E_PIN);
   1600                #endif
   1601          
   1602                refresh_motor_power();
   1603          
   1604                // Set Timer5 to 31khz so the PWM of the motor power is as constant as possible. (removes a buzzing noise)
   1605                SET_CS5(PRESCALER_1);
   1606          
   1607              #endif
   1608            }
   1609          
   1610          #endif
   1611          
   1612          #if HAS_MICROSTEPS
   1613          
   1614            /**
   1615             * Software-controlled Microstepping
   1616             */
   1617          
   1618            void Stepper::microstep_init() {
   1619              SET_OUTPUT(X_MS1_PIN);
   1620              SET_OUTPUT(X_MS2_PIN);
   1621              #if HAS_Y_MICROSTEPS
   1622                SET_OUTPUT(Y_MS1_PIN);
   1623                SET_OUTPUT(Y_MS2_PIN);
   1624              #endif
   1625              #if HAS_Z_MICROSTEPS
   1626                SET_OUTPUT(Z_MS1_PIN);
   1627                SET_OUTPUT(Z_MS2_PIN);
   1628              #endif
   1629              #if HAS_E0_MICROSTEPS
   1630                SET_OUTPUT(E0_MS1_PIN);
   1631                SET_OUTPUT(E0_MS2_PIN);
   1632              #endif
   1633              #if HAS_E1_MICROSTEPS
   1634                SET_OUTPUT(E1_MS1_PIN);
   1635                SET_OUTPUT(E1_MS2_PIN);
   1636              #endif
   1637              #if HAS_E2_MICROSTEPS
   1638                SET_OUTPUT(E2_MS1_PIN);
   1639                SET_OUTPUT(E2_MS2_PIN);
   1640              #endif
   1641              #if HAS_E3_MICROSTEPS
   1642                SET_OUTPUT(E3_MS1_PIN);
   1643                SET_OUTPUT(E3_MS2_PIN);
   1644              #endif
   1645              #if HAS_E4_MICROSTEPS
   1646                SET_OUTPUT(E4_MS1_PIN);
   1647                SET_OUTPUT(E4_MS2_PIN);
   1648              #endif
   1649              static const uint8_t microstep_modes[] = MICROSTEP_MODES;
   1650              for (uint16_t i = 0; i < COUNT(microstep_modes); i++)
   1651                microstep_mode(i, microstep_modes[i]);
   1652            }
   1653          
   1654            void Stepper::microstep_ms(const uint8_t driver, const int8_t ms1, const int8_t ms2) {
   1655              if (ms1 >= 0) switch (driver) {
   1656                case 0: WRITE(X_MS1_PIN, ms1); break;
   1657                #if HAS_Y_MICROSTEPS
   1658                  case 1: WRITE(Y_MS1_PIN, ms1); break;
   1659                #endif
   1660                #if HAS_Z_MICROSTEPS
   1661                  case 2: WRITE(Z_MS1_PIN, ms1); break;
   1662                #endif
   1663                #if HAS_E0_MICROSTEPS
   1664                  case 3: WRITE(E0_MS1_PIN, ms1); break;
   1665                #endif
   1666                #if HAS_E1_MICROSTEPS
   1667                  case 4: WRITE(E1_MS1_PIN, ms1); break;
   1668                #endif
   1669                #if HAS_E2_MICROSTEPS
   1670                  case 5: WRITE(E2_MS1_PIN, ms1); break;
   1671                #endif
   1672                #if HAS_E3_MICROSTEPS
   1673                  case 6: WRITE(E3_MS1_PIN, ms1); break;
   1674                #endif
   1675                #if HAS_E4_MICROSTEPS
   1676                  case 7: WRITE(E4_MS1_PIN, ms1); break;
   1677                #endif
   1678              }
   1679              if (ms2 >= 0) switch (driver) {
   1680                case 0: WRITE(X_MS2_PIN, ms2); break;
   1681                #if HAS_Y_MICROSTEPS
   1682                  case 1: WRITE(Y_MS2_PIN, ms2); break;
   1683                #endif
   1684                #if HAS_Z_MICROSTEPS
   1685                  case 2: WRITE(Z_MS2_PIN, ms2); break;
   1686                #endif
   1687                #if HAS_E0_MICROSTEPS
   1688                  case 3: WRITE(E0_MS2_PIN, ms2); break;
   1689                #endif
   1690                #if HAS_E1_MICROSTEPS
   1691                  case 4: WRITE(E1_MS2_PIN, ms2); break;
   1692                #endif
   1693                #if HAS_E2_MICROSTEPS
   1694                  case 5: WRITE(E2_MS2_PIN, ms2); break;
   1695                #endif
   1696                #if HAS_E3_MICROSTEPS
   1697                  case 6: WRITE(E3_MS2_PIN, ms2); break;
   1698                #endif
   1699                #if HAS_E4_MICROSTEPS
   1700                  case 7: WRITE(E4_MS2_PIN, ms2); break;
   1701                #endif
   1702              }
   1703            }
   1704          
   1705            void Stepper::microstep_mode(const uint8_t driver, const uint8_t stepping_mode) {
   1706              switch (stepping_mode) {
   1707                case 1: microstep_ms(driver, MICROSTEP1); break;
   1708                case 2: microstep_ms(driver, MICROSTEP2); break;
   1709                case 4: microstep_ms(driver, MICROSTEP4); break;
   1710                case 8: microstep_ms(driver, MICROSTEP8); break;
   1711                case 16: microstep_ms(driver, MICROSTEP16); break;
   1712              }
   1713            }
   1714          
   1715            void Stepper::microstep_readings() {
   1716              SERIAL_PROTOCOLLNPGM("MS1,MS2 Pins");
   1717              SERIAL_PROTOCOLPGM("X: ");
   1718              SERIAL_PROTOCOL(READ(X_MS1_PIN));
   1719              SERIAL_PROTOCOLLN(READ(X_MS2_PIN));
   1720              #if HAS_Y_MICROSTEPS
   1721                SERIAL_PROTOCOLPGM("Y: ");
   1722                SERIAL_PROTOCOL(READ(Y_MS1_PIN));
   1723                SERIAL_PROTOCOLLN(READ(Y_MS2_PIN));
   1724              #endif
   1725              #if HAS_Z_MICROSTEPS
   1726                SERIAL_PROTOCOLPGM("Z: ");
   1727                SERIAL_PROTOCOL(READ(Z_MS1_PIN));
   1728                SERIAL_PROTOCOLLN(READ(Z_MS2_PIN));
   1729              #endif
   1730              #if HAS_E0_MICROSTEPS
   1731                SERIAL_PROTOCOLPGM("E0: ");
   1732                SERIAL_PROTOCOL(READ(E0_MS1_PIN));
   1733                SERIAL_PROTOCOLLN(READ(E0_MS2_PIN));
   1734              #endif
   1735              #if HAS_E1_MICROSTEPS
   1736                SERIAL_PROTOCOLPGM("E1: ");
   1737                SERIAL_PROTOCOL(READ(E1_MS1_PIN));
   1738                SERIAL_PROTOCOLLN(READ(E1_MS2_PIN));
   1739              #endif
   1740              #if HAS_E2_MICROSTEPS
   1741                SERIAL_PROTOCOLPGM("E2: ");
   1742                SERIAL_PROTOCOL(READ(E2_MS1_PIN));
   1743                SERIAL_PROTOCOLLN(READ(E2_MS2_PIN));
   1744              #endif
   1745              #if HAS_E3_MICROSTEPS
   1746                SERIAL_PROTOCOLPGM("E3: ");
   1747                SERIAL_PROTOCOL(READ(E3_MS1_PIN));
   1748                SERIAL_PROTOCOLLN(READ(E3_MS2_PIN));
   1749              #endif
   1750              #if HAS_E4_MICROSTEPS
   1751                SERIAL_PROTOCOLPGM("E4: ");
   1752                SERIAL_PROTOCOL(READ(E4_MS1_PIN));
   1753                SERIAL_PROTOCOLLN(READ(E4_MS2_PIN));
   1754              #endif
   1755            }
   1756          
   1757          #endif // HAS_MICROSTEPS

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   CORESIGN(long)
       0   Endstops::enable(bool)
       0   IsrStepperHandler
         0   -> Stepper::StepperHandler()
       0   Planner::blocks_queued()
       8   Planner::discard_continued_block()
         8   -> Planner::blocks_queued()
         8   -> Planner::discard_current_block()
       8   Planner::discard_current_block()
         8   -> Planner::blocks_queued()
       8   Planner::get_current_block()
         8   -> Planner::blocks_queued()
      40   Stepper::StepperHandler()
        40   -> Endstops::update()
        40   -> HAL_GPIO_WritePin
         0   -> HAL_TIM_Base_Start_IT
        40   -> HAL_TIM_Base_Start_IT
        40   -> HAL_TIM_Base_Stop_IT
        40   -> Planner::discard_continued_block()
        40   -> Planner::discard_current_block()
        40   -> Planner::get_current_block()
        40   -> Stepper::calc_timer_interval(unsigned short)
        40   -> Stepper::trapezoid_generator_reset()
        40   -> enqueue_and_echo_commands_P(char const *)
       0   Stepper::calc_timer_interval(unsigned short)
      16   Stepper::endstop_triggered(AxisEnum)
        16   -> CORESIGN(long)
        16   -> Stepper::kill_current_block()
        16   -> __aeabi_f2iz
        16   -> __aeabi_fmul
        16   -> __aeabi_i2f
       8   Stepper::finish_and_disable()
         8   -> Stepper::synchronize()
         0   -> disable_all_steppers()
       8   Stepper::finish_and_disable_noZ()
         8   -> Stepper::synchronize()
         0   -> disable_noZ_steppers()
      16   Stepper::get_axis_position_mm(AxisEnum)
        16   -> CORESIGN(long)
        16   -> Stepper::position(AxisEnum)
         0   -> __aeabi_fmul
        16   -> __aeabi_fmul
        16   -> __aeabi_i2f
      24   Stepper::init()
        24   -> Endstops::enable(bool)
        24   -> Endstops::init()
        24   -> HAL_GPIO_WritePin
        24   -> HAL_TIM_Base_Start_IT
         0   -> Stepper::set_directions()
       0   Stepper::kill_current_block()
       0   Stepper::motor_direction(AxisEnum)
       0   Stepper::position(AxisEnum)
      16   Stepper::quick_stop()
         0   -> HAL_TIM_Base_Start_IT
        16   -> HAL_TIM_Base_Stop_IT
        16   -> Planner::blocks_queued()
        16   -> Planner::discard_current_block()
      24   Stepper::report_positions()
        24   -> Print::print(long, int)
         0   -> USARTClass::write(uint8_t)
        24   -> serialprintPGM(char const *)
      32   Stepper::set_directions()
        32   -> HAL_GPIO_WritePin
        32   -> Stepper::motor_direction(AxisEnum)
       0   Stepper::set_e_position(long const &)
       0   Stepper::set_position(AxisEnum const &, long const &)
      24   Stepper::set_position(long const &, long const &, long const &, long const &)
        24   -> CORESIGN(long)
        24   -> Stepper::synchronize()
       8   Stepper::synchronize()
         8   -> Planner::blocks_queued()
         8   -> idle()
      16   Stepper::trapezoid_generator_reset()
        16   -> Stepper::calc_timer_interval(unsigned short)
        16   -> Stepper::set_directions()
       8   Stepper::waitUntilEndOfAllBuffers()
         8   -> Planner::blocks_queued()
       0   Stepper::waitUntilEndOfAllMoves()
       0   Stepper::wake_up()
         0   -> HAL_TIM_Base_Start_IT
       8   serialprintPGM(char const *)
         8   -> USARTClass::write(uint8_t)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant " B:">
       4  ?<Constant " C:">
      12  ?<Constant " Count A:">
      12  ?<Constant " Count X:">
       4  ?<Constant " Y:">
       4  ?<Constant " Z:">
      12  ?<Constant "M84 X Y Z E">
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable20_10
       4  ??DataTable20_11
       4  ??DataTable20_12
       4  ??DataTable20_13
       4  ??DataTable20_14
       4  ??DataTable20_15
       4  ??DataTable20_16
       4  ??DataTable20_17
       4  ??DataTable20_18
       4  ??DataTable20_2
       4  ??DataTable20_3
       4  ??DataTable20_4
       4  ??DataTable20_5
       4  ??DataTable20_6
       4  ??DataTable20_7
       4  ??DataTable20_8
       4  ??DataTable20_9
      18  CORESIGN(long)
      12  Endstops::enable(bool)
       4  IsrStepperHandler
      28  Planner::blocks_queued()
      56  Planner::discard_continued_block()
      28  Planner::discard_current_block()
      44  Planner::get_current_block()
    1762  Stepper::StepperHandler()
      84  Stepper::calc_timer_interval(unsigned short)
      80  Stepper::count_direction
          Stepper::performing_homing
          Stepper::last_direction_bits
          Stepper::locked_z_motor
          Stepper::locked_z2_motor
          Stepper::step_loops
          Stepper::step_loops_nominal
          Stepper::cleaning_buffer_counter
          Stepper::OCR1A_nominal
          Stepper::acc_step_rate
          Stepper::count_position
          Stepper::current_block
          Stepper::counter_X
          Stepper::counter_Y
          Stepper::counter_Z
          Stepper::counter_E
          Stepper::step_events_completed
          Stepper::acceleration_time
          Stepper::deceleration_time
          Stepper::endstops_trigsteps
          step_remaining
      96  Stepper::endstop_triggered(AxisEnum)
      14  Stepper::finish_and_disable()
      14  Stepper::finish_and_disable_noZ()
     120  Stepper::get_axis_position_mm(AxisEnum)
     344  Stepper::init()
      16  Stepper::kill_current_block()
      28  Stepper::motor_direction(AxisEnum)
      14  Stepper::position(AxisEnum)
      46  Stepper::quick_stop()
     152  Stepper::report_positions()
     366  Stepper::set_directions()
      12  Stepper::set_e_position(long const &)
      20  Stepper::set_position(AxisEnum const &, long const &)
     160  Stepper::set_position(long const &, long const &, long const &, long const &)
      28  Stepper::synchronize()
     112  Stepper::trapezoid_generator_reset()
      12  Stepper::waitUntilEndOfAllBuffers()
       2  Stepper::waitUntilEndOfAllMoves()
       8  Stepper::wake_up()
       1  last_extruder
      28  serialprintPGM(char const *)
       4  stepper
       1  -- Other

 
     4 bytes in section .bss
    81 bytes in section .data
    17 bytes in section .rodata
 3 740 bytes in section .text
 
 3 304 bytes of CODE  memory (+ 436 bytes shared)
    16 bytes of CONST memory (+   1 byte  shared)
    84 bytes of DATA  memory (+   1 byte  shared)

Errors: none
Warnings: 34
