###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:00
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUITask.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUITask.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUITask.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUITask.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUITask.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUITASK.C
     16          Purpose     : Saves/Restores task context with supported OSs.
     17                        It also uses a resource semaphore.
     18          
     19            The following externals are used and should typically be defined
     20            in GUI_X.c:
     21            
     22              U32  GUI_X_GetTaskId();
     23              void GUI_X_Unlock();
     24              void GUI_X_Lock();
     25          
     26          ----------------------------------------------------------------------
     27          Version-Date---Author-Explanation
     28          ----------------------------------------------------------------------
     29          3.70    031016 TQ     GUI_MAXTASK set to 4
     30          3.60    030902 TQ     GUI_MAXTASK increased to 6
     31          3.52    030618 RS     GUI_MAX_LOCK_NESTING increased
     32          3.40    030228 RS     GUI_MAX_LOCK_NESTING introduced
     33          3.02a   020722 RS     Use of macro GUI_DEBUG_ERROROUT_IF in order
     34                                to simplify th code.
     35          3.02    020514 RS     Avoided nested calls of GUI_X_Lock, GUI_X_Unlock
     36                                (because some RTOSes, such as CMX and u/C-OS
     37                                could not handle this easily)
     38          3.00    010425 RS     Cleanup for Version 3.00
     39                                a) Dummy routines added to avoid link errors
     40                                  in case some modules are compiled with
     41                                  different settings
     42          1.00.01 990926 RS     Fix in order to make sure init task has no
     43                                context of its own (_CurrentTaskNo =-1)
     44          1.00.00 990918 RS     Initial version for version control purposes.
     45          ---------------------------END-OF-HEADER------------------------------
     46          */
     47          
     48          #include <stddef.h>           /* needed for definition of NULL */
     49          #include "GUI_Protected.h"
     50          #include "GUIDebug.h"
     51          
     52          /*********************************************************************
     53          *
     54          *       Configuration defaults
     55          *
     56          **********************************************************************
     57          */
     58          
     59          #ifndef GUI_MAXTASK
     60            #define GUI_MAXTASK (4)
     61          #endif
     62          
     63          #ifndef GUI_MAX_LOCK_NESTING
     64            #define GUI_MAX_LOCK_NESTING 48   /* If a lot of nested dialogs are used, this may not be sufficient. */
     65          #endif
     66          
     67          #if GUI_OS
     68          
     69          /*********************************************************************
     70          *
     71          *       Static data
     72          *
     73          **********************************************************************
     74          */
     75          
     76          static struct {
     77            U32  TaskID;
     78            GUI_CONTEXT Context;
     79          } _Save[GUI_MAXTASK];
     80          
     81          static int _CurrentTaskNo = -1;
     82          static int _EntranceCnt   =  0;
     83          static U32 _TaskIDLock = 0;
     84          
     85          /*********************************************************************
     86          *
     87          *       Static code
     88          *
     89          **********************************************************************
     90          */
     91          /*********************************************************************
     92          *
     93          *       _GetTaskNo
     94          */
     95          static int _GetTaskNo(void) {
     96            int i;
     97            for (i=0; i< GUI_MAXTASK; i++) {
     98              U32 TaskId = GUI_X_GetTaskId();
     99              if (_Save[i].TaskID == TaskId)
    100                return i;
    101              if (_Save[i].TaskID == 0) {
    102                _Save[i].TaskID = TaskId;
    103                return i;
    104              }
    105            }
    106            GUI_DEBUG_ERROROUT("No Context available for task ... (increase GUI_MAXTASK)");
    107            return 0;
    108          }
    109          
    110          /*********************************************************************
    111          *
    112          *       Public code
    113          *
    114          **********************************************************************
    115          */
    116          /*********************************************************************
    117          *
    118          *       GUI_Unlock
    119          */
    120          void GUI_Unlock(void) {
    121            if (--_EntranceCnt == 0) {
    122              GUI_X_Unlock();
    123            }
    124            /* Test if _EntranceCnt is in reasonable range ... Not required in release builds */
    125            GUI_DEBUG_ERROROUT_IF((_EntranceCnt < 0), "GUITASK.c: GUI_Unlock() _EntranceCnt underflow ");
    126          }
    127          
    128          /*********************************************************************
    129          *
    130          *       GUI_Lock
    131          */
    132          void GUI_Lock(void) {
    133            if (_EntranceCnt == 0) {
    134              GUI_X_Lock();
    135              _TaskIDLock = GUI_X_GetTaskId();         /* Save task ID */
    136            } else {
    137              if (_TaskIDLock != GUI_X_GetTaskId()) {
    138                GUI_X_Lock();
    139                _TaskIDLock = GUI_X_GetTaskId();         /* Save task ID */
    140              }
    141            }
    142            if (++_EntranceCnt == 1) {
    143              int TaskNo = _GetTaskNo();
    144              if (TaskNo != _CurrentTaskNo) {
    145                /* Save data of current task */
    146                if (_CurrentTaskNo>=0) {  /* Make sure _CurrentTaskNo is valid */
    147                  _Save[_CurrentTaskNo].Context = GUI_Context;
    148                  /* Load data of this task */
    149                  GUI_Context = _Save[TaskNo].Context;
    150                }
    151                _CurrentTaskNo = TaskNo;
    152              }
    153            }
    154            /* Test if _EntranceCnt is in reasonable range ... Not required in release builds */
    155            GUI_DEBUG_ERROROUT_IF((_EntranceCnt > GUI_MAX_LOCK_NESTING), "GUITASK.c: GUI_Lock() _EntranceCnt overflow ");
    156          }
    157          
    158          /*********************************************************************
    159          *
    160          *       GUITASK_Init
    161          */
    162          void GUITASK_Init(void) {
    163            _CurrentTaskNo =-1;   /* Invalidate */
    164            GUI_X_InitOS();
    165          }
    166          
    167          
    168          /*********************************************************************
    169          *
    170          *       GUITASK_CopyContext
    171          */
    172          void GUITASK_CopyContext(void) {
    173            int i;
    174            for (i = 0; i < GUI_MAXTASK; i++) {
    175              _Save[i].Context = GUI_Context;
    176              _Save[i].TaskID  = 0;
    177            }
    178          }
    179          
    180          
    181          #if defined(WIN32) && defined(_DEBUG)
    182          
    183          /*********************************************************************
    184          *
    185          *       GUITASK_AssertLock
    186          *
    187          */
    188          void GUITASK_AssertLock(void) {  
    189            if (!_EntranceCnt) {
    190              GUI_DEBUG_ERROROUT("GUITASK.c: GUITASK_AssertLock failed!");
    191            }
    192          }
    193          
    194          /*********************************************************************
    195          *
    196          *       GUITASK_AssertNoLock
    197          *
    198          */
    199          void GUITASK_AssertNoLock(void) {  
    200            GUI_Lock();
    201            if (_EntranceCnt > 1) {
    202              GUI_DEBUG_ERROROUT("GUITASK.c: GUITASK_AssertNoLock failed!");
    203            }
    204            GUI_Unlock();
    205          }
    206          
    207          #endif
    208          
    209          #else
    210          
    211          /*********************************************************************
    212          *
    213          *       Dummy Kernel routines
    214          *
    215          * The routines below are dummies in case configuration tells us not
    216          * to use any kernel. In this case the routines below should
    217          * not be required, but it can not hurt to have them. The linker
    218          * will eliminate them anyhow.
    219          */
    220          void GUI_Unlock(void);

   \                                 In section .text, align 2, keep-with-next
    221          void GUI_Unlock(void) {}
   \                     GUI_Unlock: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    222          void GUI_Lock(void);

   \                                 In section .text, align 2, keep-with-next
    223          void GUI_Lock(void) {}
   \                     GUI_Lock: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    224          void GUITASK_Init(void);

   \                                 In section .text, align 2, keep-with-next
    225          void GUITASK_Init(void) {}
   \                     GUITASK_Init: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    226          void GUITASK_StoreDefaultContext(void);

   \                                 In section .text, align 2, keep-with-next
    227          void GUITASK_StoreDefaultContext(void) {}
   \                     GUITASK_StoreDefaultContext: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    228          
    229          #endif
    230          
    231          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GUITASK_Init
       0   GUITASK_StoreDefaultContext
       0   GUI_Lock
       0   GUI_Unlock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  GUITASK_Init
       2  GUITASK_StoreDefaultContext
       2  GUI_Lock
       2  GUI_Unlock

 
 8 bytes in section .text
 
 8 bytes of CODE memory

Errors: none
Warnings: none
