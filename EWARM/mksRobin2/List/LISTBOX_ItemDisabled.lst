###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX_ItemDisabled.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX_ItemDisabled.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\LISTBOX_ItemDisabled.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LISTBOX_ItemDisabled.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX_ItemDisabled.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LISTBOX_ItemDisabled.c
     16          Purpose     : Implementation of listbox widget
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stdlib.h>
     21          #include "GUI_ARRAY.h"
     22          #include "LISTBOX_Private.h"
     23          #include "GUIDebug.h"
     24          #include "GUI_Protected.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Exported routines:  Various methods
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       LISTBOX_GetItemDisabled
     38          */

   \                                 In section .text, align 2, keep-with-next
     39          int LISTBOX_GetItemDisabled(LISTBOX_Handle hObj, unsigned Index) {
   \                     LISTBOX_GetItemDisabled: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
     40            int Ret = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     41            if (hObj) {
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD013             BEQ.N    ??LISTBOX_GetItemDisabled_0
     42              unsigned NumItems;
     43              LISTBOX_Obj* pObj;
     44              WM_LOCK();
     45              pObj = LISTBOX_H2P(hObj);
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000E   0x4606             MOV      R6,R0
     46              NumItems = LISTBOX__GetNumItems(pObj);
     47              if (Index < NumItems) {
   \   00000010   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000014   0x4284             CMP      R4,R0
   \   00000016   0xD20C             BCS.N    ??LISTBOX_GetItemDisabled_0
     48                WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Index);
   \   00000018   0x4621             MOV      R1,R4
   \   0000001A   0xF106 0x0028      ADD      R0,R6,#+40
   \   0000001E   0x.... 0x....      BL       GUI_ARRAY_GethItem
     49                if (hItem) {
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD005             BEQ.N    ??LISTBOX_GetItemDisabled_0
     50                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
   \   00000026   0x.... 0x....      BL       GUI_ALLOC_h2p
     51                  if (pItem->Status & LISTBOX_ITEM_DISABLED) {
   \   0000002A   0x7900             LDRB     R0,[R0, #+4]
   \   0000002C   0x0780             LSLS     R0,R0,#+30
   \   0000002E   0xD500             BPL.N    ??LISTBOX_GetItemDisabled_0
     52                    Ret = 1;
   \   00000030   0x2501             MOVS     R5,#+1
     53                  }
     54                }
     55              }
     56              WM_UNLOCK();
     57            }
     58            return Ret;
   \                     ??LISTBOX_GetItemDisabled_0: (+1)
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
     59          }
     60          
     61          /*********************************************************************
     62          *
     63          *       LISTBOX_SetItemDisabled
     64          */

   \                                 In section .text, align 2, keep-with-next
     65          void LISTBOX_SetItemDisabled(LISTBOX_Handle hObj, unsigned Index, int OnOff) {
   \                     LISTBOX_SetItemDisabled: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4617             MOV      R7,R2
     66            if (hObj) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD02A             BEQ.N    ??LISTBOX_SetItemDisabled_0
     67              unsigned NumItems;
     68              LISTBOX_Obj* pObj;
     69              WM_LOCK();
     70              pObj = LISTBOX_H2P(hObj);
   \   0000000C   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000010   0x4606             MOV      R6,R0
     71              NumItems = LISTBOX__GetNumItems(pObj);
     72              if (Index < NumItems) {
   \   00000012   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000016   0x4285             CMP      R5,R0
   \   00000018   0xD223             BCS.N    ??LISTBOX_SetItemDisabled_0
     73                WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Index);
   \   0000001A   0x4629             MOV      R1,R5
   \   0000001C   0xF106 0x0028      ADD      R0,R6,#+40
   \   00000020   0x.... 0x....      BL       GUI_ARRAY_GethItem
     74                if (hItem) {
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD01C             BEQ.N    ??LISTBOX_SetItemDisabled_0
     75                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
   \   00000028   0x.... 0x....      BL       GUI_ALLOC_h2p
     76                  if (OnOff) {
   \   0000002C   0x7901             LDRB     R1,[R0, #+4]
   \   0000002E   0x2F00             CMP      R7,#+0
   \   00000030   0xD00B             BEQ.N    ??LISTBOX_SetItemDisabled_1
     77                    if (!(pItem->Status & LISTBOX_ITEM_DISABLED)) {
   \   00000032   0x078A             LSLS     R2,R1,#+30
   \   00000034   0xD415             BMI.N    ??LISTBOX_SetItemDisabled_0
     78                      pItem->Status |= LISTBOX_ITEM_DISABLED;
   \   00000036   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000003A   0x7101             STRB     R1,[R0, #+4]
     79                      LISTBOX__InvalidateItem(hObj, pObj, Index);
   \   0000003C   0x462A             MOV      R2,R5
   \   0000003E   0x4631             MOV      R1,R6
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000046   0x.... 0x....      B.W      LISTBOX__InvalidateItem
     80                    }
     81                  } else {
     82                    if (pItem->Status & LISTBOX_ITEM_DISABLED) {
   \                     ??LISTBOX_SetItemDisabled_1: (+1)
   \   0000004A   0x078A             LSLS     R2,R1,#+30
   \   0000004C   0xD509             BPL.N    ??LISTBOX_SetItemDisabled_0
     83                      pItem->Status &= ~LISTBOX_ITEM_DISABLED;
   \   0000004E   0xF001 0x01FD      AND      R1,R1,#0xFD
   \   00000052   0x7101             STRB     R1,[R0, #+4]
     84                      LISTBOX__InvalidateItem(hObj, pObj, Index);
   \   00000054   0x462A             MOV      R2,R5
   \   00000056   0x4631             MOV      R1,R6
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   0000005E   0x.... 0x....      B.W      LISTBOX__InvalidateItem
     85                    }
     86                  }
     87                }
     88              }
     89              WM_UNLOCK();
     90            }
     91          }
   \                     ??LISTBOX_SetItemDisabled_0: (+1)
   \   00000062   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     92          
     93          #else                            /* Avoid problems with empty object modules */
     94            void LISTBOX_ItemDisabled_C(void) {}
     95          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   LISTBOX_GetItemDisabled
        16   -> GUI_ALLOC_h2p
        16   -> GUI_ARRAY_GethItem
        16   -> LISTBOX__GetNumItems
      24   LISTBOX_SetItemDisabled
        24   -> GUI_ALLOC_h2p
        24   -> GUI_ARRAY_GethItem
        24   -> LISTBOX__GetNumItems
         0   -> LISTBOX__InvalidateItem


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      54  LISTBOX_GetItemDisabled
     100  LISTBOX_SetItemDisabled

 
 154 bytes in section .text
 
 154 bytes of CODE memory

Errors: none
Warnings: none
