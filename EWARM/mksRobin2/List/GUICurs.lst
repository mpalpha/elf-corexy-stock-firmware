###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:59
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUICurs.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUICurs.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUICurs.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUICurs.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUICurs.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUICurs.C
     16          Purpose     : Cursor routines of the graphics library
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>           /* needed for definition of NULL */
     21          #include "GUI_Private.h"
     22          
     23          #if GUI_SUPPORT_CURSOR
     24          
     25          /*********************************************************************
     26          *
     27          *       static data
     28          *
     29          **********************************************************************
     30          */
     31          

   \                                 In section .bss, align 4
     32          static GUI_HMEM          _hBuffer;
     33          static GUI_RECT          _Rect;
     34          static char              _CursorIsVis;        /* Currently visible ? */
   \                     _CursorIsVis:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \   00000004                      DS8 8
   \   0000000C                      DS8 2
   \   0000000E                      DS8 2
   \   00000010                      DS8 8
   \   00000018                      DS8 8
   \   00000020                      DS8 4
   \   00000024                      DS8 4
   \   00000028                      DS8 4
   \   0000002C                      DS8 4
     35          static char              _CursorOn;
     36          static const GUI_CURSOR GUI_UNI_PTR * _pCursor;
     37          static U8                _CursorDeActCnt;
     38          static int               _AllocSize;
     39          static int               _x, _y;              /* Position of hot spot */
     40          static GUI_RECT          _ClipRect;
     41          static LCD_PIXELINDEX    _ColorIndex[4];      /* Color-Cache */
     42          
     43          /*********************************************************************
     44          *
     45          *       static code, helper functions
     46          *
     47          **********************************************************************
     48          */
     49          /*********************************************************************
     50          *
     51          *       _SetPixelIndex
     52          *
     53          * Purpose
     54          *   Sets the pixel index for the Cursor.
     55          *   Note the following:
     56          *   - We do the clipping in this routine
     57          *   - We do NOT call the driver directly, but thru its API table.
     58          *     This allows others (e.g. the VNC server) to be in the loop-
     59          */

   \                                 In section .text, align 2, keep-with-next
     60          static void _SetPixelIndex(int x, int y, int Index) {
   \                     _SetPixelIndex: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
     61            if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable14
   \   00000006   0xF9B3 0x401A      LDRSH    R4,[R3, #+26]
   \   0000000A   0x42A1             CMP      R1,R4
   \   0000000C   0xDB12             BLT.N    ??_SetPixelIndex_0
   \   0000000E   0xF9B3 0x401E      LDRSH    R4,[R3, #+30]
   \   00000012   0x428C             CMP      R4,R1
   \   00000014   0xDB0E             BLT.N    ??_SetPixelIndex_0
     62              if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
   \   00000016   0xF9B3 0x4018      LDRSH    R4,[R3, #+24]
   \   0000001A   0x42A0             CMP      R0,R4
   \   0000001C   0xDB0A             BLT.N    ??_SetPixelIndex_0
   \   0000001E   0xF9B3 0x301C      LDRSH    R3,[R3, #+28]
   \   00000022   0x4283             CMP      R3,R0
   \   00000024   0xDB06             BLT.N    ??_SetPixelIndex_0
     63                LCD_aAPI[0]->pfSetPixelIndex(x, y, Index);
   \   00000026   0x.... 0x....      LDR.W    R3,??DataTable14_1
   \   0000002A   0x681B             LDR      R3,[R3, #+0]
   \   0000002C   0x6A5B             LDR      R3,[R3, #+36]
   \   0000002E   0xB001             ADD      SP,SP,#+4
   \   00000030   0xBC10             POP      {R4}
   \   00000032   0x4718             BX       R3
     64              }
     65            }
     66          }
   \                     ??_SetPixelIndex_0: (+1)
   \   00000034   0xBC11             POP      {R0,R4}
   \   00000036   0x4770             BX       LR               ;; return
     67          
     68          /*********************************************************************
     69          *
     70          *       _GetPixelIndex
     71          *
     72          * Purpose
     73          *   Gets a pixel index for the Cursor.
     74          */

   \                                 In section .text, align 2, keep-with-next
     75          static int _GetPixelIndex(int x, int y) {
     76            if ((y >= _ClipRect.y0) && (y <= _ClipRect.y1)) {
   \                     _GetPixelIndex: (+1)
   \   00000000   0x.... 0x....      LDR.W    R2,??DataTable14
   \   00000004   0xF9B2 0x301A      LDRSH    R3,[R2, #+26]
   \   00000008   0x4299             CMP      R1,R3
   \   0000000A   0xDB0D             BLT.N    ??_GetPixelIndex_0
   \   0000000C   0xF9B2 0x301E      LDRSH    R3,[R2, #+30]
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xDB09             BLT.N    ??_GetPixelIndex_0
     77              if ((x >= _ClipRect.x0) && (x <= _ClipRect.x1)) {
   \   00000014   0xF9B2 0x3018      LDRSH    R3,[R2, #+24]
   \   00000018   0x4298             CMP      R0,R3
   \   0000001A   0xDB05             BLT.N    ??_GetPixelIndex_0
   \   0000001C   0xF9B2 0x201C      LDRSH    R2,[R2, #+28]
   \   00000020   0x4282             CMP      R2,R0
   \   00000022   0xDB01             BLT.N    ??_GetPixelIndex_0
     78                return LCD_L0_GetPixelIndex(x, y);
   \   00000024   0x.... 0x....      B.W      LCD_L0_GetPixelIndex
     79              }
     80            }
     81            return 0;
   \                     ??_GetPixelIndex_0: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x4770             BX       LR               ;; return
     82          }
     83          
     84          /*********************************************************************
     85          *
     86          *       _Undraw
     87          *
     88          * Purpose
     89          *   Remove the cursors
     90          */

   \                                 In section .text, align 2, keep-with-next
     91          static void _Undraw(void) {
   \                     _Undraw: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
     92            int x, y, xSize, ySize;
     93            LCD_PIXELINDEX* pData;
     94            /* Save bitmap data */
     95            GUI_LOCK();
     96            if (_hBuffer) {
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable14
   \   00000008   0xF9B4 0x000C      LDRSH    R0,[R4, #+12]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD02C             BEQ.N    ??_Undraw_0
     97              pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
   \   00000010   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000014   0x4605             MOV      R5,R0
     98              xSize = _Rect.x1 - _Rect.x0 + 1;
   \   00000016   0xF9B4 0x0008      LDRSH    R0,[R4, #+8]
   \   0000001A   0xF9B4 0x1004      LDRSH    R1,[R4, #+4]
   \   0000001E   0x1A40             SUBS     R0,R0,R1
   \   00000020   0x1C46             ADDS     R6,R0,#+1
     99              ySize = _Rect.y1 - _Rect.y0 + 1;
   \   00000022   0xF9B4 0x000A      LDRSH    R0,[R4, #+10]
   \   00000026   0xF9B4 0x1006      LDRSH    R1,[R4, #+6]
   \   0000002A   0x1A40             SUBS     R0,R0,R1
   \   0000002C   0x1C47             ADDS     R7,R0,#+1
    100              for (y = 0; y < ySize; y++) {
   \   0000002E   0xF04F 0x0800      MOV      R8,#+0
   \   00000032   0xE015             B.N      ??_Undraw_1
    101                for (x = 0; x < xSize; x++) {
    102                  _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pData + x));
   \                     ??_Undraw_2: (+1)
   \   00000034   0xF835 0x2019      LDRH     R2,[R5, R9, LSL #+1]
   \   00000038   0xF9B4 0x0006      LDRSH    R0,[R4, #+6]
   \   0000003C   0xEB00 0x0108      ADD      R1,R0,R8
   \   00000040   0xF9B4 0x0004      LDRSH    R0,[R4, #+4]
   \   00000044   0x4448             ADD      R0,R0,R9
   \   00000046   0x.... 0x....      BL       _SetPixelIndex
    103                }
   \   0000004A   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??_Undraw_3: (+1)
   \   0000004E   0x45B1             CMP      R9,R6
   \   00000050   0xDBF0             BLT.N    ??_Undraw_2
    104                pData += _pCursor->pBitmap->XSize;
   \   00000052   0x6A20             LDR      R0,[R4, #+32]
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0xEB05 0x0540      ADD      R5,R5,R0, LSL #+1
   \   0000005C   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??_Undraw_1: (+1)
   \   00000060   0x45B8             CMP      R8,R7
   \   00000062   0xDA02             BGE.N    ??_Undraw_0
   \   00000064   0xF04F 0x0900      MOV      R9,#+0
   \   00000068   0xE7F1             B.N      ??_Undraw_3
    105              }
    106            }
    107            GUI_UNLOCK();
    108          }
   \                     ??_Undraw_0: (+1)
   \   0000006A   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    109          
    110          /*********************************************************************
    111          *
    112          *       _Log2Phys
    113          */

   \                                 In section .text, align 2, keep-with-next
    114          static int _Log2Phys(int Index) {
    115            if (Index < 4) {
   \                     _Log2Phys: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable14
   \   00000004   0x2804             CMP      R0,#+4
   \   00000006   0xDA03             BGE.N    ??_Log2Phys_0
    116              return _ColorIndex[Index];
   \   00000008   0xEB01 0x0040      ADD      R0,R1,R0, LSL #+1
   \   0000000C   0x8A00             LDRH     R0,[R0, #+16]
   \   0000000E   0x4770             BX       LR
    117            } else {
    118              LCD_COLOR Color = *(_pCursor->pBitmap->pPal->pPalEntries + Index);
    119              return LCD_Color2Index(Color);
   \                     ??_Log2Phys_0: (+1)
   \   00000010   0x6A09             LDR      R1,[R1, #+32]
   \   00000012   0x6809             LDR      R1,[R1, #+0]
   \   00000014   0x68C9             LDR      R1,[R1, #+12]
   \   00000016   0x6889             LDR      R1,[R1, #+8]
   \   00000018   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   0000001C   0x.... 0x....      B.W      LCD_Color2Index
    120            }
    121          }
    122          
    123          /*********************************************************************
    124          *
    125          *       _Draw
    126          */

   \                                 In section .text, align 2, keep-with-next
    127          static void _Draw(void) {
   \                     _Draw: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    128            int x, y, xSize, ySize;
    129            LCD_PIXELINDEX* pData;
    130            const GUI_BITMAP GUI_UNI_PTR * pBM;
    131            GUI_LOCK();
    132            if (_hBuffer) {
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable14
   \   00000008   0xF9B4 0x000C      LDRSH    R0,[R4, #+12]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD040             BEQ.N    ??_Draw_0
    133              /* Save bitmap data */
    134              pBM = _pCursor->pBitmap;
   \   00000010   0x6A21             LDR      R1,[R4, #+32]
   \   00000012   0x680D             LDR      R5,[R1, #+0]
    135              pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
   \   00000014   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000018   0x4606             MOV      R6,R0
    136              xSize = _Rect.x1 - _Rect.x0 + 1;
   \   0000001A   0xF9B4 0x0008      LDRSH    R0,[R4, #+8]
   \   0000001E   0xF9B4 0x1004      LDRSH    R1,[R4, #+4]
   \   00000022   0x1A40             SUBS     R0,R0,R1
   \   00000024   0x1C47             ADDS     R7,R0,#+1
    137              ySize = _Rect.y1 - _Rect.y0 + 1;
   \   00000026   0xF9B4 0x000A      LDRSH    R0,[R4, #+10]
   \   0000002A   0xF9B4 0x1006      LDRSH    R1,[R4, #+6]
   \   0000002E   0x1A40             SUBS     R0,R0,R1
   \   00000030   0xF100 0x0801      ADD      R8,R0,#+1
    138              for (y = 0; y < ySize; y++) {
   \   00000034   0xF04F 0x0900      MOV      R9,#+0
   \   00000038   0xE026             B.N      ??_Draw_1
    139                for (x = 0; x < xSize; x++) {
    140                  int BitmapPixel;
    141                  *(pData + x) = _GetPixelIndex(_Rect.x0 + x, _Rect.y0 + y);
   \                     ??_Draw_2: (+1)
   \   0000003A   0xF9B4 0x0006      LDRSH    R0,[R4, #+6]
   \   0000003E   0xEB09 0x0100      ADD      R1,R9,R0
   \   00000042   0xF9B4 0x0004      LDRSH    R0,[R4, #+4]
   \   00000046   0x4450             ADD      R0,R10,R0
   \   00000048   0x.... 0x....      BL       _GetPixelIndex
   \   0000004C   0xF826 0x001A      STRH     R0,[R6, R10, LSL #+1]
    142                  BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
   \   00000050   0x464A             MOV      R2,R9
   \   00000052   0x4651             MOV      R1,R10
   \   00000054   0x4628             MOV      R0,R5
   \   00000056   0x.... 0x....      BL       GUI_GetBitmapPixelIndex
    143                  if (BitmapPixel) {
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD00B             BEQ.N    ??_Draw_3
    144                    _SetPixelIndex(_Rect.x0 + x, _Rect.y0 + y, _Log2Phys(BitmapPixel));
   \   0000005E   0x.... 0x....      BL       _Log2Phys
   \   00000062   0x4602             MOV      R2,R0
   \   00000064   0xF9B4 0x0006      LDRSH    R0,[R4, #+6]
   \   00000068   0xEB09 0x0100      ADD      R1,R9,R0
   \   0000006C   0xF9B4 0x0004      LDRSH    R0,[R4, #+4]
   \   00000070   0x4450             ADD      R0,R10,R0
   \   00000072   0x.... 0x....      BL       _SetPixelIndex
    145                  }
    146                }
   \                     ??_Draw_3: (+1)
   \   00000076   0xF10A 0x0A01      ADD      R10,R10,#+1
   \                     ??_Draw_4: (+1)
   \   0000007A   0x45BA             CMP      R10,R7
   \   0000007C   0xDBDD             BLT.N    ??_Draw_2
    147                pData += pBM->XSize;
   \   0000007E   0x8828             LDRH     R0,[R5, #+0]
   \   00000080   0xEB06 0x0640      ADD      R6,R6,R0, LSL #+1
   \   00000084   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??_Draw_1: (+1)
   \   00000088   0x45C1             CMP      R9,R8
   \   0000008A   0xDA02             BGE.N    ??_Draw_0
   \   0000008C   0xF04F 0x0A00      MOV      R10,#+0
   \   00000090   0xE7F3             B.N      ??_Draw_4
    148              }
    149            }
    150            GUI_UNLOCK();
    151          }
   \                     ??_Draw_0: (+1)
   \   00000092   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    152          
    153          /*********************************************************************
    154          *
    155          *       _CalcRect
    156          */

   \                                 In section .text, align 2, keep-with-next
    157          static void _CalcRect(void) {
    158            if (_pCursor) {
   \                     _CalcRect: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable14
   \   00000004   0x6A01             LDR      R1,[R0, #+32]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD100             BNE.N    ??_CalcRect_0
   \   0000000A   0x4770             BX       LR
    159              _Rect.x0 = _x - _pCursor->xHot;
   \                     ??_CalcRect_0: (+1)
   \   0000000C   0xB410             PUSH     {R4}
   \   0000000E   0x6A82             LDR      R2,[R0, #+40]
   \   00000010   0x684B             LDR      R3,[R1, #+4]
   \   00000012   0x1AD2             SUBS     R2,R2,R3
   \   00000014   0x8082             STRH     R2,[R0, #+4]
    160              _Rect.y0 = _y - _pCursor->yHot;
   \   00000016   0x6AC3             LDR      R3,[R0, #+44]
   \   00000018   0x688C             LDR      R4,[R1, #+8]
   \   0000001A   0x1B1B             SUBS     R3,R3,R4
   \   0000001C   0x80C3             STRH     R3,[R0, #+6]
    161              _Rect.x1 = _Rect.x0 + _pCursor->pBitmap->XSize - 1;
   \   0000001E   0x680B             LDR      R3,[R1, #+0]
   \   00000020   0xF9B3 0x3000      LDRSH    R3,[R3, #+0]
   \   00000024   0x189A             ADDS     R2,R3,R2
   \   00000026   0x1E52             SUBS     R2,R2,#+1
   \   00000028   0x8102             STRH     R2,[R0, #+8]
    162              _Rect.y1 = _Rect.y0 + _pCursor->pBitmap->YSize - 1;
   \   0000002A   0x88C2             LDRH     R2,[R0, #+6]
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   00000032   0x1889             ADDS     R1,R1,R2
   \   00000034   0x1E49             SUBS     R1,R1,#+1
   \   00000036   0x8141             STRH     R1,[R0, #+10]
    163            }
    164          }
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0x4770             BX       LR               ;; return
    165          
    166          /*********************************************************************
    167          *
    168          *       _Hide
    169          */

   \                                 In section .text, align 2, keep-with-next
    170          static void _Hide(void) {
   \                     _Hide: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    171            if (_CursorIsVis) {
   \   00000002   0x....             LDR.N    R4,??DataTable14
   \   00000004   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD003             BEQ.N    ??_Hide_0
    172              _Undraw();
   \   0000000C   0x.... 0x....      BL       _Undraw
    173              _CursorIsVis = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x7020             STRB     R0,[R4, #+0]
    174            }
    175          }
   \                     ??_Hide_0: (+1)
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    176          
    177          /*********************************************************************
    178          *
    179          *       _Show
    180          */

   \                                 In section .text, align 2, keep-with-next
    181          static void _Show(void) {
    182            if (_CursorOn && (_CursorDeActCnt==0)) {
   \                     _Show: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14
   \   00000002   0xF990 0x1001      LDRSB    R1,[R0, #+1]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD005             BEQ.N    ??_Show_0
   \   0000000A   0x7881             LDRB     R1,[R0, #+2]
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD102             BNE.N    ??_Show_0
    183              _CursorIsVis = 1;
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0x7001             STRB     R1,[R0, #+0]
    184              _Draw();  
   \   00000014   0x....             B.N      _Draw
    185            }
    186          }
   \                     ??_Show_0: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    187          
    188          /*********************************************************************
    189          *
    190          *       _TempHide
    191          *
    192          * Purpose:
    193          *   Hide cursor if a part of the given rectangle is located in the
    194          *   rectangle used for the cursor. This routine is called automatically
    195          *   by the window manager. This way the window manager can
    196          *   automatically make sure that the cursor is always displayed
    197          *   correctly.
    198          *
    199          * Params:
    200          *   pRect   Rectangle under consideration
    201          *
    202          * Return value:
    203          *   0:      No action taken
    204          *           Cursor was not visible or not affected because rectangles
    205          *           did not overlap
    206          *   1:      Cursor hidden -> WM needs to restore cursor after
    207          *           drawing operation
    208          */

   \                                 In section .text, align 2, keep-with-next
    209          static char _TempHide(const GUI_RECT* pRect) {
   \                     _TempHide: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    210            if (!_CursorIsVis) {
   \   00000002   0x....             LDR.N    R1,??DataTable14
   \   00000004   0xF991 0x2000      LDRSB    R2,[R1, #+0]
   \   00000008   0x2A00             CMP      R2,#+0
   \   0000000A   0xD00A             BEQ.N    ??_TempHide_0
    211              return 0;             /* Cursor not visible -> nothing to do */
    212            }
    213            if ((pRect == NULL) || GUI_RectsIntersect(pRect, &_Rect)) {
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD004             BEQ.N    ??_TempHide_1
   \   00000010   0x1D09             ADDS     R1,R1,#+4
   \   00000012   0x.... 0x....      BL       GUI_RectsIntersect
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD003             BEQ.N    ??_TempHide_0
    214              _Hide();              /* Cursor needs to be hidden */
   \                     ??_TempHide_1: (+1)
   \   0000001A   0x.... 0x....      BL       _Hide
    215              return 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD02             POP      {R1,PC}
    216            }
    217            return 0;               /* Cursor not affected -> nothing to do */
   \                     ??_TempHide_0: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD02             POP      {R1,PC}          ;; return
    218          }
    219          
    220          /*********************************************************************
    221          *
    222          *       _TempUnhide
    223          */

   \                                 In section .text, align 2, keep-with-next
    224          static void _TempUnhide(void) {
    225            _Show();
   \                     _TempUnhide: (+1)
   \   00000000   0x....             B.N      _Show
    226          }
    227          
    228          /*********************************************************************
    229          *
    230          *       Public code
    231          *
    232          **********************************************************************
    233          */
    234          /*********************************************************************
    235          *
    236          *       GUI_CURSOR_Activate
    237          */

   \                                 In section .text, align 2, keep-with-next
    238          void GUI_CURSOR_Activate(void) {
    239            GUI_LOCK();
    240            if ((--_CursorDeActCnt) ==0) {
   \                     GUI_CURSOR_Activate: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14
   \   00000002   0x7881             LDRB     R1,[R0, #+2]
   \   00000004   0x1E49             SUBS     R1,R1,#+1
   \   00000006   0x7081             STRB     R1,[R0, #+2]
   \   00000008   0xB2C9             UXTB     R1,R1
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD100             BNE.N    ??GUI_CURSOR_Activate_0
    241              _Show();
   \   0000000E   0x....             B.N      _Show
    242            }
    243            GUI_UNLOCK();
    244          }
   \                     ??GUI_CURSOR_Activate_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
    245          
    246          /*********************************************************************
    247          *
    248          *       GUI_CURSOR_Deactivate
    249          */

   \                                 In section .text, align 2, keep-with-next
    250          void GUI_CURSOR_Deactivate(void) {
    251            GUI_LOCK();
    252            if (_CursorDeActCnt++ ==0)
   \                     GUI_CURSOR_Deactivate: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable14
   \   00000002   0x7881             LDRB     R1,[R0, #+2]
   \   00000004   0x1C4A             ADDS     R2,R1,#+1
   \   00000006   0x7082             STRB     R2,[R0, #+2]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD100             BNE.N    ??GUI_CURSOR_Deactivate_0
    253              _Hide();
   \   0000000C   0x....             B.N      _Hide
    254            GUI_UNLOCK();
    255          }
   \                     ??GUI_CURSOR_Deactivate_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
    256          
    257          /*********************************************************************
    258          *
    259          *       GUI_CURSOR_Select
    260          */

   \                                 In section .text, align 2, keep-with-next
    261          const GUI_CURSOR GUI_UNI_PTR * GUI_CURSOR_Select(const GUI_CURSOR GUI_UNI_PTR * pCursor) {
   \                     GUI_CURSOR_Select: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
    262            int AllocSize;
    263            const GUI_BITMAP GUI_UNI_PTR * pBM;
    264            const GUI_CURSOR GUI_UNI_PTR * pOldCursor;
    265            GUI_LOCK();
    266            pOldCursor = _pCursor;
   \   00000006   0x....             LDR.N    R5,??DataTable14
   \   00000008   0x6A2E             LDR      R6,[R5, #+32]
    267            if (pCursor != _pCursor) {
   \   0000000A   0x42B4             CMP      R4,R6
   \   0000000C   0xD032             BEQ.N    ??GUI_CURSOR_Select_0
    268              int i;
    269              pBM = pCursor->pBitmap;
   \   0000000E   0x6827             LDR      R7,[R4, #+0]
    270              i = pBM->pPal->NumEntries > 4 ? 4 : pBM->pPal->NumEntries;
   \   00000010   0x68F8             LDR      R0,[R7, #+12]
   \   00000012   0xF8D0 0x8000      LDR      R8,[R0, #+0]
   \   00000016   0xF1B8 0x0F05      CMP      R8,#+5
   \   0000001A   0xDB0B             BLT.N    ??GUI_CURSOR_Select_1
   \   0000001C   0xF04F 0x0804      MOV      R8,#+4
   \   00000020   0xE008             B.N      ??GUI_CURSOR_Select_1
    271              while (i--) {
    272                LCD_COLOR Color = *(pBM->pPal->pPalEntries + i);
    273                _ColorIndex[i] = LCD_Color2Index(Color);
   \                     ??GUI_CURSOR_Select_2: (+1)
   \   00000022   0x68F8             LDR      R0,[R7, #+12]
   \   00000024   0x6880             LDR      R0,[R0, #+8]
   \   00000026   0xF850 0x0028      LDR      R0,[R0, R8, LSL #+2]
   \   0000002A   0x.... 0x....      BL       LCD_Color2Index
   \   0000002E   0xEB05 0x0148      ADD      R1,R5,R8, LSL #+1
   \   00000032   0x8208             STRH     R0,[R1, #+16]
    274              }
   \                     ??GUI_CURSOR_Select_1: (+1)
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0xF1A0 0x0801      SUB      R8,R0,#+1
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD1F1             BNE.N    ??GUI_CURSOR_Select_2
    275              _Hide();
   \   0000003E   0x.... 0x....      BL       _Hide
    276              AllocSize = pBM->XSize * pBM->YSize * sizeof(LCD_PIXELINDEX);
   \   00000042   0x8838             LDRH     R0,[R7, #+0]
   \   00000044   0x8879             LDRH     R1,[R7, #+2]
   \   00000046   0x4348             MULS     R0,R1,R0
   \   00000048   0x0047             LSLS     R7,R0,#+1
    277              if (AllocSize != _AllocSize) {
   \   0000004A   0x6A68             LDR      R0,[R5, #+36]
   \   0000004C   0x4287             CMP      R7,R0
   \   0000004E   0xD005             BEQ.N    ??GUI_CURSOR_Select_3
    278                GUI_ALLOC_Free(_hBuffer);
   \   00000050   0xF9B5 0x000C      LDRSH    R0,[R5, #+12]
   \   00000054   0x.... 0x....      BL       GUI_ALLOC_Free
    279                _hBuffer = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x81A8             STRH     R0,[R5, #+12]
    280              }
    281              _hBuffer = GUI_ALLOC_AllocZero(AllocSize);
   \                     ??GUI_CURSOR_Select_3: (+1)
   \   0000005C   0x4638             MOV      R0,R7
   \   0000005E   0xB200             SXTH     R0,R0
   \   00000060   0x.... 0x....      BL       GUI_ALLOC_AllocZero
   \   00000064   0x81A8             STRH     R0,[R5, #+12]
    282              _CursorOn = 1;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0x7068             STRB     R0,[R5, #+1]
    283              _pCursor = pCursor;
   \   0000006A   0x622C             STR      R4,[R5, #+32]
    284              _CalcRect();
   \   0000006C   0x.... 0x....      BL       _CalcRect
    285              _Show();
   \   00000070   0x.... 0x....      BL       _Show
    286            }
    287            GUI_UNLOCK();
    288            return pOldCursor;
   \                     ??GUI_CURSOR_Select_0: (+1)
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    289          }
    290          
    291          /*********************************************************************
    292          *
    293          *       GUI_CURSOR_Hide
    294          */

   \                                 In section .text, align 2, keep-with-next
    295          void GUI_CURSOR_Hide(void) {
   \                     GUI_CURSOR_Hide: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    296            GUI_LOCK();
    297            _Hide();
   \   00000002   0x.... 0x....      BL       _Hide
    298            _CursorOn = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x....             LDR.N    R1,??DataTable14
   \   0000000A   0x7048             STRB     R0,[R1, #+1]
    299            /* Set function pointer which window manager can use */
    300            GUI_CURSOR_pfTempHide   = NULL;
   \   0000000C   0x....             LDR.N    R1,??DataTable14_2
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    301            GUI_CURSOR_pfTempUnhide = NULL;
   \   00000010   0x....             LDR.N    R1,??DataTable14_3
   \   00000012   0x6008             STR      R0,[R1, #+0]
    302            GUI_UNLOCK();
    303          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
    304          
    305          /*********************************************************************
    306          *
    307          *       GUI_CURSOR_Show
    308          */

   \                                 In section .text, align 2, keep-with-next
    309          void GUI_CURSOR_Show(void) {
   \                     GUI_CURSOR_Show: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    310            GUI_LOCK();
    311            LCDDEV_L0_GetRect(&_ClipRect);
   \   00000002   0x....             LDR.N    R4,??DataTable14
   \   00000004   0xF104 0x0018      ADD      R0,R4,#+24
   \   00000008   0x.... 0x....      BL       LCD_L0_GetRect
    312            _Hide();
   \   0000000C   0x.... 0x....      BL       _Hide
    313            _CursorOn = 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x7060             STRB     R0,[R4, #+1]
    314            /* Set function pointer which window manager can use */
    315            GUI_CURSOR_pfTempHide   = _TempHide;
   \   00000014   0x....             LDR.N    R0,??DataTable14_4
   \   00000016   0x....             LDR.N    R1,??DataTable14_2
   \   00000018   0x6008             STR      R0,[R1, #+0]
    316            GUI_CURSOR_pfTempUnhide = _TempUnhide;
   \   0000001A   0x....             LDR.N    R0,??DataTable14_5
   \   0000001C   0x....             LDR.N    R1,??DataTable14_3
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    317            if (!_pCursor) {
   \   00000020   0x6A20             LDR      R0,[R4, #+32]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD103             BNE.N    ??GUI_CURSOR_Show_0
    318              GUI_CURSOR_Select(GUI_DEFAULT_CURSOR);
   \   00000026   0x....             LDR.N    R0,??DataTable14_6
   \   00000028   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002C   0x....             B.N      GUI_CURSOR_Select
    319            } else {
    320              _Show();
   \                     ??GUI_CURSOR_Show_0: (+1)
   \   0000002E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000032   0x....             B.N      _Show
    321            }
    322            GUI_UNLOCK();
    323          }
    324          
    325          /*********************************************************************
    326          *
    327          *       GUI_CURSOR_SetPosition
    328          */

   \                                 In section .text, align 2, keep-with-next
    329          void GUI_CURSOR_SetPosition(int xNewPos, int yNewPos) {
   \                     GUI_CURSOR_SetPosition: (+1)
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB091             SUB      SP,SP,#+68
    330            int x, xStart, xStep, xEnd, xOff, xOverlapMin, xOverlapMax;
    331            int y, yStart, yStep, yEnd, yOff, yOverlapMin, yOverlapMax;
    332            int xSize;
    333            LCD_PIXELINDEX* pData;
    334            GUI_LOCK();
    335            if (_hBuffer) {
   \   00000006   0x....             LDR.N    R4,??DataTable14
   \   00000008   0xF9B4 0x000C      LDRSH    R0,[R4, #+12]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF000 0x80F8      BEQ.W    ??GUI_CURSOR_SetPosition_0
    336              if ((_x != xNewPos) | (_y != yNewPos)) {
   \   00000012   0x6AA1             LDR      R1,[R4, #+40]
   \   00000014   0x9A11             LDR      R2,[SP, #+68]
   \   00000016   0x4291             CMP      R1,R2
   \   00000018   0xD001             BEQ.N    ??GUI_CURSOR_SetPosition_1
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0xE000             B.N      ??GUI_CURSOR_SetPosition_2
   \                     ??GUI_CURSOR_SetPosition_1: (+1)
   \   0000001E   0x2100             MOVS     R1,#+0
   \                     ??GUI_CURSOR_SetPosition_2: (+1)
   \   00000020   0x6AE2             LDR      R2,[R4, #+44]
   \   00000022   0x9B12             LDR      R3,[SP, #+72]
   \   00000024   0x429A             CMP      R2,R3
   \   00000026   0xD001             BEQ.N    ??GUI_CURSOR_SetPosition_3
   \   00000028   0x2201             MOVS     R2,#+1
   \   0000002A   0xE000             B.N      ??GUI_CURSOR_SetPosition_4
   \                     ??GUI_CURSOR_SetPosition_3: (+1)
   \   0000002C   0x2200             MOVS     R2,#+0
   \                     ??GUI_CURSOR_SetPosition_4: (+1)
   \   0000002E   0x4311             ORRS     R1,R2,R1
   \   00000030   0xF000 0x80E7      BEQ.W    ??GUI_CURSOR_SetPosition_0
    337                if (_CursorOn) {
   \   00000034   0xF994 0x1001      LDRSB    R1,[R4, #+1]
   \   00000038   0x2900             CMP      R1,#+0
   \   0000003A   0xF000 0x80DA      BEQ.W    ??GUI_CURSOR_SetPosition_5
    338                  const GUI_BITMAP GUI_UNI_PTR * pBM = _pCursor->pBitmap;
   \   0000003E   0x6A21             LDR      R1,[R4, #+32]
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0x910F             STR      R1,[SP, #+60]
    339                  /* Save & set clip rect */
    340                  /* Compute helper variables */
    341                  pData = (LCD_PIXELINDEX*)GUI_ALLOC_h2p(_hBuffer);
   \   00000044   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000048   0x900E             STR      R0,[SP, #+56]
    342                  xSize = _pCursor->pBitmap->XSize;
   \   0000004A   0x6A20             LDR      R0,[R4, #+32]
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x8801             LDRH     R1,[R0, #+0]
   \   00000050   0x9108             STR      R1,[SP, #+32]
    343                  xOff = xNewPos - _x;
   \   00000052   0x9A11             LDR      R2,[SP, #+68]
   \   00000054   0x6AA3             LDR      R3,[R4, #+40]
   \   00000056   0x1AD2             SUBS     R2,R2,R3
   \   00000058   0x9202             STR      R2,[SP, #+8]
    344                  if (xOff > 0) {
   \   0000005A   0x9A08             LDR      R2,[SP, #+32]
   \   0000005C   0x1E52             SUBS     R2,R2,#+1
   \   0000005E   0x9B02             LDR      R3,[SP, #+8]
   \   00000060   0x2B01             CMP      R3,#+1
   \   00000062   0xDB08             BLT.N    ??GUI_CURSOR_SetPosition_6
    345                    xStep  = 1;
   \   00000064   0x2301             MOVS     R3,#+1
   \   00000066   0x930D             STR      R3,[SP, #+52]
    346                    xStart = 0;
   \   00000068   0x2300             MOVS     R3,#+0
   \   0000006A   0x9307             STR      R3,[SP, #+28]
    347                    xEnd   = _pCursor->pBitmap->XSize;
   \   0000006C   0x910C             STR      R1,[SP, #+48]
    348                    xOverlapMax = xEnd -1;
   \   0000006E   0x9206             STR      R2,[SP, #+24]
    349                    xOverlapMin = xOff;
   \   00000070   0x9902             LDR      R1,[SP, #+8]
   \   00000072   0x9105             STR      R1,[SP, #+20]
   \   00000074   0xE00A             B.N      ??GUI_CURSOR_SetPosition_7
    350                  } else {
    351                    xStep  = -1;
   \                     ??GUI_CURSOR_SetPosition_6: (+1)
   \   00000076   0xF04F 0x31FF      MOV      R1,#-1
   \   0000007A   0x910D             STR      R1,[SP, #+52]
    352                    xStart = xSize - 1;
   \   0000007C   0x9207             STR      R2,[SP, #+28]
    353                    xEnd   = -1;
   \   0000007E   0x910C             STR      R1,[SP, #+48]
    354                    xOverlapMin = 0;
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x9105             STR      R1,[SP, #+20]
    355                    xOverlapMax = xStart + xOff;
   \   00000084   0x9907             LDR      R1,[SP, #+28]
   \   00000086   0x9A02             LDR      R2,[SP, #+8]
   \   00000088   0x1851             ADDS     R1,R2,R1
   \   0000008A   0x9106             STR      R1,[SP, #+24]
    356                  }
    357                  yOff = yNewPos - _y;
   \                     ??GUI_CURSOR_SetPosition_7: (+1)
   \   0000008C   0x9912             LDR      R1,[SP, #+72]
   \   0000008E   0x6AE2             LDR      R2,[R4, #+44]
   \   00000090   0x1A89             SUBS     R1,R1,R2
   \   00000092   0x9101             STR      R1,[SP, #+4]
   \   00000094   0x8840             LDRH     R0,[R0, #+2]
   \   00000096   0x1E42             SUBS     R2,R0,#+1
   \   00000098   0x2901             CMP      R1,#+1
   \   0000009A   0xDB07             BLT.N    ??GUI_CURSOR_SetPosition_8
    358                  if (yOff > 0) {
    359                    yStep  = 1;
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x910B             STR      R1,[SP, #+44]
    360                    yStart = 0;
   \   000000A0   0x2500             MOVS     R5,#+0
    361                    yEnd   = _pCursor->pBitmap->YSize;
   \   000000A2   0x900A             STR      R0,[SP, #+40]
    362                    yOverlapMax = yEnd -1;
   \   000000A4   0x9204             STR      R2,[SP, #+16]
    363                    yOverlapMin = yOff;
   \   000000A6   0x9801             LDR      R0,[SP, #+4]
   \   000000A8   0x9003             STR      R0,[SP, #+12]
   \   000000AA   0xE00C             B.N      ??GUI_CURSOR_SetPosition_9
    364                  } else {
    365                    yStep  = -1;
   \                     ??GUI_CURSOR_SetPosition_8: (+1)
   \   000000AC   0xF04F 0x31FF      MOV      R1,#-1
   \   000000B0   0x910B             STR      R1,[SP, #+44]
    366                    yStart = _pCursor->pBitmap->YSize - 1;
   \   000000B2   0x4615             MOV      R5,R2
    367                    yEnd   = -1;
   \   000000B4   0x910A             STR      R1,[SP, #+40]
    368                    yOverlapMin = 0;
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x9003             STR      R0,[SP, #+12]
    369                    yOverlapMax = yStart + yOff;
   \   000000BA   0x9801             LDR      R0,[SP, #+4]
   \   000000BC   0x1940             ADDS     R0,R0,R5
   \   000000BE   0x9004             STR      R0,[SP, #+16]
    370                  }
    371                  /* Restore & Draw */
    372                  for (y = yStart; y != yEnd; y += yStep) {
   \   000000C0   0xE001             B.N      ??GUI_CURSOR_SetPosition_9
   \                     ??GUI_CURSOR_SetPosition_10: (+1)
   \   000000C2   0x980B             LDR      R0,[SP, #+44]
   \   000000C4   0x1945             ADDS     R5,R0,R5
   \                     ??GUI_CURSOR_SetPosition_9: (+1)
   \   000000C6   0x980A             LDR      R0,[SP, #+40]
   \   000000C8   0x4285             CMP      R5,R0
   \   000000CA   0xF000 0x8092      BEQ.W    ??GUI_CURSOR_SetPosition_5
    373                    char yOverlaps;
    374                    char yNewOverlaps;
    375                    int yNew = y + yOff;
   \   000000CE   0x9801             LDR      R0,[SP, #+4]
   \   000000D0   0x1940             ADDS     R0,R0,R5
   \   000000D2   0x9000             STR      R0,[SP, #+0]
    376                    yOverlaps    = (y >= yOverlapMin) && (y <= yOverlapMax);
   \   000000D4   0x9803             LDR      R0,[SP, #+12]
   \   000000D6   0x4285             CMP      R5,R0
   \   000000D8   0xDB05             BLT.N    ??GUI_CURSOR_SetPosition_11
   \   000000DA   0x9804             LDR      R0,[SP, #+16]
   \   000000DC   0x42A8             CMP      R0,R5
   \   000000DE   0xDB02             BLT.N    ??GUI_CURSOR_SetPosition_11
   \   000000E0   0x2001             MOVS     R0,#+1
   \   000000E2   0x9009             STR      R0,[SP, #+36]
   \   000000E4   0xE001             B.N      ??GUI_CURSOR_SetPosition_12
   \                     ??GUI_CURSOR_SetPosition_11: (+1)
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x9009             STR      R0,[SP, #+36]
    377                    yNewOverlaps = (yNew >= yOverlapMin) && (yNew <= yOverlapMax);
   \                     ??GUI_CURSOR_SetPosition_12: (+1)
   \   000000EA   0x9800             LDR      R0,[SP, #+0]
   \   000000EC   0x9903             LDR      R1,[SP, #+12]
   \   000000EE   0x4288             CMP      R0,R1
   \   000000F0   0xDB05             BLT.N    ??GUI_CURSOR_SetPosition_13
   \   000000F2   0x9804             LDR      R0,[SP, #+16]
   \   000000F4   0x9900             LDR      R1,[SP, #+0]
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0xDB01             BLT.N    ??GUI_CURSOR_SetPosition_13
   \   000000FA   0x2601             MOVS     R6,#+1
   \   000000FC   0xE000             B.N      ??GUI_CURSOR_SetPosition_14
   \                     ??GUI_CURSOR_SetPosition_13: (+1)
   \   000000FE   0x2600             MOVS     R6,#+0
    378                    for (x= xStart; x != xEnd; x += xStep) {
   \                     ??GUI_CURSOR_SetPosition_14: (+1)
   \   00000100   0x9F07             LDR      R7,[SP, #+28]
   \   00000102   0xE01D             B.N      ??GUI_CURSOR_SetPosition_15
    379                      char xyOverlaps, xyNewOverlaps;
    380                      int BitmapPixel;
    381                      LCD_PIXELINDEX Pixel;
    382                      LCD_PIXELINDEX* pSave = pData + x + y * xSize;
    383                      int xNew = x + xOff;
    384                      BitmapPixel = GUI_GetBitmapPixelIndex(pBM, x, y);
    385                      xyOverlaps    = (x    >= xOverlapMin) && (x    <= xOverlapMax) && yOverlaps;
    386                      xyNewOverlaps = (xNew >= xOverlapMin) && (xNew <= xOverlapMax) && yNewOverlaps;
    387                      /* Restore old pixel if it was not transparent */
    388                      if (BitmapPixel) {
    389                        if (!xyOverlaps || (GUI_GetBitmapPixelIndex(pBM, x - xOff, y - yOff) == 0)) {
    390                          _SetPixelIndex(x + _Rect.x0, y + _Rect.y0, *(pSave));
    391                        }
    392                      }
    393                      /* Save */
    394                      if (xyNewOverlaps) {
    395                        Pixel = *(pData + xNew + yNew * xSize);
    396                      } else {
    397                        Pixel = _GetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew);
   \                     ??GUI_CURSOR_SetPosition_16: (+1)
   \   00000104   0xF9B4 0x0006      LDRSH    R0,[R4, #+6]
   \   00000108   0x9900             LDR      R1,[SP, #+0]
   \   0000010A   0x1809             ADDS     R1,R1,R0
   \   0000010C   0xF9B4 0x0004      LDRSH    R0,[R4, #+4]
   \   00000110   0x4448             ADD      R0,R9,R0
   \   00000112   0x.... 0x....      BL       _GetPixelIndex
    398                      }
    399                      *pSave = Pixel;
   \                     ??GUI_CURSOR_SetPosition_17: (+1)
   \   00000116   0xF8A8 0x0000      STRH     R0,[R8, #+0]
    400                      /* Write new  ... We could write pixel by pixel here */
    401                      if (BitmapPixel) {
   \   0000011A   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000011E   0xD00D             BEQ.N    ??GUI_CURSOR_SetPosition_18
    402                        LCD_PIXELINDEX NewPixel = _Log2Phys(BitmapPixel);
   \   00000120   0x4650             MOV      R0,R10
   \   00000122   0x.... 0x....      BL       _Log2Phys
    403                        _SetPixelIndex(_Rect.x0 + xNew, _Rect.y0 + yNew, NewPixel);
   \   00000126   0xB280             UXTH     R0,R0
   \   00000128   0x4602             MOV      R2,R0
   \   0000012A   0xF9B4 0x0006      LDRSH    R0,[R4, #+6]
   \   0000012E   0x9900             LDR      R1,[SP, #+0]
   \   00000130   0x1809             ADDS     R1,R1,R0
   \   00000132   0xF9B4 0x0004      LDRSH    R0,[R4, #+4]
   \   00000136   0x4448             ADD      R0,R9,R0
   \   00000138   0x.... 0x....      BL       _SetPixelIndex
    404                      }
   \                     ??GUI_CURSOR_SetPosition_18: (+1)
   \   0000013C   0x980D             LDR      R0,[SP, #+52]
   \   0000013E   0x19C7             ADDS     R7,R0,R7
   \                     ??GUI_CURSOR_SetPosition_15: (+1)
   \   00000140   0x980C             LDR      R0,[SP, #+48]
   \   00000142   0x4287             CMP      R7,R0
   \   00000144   0xD0BD             BEQ.N    ??GUI_CURSOR_SetPosition_10
   \   00000146   0x9808             LDR      R0,[SP, #+32]
   \   00000148   0x4368             MULS     R0,R0,R5
   \   0000014A   0x990E             LDR      R1,[SP, #+56]
   \   0000014C   0xEB01 0x0147      ADD      R1,R1,R7, LSL #+1
   \   00000150   0xEB01 0x0840      ADD      R8,R1,R0, LSL #+1
   \   00000154   0x9802             LDR      R0,[SP, #+8]
   \   00000156   0xEB00 0x0907      ADD      R9,R0,R7
   \   0000015A   0x462A             MOV      R2,R5
   \   0000015C   0x4639             MOV      R1,R7
   \   0000015E   0x980F             LDR      R0,[SP, #+60]
   \   00000160   0x.... 0x....      BL       GUI_GetBitmapPixelIndex
   \   00000164   0x4682             MOV      R10,R0
   \   00000166   0x9805             LDR      R0,[SP, #+20]
   \   00000168   0x4287             CMP      R7,R0
   \   0000016A   0xDB08             BLT.N    ??GUI_CURSOR_SetPosition_19
   \   0000016C   0x9806             LDR      R0,[SP, #+24]
   \   0000016E   0x42B8             CMP      R0,R7
   \   00000170   0xDB05             BLT.N    ??GUI_CURSOR_SetPosition_19
   \   00000172   0x9809             LDR      R0,[SP, #+36]
   \   00000174   0x1E40             SUBS     R0,R0,#+1
   \   00000176   0x4180             SBCS     R0,R0,R0
   \   00000178   0x43C0             MVNS     R0,R0
   \   0000017A   0x0FC0             LSRS     R0,R0,#+31
   \   0000017C   0xE000             B.N      ??GUI_CURSOR_SetPosition_20
   \                     ??GUI_CURSOR_SetPosition_19: (+1)
   \   0000017E   0x2000             MOVS     R0,#+0
   \                     ??GUI_CURSOR_SetPosition_20: (+1)
   \   00000180   0x9905             LDR      R1,[SP, #+20]
   \   00000182   0x4589             CMP      R9,R1
   \   00000184   0xDB0C             BLT.N    ??GUI_CURSOR_SetPosition_21
   \   00000186   0x9906             LDR      R1,[SP, #+24]
   \   00000188   0x4549             CMP      R1,R9
   \   0000018A   0xDB09             BLT.N    ??GUI_CURSOR_SetPosition_21
   \   0000018C   0x46B3             MOV      R11,R6
   \   0000018E   0xF1BB 0x0B01      SUBS     R11,R11,#+1
   \   00000192   0xEB6B 0x0B0B      SBC      R11,R11,R11
   \   00000196   0xEA6F 0x0B0B      MVN      R11,R11
   \   0000019A   0xEA4F 0x7BDB      LSR      R11,R11,#+31
   \   0000019E   0xE001             B.N      ??GUI_CURSOR_SetPosition_22
   \                     ??GUI_CURSOR_SetPosition_21: (+1)
   \   000001A0   0xF04F 0x0B00      MOV      R11,#+0
   \                     ??GUI_CURSOR_SetPosition_22: (+1)
   \   000001A4   0xF1BA 0x0F00      CMP      R10,#+0
   \   000001A8   0xD015             BEQ.N    ??GUI_CURSOR_SetPosition_23
   \   000001AA   0xB240             SXTB     R0,R0
   \   000001AC   0x2800             CMP      R0,#+0
   \   000001AE   0xD008             BEQ.N    ??GUI_CURSOR_SetPosition_24
   \   000001B0   0x9801             LDR      R0,[SP, #+4]
   \   000001B2   0x1A2A             SUBS     R2,R5,R0
   \   000001B4   0x9802             LDR      R0,[SP, #+8]
   \   000001B6   0x1A39             SUBS     R1,R7,R0
   \   000001B8   0x980F             LDR      R0,[SP, #+60]
   \   000001BA   0x.... 0x....      BL       GUI_GetBitmapPixelIndex
   \   000001BE   0x2800             CMP      R0,#+0
   \   000001C0   0xD109             BNE.N    ??GUI_CURSOR_SetPosition_23
   \                     ??GUI_CURSOR_SetPosition_24: (+1)
   \   000001C2   0xF8B8 0x2000      LDRH     R2,[R8, #+0]
   \   000001C6   0xF9B4 0x0006      LDRSH    R0,[R4, #+6]
   \   000001CA   0x1941             ADDS     R1,R0,R5
   \   000001CC   0xF9B4 0x0004      LDRSH    R0,[R4, #+4]
   \   000001D0   0x19C0             ADDS     R0,R0,R7
   \   000001D2   0x.... 0x....      BL       _SetPixelIndex
   \                     ??GUI_CURSOR_SetPosition_23: (+1)
   \   000001D6   0xFA4F 0xFB8B      SXTB     R11,R11
   \   000001DA   0xF1BB 0x0F00      CMP      R11,#+0
   \   000001DE   0xD091             BEQ.N    ??GUI_CURSOR_SetPosition_16
   \   000001E0   0x9800             LDR      R0,[SP, #+0]
   \   000001E2   0x9908             LDR      R1,[SP, #+32]
   \   000001E4   0x4348             MULS     R0,R1,R0
   \   000001E6   0x990E             LDR      R1,[SP, #+56]
   \   000001E8   0xEB01 0x0149      ADD      R1,R1,R9, LSL #+1
   \   000001EC   0xF831 0x0010      LDRH     R0,[R1, R0, LSL #+1]
   \   000001F0   0xE791             B.N      ??GUI_CURSOR_SetPosition_17
    405                    }
    406                  }
    407                }
    408                _x = xNewPos;
   \                     ??GUI_CURSOR_SetPosition_5: (+1)
   \   000001F2   0x9811             LDR      R0,[SP, #+68]
   \   000001F4   0x62A0             STR      R0,[R4, #+40]
    409                _y = yNewPos;
   \   000001F6   0x9812             LDR      R0,[SP, #+72]
   \   000001F8   0x62E0             STR      R0,[R4, #+44]
    410                _CalcRect();
   \   000001FA   0xB013             ADD      SP,SP,#+76
   \   000001FC   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000200   0x....             B.N      _CalcRect
    411              }
    412            }
    413            GUI_UNLOCK();
    414          }
   \                     ??GUI_CURSOR_SetPosition_0: (+1)
   \   00000202   0xB013             ADD      SP,SP,#+76
   \   00000204   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   0x........         DC32     _CursorIsVis

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_1:
   \   00000000   0x........         DC32     LCD_aAPI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_2:
   \   00000000   0x........         DC32     GUI_CURSOR_pfTempHide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_3:
   \   00000000   0x........         DC32     GUI_CURSOR_pfTempUnhide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_4:
   \   00000000   0x........         DC32     _TempHide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_5:
   \   00000000   0x........         DC32     _TempUnhide

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14_6:
   \   00000000   0x........         DC32     GUI_CursorArrowM
    415          
    416          #else
    417          
    418          void GUICurs_C(void);
    419          void GUICurs_C(void) {} /* avoid empty object files */
    420          
    421          #endif   /* GUI_SUPPORT_CURSOR */
    422          
    423          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GUI_CURSOR_Activate
         0   -> _Show
       0   GUI_CURSOR_Deactivate
         0   -> _Hide
       8   GUI_CURSOR_Hide
         8   -> _Hide
      24   GUI_CURSOR_Select
        24   -> GUI_ALLOC_AllocZero
        24   -> GUI_ALLOC_Free
        24   -> LCD_Color2Index
        24   -> _CalcRect
        24   -> _Hide
        24   -> _Show
     112   GUI_CURSOR_SetPosition
       112   -> GUI_ALLOC_h2p
       112   -> GUI_GetBitmapPixelIndex
         0   -> _CalcRect
       112   -> _GetPixelIndex
       112   -> _Log2Phys
       112   -> _SetPixelIndex
       8   GUI_CURSOR_Show
         0   -> GUI_CURSOR_Select
         8   -> LCD_L0_GetRect
         8   -> _Hide
         0   -> _Show
       4   _CalcRect
      32   _Draw
        32   -> GUI_ALLOC_h2p
        32   -> GUI_GetBitmapPixelIndex
        32   -> _GetPixelIndex
        32   -> _Log2Phys
        32   -> _SetPixelIndex
       0   _GetPixelIndex
         0   -> LCD_L0_GetPixelIndex
       8   _Hide
         8   -> _Undraw
       0   _Log2Phys
         0   -> LCD_Color2Index
       8   _SetPixelIndex
         0   -- Indirect call
       0   _Show
         0   -> _Draw
       8   _TempHide
         8   -> GUI_RectsIntersect
         8   -> _Hide
       0   _TempUnhide
         0   -> _Show
      32   _Undraw
        32   -> GUI_ALLOC_h2p
        32   -> _SetPixelIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
      18  GUI_CURSOR_Activate
      16  GUI_CURSOR_Deactivate
      22  GUI_CURSOR_Hide
     122  GUI_CURSOR_Select
     520  GUI_CURSOR_SetPosition
      52  GUI_CURSOR_Show
      60  _CalcRect
      48  _CursorIsVis
          _CursorOn
          _CursorDeActCnt
          _Rect
          _hBuffer
          _ColorIndex
          _ClipRect
          _pCursor
          _AllocSize
          _x
          _y
     150  _Draw
      44  _GetPixelIndex
      22  _Hide
      32  _Log2Phys
      56  _SetPixelIndex
      24  _Show
      38  _TempHide
       2  _TempUnhide
     110  _Undraw

 
    48 bytes in section .bss
 1 316 bytes in section .text
 
 1 316 bytes of CODE memory
    48 bytes of DATA memory

Errors: none
Warnings: none
