###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:07
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\CHECKBOX_SetNumStates.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\CHECKBOX_SetNumStates.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\CHECKBOX_SetNumStates.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\CHECKBOX_SetNumStates.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\CHECKBOX_SetNumStates.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : CHECKBOX_SetNumStates.c
     16          Purpose     : Routines and bitmaps used for third state of checkbox
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "CHECKBOX_Private.h"
     21          
     22          #if GUI_WINSUPPORT
     23          
     24          /*********************************************************************
     25          *
     26          *       Static const data
     27          *
     28          **********************************************************************
     29          */
     30          /* Colors */

   \                                 In section .rodata, align 4, keep-with-next
     31          static const GUI_COLOR _aColorDisabled[] = {CHECKBOX_FGCOLOR0_DEFAULT, CHECKBOX_BKCOLOR0_DEFAULT};
   \                     _aColorDisabled:
   \   00000000   0x00101010         DC32 1052688, 8421504
   \              0x00808080   

   \                                 In section .rodata, align 4, keep-with-next
     32          static const GUI_COLOR _aColorEnabled[]  = {CHECKBOX_FGCOLOR1_DEFAULT, CHECKBOX_BKCOLOR1_DEFAULT};
   \                     _aColorEnabled:
   \   00000000   0x00000000         DC32 0, 16777215
   \              0x00FFFFFF   
     33          
     34          /* Palettes */

   \                                 In section .rodata, align 4, keep-with-next
     35          static const GUI_LOGPALETTE _PalCheckDisabled = {
   \                     _PalCheckDisabled:
   \   00000000   0x00000002         DC32 2
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x........         DC32 _aColorDisabled
     36            2,	/* number of entries */
     37            0, 	/* No transparency */
     38            _aColorDisabled
     39          };
     40          

   \                                 In section .rodata, align 4, keep-with-next
     41          static const GUI_LOGPALETTE _PalCheckEnabled = {
   \                     _PalCheckEnabled:
   \   00000000   0x00000002         DC32 2
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0x........         DC32 _aColorEnabled
     42            2,	/* number of entries */
     43            0, 	/* No transparency */
     44            _aColorEnabled
     45          };
     46          
     47          /* Pixel data */

   \                                 In section .rodata, align 4, keep-with-next
     48          static const unsigned char _acCheck[] = {
   \                     _acCheck:
   \   00000000   0xFF 0xE0          DC8 255, 224, 255, 224, 255, 96, 254, 224, 221, 96, 234, 224, 213, 224
   \              0xFF 0xE0    
   \              0xFF 0x60    
   \              0xFE 0xE0    
   \              0xDD 0x60    
   \              0xEA 0xE0    
   \              0xD5 0xE0    
   \   0000000E   0xEB 0xE0          DC8 235, 224, 247, 224, 255, 224, 255, 224, 0, 0
   \              0xF7 0xE0    
   \              0xFF 0xE0    
   \              0xFF 0xE0    
   \              0x00 0x00    
     49            XXXXXXXX, XXX_____,
     50            XXXXXXXX, XXX_____,
     51            XXXXXXXX, _XX_____,
     52            XXXXXXX_, XXX_____,
     53            XX_XXX_X, _XX_____,
     54            XXX_X_X_, XXX_____,
     55            XX_X_X_X, XXX_____,
     56            XXX_X_XX, XXX_____,
     57            XXXX_XXX, XXX_____,
     58            XXXXXXXX, XXX_____,
     59            XXXXXXXX, XXX_____
     60          };
     61          
     62          /* Bitmaps */

   \                                 In section .text, align 4, keep-with-next
     63          static const GUI_BITMAP _abmCheck[2] = {
   \                     _abmCheck:
   \   00000000   0x000B 0x000B      DC16 11, 11, 2, 1
   \              0x0002 0x0001
   \   00000008   0x........         DC32 _acCheck, _PalCheckDisabled
   \              0x........   
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x000B 0x000B      DC16 11, 11, 2, 1
   \              0x0002 0x0001
   \   0000001C   0x........         DC32 _acCheck, _PalCheckEnabled
   \              0x........   
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     64            { 11, 11, 2, 1, _acCheck,  &_PalCheckDisabled},
     65            { 11, 11, 2, 1, _acCheck,  &_PalCheckEnabled }
     66          };
     67          
     68          /*********************************************************************
     69          *
     70          *       Exported routines
     71          *
     72          **********************************************************************
     73          */
     74          /*********************************************************************
     75          *
     76          *       CHECKBOX_SetNumStates
     77          */

   \                                 In section .text, align 2, keep-with-next
     78          void CHECKBOX_SetNumStates(CHECKBOX_Handle hObj, unsigned NumStates) {
   \                     CHECKBOX_SetNumStates: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     79            CHECKBOX_Obj * pObj;
     80            if (!CHECKBOX__DefaultProps.apBm[2]) {
   \   00000006   0x....             LDR.N    R6,??DataTable6
   \   00000008   0x6A30             LDR      R0,[R6, #+32]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD104             BNE.N    ??CHECKBOX_SetNumStates_0
     81              CHECKBOX_SetDefaultImage(&_abmCheck[0], 2);
   \   0000000E   0x2102             MOVS     R1,#+2
   \   00000010   0x.... 0x....      ADR.W    R0,_abmCheck
   \   00000014   0x.... 0x....      BL       CHECKBOX_SetDefaultImage
     82            }
     83            if (!CHECKBOX__DefaultProps.apBm[3]) {
   \                     ??CHECKBOX_SetNumStates_0: (+1)
   \   00000018   0x6A70             LDR      R0,[R6, #+36]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD104             BNE.N    ??CHECKBOX_SetNumStates_1
     84              CHECKBOX_SetDefaultImage(&_abmCheck[1], 3);
   \   0000001E   0x2103             MOVS     R1,#+3
   \   00000020   0x.... 0x....      ADR.W    R0,_abmCheck+0x14
   \   00000024   0x.... 0x....      BL       CHECKBOX_SetDefaultImage
     85            }
     86            if (hObj && ((NumStates == 2) || (NumStates == 3))) {
   \                     ??CHECKBOX_SetNumStates_1: (+1)
   \   00000028   0x2C00             CMP      R4,#+0
   \   0000002A   0xD00C             BEQ.N    ??CHECKBOX_SetNumStates_2
   \   0000002C   0x2D02             CMP      R5,#+2
   \   0000002E   0xD001             BEQ.N    ??CHECKBOX_SetNumStates_3
   \   00000030   0x2D03             CMP      R5,#+3
   \   00000032   0xD108             BNE.N    ??CHECKBOX_SetNumStates_2
     87              WM_LOCK();
     88              pObj = CHECKBOX_H2P(hObj);
   \                     ??CHECKBOX_SetNumStates_3: (+1)
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       GUI_ALLOC_h2p
     89              pObj->Props.apBm[2] = CHECKBOX__DefaultProps.apBm[2];
   \   0000003A   0x6A31             LDR      R1,[R6, #+32]
   \   0000003C   0x6481             STR      R1,[R0, #+72]
     90              pObj->Props.apBm[3] = CHECKBOX__DefaultProps.apBm[3];
   \   0000003E   0x3048             ADDS     R0,R0,#+72
   \   00000040   0x6A71             LDR      R1,[R6, #+36]
   \   00000042   0x6041             STR      R1,[R0, #+4]
     91              pObj->NumStates = NumStates;
   \   00000044   0x7205             STRB     R5,[R0, #+8]
     92              WM_UNLOCK();
     93            }
     94          }
   \                     ??CHECKBOX_SetNumStates_2: (+1)
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     CHECKBOX__DefaultProps
     95          
     96          #else                            /* Avoid problems with empty object modules */
     97            void CHECKBOX_SetNumStates_C(void);
     98            void CHECKBOX_SetNumStates_C(void) {}
     99          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   CHECKBOX_SetNumStates
        16   -> CHECKBOX_SetDefaultImage
        16   -> GUI_ALLOC_h2p


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
      72  CHECKBOX_SetNumStates
      12  _PalCheckDisabled
      12  _PalCheckEnabled
       8  _aColorDisabled
       8  _aColorEnabled
      40  _abmCheck
      24  _acCheck

 
  64 bytes in section .rodata
 116 bytes in section .text
 
 116 bytes of CODE  memory
  64 bytes of CONST memory

Errors: none
Warnings: none
