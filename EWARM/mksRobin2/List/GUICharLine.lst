###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:57
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUICharLine.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUICharLine.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUICharLine.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUICharLine.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUICharLine.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUICharLine.C
     16          Purpose     : Implementation of character and string services
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>           /* needed for definition of NULL */
     21          #include <stdio.h>
     22          #include "GUI_Protected.h"
     23          
     24          /*********************************************************************
     25          *
     26          *       Static code
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       _DispLine
     33          */

   \                                 In section .text, align 2, keep-with-next
     34          static void _DispLine(const char GUI_UNI_PTR *s, int MaxNumChars, const GUI_RECT *pRect) {
   \                     _DispLine: (+1)
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4611             MOV      R1,R2
     35            /* Check if we have anything to do at all ... */
     36            if (GUI_Context.pClipRect_HL) {
   \   00000008   0x....             LDR.N    R5,??DataTable3
   \   0000000A   0x6928             LDR      R0,[R5, #+16]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD003             BEQ.N    ??_DispLine_0
     37              if (GUI_RectsIntersect(GUI_Context.pClipRect_HL, pRect) == 0)
   \   00000010   0x.... 0x....      BL       GUI_RectsIntersect
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD017             BEQ.N    ??_DispLine_1
     38                return;
   \                     ??_DispLine_0: (+1)
   \   00000018   0x69A8             LDR      R0,[R5, #+24]
   \   0000001A   0x6902             LDR      R2,[R0, #+16]
   \   0000001C   0x2A00             CMP      R2,#+0
   \   0000001E   0xD011             BEQ.N    ??_DispLine_2
     39            }
     40            #if GUI_COMPILER_SUPPORTS_FP
     41            if (GUI_Context.pAFont->pafEncode) {
     42              GUI_Context.pAFont->pafEncode->pfDispLine(s, MaxNumChars);
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x9801             LDR      R0,[SP, #+4]
   \   00000024   0x6892             LDR      R2,[R2, #+8]
   \   00000026   0x4790             BLX      R2
   \   00000028   0xBD73             POP      {R0,R1,R4-R6,PC}
     43            } else {
     44            #else
     45            {
     46            #endif
     47              U16 Char;
     48              while (--MaxNumChars >= 0) {
     49                Char = GUI_UC__GetCharCodeInc(&s);
   \                     ??_DispLine_3: (+1)
   \   0000002A   0xA801             ADD      R0,SP,#+4
   \   0000002C   0x.... 0x....      BL       GUI_UC__GetCharCodeInc
   \   00000030   0x4606             MOV      R6,R0
     50                GUI_Context.pAFont->pfDispChar(Char);
   \   00000032   0x69A9             LDR      R1,[R5, #+24]
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0x4788             BLX      R1
     51                if (GUI_pfDispCharStyle) {
   \   00000038   0x....             LDR.N    R0,??DataTable3_1
   \   0000003A   0x6801             LDR      R1,[R0, #+0]
   \   0000003C   0x0008             MOVS     R0,R1
   \   0000003E   0xD001             BEQ.N    ??_DispLine_2
     52                  GUI_pfDispCharStyle(Char);
   \   00000040   0x4630             MOV      R0,R6
   \   00000042   0x4788             BLX      R1
     53                }
     54              }
   \                     ??_DispLine_2: (+1)
   \   00000044   0x1E64             SUBS     R4,R4,#+1
   \   00000046   0xD5F0             BPL.N    ??_DispLine_3
     55            }
     56          }
   \                     ??_DispLine_1: (+1)
   \   00000048   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
     57          
     58          /*********************************************************************
     59          *
     60          *       Public code
     61          *
     62          **********************************************************************
     63          */
     64          /*********************************************************************
     65          *
     66          *       GUI__GetLineNumChars
     67          */

   \                                 In section .text, align 2, keep-with-next
     68          int GUI__GetLineNumChars(const char GUI_UNI_PTR *s, int MaxNumChars) {
   \                     GUI__GetLineNumChars: (+1)
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0x460C             MOV      R4,R1
     69            int NumChars = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     70            if (s) {
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD012             BEQ.N    ??GUI__GetLineNumChars_0
   \   0000000A   0x....             LDR.N    R0,??DataTable3
   \   0000000C   0x6980             LDR      R0,[R0, #+24]
   \   0000000E   0x6902             LDR      R2,[R0, #+16]
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD004             BEQ.N    ??GUI__GetLineNumChars_1
     71              #if GUI_COMPILER_SUPPORTS_FP
     72                if (GUI_Context.pAFont->pafEncode) {
     73                  return GUI_Context.pAFont->pafEncode->pfGetLineLen(s, MaxNumChars);
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0x6852             LDR      R2,[R2, #+4]
   \   00000018   0x4790             BLX      R2
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}
     74                }
     75              #endif
     76              for (; NumChars < MaxNumChars; NumChars++) {
   \                     ??GUI__GetLineNumChars_2: (+1)
   \   0000001C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??GUI__GetLineNumChars_1: (+1)
   \   0000001E   0x42A5             CMP      R5,R4
   \   00000020   0xDA06             BGE.N    ??GUI__GetLineNumChars_0
     77                U16 Data = GUI_UC__GetCharCodeInc(&s);
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x.... 0x....      BL       GUI_UC__GetCharCodeInc
     78                if ((Data == 0) || (Data == '\n')) {
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD001             BEQ.N    ??GUI__GetLineNumChars_0
   \   0000002C   0x280A             CMP      R0,#+10
   \   0000002E   0xD1F5             BNE.N    ??GUI__GetLineNumChars_2
     79                  break;
     80                }
     81              }
     82            }
     83            return NumChars;
   \                     ??GUI__GetLineNumChars_0: (+1)
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     84          }
     85          
     86          /*********************************************************************
     87          *
     88          *       GUI_GetLineDistX
     89          *
     90          *  This routine is used to calculate the length of a line in pixels.
     91          */

   \                                 In section .text, align 2, keep-with-next
     92          int GUI__GetLineDistX(const char GUI_UNI_PTR *s, int MaxNumChars) {
   \                     GUI__GetLineDistX: (+1)
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0x460C             MOV      R4,R1
     93            int Dist = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     94            if (s) {
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD010             BEQ.N    ??GUI__GetLineDistX_0
   \   0000000A   0x....             LDR.N    R0,??DataTable3
   \   0000000C   0x6980             LDR      R0,[R0, #+24]
   \   0000000E   0x6902             LDR      R2,[R0, #+16]
   \   00000010   0x2A00             CMP      R2,#+0
   \   00000012   0xD009             BEQ.N    ??GUI__GetLineDistX_1
     95              U16 Char;
     96              #if GUI_COMPILER_SUPPORTS_FP
     97                if (GUI_Context.pAFont->pafEncode) {
     98                  return GUI_Context.pAFont->pafEncode->pfGetLineDistX(s, MaxNumChars);
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x4790             BLX      R2
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}
     99                }
    100              #endif
    101              while (--MaxNumChars >= 0) {
    102                Char  = GUI_UC__GetCharCodeInc(&s);
   \                     ??GUI__GetLineDistX_2: (+1)
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       GUI_UC__GetCharCodeInc
    103                Dist += GUI_GetCharDistX(Char);
   \   00000022   0x.... 0x....      BL       GUI_GetCharDistX
   \   00000026   0x1945             ADDS     R5,R0,R5
    104              }
   \                     ??GUI__GetLineDistX_1: (+1)
   \   00000028   0x1E64             SUBS     R4,R4,#+1
   \   0000002A   0xD5F7             BPL.N    ??GUI__GetLineDistX_2
    105            }
    106            return Dist;
   \                     ??GUI__GetLineDistX_0: (+1)
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    107          }
    108          
    109          /*********************************************************************
    110          *
    111          *       GUI__DispLine
    112          */

   \                                 In section .text, align 2, keep-with-next
    113          void GUI__DispLine(const char GUI_UNI_PTR *s, int MaxNumChars, const GUI_RECT* pr) {
   \                     GUI__DispLine: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4611             MOV      R1,R2
    114            GUI_RECT r;
    115            #if GUI_SUPPORT_ROTATION
    116            if (GUI_pLCD_APIList) {
   \   00000008   0x....             LDR.N    R0,??DataTable3_2
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD00E             BEQ.N    ??GUI__DispLine_0
    117              #if GUI_WINSUPPORT
    118              WM_ITERATE_START(NULL) {
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       WM__InitIVRSearch
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD042             BEQ.N    ??GUI__DispLine_1
    119              #endif
    120                /* Do the actual drawing via routine call. */
    121                _DispLine(s, MaxNumChars, &r);
   \                     ??GUI__DispLine_2: (+1)
   \   0000001A   0xAA00             ADD      R2,SP,#+0
   \   0000001C   0x4629             MOV      R1,R5
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       _DispLine
    122              #if GUI_WINSUPPORT
    123              } WM_ITERATE_END();
   \   00000024   0x.... 0x....      BL       WM__GetNextIVR
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD1F6             BNE.N    ??GUI__DispLine_2
   \   0000002C   0xBD73             POP      {R0,R1,R4-R6,PC}
    124              #endif
    125            } else
    126            #endif
    127            {
    128              r = *pr;
   \                     ??GUI__DispLine_0: (+1)
   \   0000002E   0xA800             ADD      R0,SP,#+0
   \   00000030   0x2208             MOVS     R2,#+8
   \   00000032   0x.... 0x....      BL       __aeabi_memcpy
    129              #if GUI_WINSUPPORT
    130              WM_ADDORG(r.x0, r.y0);
   \   00000036   0x....             LDR.N    R6,??DataTable3
   \   00000038   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000003C   0x6C31             LDR      R1,[R6, #+64]
   \   0000003E   0x1808             ADDS     R0,R1,R0
   \   00000040   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000044   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000048   0x6C71             LDR      R1,[R6, #+68]
   \   0000004A   0x1808             ADDS     R0,R1,R0
   \   0000004C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    131              WM_ADDORG(r.x1, r.y1);
   \   00000050   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000054   0x6C31             LDR      R1,[R6, #+64]
   \   00000056   0x1808             ADDS     R0,R1,R0
   \   00000058   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \   0000005C   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000060   0x6C71             LDR      R1,[R6, #+68]
   \   00000062   0x1808             ADDS     R0,R1,R0
   \   00000064   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    132              WM_ITERATE_START(&r) {
   \   00000068   0xA800             ADD      R0,SP,#+0
   \   0000006A   0x.... 0x....      BL       WM__InitIVRSearch
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD00E             BEQ.N    ??GUI__DispLine_3
    133              #endif
    134                GUI_Context.DispPosX = r.x0;
   \                     ??GUI__DispLine_4: (+1)
   \   00000072   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000076   0x8470             STRH     R0,[R6, #+34]
    135                GUI_Context.DispPosY = r.y0;
   \   00000078   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000007C   0x84B0             STRH     R0,[R6, #+36]
    136                /* Do the actual drawing via routine call. */
    137                _DispLine(s, MaxNumChars, &r);
   \   0000007E   0xAA00             ADD      R2,SP,#+0
   \   00000080   0x4629             MOV      R1,R5
   \   00000082   0x4620             MOV      R0,R4
   \   00000084   0x.... 0x....      BL       _DispLine
    138              #if GUI_WINSUPPORT
    139              } WM_ITERATE_END();
   \   00000088   0x.... 0x....      BL       WM__GetNextIVR
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD1F0             BNE.N    ??GUI__DispLine_4
    140              WM_SUBORG(GUI_Context.DispPosX, GUI_Context.DispPosY);
   \                     ??GUI__DispLine_3: (+1)
   \   00000090   0x8C70             LDRH     R0,[R6, #+34]
   \   00000092   0x6C31             LDR      R1,[R6, #+64]
   \   00000094   0x1A40             SUBS     R0,R0,R1
   \   00000096   0x8470             STRH     R0,[R6, #+34]
   \   00000098   0x8CB0             LDRH     R0,[R6, #+36]
   \   0000009A   0x6C71             LDR      R1,[R6, #+68]
   \   0000009C   0x1A40             SUBS     R0,R0,R1
   \   0000009E   0x84B0             STRH     R0,[R6, #+36]
    141              #endif
    142            }
    143          }
   \                     ??GUI__DispLine_1: (+1)
   \   000000A0   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     GUI_pfDispCharStyle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     GUI_pLCD_APIList
    144          
    145          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   GUI__DispLine
        24   -> WM__GetNextIVR
        24   -> WM__InitIVRSearch
        24   -> _DispLine
        24   -> __aeabi_memcpy
      16   GUI__GetLineDistX
        16   -- Indirect call
        16   -> GUI_GetCharDistX
        16   -> GUI_UC__GetCharCodeInc
      16   GUI__GetLineNumChars
        16   -- Indirect call
        16   -> GUI_UC__GetCharCodeInc
      24   _DispLine
        24   -- Indirect call
        24   -> GUI_RectsIntersect
        24   -> GUI_UC__GetCharCodeInc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
     162  GUI__DispLine
      48  GUI__GetLineDistX
      52  GUI__GetLineNumChars
      74  _DispLine

 
 348 bytes in section .text
 
 348 bytes of CODE memory

Errors: none
Warnings: none
