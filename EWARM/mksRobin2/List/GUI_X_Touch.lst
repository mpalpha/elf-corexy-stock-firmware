###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:56
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI_X\GUI_X_Touch.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI_X\GUI_X_Touch.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\GUI_X_Touch.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUI_X_Touch.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈıÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI_X\GUI_X_Touch.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_TOUCH_X.C
     16          Purpose     : Config / System dependent externals for GUI
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "GUI.h"
     21          #include "GUI_X.h"
     22          //#include "SZ_TouchScreen.h"
     23          #include "mks_touch_screen.h"
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void GUI_TOUCH_X_ActivateX(void) {
     26          }
   \                     GUI_TOUCH_X_ActivateX: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     27          

   \                                 In section .text, align 2, keep-with-next
     28          void GUI_TOUCH_X_ActivateY(void) {
     29          }
   \                     GUI_TOUCH_X_ActivateY: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     30          #if 0
     31          int  GUI_TOUCH_X_MeasureX(void) {
     32          	TOUCH_EVENT * pTouchEvent = 0;
     33          	
     34          	pTouchEvent = getTouchEvent();
     35          
     36          	if(pTouchEvent == 0)
     37          		return 0;
     38          
     39          //	if(pTouchEvent->state == PEN_DOWN)
     40          	{
     41          		return pTouchEvent->x;
     42          	}
     43          	//else
     44          	{
     45          	//	return 0;
     46          	}
     47           // return ADS_Read_X();
     48          }
     49          
     50          int  GUI_TOUCH_X_MeasureY(void) {
     51           	TOUCH_EVENT * pTouchEvent = 0;
     52          
     53          	
     54          	pTouchEvent = getTouchEvent();
     55          	if(pTouchEvent == 0)
     56          		return 0;
     57          
     58          //	if(pTouchEvent->state == PEN_DOWN)
     59          	{
     60          		return pTouchEvent->y;
     61          	}
     62          //	else
     63          	{
     64          	//	return 0;
     65          	}
     66          	// return ADS_Read_Y();
     67          }
     68          
     69          int GUI_TOUCH_X_MeasureXY(uint16_t *pX, uint16_t *pY)
     70          {
     71          	TOUCH_EVENT * pTouchEvent = 0;
     72          	
     73          	pTouchEvent = getTouchEvent();
     74          	
     75          	if(pTouchEvent == 0)
     76          		return 0;
     77          
     78          	 *pX = pTouchEvent->x;
     79          	 *pY = pTouchEvent->y;
     80          
     81          	return 1;
     82          
     83          }
     84          #else

   \                                 In section .bss, align 4
     85          static TOUCH_EVENT gTouchEvent;
   \                     gTouchEvent:
   \   00000000                      DS8 12
     86          static GUI_PID_STATE State;
                                      ^
Warning[Pe177]: variable "State" was declared but never referenced

   \                                 In section .text, align 2, keep-with-next
     87          int  GUI_TOUCH_X_MeasureX(void) {
   \                     GUI_TOUCH_X_MeasureX: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     88          #if 0
     89          	TOUCH_EVENT * pTouchEvent = 0;
     90          	
     91          	pTouchEvent = getTouchEvent();
     92          
     93          	if(pTouchEvent == 0)
     94          		return 0;
     95          
     96          //	if(pTouchEvent->state == PEN_DOWN)
     97          	{
     98          		return pTouchEvent->x;
     99          	}
    100          	//else
    101          	{
    102          	//	return 0;
    103          	}
    104           // return ADS_Read_X();
    105          #else
    106           	//if(sd_pause_flag==0)                    //skyblue add
    107          	getTouchEvent(&gTouchEvent);
   \   00000002   0x....             LDR.N    R4,??DataTable3
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      BL       getTouchEvent
    108          	
    109          	if(gTouchEvent.state == PEN_UP)
   \   0000000A   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD101             BNE.N    ??GUI_TOUCH_X_MeasureX_0
    110            {
    111              gTouchEvent.x = 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x6020             STR      R0,[R4, #+0]
    112          		gTouchEvent.y = 0;
    113            }
    114          	return gTouchEvent.x;
   \                     ??GUI_TOUCH_X_MeasureX_0: (+1)
   \   00000016   0x8820             LDRH     R0,[R4, #+0]
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
    115          #endif
    116          }
    117          

   \                                 In section .text, align 2, keep-with-next
    118          int  GUI_TOUCH_X_MeasureY(void) {
    119          	#if 0
    120           	TOUCH_EVENT * pTouchEvent = 0;
    121          
    122          	
    123          	pTouchEvent = getTouchEvent();
    124          	if(pTouchEvent == 0)
    125          		return 0;
    126          
    127          //	if(pTouchEvent->state == PEN_DOWN)
    128          	{
    129          		return pTouchEvent->y;
    130          	}
    131          //	else
    132          	{
    133          	//	return 0;
    134          	}
    135          	// return ADS_Read_Y();
    136          	#else
    137          	return gTouchEvent.y;
   \                     GUI_TOUCH_X_MeasureY: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3
   \   00000002   0x8840             LDRH     R0,[R0, #+2]
   \   00000004   0x4770             BX       LR               ;; return
    138          	#endif
    139          
    140          }
    141          

   \                                 In section .text, align 2, keep-with-next
    142          int  GUI_TOUCH_X_MeasureState(void) 
    143          {	
    144          	//getTouchEvent(&gTouchEvent);
    145           	return gTouchEvent.state;
   \                     GUI_TOUCH_X_MeasureState: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable3
   \   00000002   0xF990 0x0004      LDRSB    R0,[R0, #+4]
   \   00000006   0x4770             BX       LR               ;; return
    146          }
    147          

   \                                 In section .text, align 2, keep-with-next
    148          int GUI_TOUCH_X_MeasureXY(uint16_t *pX, uint16_t *pY)
    149          {
   \                     GUI_TOUCH_X_MeasureXY: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    150          #if 0
    151          	TOUCH_EVENT * pTouchEvent = 0;
    152          	
    153          	pTouchEvent = getTouchEvent();
    154          	
    155          	if(pTouchEvent == 0)
    156          		return 0;
    157          
    158          	 *pX = pTouchEvent->x;
    159          	 *pY = pTouchEvent->y;
    160          
    161          	return 1;
    162          #else
    163          	getTouchEvent(&gTouchEvent);
   \   00000006   0x....             LDR.N    R6,??DataTable3
   \   00000008   0x4630             MOV      R0,R6
   \   0000000A   0x.... 0x....      BL       getTouchEvent
    164          
    165          	if(gTouchEvent.state == PEN_UP)
   \   0000000E   0xF996 0x0004      LDRSB    R0,[R6, #+4]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD101             BNE.N    ??GUI_TOUCH_X_MeasureXY_0
    166          	{
    167          		gTouchEvent.x = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6030             STR      R0,[R6, #+0]
    168          		gTouchEvent.y = 0;
    169          	}
    170          
    171          	*pX = gTouchEvent.x;
   \                     ??GUI_TOUCH_X_MeasureXY_0: (+1)
   \   0000001A   0x8830             LDRH     R0,[R6, #+0]
   \   0000001C   0x8020             STRH     R0,[R4, #+0]
    172          	*pY = gTouchEvent.y;
   \   0000001E   0x8870             LDRH     R0,[R6, #+2]
   \   00000020   0x8028             STRH     R0,[R5, #+0]
    173          
    174          	return 1;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
    175          #endif
    176          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     gTouchEvent
    177          #endif
    178          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GUI_TOUCH_X_ActivateX
       0   GUI_TOUCH_X_ActivateY
       0   GUI_TOUCH_X_MeasureState
       8   GUI_TOUCH_X_MeasureX
         8   -> getTouchEvent
      16   GUI_TOUCH_X_MeasureXY
        16   -> getTouchEvent
       0   GUI_TOUCH_X_MeasureY


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       2  GUI_TOUCH_X_ActivateX
       2  GUI_TOUCH_X_ActivateY
       8  GUI_TOUCH_X_MeasureState
      26  GUI_TOUCH_X_MeasureX
      38  GUI_TOUCH_X_MeasureXY
       6  GUI_TOUCH_X_MeasureY
      12  gTouchEvent

 
 12 bytes in section .bss
 86 bytes in section .text
 
 86 bytes of CODE memory
 12 bytes of DATA memory

Errors: none
Warnings: 1
