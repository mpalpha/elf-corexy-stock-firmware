###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:39
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DispStringInRectEx.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DispStringInRectEx.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUI_DispStringInRectEx.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUI_DispStringInRectEx.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DispStringInRectEx.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_DispStringInRectEx.c
     16          Purpose     : Implementation of GUI_DispStringInRectEx
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>
     21          #include "GUI_Private.h"
     22          #if GUI_WINSUPPORT
     23            #include "WM.h"
     24          #endif
     25          
     26          #if GUI_SUPPORT_ROTATION
     27          
     28          /*********************************************************************
     29          *
     30          *       Global data
     31          *
     32          **********************************************************************
     33          */
     34          

   \                                 In section .bss, align 4
     35          GUI_RECT GUI_RectDispString; /* Used by LCD_Rotate... */
   \                     GUI_RectDispString:
   \   00000000                      DS8 8
     36          
     37          /*********************************************************************
     38          *
     39          *       Static code
     40          *
     41          **********************************************************************
     42          */

   \                                 In section .text, align 2, keep-with-next
     43          static const GUI_ROTATION * _SetRotation(const GUI_ROTATION* pLCD_Api) {
   \                     _SetRotation: (+1)
   \   00000000   0xB410             PUSH     {R4}
     44            const GUI_ROTATION * pLCD_ApiOld;
     45            GUI_LOCK();
     46            pLCD_ApiOld = GUI_pLCD_APIList;
   \   00000002   0x....             LDR.N    R2,??DataTable2
   \   00000004   0x6811             LDR      R1,[R2, #+0]
     47            if (pLCD_Api) {
   \   00000006   0x....             LDR.N    R3,??DataTable2_1
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD002             BEQ.N    ??_SetRotation_0
     48              GUI_Context.pClipRect_HL = NULL;           /* Do not perform high level clipping in rotated mode */
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0x611C             STR      R4,[R3, #+16]
   \   00000010   0xE001             B.N      ??_SetRotation_1
     49            } else {
     50              GUI_Context.pClipRect_HL = &GUI_Context.ClipRect;
   \                     ??_SetRotation_0: (+1)
   \   00000012   0x1D1C             ADDS     R4,R3,#+4
   \   00000014   0x611C             STR      R4,[R3, #+16]
     51            }
     52            GUI_pLCD_APIList = pLCD_Api;
   \                     ??_SetRotation_1: (+1)
   \   00000016   0x6010             STR      R0,[R2, #+0]
     53            GUI_UNLOCK();
     54            return pLCD_ApiOld;
   \   00000018   0x4608             MOV      R0,R1
   \   0000001A   0xBC10             POP      {R4}
   \   0000001C   0x4770             BX       LR               ;; return
     55          }
     56          
     57          /*********************************************************************
     58          *
     59          *       Exported code
     60          *
     61          **********************************************************************
     62          */
     63          /*********************************************************************
     64          *
     65          *       GUI_DispStringInRectEx
     66          */

   \                                 In section .text, align 2, keep-with-next
     67          void GUI_DispStringInRectEx(const char GUI_UNI_PTR *s, GUI_RECT* pRect, int TextAlign, int MaxLen, const GUI_ROTATION * pLCD_Api) {
   \                     GUI_DispStringInRectEx: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x461F             MOV      R7,R3
   \   0000000E   0xF8DD 0x8030      LDR      R8,[SP, #+48]
     68            const GUI_ROTATION * pLCD_ApiOld;
     69            if (pLCD_Api == GUI_ROTATE_0) {
   \   00000012   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000016   0xD102             BNE.N    ??GUI_DispStringInRectEx_0
     70              /* Do nothing else but calling GUI_DispStringInRectMax if pLCD_Api == GUI_ROTATE_0 */
     71              GUI_DispStringInRectMax(s, pRect, TextAlign, MaxLen);
   \   00000018   0x.... 0x....      BL       GUI_DispStringInRectMax
   \   0000001C   0xE036             B.N      ??GUI_DispStringInRectEx_1
     72            } else {
     73              #if (!GUI_WINSUPPORT)
     74                GUI_RECT Rect_Old;
     75              #else
     76                const GUI_RECT * pOldClipRect = NULL;
   \                     ??GUI_DispStringInRectEx_0: (+1)
   \   0000001E   0xF04F 0x0900      MOV      R9,#+0
     77              #endif
     78              GUI_RECT rClip, rText = {0};
   \   00000022   0x.... 0x....      ADR.W    R2,`?<Constant {0}>`
   \   00000026   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   0000002A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
     79              GUI_LOCK();
     80              /* Set the clip rectangle */
     81              if (pRect) {
   \   0000002E   0x2D00             CMP      R5,#+0
   \   00000030   0xD018             BEQ.N    ??GUI_DispStringInRectEx_2
     82                rText = *pRect;
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x4629             MOV      R1,R5
   \   00000036   0x2208             MOVS     R2,#+8
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy
     83                GUI_RectDispString = rText;
   \   0000003C   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000040   0x....             LDR.N    R2,??DataTable2_2
   \   00000042   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
     84                #if (GUI_WINSUPPORT)
     85                  pOldClipRect = WM_SetUserClipRect(pRect);
   \   00000046   0x4628             MOV      R0,R5
   \   00000048   0x.... 0x....      BL       WM_SetUserClipRect
   \   0000004C   0x4681             MOV      R9,R0
     86                  if (pOldClipRect) {
   \   0000004E   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000052   0xD007             BEQ.N    ??GUI_DispStringInRectEx_2
     87                    GUI__IntersectRects(&rClip, pRect, pOldClipRect);
   \   00000054   0x464A             MOV      R2,R9
   \   00000056   0x4629             MOV      R1,R5
   \   00000058   0xA802             ADD      R0,SP,#+8
   \   0000005A   0x.... 0x....      BL       GUI__IntersectRects
     88                    WM_SetUserClipRect(&rClip);
   \   0000005E   0xA802             ADD      R0,SP,#+8
   \   00000060   0x.... 0x....      BL       WM_SetUserClipRect
     89                  }
     90                #else
     91                  Rect_Old = GUI_Context.ClipRect;
     92                  GUI__IntersectRects(&rClip, pRect, &Rect_Old);
     93                  LCD_SetClipRectEx(&rClip);
     94                #endif
     95              }
     96              pLCD_ApiOld = _SetRotation(pLCD_Api);                /* Set the new function pointer for rotating text */
   \                     ??GUI_DispStringInRectEx_2: (+1)
   \   00000064   0x4640             MOV      R0,R8
   \   00000066   0x.... 0x....      BL       _SetRotation
   \   0000006A   0x4605             MOV      R5,R0
     97              pLCD_Api->pfRect2TextRect(&rText);                   /* Calculate the text rectangle */
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0xF8D8 0x1004      LDR      R1,[R8, #+4]
   \   00000072   0x4788             BLX      R1
     98              GUI__DispStringInRect(s, &rText, TextAlign, MaxLen); /* Display the string */
   \   00000074   0x463B             MOV      R3,R7
   \   00000076   0x4632             MOV      R2,R6
   \   00000078   0xA900             ADD      R1,SP,#+0
   \   0000007A   0x4620             MOV      R0,R4
   \   0000007C   0x.... 0x....      BL       GUI__DispStringInRect
     99              /* Restore old clipping rectangle */
    100              #if (GUI_WINSUPPORT)
    101                WM_SetUserClipRect(pOldClipRect);
   \   00000080   0x4648             MOV      R0,R9
   \   00000082   0x.... 0x....      BL       WM_SetUserClipRect
    102              #else
    103                LCD_SetClipRectEx(&Rect_Old);
    104              #endif
    105              _SetRotation(pLCD_ApiOld);
   \   00000086   0x4628             MOV      R0,R5
   \   00000088   0x.... 0x....      BL       _SetRotation
    106              GUI_UNLOCK();
    107            }
    108          }
   \                     ??GUI_DispStringInRectEx_1: (+1)
   \   0000008C   0xB005             ADD      SP,SP,#+20
   \   0000008E   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     GUI_pLCD_APIList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     GUI_RectDispString

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
    109          
    110          #else                                 /* Avoid empty object files */
    111          void GUI_DispStringInRectEx_C(void);
    112          void GUI_DispStringInRectEx_C(void) {}
    113          #endif
    114          
    115          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   GUI_DispStringInRectEx
        48   -- Indirect call
        48   -> GUI_DispStringInRectMax
        48   -> GUI__DispStringInRect
        48   -> GUI__IntersectRects
        48   -> WM_SetUserClipRect
        48   -> _SetRotation
        48   -> __aeabi_memcpy
       4   _SetRotation


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0}>
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
     146  GUI_DispStringInRectEx
       8  GUI_RectDispString
      30  _SetRotation

 
   8 bytes in section .bss
 196 bytes in section .text
 
 196 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
