###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:00:50
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX_MultiSel.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX_MultiSel.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\LISTBOX_MultiSel.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\LISTBOX_MultiSel.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\LISTBOX_MultiSel.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : LISTBOX_MultiSel.c
     16          Purpose     : Implementation of listbox widget
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stdlib.h>
     21          #include "GUI_ARRAY.h"
     22          #include "LISTBOX_Private.h"
     23          #include "GUIDebug.h"
     24          #include "GUI_Protected.h"
     25          #include "WM_Intern.h"
     26          
     27          #if GUI_WINSUPPORT
     28          
     29          /*********************************************************************
     30          *
     31          *       Exported routines:  Various methods
     32          *
     33          **********************************************************************
     34          */
     35          /*********************************************************************
     36          *
     37          *       LISTBOX_SetMulti
     38          */

   \                                 In section .text, align 2, keep-with-next
     39          void LISTBOX_SetMulti(LISTBOX_Handle hObj, int Mode) {
   \                     LISTBOX_SetMulti: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     40            if (hObj) {
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD01B             BEQ.N    ??LISTBOX_SetMulti_0
     41              LISTBOX_Obj* pObj;
     42              WM_LOCK();
     43              pObj = LISTBOX_H2P(hObj);
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
     44              if (Mode) {
   \   0000000E   0xF890 0x1074      LDRB     R1,[R0, #+116]
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD00A             BEQ.N    ??LISTBOX_SetMulti_1
     45                if (!(pObj->Flags & LISTBOX_SF_MULTISEL)) {
   \   00000016   0x074A             LSLS     R2,R1,#+29
   \   00000018   0xD413             BMI.N    ??LISTBOX_SetMulti_0
     46                  pObj->Flags |= LISTBOX_SF_MULTISEL;
   \   0000001A   0xF041 0x0104      ORR      R1,R1,#0x4
   \   0000001E   0xF880 0x1074      STRB     R1,[R0, #+116]
     47                  LISTBOX__InvalidateInsideArea(hObj);
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000028   0x.... 0x....      B.W      LISTBOX__InvalidateInsideArea
     48                }
     49              } else {
     50                if (pObj->Flags & LISTBOX_SF_MULTISEL) {
   \                     ??LISTBOX_SetMulti_1: (+1)
   \   0000002C   0x074A             LSLS     R2,R1,#+29
   \   0000002E   0xD508             BPL.N    ??LISTBOX_SetMulti_0
     51                  pObj->Flags &= ~LISTBOX_SF_MULTISEL;
   \   00000030   0xF001 0x01FB      AND      R1,R1,#0xFB
   \   00000034   0xF880 0x1074      STRB     R1,[R0, #+116]
     52                  LISTBOX__InvalidateInsideArea(hObj);
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000003E   0x.... 0x....      B.W      LISTBOX__InvalidateInsideArea
     53                }
     54              }
     55              WM_UNLOCK();
     56            }
     57          }
   \                     ??LISTBOX_SetMulti_0: (+1)
   \   00000042   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     58          
     59          /*********************************************************************
     60          *
     61          *       LISTBOX_GetMulti
     62          */

   \                                 In section .text, align 2, keep-with-next
     63          int LISTBOX_GetMulti(LISTBOX_Handle hObj) {
   \                     LISTBOX_GetMulti: (+1)
   \   00000000   0x4601             MOV      R1,R0
     64            int Multi = 0;
   \   00000002   0x2000             MOVS     R0,#+0
     65            if (hObj) {
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD100             BNE.N    ??LISTBOX_GetMulti_0
   \   00000008   0x4770             BX       LR
     66              LISTBOX_Obj* pObj;
     67              WM_LOCK();
     68              pObj = LISTBOX_H2P(hObj);
   \                     ??LISTBOX_GetMulti_0: (+1)
   \   0000000A   0xB580             PUSH     {R7,LR}
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x.... 0x....      BL       GUI_ALLOC_h2p
     69              if (!(pObj->Flags & LISTBOX_SF_MULTISEL)) {
     70                Multi = 0;
   \   00000012   0xF890 0x0074      LDRB     R0,[R0, #+116]
   \   00000016   0x0880             LSRS     R0,R0,#+2
   \   00000018   0xF000 0x0001      AND      R0,R0,#0x1
     71              } else {
     72                Multi = 1;
     73              }
     74              WM_UNLOCK();
     75            }
     76            return Multi;
   \   0000001C   0xBD02             POP      {R1,PC}          ;; return
     77          }
     78          
     79          /*********************************************************************
     80          *
     81          *       LISTBOX_GetItemSel
     82          */

   \                                 In section .text, align 2, keep-with-next
     83          int LISTBOX_GetItemSel(LISTBOX_Handle hObj, unsigned Index) {
   \                     LISTBOX_GetItemSel: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
     84            int Ret = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     85            if (hObj) {
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD017             BEQ.N    ??LISTBOX_GetItemSel_0
     86              unsigned NumItems;
     87              LISTBOX_Obj* pObj;
     88              WM_LOCK();
     89              pObj = LISTBOX_H2P(hObj);
   \   0000000A   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   0000000E   0x4606             MOV      R6,R0
     90              NumItems = LISTBOX__GetNumItems(pObj);
     91              if ((Index < NumItems) && (pObj->Flags & LISTBOX_SF_MULTISEL)) {
   \   00000010   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000014   0x4285             CMP      R5,R0
   \   00000016   0xD210             BCS.N    ??LISTBOX_GetItemSel_0
   \   00000018   0xF896 0x0074      LDRB     R0,[R6, #+116]
   \   0000001C   0x0740             LSLS     R0,R0,#+29
   \   0000001E   0xD50C             BPL.N    ??LISTBOX_GetItemSel_0
     92                WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Index);
   \   00000020   0x4629             MOV      R1,R5
   \   00000022   0xF106 0x0028      ADD      R0,R6,#+40
   \   00000026   0x.... 0x....      BL       GUI_ARRAY_GethItem
     93                if (hItem) {
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD005             BEQ.N    ??LISTBOX_GetItemSel_0
     94                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
   \   0000002E   0x.... 0x....      BL       GUI_ALLOC_h2p
     95                  if (pItem->Status & LISTBOX_ITEM_SELECTED) {
   \   00000032   0x7900             LDRB     R0,[R0, #+4]
   \   00000034   0x07C0             LSLS     R0,R0,#+31
   \   00000036   0xD500             BPL.N    ??LISTBOX_GetItemSel_0
     96                    Ret = 1;
   \   00000038   0x2401             MOVS     R4,#+1
     97                  }
     98                }
     99              }
    100              WM_UNLOCK();
    101            }
    102            return Ret;
   \                     ??LISTBOX_GetItemSel_0: (+1)
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    103          }
    104          
    105          /*********************************************************************
    106          *
    107          *       LISTBOX_SetItemSel
    108          */

   \                                 In section .text, align 2, keep-with-next
    109          void LISTBOX_SetItemSel(LISTBOX_Handle hObj, unsigned Index, int OnOff) {
   \                     LISTBOX_SetItemSel: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4617             MOV      R7,R2
    110            if (hObj) {
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD02E             BEQ.N    ??LISTBOX_SetItemSel_0
    111              unsigned NumItems;
    112              LISTBOX_Obj* pObj;
    113              WM_LOCK();
    114              pObj = LISTBOX_H2P(hObj);
   \   0000000C   0x.... 0x....      BL       GUI_ALLOC_h2p
   \   00000010   0x4606             MOV      R6,R0
    115              NumItems = LISTBOX__GetNumItems(pObj);
    116              if ((Index < NumItems) && (pObj->Flags & LISTBOX_SF_MULTISEL)) {
   \   00000012   0x.... 0x....      BL       LISTBOX__GetNumItems
   \   00000016   0x4285             CMP      R5,R0
   \   00000018   0xD227             BCS.N    ??LISTBOX_SetItemSel_0
   \   0000001A   0xF896 0x0074      LDRB     R0,[R6, #+116]
   \   0000001E   0x0740             LSLS     R0,R0,#+29
   \   00000020   0xD523             BPL.N    ??LISTBOX_SetItemSel_0
    117                WM_HMEM hItem = GUI_ARRAY_GethItem(&pObj->ItemArray, Index);
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0xF106 0x0028      ADD      R0,R6,#+40
   \   00000028   0x.... 0x....      BL       GUI_ARRAY_GethItem
    118                if (hItem) {
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD01C             BEQ.N    ??LISTBOX_SetItemSel_0
    119                  LISTBOX_ITEM * pItem = (LISTBOX_ITEM *)GUI_ALLOC_h2p(hItem);
   \   00000030   0x.... 0x....      BL       GUI_ALLOC_h2p
    120                  if (OnOff) {
   \   00000034   0x7901             LDRB     R1,[R0, #+4]
   \   00000036   0x2F00             CMP      R7,#+0
   \   00000038   0xD00B             BEQ.N    ??LISTBOX_SetItemSel_1
    121                    if (!(pItem->Status & LISTBOX_ITEM_SELECTED)) {
   \   0000003A   0x07CA             LSLS     R2,R1,#+31
   \   0000003C   0xD415             BMI.N    ??LISTBOX_SetItemSel_0
    122                      pItem->Status |= LISTBOX_ITEM_SELECTED;
   \   0000003E   0xF041 0x0101      ORR      R1,R1,#0x1
   \   00000042   0x7101             STRB     R1,[R0, #+4]
    123                      LISTBOX__InvalidateItem(hObj, pObj, Index);
   \   00000044   0x462A             MOV      R2,R5
   \   00000046   0x4631             MOV      R1,R6
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   0000004E   0x.... 0x....      B.W      LISTBOX__InvalidateItem
    124                    }
    125                  } else {
    126                    if (pItem->Status & LISTBOX_ITEM_SELECTED) {
   \                     ??LISTBOX_SetItemSel_1: (+1)
   \   00000052   0x07CA             LSLS     R2,R1,#+31
   \   00000054   0xD509             BPL.N    ??LISTBOX_SetItemSel_0
    127                      pItem->Status &= ~LISTBOX_ITEM_SELECTED;
   \   00000056   0xF001 0x01FE      AND      R1,R1,#0xFE
   \   0000005A   0x7101             STRB     R1,[R0, #+4]
    128                      LISTBOX__InvalidateItem(hObj, pObj, Index);
   \   0000005C   0x462A             MOV      R2,R5
   \   0000005E   0x4631             MOV      R1,R6
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000066   0x.... 0x....      B.W      LISTBOX__InvalidateItem
    129                    }
    130                  }
    131                }
    132              }
    133              WM_UNLOCK();
    134            }
    135          }
   \                     ??LISTBOX_SetItemSel_0: (+1)
   \   0000006A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    136          
    137          #else                            /* Avoid problems with empty object modules */
    138            void LISTBOX_MultiSel_C(void) {}
    139          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   LISTBOX_GetItemSel
        16   -> GUI_ALLOC_h2p
        16   -> GUI_ARRAY_GethItem
        16   -> LISTBOX__GetNumItems
       8   LISTBOX_GetMulti
         8   -> GUI_ALLOC_h2p
      24   LISTBOX_SetItemSel
        24   -> GUI_ALLOC_h2p
        24   -> GUI_ARRAY_GethItem
        24   -> LISTBOX__GetNumItems
         0   -> LISTBOX__InvalidateItem
      16   LISTBOX_SetMulti
        16   -> GUI_ALLOC_h2p
         0   -> LISTBOX__InvalidateInsideArea


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      62  LISTBOX_GetItemSel
      30  LISTBOX_GetMulti
     108  LISTBOX_SetItemSel
      68  LISTBOX_SetMulti

 
 268 bytes in section .text
 
 268 bytes of CODE memory

Errors: none
Warnings: none
