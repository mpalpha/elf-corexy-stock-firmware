###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:04
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\BUTTON_Default.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\BUTTON_Default.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\BUTTON_Default.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\BUTTON_Default.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Widget\BUTTON_Default.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : BUTTON_Default.c
     16          Purpose     : Implementation of button widget
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "BUTTON_Private.h"
     21          
     22          #if GUI_WINSUPPORT
     23          
     24          /*********************************************************************
     25          *
     26          *       Exported routines
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       BUTTON_SetDefaultFont
     33          */

   \                                 In section .text, align 2, keep-with-next
     34          void BUTTON_SetDefaultFont(const GUI_FONT GUI_UNI_PTR * pFont) {
     35            BUTTON__DefaultProps.pFont = pFont;
   \                     BUTTON_SetDefaultFont: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7
   \   00000002   0x6188             STR      R0,[R1, #+24]
     36          }
   \   00000004   0x4770             BX       LR               ;; return
     37          
     38          /*********************************************************************
     39          *
     40          *       BUTTON_SetDefaultTextColor
     41          */

   \                                 In section .text, align 2, keep-with-next
     42          void BUTTON_SetDefaultTextColor(GUI_COLOR Color, unsigned Index) {
     43            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aTextColor)) {
   \                     BUTTON_SetDefaultTextColor: (+1)
   \   00000000   0x2903             CMP      R1,#+3
   \   00000002   0xD203             BCS.N    ??BUTTON_SetDefaultTextColor_0
     44              BUTTON__DefaultProps.aTextColor[Index] = Color;
   \   00000004   0x....             LDR.N    R2,??DataTable7
   \   00000006   0xEB02 0x0181      ADD      R1,R2,R1, LSL #+2
   \   0000000A   0x60C8             STR      R0,[R1, #+12]
     45            }
     46          }
   \                     ??BUTTON_SetDefaultTextColor_0: (+1)
   \   0000000C   0x4770             BX       LR               ;; return
     47          
     48          /*********************************************************************
     49          *
     50          *       BUTTON_SetDefaultBkColor
     51          */

   \                                 In section .text, align 2, keep-with-next
     52          void BUTTON_SetDefaultBkColor(GUI_COLOR Color, unsigned Index) {
     53            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aBkColor)) {
   \                     BUTTON_SetDefaultBkColor: (+1)
   \   00000000   0x2903             CMP      R1,#+3
   \   00000002   0xD202             BCS.N    ??BUTTON_SetDefaultBkColor_0
     54              BUTTON__DefaultProps.aBkColor[Index] = Color;
   \   00000004   0x....             LDR.N    R2,??DataTable7
   \   00000006   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
     55            }
     56          }
   \                     ??BUTTON_SetDefaultBkColor_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return
     57          
     58          /*********************************************************************
     59          *
     60          *       BUTTON_SetDefaultTextAlign
     61          */

   \                                 In section .text, align 2, keep-with-next
     62          void BUTTON_SetDefaultTextAlign(int Align) {
     63            BUTTON__DefaultProps.Align = Align;
   \                     BUTTON_SetDefaultTextAlign: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable7
   \   00000002   0x8388             STRH     R0,[R1, #+28]
     64          }
   \   00000004   0x4770             BX       LR               ;; return
     65          
     66          /*********************************************************************
     67          *
     68          *       BUTTON_GetDefaultFont
     69          */

   \                                 In section .text, align 2, keep-with-next
     70          const GUI_FONT GUI_UNI_PTR * BUTTON_GetDefaultFont(void) {
     71            return BUTTON__DefaultProps.pFont;
   \                     BUTTON_GetDefaultFont: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7
   \   00000002   0x6980             LDR      R0,[R0, #+24]
   \   00000004   0x4770             BX       LR               ;; return
     72          }
     73          
     74          /*********************************************************************
     75          *
     76          *       BUTTON_GetDefaultTextColor
     77          */

   \                                 In section .text, align 2, keep-with-next
     78          GUI_COLOR BUTTON_GetDefaultTextColor(unsigned Index) {
     79            GUI_COLOR Color = GUI_INVALID_COLOR;
   \                     BUTTON_GetDefaultTextColor: (+1)
   \   00000000   0xF06F 0x4170      MVN      R1,#-268435456
     80            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aTextColor)) {
   \   00000004   0x2803             CMP      R0,#+3
   \   00000006   0xD203             BCS.N    ??BUTTON_GetDefaultTextColor_0
     81              Color = BUTTON__DefaultProps.aTextColor[Index];
   \   00000008   0x....             LDR.N    R1,??DataTable7
   \   0000000A   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   0000000E   0x68C1             LDR      R1,[R0, #+12]
     82            }
     83            return Color;
   \                     ??BUTTON_GetDefaultTextColor_0: (+1)
   \   00000010   0x4608             MOV      R0,R1
   \   00000012   0x4770             BX       LR               ;; return
     84          }
     85          
     86          /*********************************************************************
     87          *
     88          *       BUTTON_GetDefaultBkColor
     89          */

   \                                 In section .text, align 2, keep-with-next
     90          GUI_COLOR BUTTON_GetDefaultBkColor(unsigned Index) {
     91            GUI_COLOR Color = GUI_INVALID_COLOR;
   \                     BUTTON_GetDefaultBkColor: (+1)
   \   00000000   0xF06F 0x4170      MVN      R1,#-268435456
     92            if (Index < GUI_COUNTOF(BUTTON__DefaultProps.aBkColor)) {
   \   00000004   0x2803             CMP      R0,#+3
   \   00000006   0xD202             BCS.N    ??BUTTON_GetDefaultBkColor_0
     93              Color = BUTTON__DefaultProps.aBkColor[Index];
   \   00000008   0x....             LDR.N    R1,??DataTable7
   \   0000000A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
     94            }
     95            return Color;
   \                     ??BUTTON_GetDefaultBkColor_0: (+1)
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x4770             BX       LR               ;; return
     96          }
     97          
     98          /*********************************************************************
     99          *
    100          *       BUTTON_GetDefaultTextAlign
    101          */

   \                                 In section .text, align 2, keep-with-next
    102          int BUTTON_GetDefaultTextAlign(void) {
    103            return BUTTON__DefaultProps.Align;
   \                     BUTTON_GetDefaultTextAlign: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable7
   \   00000002   0xF9B0 0x001C      LDRSH    R0,[R0, #+28]
   \   00000006   0x4770             BX       LR               ;; return
    104          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     BUTTON__DefaultProps
    105          
    106          #else                            /* Avoid problems with empty object modules */
    107            void BUTTON_Default_C(void);
    108            void BUTTON_Default_C(void) {}
    109          #endif
    110          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BUTTON_GetDefaultBkColor
       0   BUTTON_GetDefaultFont
       0   BUTTON_GetDefaultTextAlign
       0   BUTTON_GetDefaultTextColor
       0   BUTTON_SetDefaultBkColor
       0   BUTTON_SetDefaultFont
       0   BUTTON_SetDefaultTextAlign
       0   BUTTON_SetDefaultTextColor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
      18  BUTTON_GetDefaultBkColor
       6  BUTTON_GetDefaultFont
       8  BUTTON_GetDefaultTextAlign
      20  BUTTON_GetDefaultTextColor
      12  BUTTON_SetDefaultBkColor
       6  BUTTON_SetDefaultFont
       6  BUTTON_SetDefaultTextAlign
      14  BUTTON_SetDefaultTextColor

 
 94 bytes in section .text
 
 94 bytes of CODE memory

Errors: none
Warnings: none
