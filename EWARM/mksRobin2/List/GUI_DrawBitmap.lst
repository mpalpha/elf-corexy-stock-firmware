###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:41
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DrawBitmap.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DrawBitmap.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUI_DrawBitmap.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUI_DrawBitmap.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_DrawBitmap.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_DrawBitmap.C
     16          Purpose     : Implementation of GUI_DrawBitmap
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include <stddef.h>
     21          #include "GUI_Private.h"
     22          
     23          /*********************************************************************
     24          *
     25          *       Public code
     26          *
     27          **********************************************************************
     28          */
     29          /*********************************************************************
     30          *
     31          *       GL_DrawBitmap
     32          *
     33          * Purpose:
     34          *  Translates the external bitmap format into an internal
     35          *  format. This turned out to be necessary as the internal
     36          *  format is easier to create and more flexible for routines
     37          *  that draw text-bitmaps.
     38          */

   \                                 In section .text, align 2, keep-with-next
     39          void GL_DrawBitmap(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0) {
   \                     GL_DrawBitmap: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4605             MOV      R5,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4617             MOV      R7,R2
     40            GUI_DRAWMODE PrevDraw;
     41            const GUI_LOGPALETTE GUI_UNI_PTR * pPal;
     42            pPal = pBitmap->pPal;
   \   0000000C   0xF8D5 0x800C      LDR      R8,[R5, #+12]
     43            PrevDraw = GUI_SetDrawMode(0);  /* No Get... at this point */
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x.... 0x....      BL       GUI_SetDrawMode
   \   00000016   0x4604             MOV      R4,R0
     44            GUI_SetDrawMode((pPal && pPal->HasTrans) ? (PrevDraw|GUI_DRAWMODE_TRANS) : PrevDraw &(~GUI_DRAWMODE_TRANS));
   \   00000018   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000001C   0xD006             BEQ.N    ??GL_DrawBitmap_0
   \   0000001E   0xF998 0x0004      LDRSB    R0,[R8, #+4]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD002             BEQ.N    ??GL_DrawBitmap_0
   \   00000026   0xF044 0x0002      ORR      R0,R4,#0x2
   \   0000002A   0xE001             B.N      ??GL_DrawBitmap_1
   \                     ??GL_DrawBitmap_0: (+1)
   \   0000002C   0xF024 0x0002      BIC      R0,R4,#0x2
   \                     ??GL_DrawBitmap_1: (+1)
   \   00000030   0x.... 0x....      BL       GUI_SetDrawMode
     45            if (pBitmap->pMethods) {
   \   00000034   0x68E8             LDR      R0,[R5, #+12]
   \   00000036   0xF8D5 0xC010      LDR      R12,[R5, #+16]
   \   0000003A   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000003E   0xD00D             BEQ.N    ??GL_DrawBitmap_2
     46              #if GUI_COMPILER_SUPPORTS_FP      /* Do not support this on VERY simple chips and compilers */
     47                pBitmap->pMethods->pfDraw(x0, y0, pBitmap->XSize ,pBitmap->YSize, (U8 const *)pBitmap->pData, pBitmap->pPal, 1, 1);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x9103             STR      R1,[SP, #+12]
   \   00000044   0x9102             STR      R1,[SP, #+8]
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0x68A8             LDR      R0,[R5, #+8]
   \   0000004A   0x9000             STR      R0,[SP, #+0]
   \   0000004C   0x886B             LDRH     R3,[R5, #+2]
   \   0000004E   0x882A             LDRH     R2,[R5, #+0]
   \   00000050   0x4639             MOV      R1,R7
   \   00000052   0x4630             MOV      R0,R6
   \   00000054   0xF8DC 0x5000      LDR      R5,[R12, #+0]
   \   00000058   0x47A8             BLX      R5
   \   0000005A   0xE018             B.N      ??GL_DrawBitmap_3
     48              #endif
     49            } else {
     50              const LCD_PIXELINDEX* pTrans;
     51              pTrans = LCD_GetpPalConvTable(pBitmap->pPal);
   \                     ??GL_DrawBitmap_2: (+1)
   \   0000005C   0x.... 0x....      BL       LCD_GetpPalConvTable
     52              if (!pTrans) {
   \   00000060   0x88E9             LDRH     R1,[R5, #+6]
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xD104             BNE.N    ??GL_DrawBitmap_4
     53                pTrans = (pBitmap->BitsPerPixel != 1) ? NULL : &LCD_BKCOLORINDEX;
   \   00000066   0x2901             CMP      R1,#+1
   \   00000068   0xD001             BEQ.N    ??GL_DrawBitmap_5
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xE000             B.N      ??GL_DrawBitmap_4
   \                     ??GL_DrawBitmap_5: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable2
     54              }
     55              LCD_DrawBitmap( x0,y0
     56                              ,pBitmap->XSize ,pBitmap->YSize
     57                              ,1,1
     58                              ,pBitmap->BitsPerPixel
     59                              ,pBitmap->BytesPerLine
     60                              ,pBitmap->pData
     61                              ,pTrans);
   \                     ??GL_DrawBitmap_4: (+1)
   \   00000070   0x9005             STR      R0,[SP, #+20]
   \   00000072   0x68A8             LDR      R0,[R5, #+8]
   \   00000074   0x9004             STR      R0,[SP, #+16]
   \   00000076   0x88A8             LDRH     R0,[R5, #+4]
   \   00000078   0x9003             STR      R0,[SP, #+12]
   \   0000007A   0x9102             STR      R1,[SP, #+8]
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x886B             LDRH     R3,[R5, #+2]
   \   00000084   0x882A             LDRH     R2,[R5, #+0]
   \   00000086   0x4639             MOV      R1,R7
   \   00000088   0x4630             MOV      R0,R6
   \   0000008A   0x.... 0x....      BL       LCD_DrawBitmap
     62            }
     63            GUI_SetDrawMode(PrevDraw);
   \                     ??GL_DrawBitmap_3: (+1)
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0xB006             ADD      SP,SP,#+24
   \   00000092   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000096   0x.... 0x....      B.W      GUI_SetDrawMode
     64          }
     65          
     66          /*********************************************************************
     67          *
     68          *       GUI_DrawBitmap
     69          */

   \                                 In section .text, align 2, keep-with-next
     70          void GUI_DrawBitmap(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0) {
   \                     GUI_DrawBitmap: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     71            #if (GUI_WINSUPPORT)
     72              GUI_RECT r;
     73            #endif
     74            GUI_LOCK();
     75            #if (GUI_WINSUPPORT)
     76              WM_ADDORG(x0,y0);
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0x6C03             LDR      R3,[R0, #+64]
   \   00000008   0x185D             ADDS     R5,R3,R1
   \   0000000A   0x6C40             LDR      R0,[R0, #+68]
   \   0000000C   0x1886             ADDS     R6,R0,R2
     77              r.x1 = (r.x0 = x0) + pBitmap->XSize-1;
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000014   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000018   0xF9B4 0x1000      LDRSH    R1,[R4, #+0]
   \   0000001C   0x1808             ADDS     R0,R1,R0
   \   0000001E   0x1E40             SUBS     R0,R0,#+1
   \   00000020   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     78              r.y1 = (r.y0 = y0) + pBitmap->YSize-1;
   \   00000024   0x4630             MOV      R0,R6
   \   00000026   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   0000002A   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000002E   0xF9B4 0x1002      LDRSH    R1,[R4, #+2]
   \   00000032   0x1808             ADDS     R0,R1,R0
   \   00000034   0x1E40             SUBS     R0,R0,#+1
   \   00000036   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     79              WM_ITERATE_START(&r) {
   \   0000003A   0xA800             ADD      R0,SP,#+0
   \   0000003C   0x.... 0x....      BL       WM__InitIVRSearch
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD008             BEQ.N    ??GUI_DrawBitmap_0
     80            #endif
     81            GL_DrawBitmap(pBitmap, x0, y0);
   \                     ??GUI_DrawBitmap_1: (+1)
   \   00000044   0x4632             MOV      R2,R6
   \   00000046   0x4629             MOV      R1,R5
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       GL_DrawBitmap
     82            #if (GUI_WINSUPPORT)
     83              } WM_ITERATE_END();
   \   0000004E   0x.... 0x....      BL       WM__GetNextIVR
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD1F6             BNE.N    ??GUI_DrawBitmap_1
     84            #endif
     85            GUI_UNLOCK();
     86          }
   \                     ??GUI_DrawBitmap_0: (+1)
   \   00000056   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
     87          /*********************************************************************
     88          *
     89          *       GUI_DrawBitmap
     90          */

   \                                 In section .text, align 2, keep-with-next
     91          void GUI_DrawBitmap_1(const GUI_BITMAP GUI_UNI_PTR * pBitmap, int x0, int y0) {
   \                     GUI_DrawBitmap_1: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     92            #if (GUI_WINSUPPORT)
     93              GUI_RECT r;
     94            #endif
     95            GUI_LOCK();
     96            #if (GUI_WINSUPPORT)
     97              WM_ADDORG(x0,y0);
   \   00000004   0x....             LDR.N    R0,??DataTable2
   \   00000006   0x6C03             LDR      R3,[R0, #+64]
   \   00000008   0x185D             ADDS     R5,R3,R1
   \   0000000A   0x6C40             LDR      R0,[R0, #+68]
   \   0000000C   0x1886             ADDS     R6,R0,R2
     98              r.x1 = (r.x0 = x0) + pBitmap->XSize;
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000014   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000018   0xF9B4 0x1000      LDRSH    R1,[R4, #+0]
   \   0000001C   0x1808             ADDS     R0,R1,R0
   \   0000001E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     99              r.y1 = (r.y0 = y0) + pBitmap->YSize;
   \   00000022   0x4630             MOV      R0,R6
   \   00000024   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   00000028   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   0000002C   0xF9B4 0x1002      LDRSH    R1,[R4, #+2]
   \   00000030   0x1808             ADDS     R0,R1,R0
   \   00000032   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    100              WM_ITERATE_START(&r) {
   \   00000036   0xA800             ADD      R0,SP,#+0
   \   00000038   0x.... 0x....      BL       WM__InitIVRSearch
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD008             BEQ.N    ??GUI_DrawBitmap_1_0
    101            #endif
    102            GL_DrawBitmap(pBitmap, x0, y0);
   \                     ??GUI_DrawBitmap_1_1: (+1)
   \   00000040   0x4632             MOV      R2,R6
   \   00000042   0x4629             MOV      R1,R5
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       GL_DrawBitmap
    103            #if (GUI_WINSUPPORT)
    104              } WM_ITERATE_END();
   \   0000004A   0x.... 0x....      BL       WM__GetNextIVR
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD1F6             BNE.N    ??GUI_DrawBitmap_1_1
    105            #endif
    106            GUI_UNLOCK();
    107          }
   \                     ??GUI_DrawBitmap_1_0: (+1)
   \   00000052   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     GUI_Context
    108          
    109          /*************************** End of file ****************************/
    110          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   GL_DrawBitmap
        48   -- Indirect call
         0   -> GUI_SetDrawMode
        48   -> GUI_SetDrawMode
        48   -> LCD_DrawBitmap
        48   -> LCD_GetpPalConvTable
      24   GUI_DrawBitmap
        24   -> GL_DrawBitmap
        24   -> WM__GetNextIVR
        24   -> WM__InitIVRSearch
      24   GUI_DrawBitmap_1
        24   -> GL_DrawBitmap
        24   -> WM__GetNextIVR
        24   -> WM__InitIVRSearch


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
     154  GL_DrawBitmap
      88  GUI_DrawBitmap
      84  GUI_DrawBitmap_1

 
 330 bytes in section .text
 
 330 bytes of CODE memory

Errors: none
Warnings: none
