###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:01:17
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\WM\WM_CheckScrollPos.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\WM\WM_CheckScrollPos.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/List\WM_CheckScrollPos.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\EWARM\mksRobin2/Obj\WM_CheckScrollPos.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_¼ÎºÌÈýÎ¬\mksRobin_Nano_code\Middlewares\Ucgui\GUI\WM\WM_CheckScrollPos.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : WM_SetScrollPos.c
     16          Purpose     : Windows manager, optional routines
     17          ----------------------------------------------------------------------
     18          */
     19          
     20          #include "WM_Intern.h"
     21          
     22          #if GUI_WINSUPPORT
     23          
     24          /*********************************************************************
     25          *
     26          *       Public code
     27          *
     28          **********************************************************************
     29          */
     30          
     31          
     32          
     33          /*********************************************************************
     34          *
     35          *       WM_CheckScrollBounds
     36          *
     37          */

   \                                 In section .text, align 2, keep-with-next
     38          void WM_CheckScrollBounds(WM_SCROLL_STATE* pScrollState) {
     39            int Max;
     40            Max = pScrollState->NumItems - pScrollState->PageSize;
   \                     WM_CheckScrollBounds: (+1)
   \   00000000   0x6801             LDR      R1,[R0, #+0]
   \   00000002   0x6882             LDR      R2,[R0, #+8]
   \   00000004   0x1A89             SUBS     R1,R1,R2
     41            if (Max < 0) {
   \   00000006   0xD500             BPL.N    ??WM_CheckScrollBounds_0
     42              Max = 0;
   \   00000008   0x2100             MOVS     R1,#+0
     43            }
     44            /* Make sure scroll pos is in bounds */
     45            if (pScrollState->v < 0) {
   \                     ??WM_CheckScrollBounds_0: (+1)
   \   0000000A   0x6842             LDR      R2,[R0, #+4]
   \   0000000C   0x2A00             CMP      R2,#+0
   \   0000000E   0xD501             BPL.N    ??WM_CheckScrollBounds_1
     46              pScrollState->v = 0;
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x6042             STR      R2,[R0, #+4]
     47            }
     48            if (pScrollState->v > Max) {
   \                     ??WM_CheckScrollBounds_1: (+1)
   \   00000014   0x6842             LDR      R2,[R0, #+4]
   \   00000016   0x4291             CMP      R1,R2
   \   00000018   0xDD00             BLE.N    ??WM_CheckScrollBounds_2
   \   0000001A   0x4611             MOV      R1,R2
   \                     ??WM_CheckScrollBounds_2: (+1)
   \   0000001C   0x6041             STR      R1,[R0, #+4]
     49              pScrollState->v = Max;
     50            }
     51          }
   \   0000001E   0x4770             BX       LR               ;; return
     52          
     53          
     54          /*********************************************************************
     55          *
     56          *       WM_CheckScrollPos
     57          *
     58          * Return value: Difference between old an new Scroll value.
     59          *               Therefor 0 if settings have not changed.
     60          */

   \                                 In section .text, align 2, keep-with-next
     61          int  WM_CheckScrollPos(WM_SCROLL_STATE* pScrollState, int Pos, int LowerDist, int UpperDist) {
   \                     WM_CheckScrollPos: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     62            int vOld;
     63            vOld = pScrollState->v;
   \   00000004   0x6865             LDR      R5,[R4, #+4]
     64            /* Check upper limit */
     65            if (Pos > pScrollState->v + pScrollState->PageSize - 1) {
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0x1946             ADDS     R6,R0,R5
   \   0000000A   0x1E76             SUBS     R6,R6,#+1
   \   0000000C   0x428E             CMP      R6,R1
   \   0000000E   0xDA03             BGE.N    ??WM_CheckScrollPos_0
     66              pScrollState->v = Pos - (pScrollState->PageSize - 1) + UpperDist;
   \   00000010   0x1A08             SUBS     R0,R1,R0
   \   00000012   0x1818             ADDS     R0,R3,R0
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x6060             STR      R0,[R4, #+4]
     67            }
     68            /* Check lower limit */
     69            if (Pos < pScrollState->v) {
   \                     ??WM_CheckScrollPos_0: (+1)
   \   00000018   0x6860             LDR      R0,[R4, #+4]
   \   0000001A   0x4281             CMP      R1,R0
   \   0000001C   0xDA01             BGE.N    ??WM_CheckScrollPos_1
     70              pScrollState->v = Pos - LowerDist;
   \   0000001E   0x1A88             SUBS     R0,R1,R2
   \   00000020   0x6060             STR      R0,[R4, #+4]
     71            }
     72            WM_CheckScrollBounds(pScrollState);
   \                     ??WM_CheckScrollPos_1: (+1)
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       WM_CheckScrollBounds
     73            return pScrollState->v - vOld;
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0x1B40             SUBS     R0,R0,R5
   \   0000002C   0xBD70             POP      {R4-R6,PC}       ;; return
     74          }
     75          
     76          /*********************************************************************
     77          *
     78          *       WM_SetScrollValue
     79          *
     80          * Return value: Difference between old an new Scroll value.
     81          *               Therefor 0 if settings have not changed.
     82          */

   \                                 In section .text, align 2, keep-with-next
     83          int  WM_SetScrollValue(WM_SCROLL_STATE* pScrollState, int v) {
   \                     WM_SetScrollValue: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
     84            int vOld;
     85            vOld = pScrollState->v;
   \   00000004   0x6865             LDR      R5,[R4, #+4]
     86            pScrollState->v = v;
   \   00000006   0x6061             STR      R1,[R4, #+4]
     87            WM_CheckScrollBounds(pScrollState);
   \   00000008   0x.... 0x....      BL       WM_CheckScrollBounds
     88            return pScrollState->v - vOld;
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x1B40             SUBS     R0,R0,R5
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     89          }
     90          
     91          #else
     92            void WM_CheckScrollPos_c(void) {} /* avoid empty object files */
     93          #endif
     94          
     95          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WM_CheckScrollBounds
      16   WM_CheckScrollPos
        16   -> WM_CheckScrollBounds
      16   WM_SetScrollValue
        16   -> WM_CheckScrollBounds


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  WM_CheckScrollBounds
      46  WM_CheckScrollPos
      18  WM_SetScrollValue

 
 96 bytes in section .text
 
 96 bytes of CODE memory

Errors: none
Warnings: none
