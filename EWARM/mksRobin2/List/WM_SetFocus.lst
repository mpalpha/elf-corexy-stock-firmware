###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  17:01:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\WM\WM_SetFocus.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\WM\WM_SetFocus.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\WM_SetFocus.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\WM_SetFocus.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\WM\WM_SetFocus.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : WM_SetFocus.c
     16          Purpose     : Implementation of WM_SetFocus
     17          ----------------------------------------------------------------------
     18          */
     19          
     20          #include "WM_Intern.h"
     21          
     22          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     23          
     24          /*********************************************************************
     25          *
     26          *       Public code
     27          *
     28          **********************************************************************
     29          */
     30          /*********************************************************************
     31          *
     32          *       WM_SetFocus
     33          *
     34          * Purpose:
     35          *   Sets the focus to the specified child. It sends 2 messages:
     36          *    WM_SET_FOCUS(1) to window to receive focus
     37          *    WM_SET_FOCUS(0) to window to lose focus
     38          *
     39          * Return value:
     40          *   0    on success (Focus could be set)
     41          *   !=0  on failure (Windows could not take the focus)
     42          */

   \                                 In section .text, align 2, keep-with-next
     43          int WM_SetFocus(WM_HWIN hWin) {
   \                     WM_SetFocus: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
     44            int r;
     45            WM_MESSAGE Msg = {0};
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x460A             MOV      R2,R1
   \   0000000C   0x460B             MOV      R3,R1
   \   0000000E   0xC00E             STM      R0!,{R1-R3}
     46            WM_LOCK();
     47            if ((hWin) && (hWin != WM__hWinFocus)) {
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xD03E             BEQ.N    ??WM_SetFocus_0
   \   00000014   0x....             LDR.N    R5,??DataTable1
   \   00000016   0xF9B5 0x0000      LDRSH    R0,[R5, #+0]
   \   0000001A   0x4284             CMP      R4,R0
   \   0000001C   0xD039             BEQ.N    ??WM_SetFocus_0
     48              WM_NOTIFY_CHILD_HAS_FOCUS_INFO Info;
     49              Info.hOld = WM__hWinFocus;
   \   0000001E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     50              Info.hNew = hWin;
   \   00000022   0xF8AD 0x4002      STRH     R4,[SP, #+2]
     51              Msg.MsgId  = WM_SET_FOCUS;
   \   00000026   0x211F             MOVS     R1,#+31
   \   00000028   0x9101             STR      R1,[SP, #+4]
     52              /* Send a "no more focus" message to window losing focus */
     53              Msg.Data.v = 0;
   \   0000002A   0x4611             MOV      R1,R2
   \   0000002C   0x9103             STR      R1,[SP, #+12]
     54              if (WM__hWinFocus) {
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD002             BEQ.N    ??WM_SetFocus_1
     55                WM_SendMessage(WM__hWinFocus, &Msg);
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0x.... 0x....      BL       WM_SendMessage
     56              }
     57              /* Send "You have the focus now" message to the window */
     58              Msg.Data.v = 1;
   \                     ??WM_SetFocus_1: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x9003             STR      R0,[SP, #+12]
     59              WM_SendMessage(WM__hWinFocus = hWin, &Msg);
   \   0000003C   0x802C             STRH     R4,[R5, #+0]
   \   0000003E   0xA901             ADD      R1,SP,#+4
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       WM_SendMessage
     60              if ((r = Msg.Data.v) == 0) { /* On success only */
   \   00000046   0x9D03             LDR      R5,[SP, #+12]
   \   00000048   0x2D00             CMP      R5,#+0
   \   0000004A   0xD123             BNE.N    ??WM_SetFocus_2
   \   0000004C   0xE007             B.N      ??WM_SetFocus_3
     61                /* Set message to ancestors of window getting the focus */
     62                while ((hWin = WM_GetParent(hWin)) != 0) {
     63                  Msg.MsgId   = WM_NOTIFY_CHILD_HAS_FOCUS;
   \                     ??WM_SetFocus_4: (+1)
   \   0000004E   0x2021             MOVS     R0,#+33
   \   00000050   0x9001             STR      R0,[SP, #+4]
     64                  Msg.Data.p = &Info;
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x9003             STR      R0,[SP, #+12]
     65                  WM_SendMessage(hWin, &Msg);
   \   00000056   0xA901             ADD      R1,SP,#+4
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0x.... 0x....      BL       WM_SendMessage
     66                }
   \                     ??WM_SetFocus_3: (+1)
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       WM_GetParent
   \   00000064   0x0004             MOVS     R4,R0
   \   00000066   0xD1F2             BNE.N    ??WM_SetFocus_4
     67                /* Set message to ancestors of window loosing the focus */
     68                hWin = Info.hOld;
   \   00000068   0xF9BD 0x4000      LDRSH    R4,[SP, #+0]
     69                if (WM_IsWindow(hWin)) {    /* Make sure window has not been deleted in the mean time. Can be optimized: _DeleteWindow could clear the handle to avoid this check (RS) */
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       WM_IsWindow
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD00E             BEQ.N    ??WM_SetFocus_2
     70                  while ((hWin = WM_GetParent(hWin)) != 0) {
   \                     ??WM_SetFocus_5: (+1)
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       WM_GetParent
   \   0000007C   0x0004             MOVS     R4,R0
   \   0000007E   0xD009             BEQ.N    ??WM_SetFocus_2
     71                    Msg.MsgId  = WM_NOTIFY_CHILD_HAS_FOCUS;
   \   00000080   0x2021             MOVS     R0,#+33
   \   00000082   0x9001             STR      R0,[SP, #+4]
     72                    Msg.Data.p = &Info;
   \   00000084   0xA800             ADD      R0,SP,#+0
   \   00000086   0x9003             STR      R0,[SP, #+12]
     73                    WM_SendMessage(hWin, &Msg);
   \   00000088   0xA901             ADD      R1,SP,#+4
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       WM_SendMessage
   \   00000090   0xE7F1             B.N      ??WM_SetFocus_5
     74                  }
     75                }
     76              }
     77            } else {
     78              r = 1;
   \                     ??WM_SetFocus_0: (+1)
   \   00000092   0x2501             MOVS     R5,#+1
     79            }
     80            WM_UNLOCK();
     81            return r;
   \                     ??WM_SetFocus_2: (+1)
   \   00000094   0x4628             MOV      R0,R5
   \   00000096   0xB005             ADD      SP,SP,#+20
   \   00000098   0xBD30             POP      {R4,R5,PC}       ;; return
     82          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     WM__hWinFocus

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     83          
     84          #else
     85            void WM_SetFocus_C(void) {} /* avoid empty object files */
     86          #endif
     87          
     88          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   WM_SetFocus
        32   -> WM_GetParent
        32   -> WM_IsWindow
        32   -> WM_SendMessage


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant {0}>
       4  ??DataTable1
     154  WM_SetFocus

 
  12 bytes in section .rodata
 158 bytes in section .text
 
 158 bytes of CODE  memory
  12 bytes of CONST memory

Errors: none
Warnings: none
