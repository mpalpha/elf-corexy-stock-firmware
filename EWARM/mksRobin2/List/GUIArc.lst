###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:57
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUIArc.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUIArc.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUIArc.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUIArc.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUIArc.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUIARCFloat.C
     16          Purpose     : Draw Arc routines based on floating point
     17          ----------------------------------------------------------------------
     18          Version-Date---Author-Explanation
     19          ----------------------------------------------------------------------
     20          2.00.00 000325 RS     First release of the new algorithm
     21          ----------------------------------------------------------------------
     22          Known problems or limitations with current version
     23          ----------------------------------------------------------------------
     24          None.
     25          ----------------------------------------------------------------------
     26          Open issues
     27          ----------------------------------------------------------------------
     28          None
     29          ---------------------------END-OF-HEADER------------------------------
     30          */
     31          
     32          #include <stddef.h>           /* needed for definition of NULL */
     33          #include <math.h>
     34          #include "GUI_Protected.h"
     35          
     36          /*********************************************************************
     37          *
     38          *       Static code
     39          *
     40          **********************************************************************
     41          */
     42          /*********************************************************************
     43          *
     44          *       _CalcX
     45          */

   \                                 In section .text, align 2, keep-with-next
     46          static void _CalcX(int*px, int y, U32 r2) {
   \                     _CalcX: (+1)
   \   00000000   0xB410             PUSH     {R4}
     47            int x =*px;
   \   00000002   0x6803             LDR      R3,[R0, #+0]
     48            U32 y2 = (U32)y*(U32)y;
   \   00000004   0x4349             MULS     R1,R1,R1
     49            U32 r2y2 = r2-y2;
   \   00000006   0x1A54             SUBS     R4,R2,R1
     50            U32 x2;
     51            if (y2>=r2) {
   \   00000008   0x4291             CMP      R1,R2
   \   0000000A   0xD302             BCC.N    ??_CalcX_0
     52              *px=0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6001             STR      R1,[R0, #+0]
     53          		return;
   \   00000010   0xE006             B.N      ??_CalcX_1
     54          	}
     55            /* x2 = r2-y2 */
     56            do {
     57              x++;
   \                     ??_CalcX_0: (+1)
   \   00000012   0x1C5B             ADDS     R3,R3,#+1
     58              x2 =(U32)x*(U32)x;
     59          	} while (x2 < r2y2);
   \   00000014   0xFB03 0xF103      MUL      R1,R3,R3
   \   00000018   0x42A1             CMP      R1,R4
   \   0000001A   0xD3FA             BCC.N    ??_CalcX_0
     60          	*px = x-1;
   \   0000001C   0x1E59             SUBS     R1,R3,#+1
   \   0000001E   0x6001             STR      R1,[R0, #+0]
     61          }
   \                     ??_CalcX_1: (+1)
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
     62          
     63          /*********************************************************************
     64          *
     65          *       _CalcInterSectLin
     66          */

   \                                 In section .text, align 2, keep-with-next
     67          static float _CalcInterSectLin(float y, float y0, float y1, float x0, float x1) {
   \                     _CalcInterSectLin: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
     68            if (y1==y0) {
   \   0000000C   0x4630             MOV      R0,R6
   \   0000000E   0x.... 0x....      BL       __aeabi_cfcmpeq
   \   00000012   0xD101             BNE.N    ??_CalcInterSectLin_0
     69          	  return y0;
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0xE018             B.N      ??_CalcInterSectLin_1
     70          	} else {
     71              float Slope = (x1-x0)/(y1-y0);
     72             return (y-y0)*Slope+x0;
   \                     ??_CalcInterSectLin_0: (+1)
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       __aeabi_fsub
   \   0000001E   0x4604             MOV      R4,R0
   \   00000020   0x9806             LDR      R0,[SP, #+24]
   \   00000022   0x4639             MOV      R1,R7
   \   00000024   0x.... 0x....      BL       __aeabi_fsub
   \   00000028   0x4680             MOV      R8,R0
   \   0000002A   0x4630             MOV      R0,R6
   \   0000002C   0x4629             MOV      R1,R5
   \   0000002E   0x.... 0x....      BL       __aeabi_fsub
   \   00000032   0x4601             MOV      R1,R0
   \   00000034   0x4640             MOV      R0,R8
   \   00000036   0x.... 0x....      BL       __aeabi_fdiv
   \   0000003A   0x4621             MOV      R1,R4
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x4639             MOV      R1,R7
   \   00000042   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000046   0x.... 0x....      B.W      __aeabi_fadd
     73          	}
   \                     ??_CalcInterSectLin_1: (+1)
   \   0000004A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     74          }
     75          
     76          /*********************************************************************
     77          *
     78          *       _DrawArc
     79          */

   \                                 In section .text, align 2, keep-with-next
     80          static void _DrawArc(int x0, int y0, int rx, int ry, int Angle0, int Angle1, int xMul, int yMul) {
   \                     _DrawArc: (+1)
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x4614             MOV      R4,R2
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable1
   \   0000000C   0x7D00             LDRB     R0,[R0, #+20]
   \   0000000E   0x.... 0x....      BL       __aeabi_ui2d
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x.... 0x....      LDR.W    R3,??DataTable1_1  ;; 0x3ff80000
   \   00000018   0x.... 0x....      BL       __aeabi_dadd
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x.... 0x....      LDR.W    R3,??DataTable1_2  ;; 0x3fe00000
   \   00000022   0x.... 0x....      BL       __aeabi_dmul
   \   00000026   0x4606             MOV      R6,R0
   \   00000028   0x460F             MOV      R7,R1
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       __aeabi_i2d
   \   00000030   0x4604             MOV      R4,R0
   \   00000032   0x460D             MOV      R5,R1
   \   00000034   0x4632             MOV      R2,R6
   \   00000036   0x463B             MOV      R3,R7
   \   00000038   0x.... 0x....      BL       __aeabi_dsub
   \   0000003C   0x.... 0x....      BL       __aeabi_d2f
   \   00000040   0x4681             MOV      R9,R0
     81            float afx[4];
     82            float afy[4];
     83          	float ri = rx-(GUI_Context.PenSize+1.5)/2;
     84          	float ro = rx+(GUI_Context.PenSize+1.5)/2;
   \   00000042   0x4632             MOV      R2,R6
   \   00000044   0x463B             MOV      R3,R7
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x4629             MOV      R1,R5
   \   0000004A   0x.... 0x....      BL       __aeabi_dadd
   \   0000004E   0x.... 0x....      BL       __aeabi_d2f
   \   00000052   0x4680             MOV      R8,R0
     85            float fAngle0 = Angle0*3.1415926/180;
   \   00000054   0x....             LDR.N    R4,??DataTable1_3  ;; 0x4d12d84a
   \   00000056   0x....             LDR.N    R5,??DataTable1_4  ;; 0x400921fb
   \   00000058   0x9816             LDR      R0,[SP, #+88]
   \   0000005A   0x.... 0x....      BL       __aeabi_i2d
   \   0000005E   0x4622             MOV      R2,R4
   \   00000060   0x462B             MOV      R3,R5
   \   00000062   0x.... 0x....      BL       __aeabi_dmul
   \   00000066   0x2200             MOVS     R2,#+0
   \   00000068   0x....             LDR.N    R3,??DataTable1_5  ;; 0x40668000
   \   0000006A   0x.... 0x....      BL       __aeabi_ddiv
   \   0000006E   0x.... 0x....      BL       __aeabi_d2f
   \   00000072   0x4606             MOV      R6,R0
     86            float fAngle1 = Angle1*3.1415926/180;
   \   00000074   0x9817             LDR      R0,[SP, #+92]
   \   00000076   0x.... 0x....      BL       __aeabi_i2d
   \   0000007A   0x4622             MOV      R2,R4
   \   0000007C   0x462B             MOV      R3,R5
   \   0000007E   0x.... 0x....      BL       __aeabi_dmul
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x....             LDR.N    R3,??DataTable1_5  ;; 0x40668000
   \   00000086   0x.... 0x....      BL       __aeabi_ddiv
   \   0000008A   0x.... 0x....      BL       __aeabi_d2f
   \   0000008E   0x4604             MOV      R4,R0
     87            float sin0 = sin(fAngle0); 
   \   00000090   0x4630             MOV      R0,R6
   \   00000092   0x.... 0x....      BL       __aeabi_f2d
   \   00000096   0x4606             MOV      R6,R0
   \   00000098   0x460F             MOV      R7,R1
   \   0000009A   0x.... 0x....      BL       sin
   \   0000009E   0x.... 0x....      BL       __aeabi_d2f
   \   000000A2   0x4683             MOV      R11,R0
     88            float sin1 = sin(fAngle1); 
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x.... 0x....      BL       __aeabi_f2d
   \   000000AA   0x4604             MOV      R4,R0
   \   000000AC   0x460D             MOV      R5,R1
   \   000000AE   0x.... 0x....      BL       sin
   \   000000B2   0x.... 0x....      BL       __aeabi_d2f
   \   000000B6   0x4682             MOV      R10,R0
     89            float cos0 = cos(fAngle0); 
   \   000000B8   0x4630             MOV      R0,R6
   \   000000BA   0x4639             MOV      R1,R7
   \   000000BC   0x.... 0x....      BL       cos
   \   000000C0   0x.... 0x....      BL       __aeabi_d2f
   \   000000C4   0x4606             MOV      R6,R0
     90            float cos1 = cos(fAngle1); 
   \   000000C6   0x4620             MOV      R0,R4
   \   000000C8   0x4629             MOV      R1,R5
   \   000000CA   0x.... 0x....      BL       cos
   \   000000CE   0x.... 0x....      BL       __aeabi_d2f
   \   000000D2   0x4605             MOV      R5,R0
     91            U32   ri2 = ri*ri;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   000000D4   0x4648             MOV      R0,R9
   \   000000D6   0x4649             MOV      R1,R9
   \   000000D8   0x.... 0x....      BL       __aeabi_fmul
   \   000000DC   0x.... 0x....      BL       __aeabi_f2uiz
   \   000000E0   0x900A             STR      R0,[SP, #+40]
     92            U32   ro2 = ro*ro;
                               ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   000000E2   0x4640             MOV      R0,R8
   \   000000E4   0x4641             MOV      R1,R8
   \   000000E6   0x.... 0x....      BL       __aeabi_fmul
   \   000000EA   0x.... 0x....      BL       __aeabi_f2uiz
   \   000000EE   0x9009             STR      R0,[SP, #+36]
     93          	int y, yMax, yMin;
     94          	afy[0] = ri*sin0;
   \   000000F0   0x4648             MOV      R0,R9
   \   000000F2   0x4659             MOV      R1,R11
   \   000000F4   0x.... 0x....      BL       __aeabi_fmul
   \   000000F8   0x9005             STR      R0,[SP, #+20]
     95          	afy[1] = ro*sin0;
   \   000000FA   0x4640             MOV      R0,R8
   \   000000FC   0x4659             MOV      R1,R11
   \   000000FE   0x.... 0x....      BL       __aeabi_fmul
   \   00000102   0x9004             STR      R0,[SP, #+16]
     96          	afy[2] = ri*sin1;
   \   00000104   0x4648             MOV      R0,R9
   \   00000106   0x4651             MOV      R1,R10
   \   00000108   0x.... 0x....      BL       __aeabi_fmul
   \   0000010C   0x4604             MOV      R4,R0
     97          	afy[3] = ro*sin1;
   \   0000010E   0x4640             MOV      R0,R8
   \   00000110   0x4651             MOV      R1,R10
   \   00000112   0x.... 0x....      BL       __aeabi_fmul
   \   00000116   0x9003             STR      R0,[SP, #+12]
     98          	afx[0] = ri*cos0;
   \   00000118   0x4648             MOV      R0,R9
   \   0000011A   0x4631             MOV      R1,R6
   \   0000011C   0x.... 0x....      BL       __aeabi_fmul
   \   00000120   0x9008             STR      R0,[SP, #+32]
     99          	afx[1] = ro*cos0;
   \   00000122   0x4640             MOV      R0,R8
   \   00000124   0x4631             MOV      R1,R6
   \   00000126   0x.... 0x....      BL       __aeabi_fmul
   \   0000012A   0x9007             STR      R0,[SP, #+28]
    100          	afx[2] = ri*cos1;
   \   0000012C   0x4648             MOV      R0,R9
   \   0000012E   0x4629             MOV      R1,R5
   \   00000130   0x.... 0x....      BL       __aeabi_fmul
   \   00000134   0x9006             STR      R0,[SP, #+24]
    101          	afx[3] = ro*cos1;
   \   00000136   0x4640             MOV      R0,R8
   \   00000138   0x4629             MOV      R1,R5
   \   0000013A   0x.... 0x....      BL       __aeabi_fmul
   \   0000013E   0x4606             MOV      R6,R0
    102          	yMin = ceil(afy[0]);
                 	     ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000140   0x9805             LDR      R0,[SP, #+20]
   \   00000142   0x.... 0x....      BL       __aeabi_f2d
   \   00000146   0x.... 0x....      BL       ceil
   \   0000014A   0x.... 0x....      BL       __aeabi_d2iz
   \   0000014E   0x4607             MOV      R7,R0
    103            yMax = floor(afy[3]);
                        ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00000150   0x9803             LDR      R0,[SP, #+12]
   \   00000152   0x.... 0x....      BL       __aeabi_f2d
   \   00000156   0x.... 0x....      BL       floor
   \   0000015A   0x.... 0x....      BL       __aeabi_d2iz
    104            /* Use Clipping rect to reduce calculation (if possible) */
    105            if (GUI_Context.pClipRect_HL) {
   \   0000015E   0x....             LDR.N    R1,??DataTable1
   \   00000160   0x6909             LDR      R1,[R1, #+16]
   \   00000162   0xF8DD 0x8064      LDR      R8,[SP, #+100]
   \   00000166   0x2900             CMP      R1,#+0
   \   00000168   0xD020             BEQ.N    ??_DrawArc_0
    106              if (yMul ==1) {
   \   0000016A   0xF1B8 0x0F01      CMP      R8,#+1
   \   0000016E   0xD10C             BNE.N    ??_DrawArc_1
    107                if (yMax > (GUI_Context.pClipRect_HL->y1 -y0))
   \   00000170   0xF9B1 0x2006      LDRSH    R2,[R1, #+6]
   \   00000174   0x9B0C             LDR      R3,[SP, #+48]
   \   00000176   0x1AD2             SUBS     R2,R2,R3
   \   00000178   0x4282             CMP      R2,R0
   \   0000017A   0xDA00             BGE.N    ??_DrawArc_2
    108                  yMax = (GUI_Context.pClipRect_HL->y1 -y0);
   \   0000017C   0x4610             MOV      R0,R2
    109                if (yMin < (GUI_Context.pClipRect_HL->y0 -y0))
   \                     ??_DrawArc_2: (+1)
   \   0000017E   0xF9B1 0x2002      LDRSH    R2,[R1, #+2]
   \   00000182   0x1AD2             SUBS     R2,R2,R3
   \   00000184   0x4297             CMP      R7,R2
   \   00000186   0xDA00             BGE.N    ??_DrawArc_1
    110                  yMin = (GUI_Context.pClipRect_HL->y0 -y0);
   \   00000188   0x4617             MOV      R7,R2
    111              }
    112              if (yMul == -1) {
   \                     ??_DrawArc_1: (+1)
   \   0000018A   0xF118 0x0F01      CMN      R8,#+1
   \   0000018E   0xD10D             BNE.N    ??_DrawArc_0
    113                if (yMin > (GUI_Context.pClipRect_HL->y1 -y0))
   \   00000190   0xF9B1 0x2006      LDRSH    R2,[R1, #+6]
   \   00000194   0x9B0C             LDR      R3,[SP, #+48]
   \   00000196   0x1AD2             SUBS     R2,R2,R3
   \   00000198   0x42BA             CMP      R2,R7
   \   0000019A   0xDA00             BGE.N    ??_DrawArc_3
    114                  yMin = (GUI_Context.pClipRect_HL->y1 -y0);
   \   0000019C   0x4617             MOV      R7,R2
    115                if (yMax < (GUI_Context.pClipRect_HL->y0 -y0))
   \                     ??_DrawArc_3: (+1)
   \   0000019E   0xF9B1 0x1002      LDRSH    R1,[R1, #+2]
   \   000001A2   0x461A             MOV      R2,R3
   \   000001A4   0x1A8A             SUBS     R2,R1,R2
   \   000001A6   0x4290             CMP      R0,R2
   \   000001A8   0xDA00             BGE.N    ??_DrawArc_0
    116                  yMax = (GUI_Context.pClipRect_HL->y0 -y0);
   \   000001AA   0x4610             MOV      R0,R2
    117              }
    118            }
    119            /* Start drawing lines ... */
    120            {
    121            int xMinDisp, xMaxDisp, xMin=0,xMax=0;
   \                     ??_DrawArc_0: (+1)
   \   000001AC   0x2100             MOVS     R1,#+0
   \   000001AE   0x9102             STR      R1,[SP, #+8]
   \   000001B0   0x9101             STR      R1,[SP, #+4]
    122              for (y=yMax; y>=yMin; y--) {
   \   000001B2   0x4605             MOV      R5,R0
   \   000001B4   0xF8DD 0x9060      LDR      R9,[SP, #+96]
   \   000001B8   0xE006             B.N      ??_DrawArc_4
    123                _CalcX(&xMin, y, ri2);
    124                _CalcX(&xMax, y, ro2);
    125                if ((float)y< afy[1]) {
    126                  xMaxDisp = _CalcInterSectLin(y,afy[0], afy[1], afx[0], afx[1]);
                                  ^
Warning[Pa093]: implicit conversion from floating point to integer
    127          			} else {
    128                  xMaxDisp = xMax;			
    129          			}
    130                if ((float)y > afy[2]) {
    131                  xMinDisp = _CalcInterSectLin(y,afy[2], afy[3], afx[2], afx[3]);
                                  ^
Warning[Pa093]: implicit conversion from floating point to integer
    132          			} else {
    133                  xMinDisp = xMin;			
    134          			}
    135                if (xMul>0)
    136                  LCD_HL_DrawHLine(xMinDisp+x0, yMul*y+y0, xMaxDisp+x0);
    137                else
    138                  LCD_HL_DrawHLine(-xMaxDisp+x0, yMul*y+y0, -xMinDisp+x0);
   \                     ??_DrawArc_5: (+1)
   \   000001BA   0x1A12             SUBS     R2,R2,R0
   \   000001BC   0x980B             LDR      R0,[SP, #+44]
   \   000001BE   0xEBA0 0x000A      SUB      R0,R0,R10
   \   000001C2   0x.... 0x....      BL       LCD_DrawHLine
   \                     ??_DrawArc_6: (+1)
   \   000001C6   0x1E6D             SUBS     R5,R5,#+1
   \                     ??_DrawArc_4: (+1)
   \   000001C8   0x42BD             CMP      R5,R7
   \   000001CA   0xDB3C             BLT.N    ??_DrawArc_7
   \   000001CC   0x9A0A             LDR      R2,[SP, #+40]
   \   000001CE   0x4629             MOV      R1,R5
   \   000001D0   0xA802             ADD      R0,SP,#+8
   \   000001D2   0x.... 0x....      BL       _CalcX
   \   000001D6   0x9A09             LDR      R2,[SP, #+36]
   \   000001D8   0x4629             MOV      R1,R5
   \   000001DA   0xA801             ADD      R0,SP,#+4
   \   000001DC   0x.... 0x....      BL       _CalcX
   \   000001E0   0x4628             MOV      R0,R5
   \   000001E2   0x.... 0x....      BL       __aeabi_i2f
   \   000001E6   0x4683             MOV      R11,R0
   \   000001E8   0x9904             LDR      R1,[SP, #+16]
   \   000001EA   0x.... 0x....      BL       __aeabi_cfcmple
   \   000001EE   0xD20B             BCS.N    ??_DrawArc_8
   \   000001F0   0x9807             LDR      R0,[SP, #+28]
   \   000001F2   0x9000             STR      R0,[SP, #+0]
   \   000001F4   0x9B08             LDR      R3,[SP, #+32]
   \   000001F6   0x9A04             LDR      R2,[SP, #+16]
   \   000001F8   0x9905             LDR      R1,[SP, #+20]
   \   000001FA   0x4658             MOV      R0,R11
   \   000001FC   0x.... 0x....      BL       _CalcInterSectLin
   \   00000200   0x.... 0x....      BL       __aeabi_f2iz
   \   00000204   0x4682             MOV      R10,R0
   \   00000206   0xE001             B.N      ??_DrawArc_9
   \                     ??_DrawArc_8: (+1)
   \   00000208   0xF8DD 0xA004      LDR      R10,[SP, #+4]
   \                     ??_DrawArc_9: (+1)
   \   0000020C   0x4620             MOV      R0,R4
   \   0000020E   0x4659             MOV      R1,R11
   \   00000210   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000214   0xD209             BCS.N    ??_DrawArc_10
   \   00000216   0x9600             STR      R6,[SP, #+0]
   \   00000218   0x9B06             LDR      R3,[SP, #+24]
   \   0000021A   0x9A03             LDR      R2,[SP, #+12]
   \   0000021C   0x4621             MOV      R1,R4
   \   0000021E   0x4658             MOV      R0,R11
   \   00000220   0x.... 0x....      BL       _CalcInterSectLin
   \   00000224   0x.... 0x....      BL       __aeabi_f2iz
   \   00000228   0xE000             B.N      ??_DrawArc_11
   \                     ??_DrawArc_10: (+1)
   \   0000022A   0x9802             LDR      R0,[SP, #+8]
   \                     ??_DrawArc_11: (+1)
   \   0000022C   0x990C             LDR      R1,[SP, #+48]
   \   0000022E   0xFB05 0x1108      MLA      R1,R5,R8,R1
   \   00000232   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000236   0x9A0B             LDR      R2,[SP, #+44]
   \   00000238   0xDBBF             BLT.N    ??_DrawArc_5
   \   0000023A   0x4452             ADD      R2,R2,R10
   \   0000023C   0x9B0B             LDR      R3,[SP, #+44]
   \   0000023E   0x1818             ADDS     R0,R3,R0
   \   00000240   0x.... 0x....      BL       LCD_DrawHLine
   \   00000244   0xE7BF             B.N      ??_DrawArc_6
    139              }
    140          	}
    141          #if 0  /* Test code */
    142          {
    143            int i;
    144            GUI_SetColor( GUI_WHITE ); 
    145          	for (i=0; i<4; i++)
    146              LCD_HL_DrawPixel(afx[i]+x0, afy[i]+y0);
    147          }
    148          #endif
    149            GUI_USE_PARA(ry);
    150          }
   \                     ??_DrawArc_7: (+1)
   \   00000246   0xB00D             ADD      SP,SP,#+52
   \   00000248   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    151          
    152          /*********************************************************************
    153          *
    154          *       Public code
    155          *
    156          **********************************************************************
    157          */
    158          /*********************************************************************
    159          *
    160          *       GL_DrawArc
    161          */

   \                                 In section .text, align 2, keep-with-next
    162          void GL_DrawArc(int x0, int y0, int rx, int ry, int a0, int a1) {
   \                     GL_DrawArc: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x461F             MOV      R7,R3
    163            int aEnd;
    164            a0+=360;
   \   0000000E   0x980C             LDR      R0,[SP, #+48]
   \   00000010   0xF500 0x78B4      ADD      R8,R0,#+360
    165          	a1+=360;
   \   00000014   0x980D             LDR      R0,[SP, #+52]
   \   00000016   0xF500 0x79B4      ADD      R9,R0,#+360
   \   0000001A   0xE003             B.N      ??GL_DrawArc_0
    166          	while (a0>=360) {
    167              a0 -= 360;
   \                     ??GL_DrawArc_1: (+1)
   \   0000001C   0xF5A8 0x78B4      SUB      R8,R8,#+360
    168              a1 -= 360;
   \   00000020   0xF5A9 0x79B4      SUB      R9,R9,#+360
    169          	}
   \                     ??GL_DrawArc_0: (+1)
   \   00000024   0xF5B8 0x7FB4      CMP      R8,#+360
   \   00000028   0xDAF8             BGE.N    ??GL_DrawArc_1
    170          /* Do first quadrant 0-90 degree */
    171          DoFirst:
    172            if (a1<=0)
   \                     ??GL_DrawArc_2: (+1)
   \   0000002A   0xF1B9 0x0F01      CMP      R9,#+1
   \   0000002E   0xDA02             BGE.N    ??GL_DrawArc_3
    173          	  return;
   \                     ??GL_DrawArc_4: (+1)
   \   00000030   0xB005             ADD      SP,SP,#+20
   \   00000032   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    174          	if (a0<90) {
   \                     ??GL_DrawArc_3: (+1)
   \   00000036   0xF1B8 0x0F5A      CMP      R8,#+90
   \   0000003A   0xDA17             BGE.N    ??GL_DrawArc_5
    175              if (a0<0)
   \   0000003C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000040   0xD501             BPL.N    ??GL_DrawArc_6
    176          		  a0=0;
   \   00000042   0xF04F 0x0800      MOV      R8,#+0
    177              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_6: (+1)
   \   00000046   0x205A             MOVS     R0,#+90
   \   00000048   0xF1B9 0x0F5A      CMP      R9,#+90
   \   0000004C   0xDC00             BGT.N    ??GL_DrawArc_7
   \   0000004E   0x4648             MOV      R0,R9
    178              _DrawArc(x0,y0,rx,ry,a0,aEnd, 1, -1);
   \                     ??GL_DrawArc_7: (+1)
   \   00000050   0xF04F 0x31FF      MOV      R1,#-1
   \   00000054   0x9103             STR      R1,[SP, #+12]
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0x9102             STR      R1,[SP, #+8]
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000060   0x463B             MOV      R3,R7
   \   00000062   0x4632             MOV      R2,R6
   \   00000064   0x4629             MOV      R1,R5
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x.... 0x....      BL       _DrawArc
    179          	}
    180            a1-=90;
   \                     ??GL_DrawArc_5: (+1)
   \   0000006C   0xF1A9 0x095A      SUB      R9,R9,#+90
    181          	a0-=90;
   \   00000070   0xF1A8 0x085A      SUB      R8,R8,#+90
    182          /* Do second quadrant 90-180 degree */
    183            if (a1<=0)
   \   00000074   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000078   0xDBDA             BLT.N    ??GL_DrawArc_4
    184          	  return;
    185          	if (a0<90) {
   \   0000007A   0xF1B8 0x0F5A      CMP      R8,#+90
   \   0000007E   0xDA19             BGE.N    ??GL_DrawArc_8
    186              if (a0<0)
   \   00000080   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000084   0xD501             BPL.N    ??GL_DrawArc_9
    187          		  a0=0;
   \   00000086   0xF04F 0x0800      MOV      R8,#+0
    188              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_9: (+1)
   \   0000008A   0x205A             MOVS     R0,#+90
   \   0000008C   0xF1B9 0x0F5A      CMP      R9,#+90
   \   00000090   0xDC00             BGT.N    ??GL_DrawArc_10
   \   00000092   0x4648             MOV      R0,R9
    189              _DrawArc(x0,y0,rx,ry,90-aEnd, 90-a0,-1,-1);
   \                     ??GL_DrawArc_10: (+1)
   \   00000094   0xF04F 0x31FF      MOV      R1,#-1
   \   00000098   0x9103             STR      R1,[SP, #+12]
   \   0000009A   0x9102             STR      R1,[SP, #+8]
   \   0000009C   0xF1C8 0x015A      RSB      R1,R8,#+90
   \   000000A0   0x9101             STR      R1,[SP, #+4]
   \   000000A2   0xF1C0 0x005A      RSB      R0,R0,#+90
   \   000000A6   0x9000             STR      R0,[SP, #+0]
   \   000000A8   0x463B             MOV      R3,R7
   \   000000AA   0x4632             MOV      R2,R6
   \   000000AC   0x4629             MOV      R1,R5
   \   000000AE   0x4620             MOV      R0,R4
   \   000000B0   0x.... 0x....      BL       _DrawArc
    190          	}
    191            a1-=90;
   \                     ??GL_DrawArc_8: (+1)
   \   000000B4   0xF1A9 0x095A      SUB      R9,R9,#+90
    192          	a0-=90;
   \   000000B8   0xF1A8 0x085A      SUB      R8,R8,#+90
    193          /* Do third quadrant 180-270 degree */
    194            if (a1<=0)
   \   000000BC   0xF1B9 0x0F01      CMP      R9,#+1
   \   000000C0   0xDBB6             BLT.N    ??GL_DrawArc_4
    195          	  return;
    196          	if (a0<90) {
   \   000000C2   0xF1B8 0x0F5A      CMP      R8,#+90
   \   000000C6   0xDA17             BGE.N    ??GL_DrawArc_11
    197              if (a0<0)
   \   000000C8   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000CC   0xD501             BPL.N    ??GL_DrawArc_12
    198          		  a0=0;
   \   000000CE   0xF04F 0x0800      MOV      R8,#+0
    199              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_12: (+1)
   \   000000D2   0x205A             MOVS     R0,#+90
   \   000000D4   0xF1B9 0x0F5A      CMP      R9,#+90
   \   000000D8   0xDC00             BGT.N    ??GL_DrawArc_13
   \   000000DA   0x4648             MOV      R0,R9
    200              _DrawArc(x0,y0,rx,ry,a0,aEnd, -1, 1);
   \                     ??GL_DrawArc_13: (+1)
   \   000000DC   0x2101             MOVS     R1,#+1
   \   000000DE   0x9103             STR      R1,[SP, #+12]
   \   000000E0   0xF04F 0x31FF      MOV      R1,#-1
   \   000000E4   0x9102             STR      R1,[SP, #+8]
   \   000000E6   0x9001             STR      R0,[SP, #+4]
   \   000000E8   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   000000EC   0x463B             MOV      R3,R7
   \   000000EE   0x4632             MOV      R2,R6
   \   000000F0   0x4629             MOV      R1,R5
   \   000000F2   0x4620             MOV      R0,R4
   \   000000F4   0x.... 0x....      BL       _DrawArc
    201          	}
    202            a1-=90;
   \                     ??GL_DrawArc_11: (+1)
   \   000000F8   0xF1A9 0x095A      SUB      R9,R9,#+90
    203          	a0-=90;
   \   000000FC   0xF1A8 0x085A      SUB      R8,R8,#+90
    204          /* Do last quadrant 270-360 degree */
    205            if (a1<=0)
   \   00000100   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000104   0xDB94             BLT.N    ??GL_DrawArc_4
    206          	  return;
    207          	if (a0<90) {
   \   00000106   0xF1B8 0x0F5A      CMP      R8,#+90
   \   0000010A   0xDA18             BGE.N    ??GL_DrawArc_14
    208              if (a0<0)
   \   0000010C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000110   0xD501             BPL.N    ??GL_DrawArc_15
    209          		  a0=0;
   \   00000112   0xF04F 0x0800      MOV      R8,#+0
    210              aEnd = (a1<90) ? a1 : 90;
   \                     ??GL_DrawArc_15: (+1)
   \   00000116   0x205A             MOVS     R0,#+90
   \   00000118   0xF1B9 0x0F5A      CMP      R9,#+90
   \   0000011C   0xDC00             BGT.N    ??GL_DrawArc_16
   \   0000011E   0x4648             MOV      R0,R9
    211              _DrawArc(x0,y0,rx,ry,90-aEnd, 90-a0,1,1);
   \                     ??GL_DrawArc_16: (+1)
   \   00000120   0x2101             MOVS     R1,#+1
   \   00000122   0x9103             STR      R1,[SP, #+12]
   \   00000124   0x9102             STR      R1,[SP, #+8]
   \   00000126   0xF1C8 0x015A      RSB      R1,R8,#+90
   \   0000012A   0x9101             STR      R1,[SP, #+4]
   \   0000012C   0xF1C0 0x005A      RSB      R0,R0,#+90
   \   00000130   0x9000             STR      R0,[SP, #+0]
   \   00000132   0x463B             MOV      R3,R7
   \   00000134   0x4632             MOV      R2,R6
   \   00000136   0x4629             MOV      R1,R5
   \   00000138   0x4620             MOV      R0,R4
   \   0000013A   0x.... 0x....      BL       _DrawArc
    212          	}
    213            a1-=90;
   \                     ??GL_DrawArc_14: (+1)
   \   0000013E   0xF1A9 0x095A      SUB      R9,R9,#+90
    214          	a0-=90;
   \   00000142   0xF1A8 0x085A      SUB      R8,R8,#+90
    215          goto DoFirst;
   \   00000146   0xE770             B.N      ??GL_DrawArc_2
    216          }
    217          
    218          /*********************************************************************
    219          *
    220          *       GUI_DrawArc
    221          */

   \                                 In section .text, align 2, keep-with-next
    222          void GUI_DrawArc(int x0, int y0, int rx, int ry, int a0, int a1) {
   \                     GUI_DrawArc: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4614             MOV      R4,R2
   \   00000008   0x461D             MOV      R5,R3
    223            GUI_LOCK();
    224            #if (GUI_WINSUPPORT)
    225              WM_ADDORG(x0,y0);
   \   0000000A   0x....             LDR.N    R2,??DataTable1
   \   0000000C   0x6C13             LDR      R3,[R2, #+64]
   \   0000000E   0xEB03 0x0800      ADD      R8,R3,R0
   \   00000012   0x6C50             LDR      R0,[R2, #+68]
   \   00000014   0xEB00 0x0901      ADD      R9,R0,R1
    226              WM_ITERATE_START(NULL) {
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       WM__InitIVRSearch
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD00D             BEQ.N    ??GUI_DrawArc_0
   \   00000022   0x9E0A             LDR      R6,[SP, #+40]
   \   00000024   0x9F0B             LDR      R7,[SP, #+44]
    227            #endif
    228            GL_DrawArc( x0, y0, rx, ry, a0, a1);
   \                     ??GUI_DrawArc_1: (+1)
   \   00000026   0x9701             STR      R7,[SP, #+4]
   \   00000028   0x9600             STR      R6,[SP, #+0]
   \   0000002A   0x462B             MOV      R3,R5
   \   0000002C   0x4622             MOV      R2,R4
   \   0000002E   0x4649             MOV      R1,R9
   \   00000030   0x4640             MOV      R0,R8
   \   00000032   0x.... 0x....      BL       GL_DrawArc
    229            #if (GUI_WINSUPPORT)
    230              } WM_ITERATE_END();
   \   00000036   0x.... 0x....      BL       WM__GetNextIVR
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD1F3             BNE.N    ??GUI_DrawArc_1
    231            #endif
    232            GUI_UNLOCK();
    233          }
   \                     ??GUI_DrawArc_0: (+1)
   \   0000003E   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     GUI_Context

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x3FF80000         DC32     0x3ff80000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x3FE00000         DC32     0x3fe00000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x4D12D84A         DC32     0x4d12d84a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x400921FB         DC32     0x400921fb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x40668000         DC32     0x40668000
    234          
    235          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   GL_DrawArc
        48   -> _DrawArc
      40   GUI_DrawArc
        40   -> GL_DrawArc
        40   -> WM__GetNextIVR
        40   -> WM__InitIVRSearch
      24   _CalcInterSectLin
        24   -> __aeabi_cfcmpeq
         0   -> __aeabi_fadd
        24   -> __aeabi_fdiv
        24   -> __aeabi_fmul
        24   -> __aeabi_fsub
       4   _CalcX
      88   _DrawArc
        88   -> LCD_DrawHLine
        88   -> _CalcInterSectLin
        88   -> _CalcX
        88   -> __aeabi_cfcmple
        88   -> __aeabi_d2f
        88   -> __aeabi_d2iz
        88   -> __aeabi_dadd
        88   -> __aeabi_ddiv
        88   -> __aeabi_dmul
        88   -> __aeabi_dsub
        88   -> __aeabi_f2d
        88   -> __aeabi_f2iz
        88   -> __aeabi_f2uiz
        88   -> __aeabi_fmul
        88   -> __aeabi_i2d
        88   -> __aeabi_i2f
        88   -> __aeabi_ui2d
        88   -> ceil
        88   -> cos
        88   -> floor
        88   -> sin


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
     328  GL_DrawArc
      66  GUI_DrawArc
      78  _CalcInterSectLin
      36  _CalcX
     588  _DrawArc

 
 1 120 bytes in section .text
 
 1 120 bytes of CODE memory

Errors: none
Warnings: 6
