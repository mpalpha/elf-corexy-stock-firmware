###############################################################################
#
# IAR ANSI C/C++ Compiler V7.10.1.6676/W32 for ARM        25/Feb/2020  16:59:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_OnKey.c
#    Command line =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_OnKey.c
#        -D USE_HAL_DRIVER -D STM32F103xE -D STM32F10X_HD -D USE_HAL_LIB -D
#        MKS_ROBIN_NANO -D TFT35 -lC
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        -lA
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\
#        --diag_suppress Pa050 -o
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M3 -e --char_is_signed --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src/drivers\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Core/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/ST/STM32_USB_Host_Library/Class/MSC/Inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/FatFs/src\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Third_Party/Marlin\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/CMSIS/Include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/variant\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/at24cxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/w25qxx\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/BSP/Components/lcd\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/STM32F10x_StdPeriph_Driver/inc\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Drivers/libstmf4/include\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/arduino/stm32/cores/arduino\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertColor\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/ConvertMono\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Core\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Font\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/AntiAlias\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/GUIDemo\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/LCDDriver\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MemDev\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/MultiLayer\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/Widget\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI/WM\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/GUI_X\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../Middlewares/Ucgui/Config\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/Multi_language\
#        -I
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM/../User/ui/QRENCODE\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/List\GUI_OnKey.lst
#    Object file  =  
#        E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\EWARM\mksRobin2/Obj\GUI_OnKey.o
#
###############################################################################

E:\code\Robin_Nano_SVN\branches\robin_nano_tft35_ºŒ∫Ã»˝Œ¨\mksRobin_Nano_code\Middlewares\Ucgui\GUI\Core\GUI_OnKey.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/GUI
      4          *                        Universal graphic software for embedded applications
      5          *
      6          *                       (c) Copyright 2002, Micrium Inc., Weston, FL
      7          *                       (c) Copyright 2002, SEGGER Microcontroller Systeme GmbH
      8          *
      9          *              µC/GUI is protected by international copyright laws. Knowledge of the
     10          *              source code may not be used to write a similar product. This file may
     11          *              only be used in accordance with a license and should not be redistributed
     12          *              in any way. We appreciate your understanding and fairness.
     13          *
     14          ----------------------------------------------------------------------
     15          File        : GUI_OnKey.c
     16          Purpose     : Implementation of GUI_StoreKeyMsg
     17          ---------------------------END-OF-HEADER------------------------------
     18          */
     19          
     20          #include "GUI_Protected.h"
     21          
     22          #if GUI_WINSUPPORT
     23            #include "WM.h"
     24          #endif
     25          
     26          /*********************************************************************
     27          *
     28          *       Static data
     29          *
     30          **********************************************************************
     31          */
     32          
     33          #if GUI_WINSUPPORT
     34          

   \                                 In section .bss, align 4
     35          static int _KeyMsgCnt;
     36          static struct {
     37            int Key;
     38            int PressedCnt;
     39          } _KeyMsg;
   \                     _KeyMsg:
   \   00000000                      DS8 8
   \   00000008                      DS8 4
     40          
     41          #endif
     42          

   \                                 In section .bss, align 4
     43          static int _Key;
   \                     _Key:
   \   00000000                      DS8 4
     44          
     45          /*********************************************************************
     46          *
     47          *       Public data
     48          *
     49          **********************************************************************
     50          */
     51          

   \                                 In section .bss, align 4
     52          GUI_KEY_MSG_HOOK* GUI_pfKeyMsgHook;
   \                     GUI_pfKeyMsgHook:
   \   00000000                      DS8 4
     53          
     54          /*********************************************************************
     55          *
     56          *       Public code
     57          *
     58          **********************************************************************
     59          */
     60          /*********************************************************************
     61          *
     62          *       GUI_GetKey
     63          */

   \                                 In section .text, align 2, keep-with-next
     64          int GUI_GetKey(void) {
     65            int r = _Key;
   \                     GUI_GetKey: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3
   \   00000002   0x6808             LDR      R0,[R1, #+0]
     66            _Key = 0;
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x600A             STR      R2,[R1, #+0]
     67            return r;
   \   00000008   0x4770             BX       LR               ;; return
     68          }
     69          
     70          /*********************************************************************
     71          *
     72          *       GUI_StoreKey
     73          */

   \                                 In section .text, align 2, keep-with-next
     74          void GUI_StoreKey(int Key) {
     75            if (!_Key) {
   \                     GUI_StoreKey: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3
   \   00000002   0x680A             LDR      R2,[R1, #+0]
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD100             BNE.N    ??GUI_StoreKey_0
     76              _Key = Key;
   \   00000008   0x6008             STR      R0,[R1, #+0]
     77            }
     78            GUI_X_SIGNAL_EVENT();
     79          }
   \                     ??GUI_StoreKey_0: (+1)
   \   0000000A   0x4770             BX       LR               ;; return
     80          
     81          /*********************************************************************
     82          *
     83          *       GUI_ClearKeyBuffer
     84          */

   \                                 In section .text, align 2, keep-with-next
     85          void GUI_ClearKeyBuffer(void) {
   \                     GUI_ClearKeyBuffer: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86            while (GUI_GetKey());
   \                     ??GUI_ClearKeyBuffer_0: (+1)
   \   00000002   0x.... 0x....      BL       GUI_GetKey
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD1FB             BNE.N    ??GUI_ClearKeyBuffer_0
     87          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
     88          
     89          /*********************************************************************
     90          *
     91          *       GUI_StoreKeyMsg
     92          */

   \                                 In section .text, align 2, keep-with-next
     93          void GUI_StoreKeyMsg(int Key, int PressedCnt) {
     94            #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
     95            _KeyMsg.Key = Key;
   \                     GUI_StoreKeyMsg: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable3_1
   \   00000002   0x6010             STR      R0,[R2, #+0]
     96            _KeyMsg.PressedCnt = PressedCnt;
   \   00000004   0x6051             STR      R1,[R2, #+4]
     97            _KeyMsgCnt = 1;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x6090             STR      R0,[R2, #+8]
     98            GUI_X_SIGNAL_EVENT();
     99            #else
    100              GUI_USE_PARA(PressedCnt);
    101              GUI_StoreKey(Key);
    102            #endif
    103          }
   \   0000000A   0x4770             BX       LR               ;; return
    104          
    105          /*********************************************************************
    106          *
    107          *       GUI_PollKeyMsg
    108          */
    109          #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */

   \                                 In section .text, align 2, keep-with-next
    110          int GUI_PollKeyMsg(void) {
   \                     GUI_PollKeyMsg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    111            int r = 0;
   \   00000002   0x2000             MOVS     R0,#+0
    112            GUI_LOCK();
    113            if (_KeyMsgCnt) {
   \   00000004   0x....             LDR.N    R4,??DataTable3_1
   \   00000006   0x68A1             LDR      R1,[R4, #+8]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD00D             BEQ.N    ??GUI_PollKeyMsg_0
    114              int Key;
    115              _KeyMsgCnt--;
   \   0000000C   0x1E48             SUBS     R0,R1,#+1
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
    116              Key = _KeyMsg.Key;
   \   00000010   0x6825             LDR      R5,[R4, #+0]
    117              WM_OnKey(Key, _KeyMsg.PressedCnt);
   \   00000012   0x6861             LDR      R1,[R4, #+4]
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0x.... 0x....      BL       WM_OnKey
    118              if (_KeyMsg.PressedCnt == 1) {
   \   0000001A   0x6860             LDR      R0,[R4, #+4]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD102             BNE.N    ??GUI_PollKeyMsg_1
    119                GUI_StoreKey(Key);
   \   00000020   0x4628             MOV      R0,R5
   \   00000022   0x.... 0x....      BL       GUI_StoreKey
    120              }
    121              r = 1;              /* We have done something */
   \                     ??GUI_PollKeyMsg_1: (+1)
   \   00000026   0x2001             MOVS     R0,#+1
    122            }
    123            GUI_UNLOCK();
    124            return r;
   \                     ??GUI_PollKeyMsg_0: (+1)
   \   00000028   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    125          }
    126          #endif
    127          
    128          /*********************************************************************
    129          *
    130          *       GUI_SendKeyMsg
    131          *
    132          * Purpose:
    133          *   Send the key to a window using the window manager (if available).
    134          *   If no window is ready to take the input, we call the store routine
    135          *   and wait for somebody to poll the buffer.
    136          */

   \                                 In section .text, align 2, keep-with-next
    137          void GUI_SendKeyMsg(int Key, int PressedCnt) {
   \                     GUI_SendKeyMsg: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    138            #if GUI_WINSUPPORT    /* If 0, WM will not generate any code */
    139              if (!WM_OnKey(Key, PressedCnt)) {
   \   00000006   0x.... 0x....      BL       WM_OnKey
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD104             BNE.N    ??GUI_SendKeyMsg_0
    140                GUI_StoreKeyMsg(Key, PressedCnt);
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000016   0x....             B.N      GUI_StoreKeyMsg
    141              }
    142            #else
    143              GUI_StoreKeyMsg(Key, PressedCnt);
    144            #endif
    145          }
   \                     ??GUI_SendKeyMsg_0: (+1)
   \   00000018   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     _Key

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     _KeyMsg
    146          
    147          /*************************** End of file ****************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GUI_ClearKeyBuffer
         8   -> GUI_GetKey
       0   GUI_GetKey
      16   GUI_PollKeyMsg
        16   -> GUI_StoreKey
        16   -> WM_OnKey
      16   GUI_SendKeyMsg
         0   -> GUI_StoreKeyMsg
        16   -> WM_OnKey
       0   GUI_StoreKey
       0   GUI_StoreKeyMsg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
      12  GUI_ClearKeyBuffer
      10  GUI_GetKey
      42  GUI_PollKeyMsg
      26  GUI_SendKeyMsg
      12  GUI_StoreKey
      12  GUI_StoreKeyMsg
       4  GUI_pfKeyMsgHook
       4  _Key
      12  _KeyMsg
          _KeyMsgCnt

 
  20 bytes in section .bss
 122 bytes in section .text
 
 122 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
